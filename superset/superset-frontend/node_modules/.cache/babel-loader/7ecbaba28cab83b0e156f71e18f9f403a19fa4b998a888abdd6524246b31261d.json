{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\nimport { getStandardizedControls, sections, sharedControls } from '@superset-ui/chart-controls';\nimport { lineInterpolation, showBrush, showLegend, showControls, xAxisLabel, yAxisLabel, bottomMargin, xTicksLayout, xAxisFormat, yLogScale, yAxisBounds, xAxisShowMinmax, yAxisShowMinmax, richTooltip, showBarValue, barStacked, reduceXTicks, leftMargin, timeSeriesSection } from '../NVD3Controls';\nconst config = {\n  controlOverrides: {\n    limit: {\n      rerender: ['timeseries_limit_metric', 'order_desc']\n    },\n    timeseries_limit_metric: {\n      label: t('Series Limit Sort By'),\n      description: t('Metric used to order the limit if a series limit is present. ' +\n      'If undefined reverts to the first metric (where appropriate).'),\n      visibility: ({ controls }) => Boolean(controls == null ? void 0 : controls.limit.value),\n      mapStateToProps: (state, controlState) => {var _state$controls, _state$controls$limit;\n        const timeserieslimitProps = (sharedControls.timeseries_limit_metric.mapStateToProps == null ? void 0 : sharedControls.timeseries_limit_metric.mapStateToProps(state, controlState)) || {};\n        timeserieslimitProps.value = (_state$controls = state.controls) != null && (_state$controls$limit = _state$controls.limit) != null && _state$controls$limit.value ?\n        controlState == null ? void 0 : controlState.value :\n        [];\n        return timeserieslimitProps;\n      }\n    },\n    order_desc: {\n      label: t('Series Limit Sort Descending'),\n      default: false,\n      description: t('Whether to sort descending or ascending if a series limit is present'),\n      visibility: ({ controls }) => Boolean(controls == null ? void 0 : controls.limit.value)\n    }\n  },\n  controlPanelSections: [\n  sections.legacyTimeseriesTime,\n  timeSeriesSection[0],\n  {\n    label: t('Chart Options'),\n    expanded: true,\n    controlSetRows: [\n    ['color_scheme'],\n    [showBrush],\n    [showLegend],\n    [showBarValue],\n    [richTooltip],\n    [barStacked],\n    [lineInterpolation],\n    [showControls],\n    [bottomMargin]]\n\n  },\n  {\n    label: t('X Axis'),\n    expanded: true,\n    controlSetRows: [\n    [xAxisLabel],\n    [bottomMargin],\n    [xTicksLayout],\n    [xAxisFormat],\n    [xAxisShowMinmax],\n    [reduceXTicks]]\n\n  },\n  {\n    label: t('Y Axis'),\n    expanded: true,\n    controlSetRows: [\n    [yAxisLabel],\n    [leftMargin],\n    [yAxisShowMinmax],\n    [yLogScale],\n    ['y_axis_format'],\n    [yAxisBounds]]\n\n  },\n  timeSeriesSection[1],\n  sections.annotations],\n\n  formDataOverrides: (formData) => ({\n    ...formData,\n    metrics: getStandardizedControls().popAllMetrics(),\n    groupby: getStandardizedControls().popAllColumns()\n  })\n};const _default =\nconfig;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(config, \"config\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-nvd3/src/Bar/controlPanel.ts\");reactHotLoader.register(_default, \"default\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-nvd3/src/Bar/controlPanel.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["t","getStandardizedControls","sections","sharedControls","lineInterpolation","showBrush","showLegend","showControls","xAxisLabel","yAxisLabel","bottomMargin","xTicksLayout","xAxisFormat","yLogScale","yAxisBounds","xAxisShowMinmax","yAxisShowMinmax","richTooltip","showBarValue","barStacked","reduceXTicks","leftMargin","timeSeriesSection","config","controlOverrides","limit","rerender","timeseries_limit_metric","label","description","visibility","controls","Boolean","value","mapStateToProps","state","controlState","_state$controls","_state$controls$limit","timeserieslimitProps","order_desc","default","controlPanelSections","legacyTimeseriesTime","expanded","controlSetRows","annotations","formDataOverrides","formData","metrics","popAllMetrics","groupby","popAllColumns","_default","reactHotLoader","reactHotLoaderGlobal","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-nvd3/src/Bar/controlPanel.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\nimport {\n  ControlPanelConfig,\n  getStandardizedControls,\n  sections,\n  sharedControls,\n} from '@superset-ui/chart-controls';\nimport {\n  lineInterpolation,\n  showBrush,\n  showLegend,\n  showControls,\n  xAxisLabel,\n  yAxisLabel,\n  bottomMargin,\n  xTicksLayout,\n  xAxisFormat,\n  yLogScale,\n  yAxisBounds,\n  xAxisShowMinmax,\n  yAxisShowMinmax,\n  richTooltip,\n  showBarValue,\n  barStacked,\n  reduceXTicks,\n  leftMargin,\n  timeSeriesSection,\n} from '../NVD3Controls';\n\nconst config: ControlPanelConfig = {\n  controlOverrides: {\n    limit: {\n      rerender: ['timeseries_limit_metric', 'order_desc'],\n    },\n    timeseries_limit_metric: {\n      label: t('Series Limit Sort By'),\n      description: t(\n        'Metric used to order the limit if a series limit is present. ' +\n          'If undefined reverts to the first metric (where appropriate).',\n      ),\n      visibility: ({ controls }) => Boolean(controls?.limit.value),\n      mapStateToProps: (state, controlState) => {\n        const timeserieslimitProps =\n          sharedControls.timeseries_limit_metric.mapStateToProps?.(\n            state,\n            controlState,\n          ) || {};\n        timeserieslimitProps.value = state.controls?.limit?.value\n          ? controlState?.value\n          : [];\n        return timeserieslimitProps;\n      },\n    },\n    order_desc: {\n      label: t('Series Limit Sort Descending'),\n      default: false,\n      description: t(\n        'Whether to sort descending or ascending if a series limit is present',\n      ),\n      visibility: ({ controls }) => Boolean(controls?.limit.value),\n    },\n  },\n  controlPanelSections: [\n    sections.legacyTimeseriesTime,\n    timeSeriesSection[0],\n    {\n      label: t('Chart Options'),\n      expanded: true,\n      controlSetRows: [\n        ['color_scheme'],\n        [showBrush],\n        [showLegend],\n        [showBarValue],\n        [richTooltip],\n        [barStacked],\n        [lineInterpolation],\n        [showControls],\n        [bottomMargin],\n      ],\n    },\n    {\n      label: t('X Axis'),\n      expanded: true,\n      controlSetRows: [\n        [xAxisLabel],\n        [bottomMargin],\n        [xTicksLayout],\n        [xAxisFormat],\n        [xAxisShowMinmax],\n        [reduceXTicks],\n      ],\n    },\n    {\n      label: t('Y Axis'),\n      expanded: true,\n      controlSetRows: [\n        [yAxisLabel],\n        [leftMargin],\n        [yAxisShowMinmax],\n        [yLogScale],\n        ['y_axis_format'],\n        [yAxisBounds],\n      ],\n    },\n    timeSeriesSection[1],\n    sections.annotations,\n  ],\n  formDataOverrides: formData => ({\n    ...formData,\n    metrics: getStandardizedControls().popAllMetrics(),\n    groupby: getStandardizedControls().popAllColumns(),\n  }),\n};\n\nexport default config;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}