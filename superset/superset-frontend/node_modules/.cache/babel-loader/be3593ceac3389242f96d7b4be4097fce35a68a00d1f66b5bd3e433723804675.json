{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable camelcase */\nimport {\n  CHANGE_FILTER,\n  UPDATE_DIRECT_PATH_TO_FILTER,\n  UPDATE_LAYOUT_COMPONENTS,\n  UPDATE_DASHBOARD_FILTERS_SCOPE } from\n'../actions/dashboardFilters';\nimport { HYDRATE_DASHBOARD } from '../actions/hydrate';\nimport { DASHBOARD_ROOT_ID } from '../util/constants';\nimport { buildActiveFilters } from '../util/activeDashboardFilters';\nimport { getChartIdAndColumnFromFilterKey } from '../util/getDashboardFilterKey';\n\nexport const DASHBOARD_FILTER_SCOPE_GLOBAL = {\n  scope: [DASHBOARD_ROOT_ID],\n  immune: []\n};\n\nexport const dashboardFilter = {\n  chartId: null,\n  componentId: null,\n  filterName: null,\n  datasourceId: null,\n  directPathToFilter: [],\n  isDateFilter: false,\n  isInstantFilter: true,\n  columns: {},\n  labels: {},\n  scopes: {}\n};\n\nconst CHANGE_FILTER_VALUE_ACTIONS = [CHANGE_FILTER];\n\nexport default function dashboardFiltersReducer(dashboardFilters = {}, action) {\n  const actionHandlers = {\n    [CHANGE_FILTER](state) {\n      const { newSelectedValues, merge } = action;\n      const updatedColumns = Object.keys(newSelectedValues).reduce(\n        (columns, name) => {\n          // override existed column value, or add new column name\n          if (!merge || !(name in columns)) {\n            return {\n              ...columns,\n              [name]: newSelectedValues[name]\n            };\n          }\n\n          return {\n            ...columns,\n            [name]: [...columns[name], ...newSelectedValues[name]]\n          };\n        },\n        { ...state.columns }\n      );\n\n      return {\n        ...state,\n        columns: updatedColumns\n      };\n    },\n\n    [UPDATE_DIRECT_PATH_TO_FILTER](state) {\n      const { path } = action;\n      return {\n        ...state,\n        directPathToFilter: path\n      };\n    }\n  };\n\n  if (action.type === UPDATE_LAYOUT_COMPONENTS) {\n    buildActiveFilters({\n      dashboardFilters,\n      components: action.components\n    });\n    return dashboardFilters;\n  }\n  if (action.type === UPDATE_DASHBOARD_FILTERS_SCOPE) {\n    const allDashboardFiltersScope = action.scopes;\n    // update filter scope for each filter field\n    const updatedFilters = Object.entries(allDashboardFiltersScope).reduce(\n      (map, entry) => {\n        const [filterKey, { scope, immune }] = entry;\n        const { chartId, column } = getChartIdAndColumnFromFilterKey(filterKey);\n        const scopes = {\n          ...map[chartId].scopes,\n          [column]: {\n            scope,\n            immune\n          }\n        };\n        return {\n          ...map,\n          [chartId]: {\n            ...map[chartId],\n            scopes\n          }\n        };\n      },\n      dashboardFilters\n    );\n\n    buildActiveFilters({ dashboardFilters: updatedFilters });\n    return updatedFilters;\n  }\n  if (action.type === HYDRATE_DASHBOARD) {\n    return action.data.dashboardFilters;\n  }\n\n  if (action.type in actionHandlers) {\n    const updatedFilters = {\n      ...dashboardFilters,\n      [action.chartId]: actionHandlers[action.type](\n        dashboardFilters[action.chartId]\n      )\n    };\n    if (CHANGE_FILTER_VALUE_ACTIONS.includes(action.type)) {\n      buildActiveFilters({ dashboardFilters: updatedFilters });\n    }\n\n    return updatedFilters;\n  }\n\n  return dashboardFilters;\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(DASHBOARD_FILTER_SCOPE_GLOBAL, \"DASHBOARD_FILTER_SCOPE_GLOBAL\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/reducers/dashboardFilters.js\");reactHotLoader.register(dashboardFilter, \"dashboardFilter\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/reducers/dashboardFilters.js\");reactHotLoader.register(CHANGE_FILTER_VALUE_ACTIONS, \"CHANGE_FILTER_VALUE_ACTIONS\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/reducers/dashboardFilters.js\");reactHotLoader.register(dashboardFiltersReducer, \"dashboardFiltersReducer\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/reducers/dashboardFilters.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["CHANGE_FILTER","UPDATE_DIRECT_PATH_TO_FILTER","UPDATE_LAYOUT_COMPONENTS","UPDATE_DASHBOARD_FILTERS_SCOPE","HYDRATE_DASHBOARD","DASHBOARD_ROOT_ID","buildActiveFilters","getChartIdAndColumnFromFilterKey","DASHBOARD_FILTER_SCOPE_GLOBAL","scope","immune","dashboardFilter","chartId","componentId","filterName","datasourceId","directPathToFilter","isDateFilter","isInstantFilter","columns","labels","scopes","CHANGE_FILTER_VALUE_ACTIONS","dashboardFiltersReducer","dashboardFilters","action","actionHandlers","state","newSelectedValues","merge","updatedColumns","Object","keys","reduce","name","path","type","components","allDashboardFiltersScope","updatedFilters","entries","map","entry","filterKey","column","data","includes","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/reducers/dashboardFilters.js"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable camelcase */\nimport {\n  CHANGE_FILTER,\n  UPDATE_DIRECT_PATH_TO_FILTER,\n  UPDATE_LAYOUT_COMPONENTS,\n  UPDATE_DASHBOARD_FILTERS_SCOPE,\n} from '../actions/dashboardFilters';\nimport { HYDRATE_DASHBOARD } from '../actions/hydrate';\nimport { DASHBOARD_ROOT_ID } from '../util/constants';\nimport { buildActiveFilters } from '../util/activeDashboardFilters';\nimport { getChartIdAndColumnFromFilterKey } from '../util/getDashboardFilterKey';\n\nexport const DASHBOARD_FILTER_SCOPE_GLOBAL = {\n  scope: [DASHBOARD_ROOT_ID],\n  immune: [],\n};\n\nexport const dashboardFilter = {\n  chartId: null,\n  componentId: null,\n  filterName: null,\n  datasourceId: null,\n  directPathToFilter: [],\n  isDateFilter: false,\n  isInstantFilter: true,\n  columns: {},\n  labels: {},\n  scopes: {},\n};\n\nconst CHANGE_FILTER_VALUE_ACTIONS = [CHANGE_FILTER];\n\nexport default function dashboardFiltersReducer(dashboardFilters = {}, action) {\n  const actionHandlers = {\n    [CHANGE_FILTER](state) {\n      const { newSelectedValues, merge } = action;\n      const updatedColumns = Object.keys(newSelectedValues).reduce(\n        (columns, name) => {\n          // override existed column value, or add new column name\n          if (!merge || !(name in columns)) {\n            return {\n              ...columns,\n              [name]: newSelectedValues[name],\n            };\n          }\n\n          return {\n            ...columns,\n            [name]: [...columns[name], ...newSelectedValues[name]],\n          };\n        },\n        { ...state.columns },\n      );\n\n      return {\n        ...state,\n        columns: updatedColumns,\n      };\n    },\n\n    [UPDATE_DIRECT_PATH_TO_FILTER](state) {\n      const { path } = action;\n      return {\n        ...state,\n        directPathToFilter: path,\n      };\n    },\n  };\n\n  if (action.type === UPDATE_LAYOUT_COMPONENTS) {\n    buildActiveFilters({\n      dashboardFilters,\n      components: action.components,\n    });\n    return dashboardFilters;\n  }\n  if (action.type === UPDATE_DASHBOARD_FILTERS_SCOPE) {\n    const allDashboardFiltersScope = action.scopes;\n    // update filter scope for each filter field\n    const updatedFilters = Object.entries(allDashboardFiltersScope).reduce(\n      (map, entry) => {\n        const [filterKey, { scope, immune }] = entry;\n        const { chartId, column } = getChartIdAndColumnFromFilterKey(filterKey);\n        const scopes = {\n          ...map[chartId].scopes,\n          [column]: {\n            scope,\n            immune,\n          },\n        };\n        return {\n          ...map,\n          [chartId]: {\n            ...map[chartId],\n            scopes,\n          },\n        };\n      },\n      dashboardFilters,\n    );\n\n    buildActiveFilters({ dashboardFilters: updatedFilters });\n    return updatedFilters;\n  }\n  if (action.type === HYDRATE_DASHBOARD) {\n    return action.data.dashboardFilters;\n  }\n\n  if (action.type in actionHandlers) {\n    const updatedFilters = {\n      ...dashboardFilters,\n      [action.chartId]: actionHandlers[action.type](\n        dashboardFilters[action.chartId],\n      ),\n    };\n    if (CHANGE_FILTER_VALUE_ACTIONS.includes(action.type)) {\n      buildActiveFilters({ dashboardFilters: updatedFilters });\n    }\n\n    return updatedFilters;\n  }\n\n  return dashboardFilters;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}