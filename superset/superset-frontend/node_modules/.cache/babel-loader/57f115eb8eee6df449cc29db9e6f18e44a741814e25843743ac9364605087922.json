{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { COORDINATE_SYSTEM, LayerExtension, log } from '@deck.gl/core';\nimport mask from './shader-module';\nimport MaskEffect from './mask-effect';\nconst defaultProps = {\n  maskId: '',\n  maskByInstance: undefined,\n  maskInverted: false\n};\nexport default class MaskExtension extends LayerExtension {\n  initializeState() {\n    var _this$context$deck;\n\n    (_this$context$deck = this.context.deck) === null || _this$context$deck === void 0 ? void 0 : _this$context$deck._addDefaultEffect(new MaskEffect());\n  }\n\n  getShaders() {\n    let maskByInstance = ('instancePositions' in this.getAttributeManager().attributes);\n\n    if (this.props.maskByInstance !== undefined) {\n      maskByInstance = Boolean(this.props.maskByInstance);\n    }\n\n    this.state.maskByInstance = maskByInstance;\n    return {\n      modules: [mask]\n    };\n  }\n\n  draw({\n    uniforms,\n    context,\n    moduleParameters\n  }) {\n    uniforms.mask_maskByInstance = this.state.maskByInstance;\n    const {\n      maskId,\n      maskInverted\n    } = this.props;\n    const {\n      maskChannels\n    } = moduleParameters;\n    const {\n      viewport\n    } = context;\n\n    if (maskChannels && maskChannels[maskId]) {\n      const {\n        index,\n        bounds,\n        coordinateOrigin: fromCoordinateOrigin\n      } = maskChannels[maskId];\n      let {\n        coordinateSystem: fromCoordinateSystem\n      } = maskChannels[maskId];\n      uniforms.mask_enabled = true;\n      uniforms.mask_channel = index;\n      uniforms.mask_inverted = maskInverted;\n\n      if (fromCoordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n        fromCoordinateSystem = viewport.isGeospatial ? COORDINATE_SYSTEM.LNGLAT : COORDINATE_SYSTEM.CARTESIAN;\n      }\n\n      const opts = {\n        modelMatrix: null,\n        fromCoordinateOrigin,\n        fromCoordinateSystem\n      };\n      const bl = this.projectPosition([bounds[0], bounds[1], 0], opts);\n      const tr = this.projectPosition([bounds[2], bounds[3], 0], opts);\n      uniforms.mask_bounds = [bl[0], bl[1], tr[0], tr[1]];\n    } else {\n      if (maskId) {\n        log.warn(\"Could not find a mask layer with id: \".concat(maskId))();\n      }\n\n      uniforms.mask_enabled = false;\n    }\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\n\n_defineProperty(MaskExtension, \"defaultProps\", defaultProps);\n\n_defineProperty(MaskExtension, \"extensionName\", 'MaskExtension');;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(defaultProps, \"defaultProps\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/extensions/dist/esm/mask/mask-extension.js\");reactHotLoader.register(MaskExtension, \"MaskExtension\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/extensions/dist/esm/mask/mask-extension.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["COORDINATE_SYSTEM","LayerExtension","log","mask","MaskEffect","defaultProps","maskId","maskByInstance","undefined","maskInverted","MaskExtension","initializeState","_this$context$deck","context","deck","_addDefaultEffect","getShaders","getAttributeManager","attributes","props","Boolean","state","modules","draw","uniforms","moduleParameters","mask_maskByInstance","maskChannels","viewport","index","bounds","coordinateOrigin","fromCoordinateOrigin","coordinateSystem","fromCoordinateSystem","mask_enabled","mask_channel","mask_inverted","DEFAULT","isGeospatial","LNGLAT","CARTESIAN","opts","modelMatrix","bl","projectPosition","tr","mask_bounds","warn","concat","__reactstandin__regenerateByEval","key","code","eval","reactHotLoader","register","leaveModule","reactHotLoaderGlobal","module"],"sources":["../../../src/mask/mask-extension.ts"],"sourcesContent":["import {COORDINATE_SYSTEM, Layer, LayerExtension, log} from '@deck.gl/core';\nimport mask from './shader-module';\nimport MaskEffect from './mask-effect';\n\nconst defaultProps = {\n  maskId: '',\n  maskByInstance: undefined,\n  maskInverted: false\n};\n\nexport type MaskExtensionProps = {\n  /**\n   * Id of the layer that defines the mask. The mask layer must use the prop `operation: 'mask'`.\n   * Masking is disabled if `maskId` is empty or no valid mask layer with the specified id is found.\n   */\n  maskId?: string;\n  /**\n   * controls whether an object is clipped by its anchor (usually defined by an accessor called `getPosition`, e.g. icon, scatterplot) or by its geometry (e.g. path, polygon).\n   * If not specified, it is automatically deduced from the layer.\n   */\n  maskByInstance?: boolean;\n  /**\n   * Inverts the masking operation\n   */\n  maskInverted?: boolean;\n};\n\n/** Allows layers to show/hide objects by a geofence. */\nexport default class MaskExtension extends LayerExtension {\n  static defaultProps = defaultProps;\n  static extensionName = 'MaskExtension';\n\n  initializeState(this: Layer<MaskExtensionProps>) {\n    this.context.deck?._addDefaultEffect(new MaskEffect());\n  }\n\n  getShaders(this: Layer<MaskExtensionProps>): any {\n    // Infer by geometry if 'maskByInstance' prop isn't explictly set\n    let maskByInstance = 'instancePositions' in this.getAttributeManager()!.attributes;\n    // Users can override by setting the `maskByInstance` prop\n    if (this.props.maskByInstance !== undefined) {\n      maskByInstance = Boolean(this.props.maskByInstance);\n    }\n    this.state.maskByInstance = maskByInstance;\n\n    return {\n      modules: [mask]\n    };\n  }\n\n  /* eslint-disable camelcase */\n  draw(this: Layer<Required<MaskExtensionProps>>, {uniforms, context, moduleParameters}: any) {\n    uniforms.mask_maskByInstance = this.state.maskByInstance;\n    const {maskId, maskInverted} = this.props;\n    const {maskChannels} = moduleParameters;\n    const {viewport} = context;\n    if (maskChannels && maskChannels[maskId]) {\n      const {index, bounds, coordinateOrigin: fromCoordinateOrigin} = maskChannels[maskId];\n      let {coordinateSystem: fromCoordinateSystem} = maskChannels[maskId];\n      uniforms.mask_enabled = true;\n      uniforms.mask_channel = index;\n      uniforms.mask_inverted = maskInverted;\n\n      if (fromCoordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n        fromCoordinateSystem = viewport.isGeospatial\n          ? COORDINATE_SYSTEM.LNGLAT\n          : COORDINATE_SYSTEM.CARTESIAN;\n      }\n      const opts = {modelMatrix: null, fromCoordinateOrigin, fromCoordinateSystem};\n      const bl = this.projectPosition([bounds[0], bounds[1], 0], opts);\n      const tr = this.projectPosition([bounds[2], bounds[3], 0], opts);\n      uniforms.mask_bounds = [bl[0], bl[1], tr[0], tr[1]];\n    } else {\n      if (maskId) {\n        log.warn(`Could not find a mask layer with id: ${maskId}`)();\n      }\n      uniforms.mask_enabled = false;\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}