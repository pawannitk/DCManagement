{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /* eslint camelcase: 0 */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { DatasourceType } from './Datasource';\nimport { GenericDataType } from './QueryResponse';\n// Keep in sync with superset/errors.py\nexport const ErrorTypeEnum = {\n  // Frontend errors\n  FRONTEND_CSRF_ERROR: 'FRONTEND_CSRF_ERROR',\n  FRONTEND_NETWORK_ERROR: 'FRONTEND_NETWORK_ERROR',\n  FRONTEND_TIMEOUT_ERROR: 'FRONTEND_TIMEOUT_ERROR',\n  // DB Engine errors\n  GENERIC_DB_ENGINE_ERROR: 'GENERIC_DB_ENGINE_ERROR',\n  COLUMN_DOES_NOT_EXIST_ERROR: 'COLUMN_DOES_NOT_EXIST_ERROR',\n  TABLE_DOES_NOT_EXIST_ERROR: 'TABLE_DOES_NOT_EXIST_ERROR',\n  SCHEMA_DOES_NOT_EXIST_ERROR: 'SCHEMA_DOES_NOT_EXIST_ERROR',\n  CONNECTION_INVALID_USERNAME_ERROR: 'CONNECTION_INVALID_USERNAME_ERROR',\n  CONNECTION_INVALID_PASSWORD_ERROR: 'CONNECTION_INVALID_PASSWORD_ERROR',\n  CONNECTION_INVALID_HOSTNAME_ERROR: 'CONNECTION_INVALID_HOSTNAME_ERROR',\n  CONNECTION_PORT_CLOSED_ERROR: 'CONNECTION_PORT_CLOSED_ERROR',\n  CONNECTION_INVALID_PORT_ERROR: 'CONNECTION_INVALID_PORT_ERROR',\n  CONNECTION_HOST_DOWN_ERROR: 'CONNECTION_HOST_DOWN_ERROR',\n  CONNECTION_ACCESS_DENIED_ERROR: 'CONNECTION_ACCESS_DENIED_ERROR',\n  CONNECTION_UNKNOWN_DATABASE_ERROR: 'CONNECTION_UNKNOWN_DATABASE_ERROR',\n  CONNECTION_DATABASE_PERMISSIONS_ERROR: 'CONNECTION_DATABASE_PERMISSIONS_ERROR',\n  CONNECTION_MISSING_PARAMETERS_ERROR: 'CONNECTION_MISSING_PARAMETERS_ERROR',\n  OBJECT_DOES_NOT_EXIST_ERROR: 'OBJECT_DOES_NOT_EXIST_ERROR',\n  SYNTAX_ERROR: 'SYNTAX_ERROR',\n  CONNECTION_DATABASE_TIMEOUT: 'CONNECTION_DATABASE_TIMEOUT',\n  // Viz errors\n  VIZ_GET_DF_ERROR: 'VIZ_GET_DF_ERROR',\n  UNKNOWN_DATASOURCE_TYPE_ERROR: 'UNKNOWN_DATASOURCE_TYPE_ERROR',\n  FAILED_FETCHING_DATASOURCE_INFO_ERROR: 'FAILED_FETCHING_DATASOURCE_INFO_ERROR',\n  // Security access errors\n  TABLE_SECURITY_ACCESS_ERROR: 'TABLE_SECURITY_ACCESS_ERROR',\n  DATASOURCE_SECURITY_ACCESS_ERROR: 'DATASOURCE_SECURITY_ACCESS_ERROR',\n  DATABASE_SECURITY_ACCESS_ERROR: 'DATABASE_SECURITY_ACCESS_ERROR',\n  QUERY_SECURITY_ACCESS_ERROR: 'QUERY_SECURITY_ACCESS_ERROR',\n  MISSING_OWNERSHIP_ERROR: 'MISSING_OWNERSHIP_ERROR',\n  USER_ACTIVITY_SECURITY_ACCESS_ERROR: 'USER_ACTIVITY_SECURITY_ACCESS_ERROR',\n  DASHBOARD_SECURITY_ACCESS_ERROR: 'DASHBOARD_SECURITY_ACCESS_ERROR',\n  CHART_SECURITY_ACCESS_ERROR: 'CHART_SECURITY_ACCESS_ERROR',\n  OAUTH2_REDIRECT: 'OAUTH2_REDIRECT',\n  OAUTH2_REDIRECT_ERROR: 'OAUTH2_REDIRECT_ERROR',\n  // Other errors\n  BACKEND_TIMEOUT_ERROR: 'BACKEND_TIMEOUT_ERROR',\n  DATABASE_NOT_FOUND_ERROR: 'DATABASE_NOT_FOUND_ERROR',\n  // Sql Lab errors\n  MISSING_TEMPLATE_PARAMS_ERROR: 'MISSING_TEMPLATE_PARAMS_ERROR',\n  INVALID_TEMPLATE_PARAMS_ERROR: 'INVALID_TEMPLATE_PARAMS_ERROR',\n  RESULTS_BACKEND_NOT_CONFIGURED_ERROR: 'RESULTS_BACKEND_NOT_CONFIGURED_ERROR',\n  DML_NOT_ALLOWED_ERROR: 'DML_NOT_ALLOWED_ERROR',\n  INVALID_CTAS_QUERY_ERROR: 'INVALID_CTAS_QUERY_ERROR',\n  INVALID_CVAS_QUERY_ERROR: 'INVALID_CVAS_QUERY_ERROR',\n  SQLLAB_TIMEOUT_ERROR: 'SQLLAB_TIMEOUT_ERROR',\n  RESULTS_BACKEND_ERROR: 'RESULTS_BACKEND_ERROR',\n  ASYNC_WORKERS_ERROR: 'ASYNC_WORKERS_ERROR',\n  ADHOC_SUBQUERY_NOT_ALLOWED_ERROR: 'ADHOC_SUBQUERY_NOT_ALLOWED_ERROR',\n  INVALID_SQL_ERROR: 'INVALID_SQL_ERROR',\n  // Generic errors\n  GENERIC_COMMAND_ERROR: 'GENERIC_COMMAND_ERROR',\n  GENERIC_BACKEND_ERROR: 'GENERIC_BACKEND_ERROR',\n  // API errors\n  INVALID_PAYLOAD_FORMAT_ERROR: 'INVALID_PAYLOAD_FORMAT_ERROR',\n  INVALID_PAYLOAD_SCHEMA_ERROR: 'INVALID_PAYLOAD_SCHEMA_ERROR',\n  MARSHMALLOW_ERROR: 'MARSHMALLOW_ERROR',\n  // Report errors\n  REPORT_NOTIFICATION_ERROR: 'REPORT_NOTIFICATION_ERROR'\n};\nexport const CtasEnum = {\n  TABLE: 'TABLE',\n  VIEW: 'VIEW'\n};\n// Possible states of a query object for processing on the server\nexport var QueryState;\n(function (QueryState) {\n  QueryState[\"Started\"] = \"started\";\n  QueryState[\"Stopped\"] = \"stopped\";\n  QueryState[\"Failed\"] = \"failed\";\n  QueryState[\"Pending\"] = \"pending\";\n  QueryState[\"Running\"] = \"running\";\n  QueryState[\"Scheduled\"] = \"scheduled\";\n  QueryState[\"Success\"] = \"success\";\n  QueryState[\"Fetching\"] = \"fetching\";\n  QueryState[\"TimedOut\"] = \"timed_out\";\n})(QueryState || (QueryState = {}));\n// Inidcates a Query's state is still processing\nexport const runningQueryStateList = [\nQueryState.Running,\nQueryState.Started,\nQueryState.Pending,\nQueryState.Fetching,\nQueryState.Scheduled];\n\n// Indicates a Query's state has completed processing regardless of success / failure\nexport const concludedQueryStateList = [\nQueryState.Stopped,\nQueryState.Failed,\nQueryState.Success,\nQueryState.TimedOut];\n\n// todo: move out from typing\nexport const testQuery = {\n  id: 'clientId2353',\n  dbId: 1,\n  sql: 'SELECT * FROM something',\n  sqlEditorId: 'dfsadfs',\n  tab: 'unimportant',\n  tempTable: '',\n  ctas: false,\n  cached: false,\n  errorMessage: null,\n  extra: { progress: null },\n  isDataPreview: false,\n  progress: 0,\n  resultsKey: null,\n  state: QueryState.Success,\n  tempSchema: null,\n  trackingUrl: null,\n  templateParams: null,\n  rows: 42,\n  queryLimit: 100,\n  limitingFactor: '',\n  endDttm: 1476910579693,\n  duration: '',\n  startDttm: 1476910566092.96,\n  time: {},\n  user: {},\n  userId: 1,\n  db: {},\n  started: '',\n  querylink: {},\n  queryId: 1,\n  executedSql: '',\n  output: '',\n  actions: {},\n  type: DatasourceType.Query,\n  columns: [\n  {\n    column_name: 'Column 1',\n    type: 'STRING',\n    is_dttm: false,\n    type_generic: GenericDataType.String\n  },\n  {\n    column_name: 'Column 3',\n    type: 'STRING',\n    is_dttm: false,\n    type_generic: GenericDataType.String\n  },\n  {\n    column_name: 'Column 2',\n    type: 'TIMESTAMP',\n    is_dttm: true,\n    type_generic: GenericDataType.Temporal\n  }]\n\n};\nexport const testQueryResults = {\n  results: {\n    displayLimitReached: false,\n    columns: [\n    {\n      column_name: 'Column 1',\n      type: 'STRING',\n      type_generic: GenericDataType.String,\n      is_dttm: false\n    },\n    {\n      column_name: 'Column 3',\n      type: 'STRING',\n      type_generic: GenericDataType.String,\n      is_dttm: false\n    },\n    {\n      column_name: 'Column 2',\n      type: 'TIMESTAMP',\n      type_generic: GenericDataType.Temporal,\n      is_dttm: true\n    }],\n\n    data: [\n    { 'Column 1': 'a', 'Column 2': 'b', 'Column 3': '2014-11-11T00:00:00' }],\n\n    expanded_columns: [],\n    selected_columns: [\n    {\n      column_name: 'Column 1',\n      type: 'STRING',\n      type_generic: GenericDataType.String,\n      is_dttm: false\n    },\n    {\n      column_name: 'Column 3',\n      type: 'STRING',\n      type_generic: GenericDataType.String,\n      is_dttm: false\n    },\n    {\n      column_name: 'Column 2',\n      type: 'TIMESTAMP',\n      type_generic: GenericDataType.Temporal,\n      is_dttm: true\n    }],\n\n    query: { limit: 6 }\n  }\n};\nexport const testQueryResponse = { ...testQuery, ...testQueryResults };\nexport var ContributionType;\n(function (ContributionType) {\n  ContributionType[\"Row\"] = \"row\";\n  ContributionType[\"Column\"] = \"column\";\n})(ContributionType || (ContributionType = {}));const _default =\n{};export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(ErrorTypeEnum, \"ErrorTypeEnum\", \"/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/query/types/Query.ts\");reactHotLoader.register(CtasEnum, \"CtasEnum\", \"/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/query/types/Query.ts\");reactHotLoader.register(QueryState, \"QueryState\", \"/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/query/types/Query.ts\");reactHotLoader.register(runningQueryStateList, \"runningQueryStateList\", \"/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/query/types/Query.ts\");reactHotLoader.register(concludedQueryStateList, \"concludedQueryStateList\", \"/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/query/types/Query.ts\");reactHotLoader.register(testQuery, \"testQuery\", \"/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/query/types/Query.ts\");reactHotLoader.register(testQueryResults, \"testQueryResults\", \"/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/query/types/Query.ts\");reactHotLoader.register(testQueryResponse, \"testQueryResponse\", \"/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/query/types/Query.ts\");reactHotLoader.register(ContributionType, \"ContributionType\", \"/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/query/types/Query.ts\");reactHotLoader.register(_default, \"default\", \"/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/query/types/Query.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["DatasourceType","GenericDataType","ErrorTypeEnum","FRONTEND_CSRF_ERROR","FRONTEND_NETWORK_ERROR","FRONTEND_TIMEOUT_ERROR","GENERIC_DB_ENGINE_ERROR","COLUMN_DOES_NOT_EXIST_ERROR","TABLE_DOES_NOT_EXIST_ERROR","SCHEMA_DOES_NOT_EXIST_ERROR","CONNECTION_INVALID_USERNAME_ERROR","CONNECTION_INVALID_PASSWORD_ERROR","CONNECTION_INVALID_HOSTNAME_ERROR","CONNECTION_PORT_CLOSED_ERROR","CONNECTION_INVALID_PORT_ERROR","CONNECTION_HOST_DOWN_ERROR","CONNECTION_ACCESS_DENIED_ERROR","CONNECTION_UNKNOWN_DATABASE_ERROR","CONNECTION_DATABASE_PERMISSIONS_ERROR","CONNECTION_MISSING_PARAMETERS_ERROR","OBJECT_DOES_NOT_EXIST_ERROR","SYNTAX_ERROR","CONNECTION_DATABASE_TIMEOUT","VIZ_GET_DF_ERROR","UNKNOWN_DATASOURCE_TYPE_ERROR","FAILED_FETCHING_DATASOURCE_INFO_ERROR","TABLE_SECURITY_ACCESS_ERROR","DATASOURCE_SECURITY_ACCESS_ERROR","DATABASE_SECURITY_ACCESS_ERROR","QUERY_SECURITY_ACCESS_ERROR","MISSING_OWNERSHIP_ERROR","USER_ACTIVITY_SECURITY_ACCESS_ERROR","DASHBOARD_SECURITY_ACCESS_ERROR","CHART_SECURITY_ACCESS_ERROR","OAUTH2_REDIRECT","OAUTH2_REDIRECT_ERROR","BACKEND_TIMEOUT_ERROR","DATABASE_NOT_FOUND_ERROR","MISSING_TEMPLATE_PARAMS_ERROR","INVALID_TEMPLATE_PARAMS_ERROR","RESULTS_BACKEND_NOT_CONFIGURED_ERROR","DML_NOT_ALLOWED_ERROR","INVALID_CTAS_QUERY_ERROR","INVALID_CVAS_QUERY_ERROR","SQLLAB_TIMEOUT_ERROR","RESULTS_BACKEND_ERROR","ASYNC_WORKERS_ERROR","ADHOC_SUBQUERY_NOT_ALLOWED_ERROR","INVALID_SQL_ERROR","GENERIC_COMMAND_ERROR","GENERIC_BACKEND_ERROR","INVALID_PAYLOAD_FORMAT_ERROR","INVALID_PAYLOAD_SCHEMA_ERROR","MARSHMALLOW_ERROR","REPORT_NOTIFICATION_ERROR","CtasEnum","TABLE","VIEW","QueryState","runningQueryStateList","Running","Started","Pending","Fetching","Scheduled","concludedQueryStateList","Stopped","Failed","Success","TimedOut","testQuery","id","dbId","sql","sqlEditorId","tab","tempTable","ctas","cached","errorMessage","extra","progress","isDataPreview","resultsKey","state","tempSchema","trackingUrl","templateParams","rows","queryLimit","limitingFactor","endDttm","duration","startDttm","time","user","userId","db","started","querylink","queryId","executedSql","output","actions","type","Query","columns","column_name","is_dttm","type_generic","String","Temporal","testQueryResults","results","displayLimitReached","data","expanded_columns","selected_columns","query","limit","testQueryResponse","ContributionType","_default","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/query/types/Query.ts"],"sourcesContent":["/* eslint camelcase: 0 */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { DatasourceType } from './Datasource';\nimport { BinaryOperator, SetOperator, UnaryOperator } from './Operator';\nimport { AppliedTimeExtras, TimeRange } from './Time';\nimport { AnnotationLayer } from './AnnotationLayer';\nimport {\n  QueryFields,\n  QueryFormColumn,\n  QueryFormData,\n  QueryFormMetric,\n} from './QueryFormData';\nimport { Maybe } from '../../types';\nimport { PostProcessingRule } from './PostProcessing';\nimport { JsonObject } from '../../connection';\nimport { TimeGranularity } from '../../time-format';\nimport { GenericDataType } from './QueryResponse';\n\nexport type BaseQueryObjectFilterClause = {\n  col: QueryFormColumn;\n  grain?: TimeGranularity;\n  isExtra?: boolean;\n};\n\nexport type BinaryQueryObjectFilterClause = BaseQueryObjectFilterClause & {\n  op: BinaryOperator;\n  val: string | number | boolean;\n  formattedVal?: string;\n};\n\nexport type SetQueryObjectFilterClause = BaseQueryObjectFilterClause & {\n  op: SetOperator;\n  val: (string | number | boolean)[];\n  formattedVal?: string[];\n};\n\nexport type UnaryQueryObjectFilterClause = BaseQueryObjectFilterClause & {\n  op: UnaryOperator;\n  formattedVal?: string;\n};\n\nexport type QueryObjectFilterClause =\n  | BinaryQueryObjectFilterClause\n  | SetQueryObjectFilterClause\n  | UnaryQueryObjectFilterClause;\n\nexport type QueryObjectExtras = Partial<{\n  /** HAVING condition for SQLAlchemy */\n  having?: string;\n  relative_start?: string;\n  relative_end?: string;\n  time_grain_sqla?: TimeGranularity;\n  /** WHERE condition */\n  where?: string;\n  /** Instant Time Comparison */\n  instant_time_comparison_range?: string;\n}>;\n\nexport type ResidualQueryObjectData = {\n  [key: string]: unknown;\n};\n\n/**\n * Query object directly compatible with the new chart data API.\n * A stricter version of query form data.\n *\n * All information should be related to generating database queries. Config values\n * for client-side processing and chart rendering should happen in `buildQuery`\n * and `transformProps`.\n */\nexport interface QueryObject\n  extends QueryFields,\n    TimeRange,\n    ResidualQueryObjectData {\n  /**\n   * Definition for annotation layers.\n   */\n  annotation_layers?: AnnotationLayer[];\n\n  /** Time filters that have been applied to the query object */\n  applied_time_extras?: AppliedTimeExtras;\n\n  /** add fetch value predicate to query if defined in datasource */\n  apply_fetch_values_predicate?: boolean;\n\n  /**\n   * Extra form data. Current stores information about time granularity, may be\n   * cleaned up in the future.\n   */\n  extras?: QueryObjectExtras;\n\n  /** SIMPLE where filters */\n  filters?: QueryObjectFilterClause[];\n\n  /** Time column for SQL */\n  granularity?: string;\n\n  /** If set, will group by timestamp */\n  is_timeseries?: boolean;\n\n  /** Should the rowcount of the query be fetched */\n  is_rowcount?: boolean;\n\n  /** Free-form HAVING SQL, multiple clauses are concatenated by AND */\n  having?: string;\n\n  post_processing?: (PostProcessingRule | undefined)[];\n\n  /** Maximum numbers of rows to return */\n  row_limit?: number;\n\n  /** Number of rows to skip */\n  row_offset?: number;\n\n  /** The column to which direct temporal filters (forthcoming) */\n  time_column?: string;\n\n  /** The size of bucket by which to group timeseries data (forthcoming) */\n  time_grain?: string;\n\n  /** Direction to ordered by */\n  order_desc?: boolean;\n\n  url_params?: Record<string, string>;\n\n  custom_params?: JsonObject;\n\n  /** Free-form WHERE SQL: multiple clauses are concatenated by AND */\n  where?: string;\n\n  /** Limit number of series */\n  series_columns?: QueryFormColumn[];\n  series_limit?: number;\n  series_limit_metric?: Maybe<QueryFormMetric>;\n}\n\nexport interface QueryContext {\n  datasource: {\n    id: number;\n    type: DatasourceType;\n  };\n  /** Force refresh of all queries */\n  force: boolean;\n  /** Type of result to return for queries */\n  result_type: string;\n  /** Response format */\n  result_format: string;\n  queries: QueryObject[];\n  form_data?: QueryFormData;\n}\n\n// Keep in sync with superset/errors.py\nexport const ErrorTypeEnum = {\n  // Frontend errors\n  FRONTEND_CSRF_ERROR: 'FRONTEND_CSRF_ERROR',\n  FRONTEND_NETWORK_ERROR: 'FRONTEND_NETWORK_ERROR',\n  FRONTEND_TIMEOUT_ERROR: 'FRONTEND_TIMEOUT_ERROR',\n\n  // DB Engine errors\n  GENERIC_DB_ENGINE_ERROR: 'GENERIC_DB_ENGINE_ERROR',\n  COLUMN_DOES_NOT_EXIST_ERROR: 'COLUMN_DOES_NOT_EXIST_ERROR',\n  TABLE_DOES_NOT_EXIST_ERROR: 'TABLE_DOES_NOT_EXIST_ERROR',\n  SCHEMA_DOES_NOT_EXIST_ERROR: 'SCHEMA_DOES_NOT_EXIST_ERROR',\n  CONNECTION_INVALID_USERNAME_ERROR: 'CONNECTION_INVALID_USERNAME_ERROR',\n  CONNECTION_INVALID_PASSWORD_ERROR: 'CONNECTION_INVALID_PASSWORD_ERROR',\n  CONNECTION_INVALID_HOSTNAME_ERROR: 'CONNECTION_INVALID_HOSTNAME_ERROR',\n  CONNECTION_PORT_CLOSED_ERROR: 'CONNECTION_PORT_CLOSED_ERROR',\n  CONNECTION_INVALID_PORT_ERROR: 'CONNECTION_INVALID_PORT_ERROR',\n  CONNECTION_HOST_DOWN_ERROR: 'CONNECTION_HOST_DOWN_ERROR',\n  CONNECTION_ACCESS_DENIED_ERROR: 'CONNECTION_ACCESS_DENIED_ERROR',\n  CONNECTION_UNKNOWN_DATABASE_ERROR: 'CONNECTION_UNKNOWN_DATABASE_ERROR',\n  CONNECTION_DATABASE_PERMISSIONS_ERROR:\n    'CONNECTION_DATABASE_PERMISSIONS_ERROR',\n  CONNECTION_MISSING_PARAMETERS_ERROR: 'CONNECTION_MISSING_PARAMETERS_ERROR',\n  OBJECT_DOES_NOT_EXIST_ERROR: 'OBJECT_DOES_NOT_EXIST_ERROR',\n  SYNTAX_ERROR: 'SYNTAX_ERROR',\n  CONNECTION_DATABASE_TIMEOUT: 'CONNECTION_DATABASE_TIMEOUT',\n\n  // Viz errors\n  VIZ_GET_DF_ERROR: 'VIZ_GET_DF_ERROR',\n  UNKNOWN_DATASOURCE_TYPE_ERROR: 'UNKNOWN_DATASOURCE_TYPE_ERROR',\n  FAILED_FETCHING_DATASOURCE_INFO_ERROR:\n    'FAILED_FETCHING_DATASOURCE_INFO_ERROR',\n\n  // Security access errors\n  TABLE_SECURITY_ACCESS_ERROR: 'TABLE_SECURITY_ACCESS_ERROR',\n  DATASOURCE_SECURITY_ACCESS_ERROR: 'DATASOURCE_SECURITY_ACCESS_ERROR',\n  DATABASE_SECURITY_ACCESS_ERROR: 'DATABASE_SECURITY_ACCESS_ERROR',\n  QUERY_SECURITY_ACCESS_ERROR: 'QUERY_SECURITY_ACCESS_ERROR',\n  MISSING_OWNERSHIP_ERROR: 'MISSING_OWNERSHIP_ERROR',\n  USER_ACTIVITY_SECURITY_ACCESS_ERROR: 'USER_ACTIVITY_SECURITY_ACCESS_ERROR',\n  DASHBOARD_SECURITY_ACCESS_ERROR: 'DASHBOARD_SECURITY_ACCESS_ERROR',\n  CHART_SECURITY_ACCESS_ERROR: 'CHART_SECURITY_ACCESS_ERROR',\n  OAUTH2_REDIRECT: 'OAUTH2_REDIRECT',\n  OAUTH2_REDIRECT_ERROR: 'OAUTH2_REDIRECT_ERROR',\n\n  // Other errors\n  BACKEND_TIMEOUT_ERROR: 'BACKEND_TIMEOUT_ERROR',\n  DATABASE_NOT_FOUND_ERROR: 'DATABASE_NOT_FOUND_ERROR',\n\n  // Sql Lab errors\n  MISSING_TEMPLATE_PARAMS_ERROR: 'MISSING_TEMPLATE_PARAMS_ERROR',\n  INVALID_TEMPLATE_PARAMS_ERROR: 'INVALID_TEMPLATE_PARAMS_ERROR',\n  RESULTS_BACKEND_NOT_CONFIGURED_ERROR: 'RESULTS_BACKEND_NOT_CONFIGURED_ERROR',\n  DML_NOT_ALLOWED_ERROR: 'DML_NOT_ALLOWED_ERROR',\n  INVALID_CTAS_QUERY_ERROR: 'INVALID_CTAS_QUERY_ERROR',\n  INVALID_CVAS_QUERY_ERROR: 'INVALID_CVAS_QUERY_ERROR',\n  SQLLAB_TIMEOUT_ERROR: 'SQLLAB_TIMEOUT_ERROR',\n  RESULTS_BACKEND_ERROR: 'RESULTS_BACKEND_ERROR',\n  ASYNC_WORKERS_ERROR: 'ASYNC_WORKERS_ERROR',\n  ADHOC_SUBQUERY_NOT_ALLOWED_ERROR: 'ADHOC_SUBQUERY_NOT_ALLOWED_ERROR',\n  INVALID_SQL_ERROR: 'INVALID_SQL_ERROR',\n\n  // Generic errors\n  GENERIC_COMMAND_ERROR: 'GENERIC_COMMAND_ERROR',\n  GENERIC_BACKEND_ERROR: 'GENERIC_BACKEND_ERROR',\n\n  // API errors\n  INVALID_PAYLOAD_FORMAT_ERROR: 'INVALID_PAYLOAD_FORMAT_ERROR',\n  INVALID_PAYLOAD_SCHEMA_ERROR: 'INVALID_PAYLOAD_SCHEMA_ERROR',\n  MARSHMALLOW_ERROR: 'MARSHMALLOW_ERROR',\n\n  // Report errors\n  REPORT_NOTIFICATION_ERROR: 'REPORT_NOTIFICATION_ERROR',\n} as const;\n\ntype ValueOf<T> = T[keyof T];\n\nexport type ErrorType = ValueOf<typeof ErrorTypeEnum>;\n\n// Keep in sync with superset/errors.py\nexport type ErrorLevel = 'info' | 'warning' | 'error';\n\nexport type ErrorSource = 'dashboard' | 'explore' | 'sqllab' | 'crud';\n\nexport type SupersetError<ExtraType = Record<string, any> | null> = {\n  error_type: ErrorType;\n  extra: ExtraType;\n  level: ErrorLevel;\n  message: string;\n};\n\nexport const CtasEnum = {\n  TABLE: 'TABLE',\n  VIEW: 'VIEW',\n};\n\nexport type QueryColumn = {\n  name?: string;\n  column_name: string;\n  type: string | null;\n  type_generic: GenericDataType;\n  is_dttm: boolean;\n};\n\n// Possible states of a query object for processing on the server\nexport enum QueryState {\n  Started = 'started',\n  Stopped = 'stopped',\n  Failed = 'failed',\n  Pending = 'pending',\n  Running = 'running',\n  Scheduled = 'scheduled',\n  Success = 'success',\n  Fetching = 'fetching',\n  TimedOut = 'timed_out',\n}\n\n// Inidcates a Query's state is still processing\nexport const runningQueryStateList: QueryState[] = [\n  QueryState.Running,\n  QueryState.Started,\n  QueryState.Pending,\n  QueryState.Fetching,\n  QueryState.Scheduled,\n];\n\n// Indicates a Query's state has completed processing regardless of success / failure\nexport const concludedQueryStateList: QueryState[] = [\n  QueryState.Stopped,\n  QueryState.Failed,\n  QueryState.Success,\n  QueryState.TimedOut,\n];\n\nexport type Query = {\n  cached: boolean;\n  ctas: boolean;\n  ctas_method?: keyof typeof CtasEnum;\n  dbId: number;\n  errors?: SupersetError[];\n  errorMessage: string | null;\n  extra: {\n    progress: string | null;\n    errors?: SupersetError[];\n  };\n  id: string;\n  isDataPreview: boolean;\n  link?: string;\n  progress: number;\n  resultsKey: string | null;\n  catalog?: string | null;\n  schema?: string;\n  sql: string;\n  sqlEditorId: string;\n  state: QueryState;\n  tab: string | null;\n  tempSchema: string | null;\n  tempTable: string;\n  trackingUrl: string | null;\n  templateParams: any;\n  rows: number;\n  queryLimit: number;\n  limitingFactor: string;\n  endDttm: number;\n  duration: string;\n  startDttm: number;\n  time: Record<string, any>;\n  user: Record<string, any>;\n  userId: number;\n  db: Record<string, any>;\n  started: string;\n  querylink: Record<string, any>;\n  queryId: number;\n  executedSql: string;\n  output: string | Record<string, any>;\n  actions: Record<string, any>;\n  type: DatasourceType;\n  columns: QueryColumn[];\n  runAsync?: boolean;\n};\n\nexport type QueryResults = {\n  results: {\n    displayLimitReached: boolean;\n    columns: QueryColumn[];\n    data: Record<string, unknown>[];\n    expanded_columns: QueryColumn[];\n    selected_columns: QueryColumn[];\n    query: { limit: number };\n    query_id?: number;\n  };\n};\n\nexport type QueryResponse = Query & QueryResults;\n\n// todo: move out from typing\nexport const testQuery: Query = {\n  id: 'clientId2353',\n  dbId: 1,\n  sql: 'SELECT * FROM something',\n  sqlEditorId: 'dfsadfs',\n  tab: 'unimportant',\n  tempTable: '',\n  ctas: false,\n  cached: false,\n  errorMessage: null,\n  extra: { progress: null },\n  isDataPreview: false,\n  progress: 0,\n  resultsKey: null,\n  state: QueryState.Success,\n  tempSchema: null,\n  trackingUrl: null,\n  templateParams: null,\n  rows: 42,\n  queryLimit: 100,\n  limitingFactor: '',\n  endDttm: 1476910579693,\n  duration: '',\n  startDttm: 1476910566092.96,\n  time: {},\n  user: {},\n  userId: 1,\n  db: {},\n  started: '',\n  querylink: {},\n  queryId: 1,\n  executedSql: '',\n  output: '',\n  actions: {},\n  type: DatasourceType.Query,\n  columns: [\n    {\n      column_name: 'Column 1',\n      type: 'STRING',\n      is_dttm: false,\n      type_generic: GenericDataType.String,\n    },\n    {\n      column_name: 'Column 3',\n      type: 'STRING',\n      is_dttm: false,\n      type_generic: GenericDataType.String,\n    },\n    {\n      column_name: 'Column 2',\n      type: 'TIMESTAMP',\n      is_dttm: true,\n      type_generic: GenericDataType.Temporal,\n    },\n  ],\n};\n\nexport const testQueryResults = {\n  results: {\n    displayLimitReached: false,\n    columns: [\n      {\n        column_name: 'Column 1',\n        type: 'STRING',\n        type_generic: GenericDataType.String,\n        is_dttm: false,\n      },\n      {\n        column_name: 'Column 3',\n        type: 'STRING',\n        type_generic: GenericDataType.String,\n        is_dttm: false,\n      },\n      {\n        column_name: 'Column 2',\n        type: 'TIMESTAMP',\n        type_generic: GenericDataType.Temporal,\n        is_dttm: true,\n      },\n    ],\n    data: [\n      { 'Column 1': 'a', 'Column 2': 'b', 'Column 3': '2014-11-11T00:00:00' },\n    ],\n    expanded_columns: [],\n    selected_columns: [\n      {\n        column_name: 'Column 1',\n        type: 'STRING',\n        type_generic: GenericDataType.String,\n        is_dttm: false,\n      },\n      {\n        column_name: 'Column 3',\n        type: 'STRING',\n        type_generic: GenericDataType.String,\n        is_dttm: false,\n      },\n      {\n        column_name: 'Column 2',\n        type: 'TIMESTAMP',\n        type_generic: GenericDataType.Temporal,\n        is_dttm: true,\n      },\n    ],\n    query: { limit: 6 },\n  },\n};\n\nexport const testQueryResponse = { ...testQuery, ...testQueryResults };\n\nexport enum ContributionType {\n  Row = 'row',\n  Column = 'column',\n}\n\nexport type DatasourceSamplesQuery = {\n  filters?: QueryObjectFilterClause[];\n};\n\nexport default {};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}