{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { makeApi } from '@superset-ui/core';\nimport { useEffect, useMemo, useRef, useState } from 'react';\nexport var ResourceStatus;\n(function (ResourceStatus) {\n  ResourceStatus[\"Loading\"] = \"loading\";\n  ResourceStatus[\"Complete\"] = \"complete\";\n  ResourceStatus[\"Error\"] = \"error\";\n})(ResourceStatus || (ResourceStatus = {}));\nconst initialState = {\n  status: ResourceStatus.Loading,\n  result: null,\n  error: null\n};\n/**\n * A general-purpose hook to fetch the response from an endpoint.\n * Returns the full response body from the API, including metadata.\n *\n * Note: You likely want {useApiV1Resource} instead of this!\n *\n * TODO Store the state in redux or something, share state between hook instances.\n *\n * TODO Include a function in the returned resource object to refresh the data.\n *\n * A core design decision here is composition > configuration,\n * and every hook should only have one job.\n * Please address new needs with new hooks if possible,\n * rather than adding config options to this hook.\n *\n * @param endpoint The url where the resource is located.\n */\nexport function useApiResourceFullBody(endpoint) {\n  const [resource, setResource] = useState(initialState);\n  const cancelRef = useRef(() => {});\n  useEffect(() => {\n    // If refresh is implemented, this will need to change.\n    // The previous values should stay during refresh.\n    setResource(initialState);\n    // when this effect runs, the endpoint has changed.\n    // cancel any current calls so that state doesn't get messed up.\n    cancelRef.current();\n    let cancelled = false;\n    cancelRef.current = () => {\n      cancelled = true;\n    };\n    const fetchResource = makeApi({\n      method: 'GET',\n      endpoint\n    });\n    fetchResource({}).\n    then((result) => {\n      if (!cancelled) {\n        setResource({\n          status: ResourceStatus.Complete,\n          result,\n          error: null\n        });\n      }\n    }).\n    catch((error) => {\n      if (!cancelled) {\n        setResource({\n          status: ResourceStatus.Error,\n          result: null,\n          error\n        });\n      }\n    });\n    // Cancel the request when the component un-mounts\n    return () => {\n      cancelled = true;\n    };\n  }, [endpoint]);\n  return resource;\n}\n/**\n * For when you want to transform the result of an api resource hook before using it.\n *\n * @param resource the Resource object returned from useApiV1Resource\n * @param transformFn a callback that transforms the result object into the shape you want.\n * Make sure to use a persistent function for this so it doesn't constantly recalculate!\n */__signature__(useApiResourceFullBody, \"useState{[resource, setResource](initialState)}\\nuseRef{cancelRef}\\nuseEffect{}\");\nexport function useTransformedResource(resource, transformFn) {\n  return useMemo(() => {\n    if (resource.status !== ResourceStatus.Complete) {\n      // While incomplete, there is no result - no need to transform.\n      return resource;\n    }\n    try {\n      return {\n        ...resource,\n        result: transformFn(resource.result)\n      };\n    }\n    catch (e) {\n      return {\n        status: ResourceStatus.Error,\n        result: null,\n        error: e\n      };\n    }\n  }, [resource, transformFn]);\n}\n// returns the \"result\" field from a fetched API v1 endpoint\n__signature__(useTransformedResource, \"useMemo{}\");const extractInnerResult = (responseBody) => responseBody.result;\n/**\n * A general-purpose hook to fetch a Superset resource from a v1 API endpoint.\n * Handles request lifecycle and async logic so you don't have to.\n *\n * This returns the data under the \"result\" field in the API response body.\n * If you need the full response body, use {useFullApiResource} instead.\n *\n * @param endpoint The url where the resource is located.\n */\nexport function useApiV1Resource(endpoint) {\n  return useTransformedResource(useApiResourceFullBody(endpoint), extractInnerResult);\n}__signature__(useApiV1Resource, \"useTransformedResource{}\\nuseApiResourceFullBody{}\", () => [useTransformedResource, useApiResourceFullBody]);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(ResourceStatus, \"ResourceStatus\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/hooks/apiResources/apiResources.ts\");reactHotLoader.register(initialState, \"initialState\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/hooks/apiResources/apiResources.ts\");reactHotLoader.register(useApiResourceFullBody, \"useApiResourceFullBody\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/hooks/apiResources/apiResources.ts\");reactHotLoader.register(useTransformedResource, \"useTransformedResource\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/hooks/apiResources/apiResources.ts\");reactHotLoader.register(extractInnerResult, \"extractInnerResult\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/hooks/apiResources/apiResources.ts\");reactHotLoader.register(useApiV1Resource, \"useApiV1Resource\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/hooks/apiResources/apiResources.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["makeApi","useEffect","useMemo","useRef","useState","ResourceStatus","initialState","status","Loading","result","error","useApiResourceFullBody","endpoint","resource","setResource","cancelRef","current","cancelled","fetchResource","method","then","Complete","catch","Error","__signature__","useTransformedResource","transformFn","e","extractInnerResult","responseBody","useApiV1Resource","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/hooks/apiResources/apiResources.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { makeApi } from '@superset-ui/core';\nimport { useEffect, useMemo, useRef, useState } from 'react';\n\nexport enum ResourceStatus {\n  Loading = 'loading',\n  Complete = 'complete',\n  Error = 'error',\n}\n\n/**\n * An object containing the data fetched from the API,\n * as well as loading and error info\n */\nexport type Resource<T> = LoadingState | CompleteState<T> | ErrorState;\n\n// Trying out something a little different: a separate type per status.\n// This should let Typescript know whether a Resource has a result or error.\n// It's possible that I'm expecting too much from Typescript here.\n// If this ends up causing problems, we can change the type to:\n//\n// export type Resource<T> = {\n//   status: ResourceStatus;\n//   result: null | T;\n//   error: null | Error;\n// }\n\ntype LoadingState = {\n  status: ResourceStatus.Loading;\n  result: null;\n  error: null;\n};\n\ntype CompleteState<T> = {\n  status: ResourceStatus.Complete;\n  result: T;\n  error: null;\n};\n\ntype ErrorState = {\n  status: ResourceStatus.Error;\n  result: null;\n  error: Error;\n};\n\nconst initialState: LoadingState = {\n  status: ResourceStatus.Loading,\n  result: null,\n  error: null,\n};\n\n/**\n * A general-purpose hook to fetch the response from an endpoint.\n * Returns the full response body from the API, including metadata.\n *\n * Note: You likely want {useApiV1Resource} instead of this!\n *\n * TODO Store the state in redux or something, share state between hook instances.\n *\n * TODO Include a function in the returned resource object to refresh the data.\n *\n * A core design decision here is composition > configuration,\n * and every hook should only have one job.\n * Please address new needs with new hooks if possible,\n * rather than adding config options to this hook.\n *\n * @param endpoint The url where the resource is located.\n */\nexport function useApiResourceFullBody<RESULT>(\n  endpoint: string,\n): Resource<RESULT> {\n  const [resource, setResource] = useState<Resource<RESULT>>(initialState);\n  const cancelRef = useRef<() => void>(() => {});\n\n  useEffect(() => {\n    // If refresh is implemented, this will need to change.\n    // The previous values should stay during refresh.\n    setResource(initialState);\n\n    // when this effect runs, the endpoint has changed.\n    // cancel any current calls so that state doesn't get messed up.\n    cancelRef.current();\n    let cancelled = false;\n    cancelRef.current = () => {\n      cancelled = true;\n    };\n\n    const fetchResource = makeApi<{}, RESULT>({\n      method: 'GET',\n      endpoint,\n    });\n\n    fetchResource({})\n      .then(result => {\n        if (!cancelled) {\n          setResource({\n            status: ResourceStatus.Complete,\n            result,\n            error: null,\n          });\n        }\n      })\n      .catch(error => {\n        if (!cancelled) {\n          setResource({\n            status: ResourceStatus.Error,\n            result: null,\n            error,\n          });\n        }\n      });\n\n    // Cancel the request when the component un-mounts\n    return () => {\n      cancelled = true;\n    };\n  }, [endpoint]);\n\n  return resource;\n}\n\n/**\n * For when you want to transform the result of an api resource hook before using it.\n *\n * @param resource the Resource object returned from useApiV1Resource\n * @param transformFn a callback that transforms the result object into the shape you want.\n * Make sure to use a persistent function for this so it doesn't constantly recalculate!\n */\nexport function useTransformedResource<IN, OUT>(\n  resource: Resource<IN>,\n  transformFn: (result: IN) => OUT,\n): Resource<OUT> {\n  return useMemo(() => {\n    if (resource.status !== ResourceStatus.Complete) {\n      // While incomplete, there is no result - no need to transform.\n      return resource;\n    }\n    try {\n      return {\n        ...resource,\n        result: transformFn(resource.result),\n      };\n    } catch (e) {\n      return {\n        status: ResourceStatus.Error,\n        result: null,\n        error: e,\n      };\n    }\n  }, [resource, transformFn]);\n}\n\n// returns the \"result\" field from a fetched API v1 endpoint\nconst extractInnerResult = <T>(responseBody: { result: T }) =>\n  responseBody.result;\n\n/**\n * A general-purpose hook to fetch a Superset resource from a v1 API endpoint.\n * Handles request lifecycle and async logic so you don't have to.\n *\n * This returns the data under the \"result\" field in the API response body.\n * If you need the full response body, use {useFullApiResource} instead.\n *\n * @param endpoint The url where the resource is located.\n */\nexport function useApiV1Resource<RESULT>(endpoint: string): Resource<RESULT> {\n  return useTransformedResource(\n    useApiResourceFullBody<{ result: RESULT }>(endpoint),\n    extractInnerResult,\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}