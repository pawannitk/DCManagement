{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * This method is used to get the query filters to be applied to the comparison query after\n * overriding the time range in case an extra form data is provided.\n * For example when rendering a chart that uses time comparison in a dashboard with time filters.\n * @param formData - the form data\n * @param extraFormData - the extra form data\n * @returns the query filters to be applied to the comparison query\n */\nexport const getComparisonFilters = (formData, extraFormData) => {var _formData$adhoc_filte, _formData$adhoc_filte2, _formData$adhoc_filte3;\n  const timeFilterIndex = (_formData$adhoc_filte = (_formData$adhoc_filte2 = formData.adhoc_filters) == null ? void 0 : _formData$adhoc_filte2.findIndex((filter) => 'operator' in filter && filter.operator === 'TEMPORAL_RANGE')) != null ? _formData$adhoc_filte : -1;\n  const timeFilter = timeFilterIndex !== -1 && formData.adhoc_filters ?\n  formData.adhoc_filters[timeFilterIndex] :\n  null;\n  if (timeFilter &&\n  'comparator' in timeFilter &&\n  typeof timeFilter.comparator === 'string') {\n    if (extraFormData != null && extraFormData.time_range) {\n      timeFilter.comparator = extraFormData.time_range;\n    }\n  }\n  const comparisonQueryFilter = timeFilter ? [timeFilter] : [];\n  const otherFilters = (_formData$adhoc_filte3 = formData.adhoc_filters) == null ? void 0 : _formData$adhoc_filte3.filter((_value, index) => timeFilterIndex !== index);\n  const comparisonQueryFilters = otherFilters ?\n  [...comparisonQueryFilter, ...otherFilters] :\n  comparisonQueryFilter;\n  return comparisonQueryFilters;\n};const _default =\ngetComparisonFilters;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(getComparisonFilters, \"getComparisonFilters\", \"/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/time-comparison/getComparisonFilters.ts\");reactHotLoader.register(_default, \"default\", \"/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/time-comparison/getComparisonFilters.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["getComparisonFilters","formData","extraFormData","_formData$adhoc_filte","_formData$adhoc_filte2","_formData$adhoc_filte3","timeFilterIndex","adhoc_filters","findIndex","filter","operator","timeFilter","comparator","time_range","comparisonQueryFilter","otherFilters","_value","index","comparisonQueryFilters","_default","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/time-comparison/getComparisonFilters.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { QueryFormData } from '../query';\nimport { AdhocFilter } from '../types';\n\n/**\n * This method is used to get the query filters to be applied to the comparison query after\n * overriding the time range in case an extra form data is provided.\n * For example when rendering a chart that uses time comparison in a dashboard with time filters.\n * @param formData - the form data\n * @param extraFormData - the extra form data\n * @returns the query filters to be applied to the comparison query\n */\nexport const getComparisonFilters = (\n  formData: QueryFormData,\n  extraFormData: any,\n): AdhocFilter[] => {\n  const timeFilterIndex: number =\n    formData.adhoc_filters?.findIndex(\n      filter => 'operator' in filter && filter.operator === 'TEMPORAL_RANGE',\n    ) ?? -1;\n\n  const timeFilter: AdhocFilter | null =\n    timeFilterIndex !== -1 && formData.adhoc_filters\n      ? formData.adhoc_filters[timeFilterIndex]\n      : null;\n\n  if (\n    timeFilter &&\n    'comparator' in timeFilter &&\n    typeof timeFilter.comparator === 'string'\n  ) {\n    if (extraFormData?.time_range) {\n      timeFilter.comparator = extraFormData.time_range;\n    }\n  }\n\n  const comparisonQueryFilter = timeFilter ? [timeFilter] : [];\n\n  const otherFilters = formData.adhoc_filters?.filter(\n    (_value: any, index: number) => timeFilterIndex !== index,\n  );\n  const comparisonQueryFilters = otherFilters\n    ? [...comparisonQueryFilter, ...otherFilters]\n    : comparisonQueryFilter;\n\n  return comparisonQueryFilters;\n};\n\nexport default getComparisonFilters;\n"],"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;AAQA,OAAO,MAAMA,oBAAoB,GAAGA,CAClCC,QAAuB,EACvBC,aAAkB,KACD,KAAAC,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA;EACjB,MAAMC,eAAe,IAAAH,qBAAA,IAAAC,sBAAA,GACnBH,QAAQ,CAACM,aAAa,qBAAtBH,sBAAA,CAAwBI,SAAS,CAC/B,CAAAC,MAAM,KAAI,UAAU,IAAIA,MAAM,IAAIA,MAAM,CAACC,QAAQ,KAAK,gBAAgB,CACvE,YAAAP,qBAAA,GAAI,CAAC,CAAC;EAET,MAAMQ,UAAU,GACdL,eAAe,KAAK,CAAC,CAAC,IAAIL,QAAQ,CAACM,aAAa;EAC5CN,QAAQ,CAACM,aAAa,CAACD,eAAe,CAAC;EACvC,IAAI;EAEV,IACEK,UAAU;EACV,YAAY,IAAIA,UAAU;EAC1B,OAAOA,UAAU,CAACC,UAAU,KAAK,QAAQ,EACzC;IACA,IAAIV,aAAa,YAAbA,aAAa,CAAEW,UAAU,EAAE;MAC7BF,UAAU,CAACC,UAAU,GAAGV,aAAa,CAACW,UAAU;;;EAIpD,MAAMC,qBAAqB,GAAGH,UAAU,GAAG,CAACA,UAAU,CAAC,GAAG,EAAE;EAE5D,MAAMI,YAAY,IAAAV,sBAAA,GAAGJ,QAAQ,CAACM,aAAa,qBAAtBF,sBAAA,CAAwBI,MAAM,CACjD,CAACO,MAAW,EAAEC,KAAa,KAAKX,eAAe,KAAKW,KAAK,CAC1D;EACD,MAAMC,sBAAsB,GAAGH,YAAY;EACvC,CAAC,GAAGD,qBAAqB,EAAE,GAAGC,YAAY,CAAC;EAC3CD,qBAAqB;EAEzB,OAAOI,sBAAsB;AAC/B,CAAC,CAAC,MAAAC,QAAA;AAEanB,oBAAoB,CAAnC,eAAAmB,QAAA,CAAoC,mBAAAC,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAC,OAAA,GAAAC,SAAA,MAAAH,cAAA,WAAAA,cAAA,CAAAI,QAAA,CApCvBxB,oBAAoB,0JAAAoB,cAAA,CAAAI,QAAA,CAAAL,QAAA,qKAAAM,WAAA,UAAAJ,oBAAA,mBAAAA,oBAAA,CAAAI,WAAA,GAAAF,SAAA,CAAAE,WAAA,IAAAA,WAAA,CAAAC,MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}