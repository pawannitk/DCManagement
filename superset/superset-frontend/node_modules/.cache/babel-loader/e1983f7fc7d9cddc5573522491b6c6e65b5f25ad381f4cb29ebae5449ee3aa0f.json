{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { getChartIdAndColumnFromFilterKey } from './getDashboardFilterKey';\n\nexport default function getSelectedChartIdForFilterScopeTree({\n  activeFilterField,\n  checkedFilterFields\n}) {\n  // this function returns chart id based on current filter scope selector local state:\n  // 1. if in single-edit mode, return the chart id for selected filter field.\n  // 2. if in multi-edit mode, if all filter fields are from same chart id,\n  // return the single chart id.\n  // otherwise, there is no chart to disable.\n  if (activeFilterField) {\n    return getChartIdAndColumnFromFilterKey(activeFilterField).chartId;\n  }\n\n  if (checkedFilterFields.length) {\n    const { chartId } = getChartIdAndColumnFromFilterKey(\n      checkedFilterFields[0]\n    );\n\n    if (\n    checkedFilterFields.some(\n      (filterKey) =>\n      getChartIdAndColumnFromFilterKey(filterKey).chartId !== chartId\n    ))\n    {\n      return null;\n    }\n    return chartId;\n  }\n\n  return null;\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(getSelectedChartIdForFilterScopeTree, \"getSelectedChartIdForFilterScopeTree\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/util/getSelectedChartIdForFilterScopeTree.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["getChartIdAndColumnFromFilterKey","getSelectedChartIdForFilterScopeTree","activeFilterField","checkedFilterFields","chartId","length","some","filterKey","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/util/getSelectedChartIdForFilterScopeTree.js"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { getChartIdAndColumnFromFilterKey } from './getDashboardFilterKey';\n\nexport default function getSelectedChartIdForFilterScopeTree({\n  activeFilterField,\n  checkedFilterFields,\n}) {\n  // this function returns chart id based on current filter scope selector local state:\n  // 1. if in single-edit mode, return the chart id for selected filter field.\n  // 2. if in multi-edit mode, if all filter fields are from same chart id,\n  // return the single chart id.\n  // otherwise, there is no chart to disable.\n  if (activeFilterField) {\n    return getChartIdAndColumnFromFilterKey(activeFilterField).chartId;\n  }\n\n  if (checkedFilterFields.length) {\n    const { chartId } = getChartIdAndColumnFromFilterKey(\n      checkedFilterFields[0],\n    );\n\n    if (\n      checkedFilterFields.some(\n        filterKey =>\n          getChartIdAndColumnFromFilterKey(filterKey).chartId !== chartId,\n      )\n    ) {\n      return null;\n    }\n    return chartId;\n  }\n\n  return null;\n}\n"],"mappings":"wSAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,gCAAgC,QAAQ,yBAAyB;;AAE1E,eAAe,SAASC,oCAAoCA,CAAC;EAC3DC,iBAAiB;EACjBC;AACF,CAAC,EAAE;EACD;EACA;EACA;EACA;EACA;EACA,IAAID,iBAAiB,EAAE;IACrB,OAAOF,gCAAgC,CAACE,iBAAiB,CAAC,CAACE,OAAO;EACpE;;EAEA,IAAID,mBAAmB,CAACE,MAAM,EAAE;IAC9B,MAAM,EAAED,OAAO,CAAC,CAAC,GAAGJ,gCAAgC;MAClDG,mBAAmB,CAAC,CAAC;IACvB,CAAC;;IAED;IACEA,mBAAmB,CAACG,IAAI;MACtB,CAAAC,SAAS;MACPP,gCAAgC,CAACO,SAAS,CAAC,CAACH,OAAO,KAAKA;IAC5D,CAAC;IACD;MACA,OAAO,IAAI;IACb;IACA,OAAOA,OAAO;EAChB;;EAEA,OAAO,IAAI;AACb,CAAC,mBAAAI,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAC,OAAA,GAAAC,SAAA,MAAAH,cAAA,WAAAA,cAAA,CAAAI,QAAA,CA9BuBX,oCAAoC,uLAAAY,WAAA,UAAAJ,oBAAA,mBAAAA,oBAAA,CAAAI,WAAA,GAAAF,SAAA,CAAAE,WAAA,IAAAA,WAAA,CAAAC,MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}