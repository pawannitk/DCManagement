{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useRef, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logging } from '@superset-ui/core';\nimport { useUpdateSqlEditorTabMutation } from 'src/hooks/apiResources/sqlEditorTabs';\nimport { useDebounceValue } from 'src/hooks/useDebounceValue';\nimport { setEditorTabLastUpdate } from 'src/SqlLab/actions/sqlLab';\nconst INTERVAL = 5000;\nfunction hasUnsavedChanges(queryEditor, lastSavedTimestamp) {\n  return queryEditor.inLocalStorage ||\n  queryEditor.updatedAt && queryEditor.updatedAt > lastSavedTimestamp;\n}\nexport function filterUnsavedQueryEditorList(queryEditors, unsavedQueryEditor, lastSavedTimestamp) {\n  return queryEditors.\n  map((queryEditor) => ({\n    ...queryEditor,\n    ...(unsavedQueryEditor.id === queryEditor.id && unsavedQueryEditor)\n  })).\n  filter((queryEditor) => hasUnsavedChanges(queryEditor, lastSavedTimestamp));\n}\nconst EditorAutoSync = () => {\n  const queryEditors = useSelector((state) => state.sqlLab.queryEditors);\n  const unsavedQueryEditor = useSelector((state) => state.sqlLab.unsavedQueryEditor);\n  const editorTabLastUpdatedAt = useSelector((state) => state.sqlLab.editorTabLastUpdatedAt);\n  const dispatch = useDispatch();\n  const lastSavedTimestampRef = useRef(editorTabLastUpdatedAt);\n  const [updateSqlEditor, { error }] = useUpdateSqlEditorTabMutation();\n  const debouncedUnsavedQueryEditor = useDebounceValue(unsavedQueryEditor, INTERVAL);\n  useEffect(() => {\n    const unsaved = filterUnsavedQueryEditorList(queryEditors, debouncedUnsavedQueryEditor, lastSavedTimestampRef.current);\n    Promise.all(unsaved\n    // TODO: Migrate migrateQueryEditorFromLocalStorage\n    //       in TabbedSqlEditors logic by addSqlEditor mutation later\n    .filter(({ inLocalStorage }) => !inLocalStorage).\n    map((queryEditor) => updateSqlEditor({ queryEditor }))).then((resolvers) => {\n      if (!resolvers.some((result) => 'error' in result)) {\n        lastSavedTimestampRef.current = Date.now();\n        dispatch(setEditorTabLastUpdate(lastSavedTimestampRef.current));\n      }\n    });\n  }, [debouncedUnsavedQueryEditor, dispatch, queryEditors, updateSqlEditor]);\n  useEffect(() => {\n    if (error) {\n      logging.warn('An error occurred while saving your editor state.', error);\n    }\n  }, [dispatch, error]);\n  return null;\n};__signature__(EditorAutoSync, \"useSelector{queryEditors}\\nuseSelector{unsavedQueryEditor}\\nuseSelector{editorTabLastUpdatedAt}\\nuseDispatch{dispatch}\\nuseRef{lastSavedTimestampRef}\\nuseUpdateSqlEditorTabMutation{[updateSqlEditor, { error }]}\\nuseDebounceValue{debouncedUnsavedQueryEditor}\\nuseEffect{}\\nuseEffect{}\", () => [useSelector, useSelector, useSelector, useDispatch, useUpdateSqlEditorTabMutation, useDebounceValue]);const _default =\nEditorAutoSync;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(INTERVAL, \"INTERVAL\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/EditorAutoSync/index.tsx\");reactHotLoader.register(hasUnsavedChanges, \"hasUnsavedChanges\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/EditorAutoSync/index.tsx\");reactHotLoader.register(filterUnsavedQueryEditorList, \"filterUnsavedQueryEditorList\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/EditorAutoSync/index.tsx\");reactHotLoader.register(EditorAutoSync, \"EditorAutoSync\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/EditorAutoSync/index.tsx\");reactHotLoader.register(_default, \"default\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/EditorAutoSync/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["useRef","useEffect","useDispatch","useSelector","logging","useUpdateSqlEditorTabMutation","useDebounceValue","setEditorTabLastUpdate","INTERVAL","hasUnsavedChanges","queryEditor","lastSavedTimestamp","inLocalStorage","updatedAt","filterUnsavedQueryEditorList","queryEditors","unsavedQueryEditor","map","id","filter","EditorAutoSync","state","sqlLab","editorTabLastUpdatedAt","dispatch","lastSavedTimestampRef","updateSqlEditor","error","debouncedUnsavedQueryEditor","unsaved","current","Promise","all","then","resolvers","some","result","Date","now","warn","__signature__","_default","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/EditorAutoSync/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useRef, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logging } from '@superset-ui/core';\nimport {\n  SqlLabRootState,\n  QueryEditor,\n  UnsavedQueryEditor,\n} from 'src/SqlLab/types';\nimport { useUpdateSqlEditorTabMutation } from 'src/hooks/apiResources/sqlEditorTabs';\nimport { useDebounceValue } from 'src/hooks/useDebounceValue';\nimport { setEditorTabLastUpdate } from 'src/SqlLab/actions/sqlLab';\n\nconst INTERVAL = 5000;\n\nfunction hasUnsavedChanges(\n  queryEditor: QueryEditor,\n  lastSavedTimestamp: number,\n) {\n  return (\n    queryEditor.inLocalStorage ||\n    (queryEditor.updatedAt && queryEditor.updatedAt > lastSavedTimestamp)\n  );\n}\n\nexport function filterUnsavedQueryEditorList(\n  queryEditors: QueryEditor[],\n  unsavedQueryEditor: UnsavedQueryEditor,\n  lastSavedTimestamp: number,\n) {\n  return queryEditors\n    .map(queryEditor => ({\n      ...queryEditor,\n      ...(unsavedQueryEditor.id === queryEditor.id && unsavedQueryEditor),\n    }))\n    .filter(queryEditor => hasUnsavedChanges(queryEditor, lastSavedTimestamp));\n}\n\nconst EditorAutoSync: React.FC = () => {\n  const queryEditors = useSelector<SqlLabRootState, QueryEditor[]>(\n    state => state.sqlLab.queryEditors,\n  );\n  const unsavedQueryEditor = useSelector<SqlLabRootState, UnsavedQueryEditor>(\n    state => state.sqlLab.unsavedQueryEditor,\n  );\n  const editorTabLastUpdatedAt = useSelector<SqlLabRootState, number>(\n    state => state.sqlLab.editorTabLastUpdatedAt,\n  );\n  const dispatch = useDispatch();\n  const lastSavedTimestampRef = useRef<number>(editorTabLastUpdatedAt);\n  const [updateSqlEditor, { error }] = useUpdateSqlEditorTabMutation();\n\n  const debouncedUnsavedQueryEditor = useDebounceValue(\n    unsavedQueryEditor,\n    INTERVAL,\n  );\n\n  useEffect(() => {\n    const unsaved = filterUnsavedQueryEditorList(\n      queryEditors,\n      debouncedUnsavedQueryEditor,\n      lastSavedTimestampRef.current,\n    );\n\n    Promise.all(\n      unsaved\n        // TODO: Migrate migrateQueryEditorFromLocalStorage\n        //       in TabbedSqlEditors logic by addSqlEditor mutation later\n        .filter(({ inLocalStorage }) => !inLocalStorage)\n        .map(queryEditor => updateSqlEditor({ queryEditor })),\n    ).then(resolvers => {\n      if (!resolvers.some(result => 'error' in result)) {\n        lastSavedTimestampRef.current = Date.now();\n        dispatch(setEditorTabLastUpdate(lastSavedTimestampRef.current));\n      }\n    });\n  }, [debouncedUnsavedQueryEditor, dispatch, queryEditors, updateSqlEditor]);\n\n  useEffect(() => {\n    if (error) {\n      logging.warn('An error occurred while saving your editor state.', error);\n    }\n  }, [dispatch, error]);\n\n  return null;\n};\n\nexport default EditorAutoSync;\n"],"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAmBA,SAAgBA,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAChD,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,OAAO,QAAQ,mBAAmB;AAM3C,SAASC,6BAA6B,QAAQ,sCAAsC;AACpF,SAASC,gBAAgB,QAAQ,4BAA4B;AAC7D,SAASC,sBAAsB,QAAQ,2BAA2B;AAElE,MAAMC,QAAQ,GAAG,IAAI;AAErB,SAASC,iBAAiBA,CACxBC,WAAwB,EACxBC,kBAA0B;EAE1B,OACED,WAAW,CAACE,cAAc;EACzBF,WAAW,CAACG,SAAS,IAAIH,WAAW,CAACG,SAAS,GAAGF,kBAAmB;AAEzE;AAEA,OAAM,SAAUG,4BAA4BA,CAC1CC,YAA2B,EAC3BC,kBAAsC,EACtCL,kBAA0B;EAE1B,OAAOI,YAAY;EAChBE,GAAG,CAAC,CAAAP,WAAW,MAAK;IACnB,GAAGA,WAAW;IACd,IAAIM,kBAAkB,CAACE,EAAE,KAAKR,WAAW,CAACQ,EAAE,IAAIF,kBAAkB;GACnE,CAAC,CAAC;EACFG,MAAM,CAAC,CAAAT,WAAW,KAAID,iBAAiB,CAACC,WAAW,EAAEC,kBAAkB,CAAC,CAAC;AAC9E;AAEA,MAAMS,cAAc,GAAaA,CAAA,KAAK;EACpC,MAAML,YAAY,GAAGZ,WAAW,CAC9B,CAAAkB,KAAK,KAAIA,KAAK,CAACC,MAAM,CAACP,YAAY,CACnC;EACD,MAAMC,kBAAkB,GAAGb,WAAW,CACpC,CAAAkB,KAAK,KAAIA,KAAK,CAACC,MAAM,CAACN,kBAAkB,CACzC;EACD,MAAMO,sBAAsB,GAAGpB,WAAW,CACxC,CAAAkB,KAAK,KAAIA,KAAK,CAACC,MAAM,CAACC,sBAAsB,CAC7C;EACD,MAAMC,QAAQ,GAAGtB,WAAW,EAAE;EAC9B,MAAMuB,qBAAqB,GAAGzB,MAAM,CAASuB,sBAAsB,CAAC;EACpE,MAAM,CAACG,eAAe,EAAE,EAAEC,KAAK,EAAE,CAAC,GAAGtB,6BAA6B,EAAE;EAEpE,MAAMuB,2BAA2B,GAAGtB,gBAAgB,CAClDU,kBAAkB,EAClBR,QAAQ,CACT;EAEDP,SAAS,CAAC,MAAK;IACb,MAAM4B,OAAO,GAAGf,4BAA4B,CAC1CC,YAAY,EACZa,2BAA2B,EAC3BH,qBAAqB,CAACK,OAAO,CAC9B;IAEDC,OAAO,CAACC,GAAG,CACTH;IACE;IACA;IAAA,CACCV,MAAM,CAAC,CAAC,EAAEP,cAAc,EAAE,KAAK,CAACA,cAAc,CAAC;IAC/CK,GAAG,CAAC,CAAAP,WAAW,KAAIgB,eAAe,CAAC,EAAEhB,WAAW,EAAE,CAAC,CAAC,CACxD,CAACuB,IAAI,CAAC,CAAAC,SAAS,KAAG;MACjB,IAAI,CAACA,SAAS,CAACC,IAAI,CAAC,CAAAC,MAAM,KAAI,OAAO,IAAIA,MAAM,CAAC,EAAE;QAChDX,qBAAqB,CAACK,OAAO,GAAGO,IAAI,CAACC,GAAG,EAAE;QAC1Cd,QAAQ,CAACjB,sBAAsB,CAACkB,qBAAqB,CAACK,OAAO,CAAC,CAAC;;IAEnE,CAAC,CAAC;EACJ,CAAC,EAAE,CAACF,2BAA2B,EAAEJ,QAAQ,EAAET,YAAY,EAAEW,eAAe,CAAC,CAAC;EAE1EzB,SAAS,CAAC,MAAK;IACb,IAAI0B,KAAK,EAAE;MACTvB,OAAO,CAACmC,IAAI,CAAC,mDAAmD,EAAEZ,KAAK,CAAC;;EAE5E,CAAC,EAAE,CAACH,QAAQ,EAAEG,KAAK,CAAC,CAAC;EAErB,OAAO,IAAI;AACb,CAAC,CAACa,aAAA,CA/CIpB,cAAc,wSACGjB,WAAW,EAGLA,WAAW,EAGPA,WAAW,EAGzBD,WAAW,EAESG,6BAA6B,EAE9BC,gBAAgB,SAAAmC,QAAA;AAmCvCrB,cAAc,CAA7B,eAAAqB,QAAA,CAA8B,mBAAAC,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAC,OAAA,GAAAC,SAAA,MAAAH,cAAA,WAAAA,cAAA,CAAAI,QAAA,CA1ExBtC,QAAQ,uHAAAkC,cAAA,CAAAI,QAAA,CAELrC,iBAAiB,gIAAAiC,cAAA,CAAAI,QAAA,CAUVhC,4BAA4B,2IAAA4B,cAAA,CAAAI,QAAA,CAatC1B,cAAc,6HAAAsB,cAAA,CAAAI,QAAA,CAAAL,QAAA,8IAAAM,WAAA,UAAAJ,oBAAA,mBAAAA,oBAAA,CAAAI,WAAA,GAAAF,SAAA,CAAAE,WAAA,IAAAA,WAAA,CAAAC,MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}