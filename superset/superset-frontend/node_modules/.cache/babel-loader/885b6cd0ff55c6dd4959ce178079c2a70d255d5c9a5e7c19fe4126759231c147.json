{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '../translation';\nimport { removeDuplicates } from '../utils';\nimport getColumnLabel from './getColumnLabel';\nimport getMetricLabel from './getMetricLabel';\nimport { QueryMode } from './types/QueryFormData';\n/**\n * Extra SQL query related fields from chart form data.\n * Consolidate field values into arrays.\n *\n * @param formData - the (partial) form data obtained from chart controls.\n * @param aliases - additional field aliases that maps arbitrary field names to\n *                  query field names.\n */\nexport default function extractQueryFields(formData, aliases) {\n  const queryFieldAliases = {\n    /** These are predefined for backward compatibility */\n    metric: 'metrics',\n    metric_2: 'metrics',\n    secondary_metric: 'metrics',\n    x: 'metrics',\n    y: 'metrics',\n    size: 'metrics',\n    all_columns: 'columns',\n    series: 'groupby',\n    order_by_cols: 'orderby',\n    ...aliases\n  };\n  const { query_mode: queryMode, ...restFormData } = formData;\n  let columns = [];\n  let metrics = [];\n  let orderby = [];\n  Object.entries(restFormData).forEach(([key, value]) => {\n    // ignore `null` or `undefined` value\n    if (value == null) {\n      return;\n    }\n    let normalizedKey = queryFieldAliases[key] || key;\n    // ignore columns when (specifically) in aggregate mode.\n    // For charts that support both aggregate and raw records mode,\n    // we store both `groupby` and `columns` in `formData`, so users can\n    // switch between modes while retaining the selected options for each.\n    if (queryMode === QueryMode.Aggregate && normalizedKey === 'columns') {\n      return;\n    }\n    // for the same reason, ignore groupby and metrics in raw records mode\n    if (queryMode === QueryMode.Raw && (\n    normalizedKey === 'groupby' || normalizedKey === 'metrics')) {\n      return;\n    }\n    // groupby has been deprecated in QueryObject: https://github.com/apache/superset/pull/9366\n    if (normalizedKey === 'groupby') {\n      normalizedKey = 'columns';\n    }\n    if (normalizedKey === 'metrics') {\n      metrics = metrics.concat(value);\n    } else\n    if (normalizedKey === 'columns') {\n      // currently the columns field only accept pre-defined columns (string shortcut)\n      columns = columns.concat(value);\n    } else\n    if (normalizedKey === 'orderby') {\n      orderby = orderby.concat(value);\n    }\n  });\n  return {\n    columns: removeDuplicates(columns.filter((col) => col !== ''), getColumnLabel),\n    metrics: queryMode === QueryMode.Raw ?\n    undefined :\n    removeDuplicates(metrics, getMetricLabel),\n    orderby: orderby.length > 0 ?\n    orderby.map((item) => {\n      // value can be in the format of `['[\"col1\", true]', '[\"col2\", false]'],\n      // where the option strings come directly from `order_by_choices`.\n      if (typeof item === 'string') {\n        try {\n          return JSON.parse(item);\n        }\n        catch (error) {\n          throw new Error(t('Found invalid orderby options'));\n        }\n      }\n      return item;\n    }) :\n    undefined\n  };\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(extractQueryFields, \"extractQueryFields\", \"/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/query/extractQueryFields.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["t","removeDuplicates","getColumnLabel","getMetricLabel","QueryMode","extractQueryFields","formData","aliases","queryFieldAliases","metric","metric_2","secondary_metric","x","y","size","all_columns","series","order_by_cols","query_mode","queryMode","restFormData","columns","metrics","orderby","Object","entries","forEach","key","value","normalizedKey","Aggregate","Raw","concat","filter","col","undefined","length","map","item","JSON","parse","error","Error","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/query/extractQueryFields.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '../translation';\nimport { removeDuplicates } from '../utils';\nimport getColumnLabel from './getColumnLabel';\nimport getMetricLabel from './getMetricLabel';\nimport {\n  QueryFields,\n  QueryFormColumn,\n  QueryFormMetric,\n  QueryFormOrderBy,\n  QueryFieldAliases,\n  FormDataResidual,\n  QueryMode,\n} from './types/QueryFormData';\n\n/**\n * Extra SQL query related fields from chart form data.\n * Consolidate field values into arrays.\n *\n * @param formData - the (partial) form data obtained from chart controls.\n * @param aliases - additional field aliases that maps arbitrary field names to\n *                  query field names.\n */\nexport default function extractQueryFields(\n  formData: FormDataResidual,\n  aliases?: QueryFieldAliases,\n): QueryFields {\n  const queryFieldAliases: QueryFieldAliases = {\n    /** These are predefined for backward compatibility */\n    metric: 'metrics',\n    metric_2: 'metrics',\n    secondary_metric: 'metrics',\n    x: 'metrics',\n    y: 'metrics',\n    size: 'metrics',\n    all_columns: 'columns',\n    series: 'groupby',\n    order_by_cols: 'orderby',\n    ...aliases,\n  };\n  const { query_mode: queryMode, ...restFormData } = formData;\n\n  let columns: QueryFormColumn[] = [];\n  let metrics: QueryFormMetric[] = [];\n  let orderby: QueryFormOrderBy[] = [];\n\n  Object.entries(restFormData).forEach(([key, value]) => {\n    // ignore `null` or `undefined` value\n    if (value == null) {\n      return;\n    }\n\n    let normalizedKey: string = queryFieldAliases[key] || key;\n\n    // ignore columns when (specifically) in aggregate mode.\n    // For charts that support both aggregate and raw records mode,\n    // we store both `groupby` and `columns` in `formData`, so users can\n    // switch between modes while retaining the selected options for each.\n    if (queryMode === QueryMode.Aggregate && normalizedKey === 'columns') {\n      return;\n    }\n\n    // for the same reason, ignore groupby and metrics in raw records mode\n    if (\n      queryMode === QueryMode.Raw &&\n      (normalizedKey === 'groupby' || normalizedKey === 'metrics')\n    ) {\n      return;\n    }\n\n    // groupby has been deprecated in QueryObject: https://github.com/apache/superset/pull/9366\n    if (normalizedKey === 'groupby') {\n      normalizedKey = 'columns';\n    }\n\n    if (normalizedKey === 'metrics') {\n      metrics = metrics.concat(value);\n    } else if (normalizedKey === 'columns') {\n      // currently the columns field only accept pre-defined columns (string shortcut)\n      columns = columns.concat(value);\n    } else if (normalizedKey === 'orderby') {\n      orderby = orderby.concat(value);\n    }\n  });\n\n  return {\n    columns: removeDuplicates(\n      columns.filter(col => col !== ''),\n      getColumnLabel,\n    ),\n    metrics:\n      queryMode === QueryMode.Raw\n        ? undefined\n        : removeDuplicates(metrics, getMetricLabel),\n    orderby:\n      orderby.length > 0\n        ? orderby.map(item => {\n            // value can be in the format of `['[\"col1\", true]', '[\"col2\", false]'],\n            // where the option strings come directly from `order_by_choices`.\n            if (typeof item === 'string') {\n              try {\n                return JSON.parse(item);\n              } catch (error) {\n                throw new Error(t('Found invalid orderby options'));\n              }\n            }\n            return item;\n          })\n        : undefined,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}