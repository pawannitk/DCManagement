{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport Vector3 from './vector3';\nimport { formatValue, equals, config } from '../lib/common';\nimport { degrees, radians, clamp } from '../lib/common';\nimport * as vec3 from 'gl-matrix/vec3';\nconst EPSILON = 0.000001;\nconst EARTH_RADIUS_METERS = 6371000;\nexport default class SphericalCoordinates {\n  constructor({\n    phi = 0,\n    theta = 0,\n    radius = 1,\n    bearing,\n    pitch,\n    altitude,\n    radiusScale = EARTH_RADIUS_METERS\n  } = {}) {\n    _defineProperty(this, \"phi\", void 0);\n\n    _defineProperty(this, \"theta\", void 0);\n\n    _defineProperty(this, \"radius\", void 0);\n\n    _defineProperty(this, \"radiusScale\", void 0);\n\n    this.phi = phi;\n    this.theta = theta;\n    this.radius = radius || altitude || 1;\n    this.radiusScale = radiusScale || 1;\n\n    if (bearing !== undefined) {\n      this.bearing = bearing;\n    }\n\n    if (pitch !== undefined) {\n      this.pitch = pitch;\n    }\n\n    this.check();\n  }\n\n  toString() {\n    return this.formatString(config);\n  }\n\n  formatString({\n    printTypes = false\n  }) {\n    const f = formatValue;\n    return \"\".concat(printTypes ? 'Spherical' : '', \"[rho:\").concat(f(this.radius), \",theta:\").concat(f(this.theta), \",phi:\").concat(f(this.phi), \"]\");\n  }\n\n  equals(other) {\n    return equals(this.radius, other.radius) && equals(this.theta, other.theta) && equals(this.phi, other.phi);\n  }\n\n  exactEquals(other) {\n    return this.radius === other.radius && this.theta === other.theta && this.phi === other.phi;\n  }\n\n  get bearing() {\n    return 180 - degrees(this.phi);\n  }\n\n  set bearing(v) {\n    this.phi = Math.PI - radians(v);\n  }\n\n  get pitch() {\n    return degrees(this.theta);\n  }\n\n  set pitch(v) {\n    this.theta = radians(v);\n  }\n\n  get longitude() {\n    return degrees(this.phi);\n  }\n\n  get latitude() {\n    return degrees(this.theta);\n  }\n\n  get lng() {\n    return degrees(this.phi);\n  }\n\n  get lat() {\n    return degrees(this.theta);\n  }\n\n  get z() {\n    return (this.radius - 1) * this.radiusScale;\n  }\n\n  set(radius, phi, theta) {\n    this.radius = radius;\n    this.phi = phi;\n    this.theta = theta;\n    return this.check();\n  }\n\n  clone() {\n    return new SphericalCoordinates().copy(this);\n  }\n\n  copy(other) {\n    this.radius = other.radius;\n    this.phi = other.phi;\n    this.theta = other.theta;\n    return this.check();\n  }\n\n  fromLngLatZ([lng, lat, z]) {\n    this.radius = 1 + z / this.radiusScale;\n    this.phi = radians(lat);\n    this.theta = radians(lng);\n    return this.check();\n  }\n\n  fromVector3(v) {\n    this.radius = vec3.length(v);\n\n    if (this.radius > 0) {\n      this.theta = Math.atan2(v[0], v[1]);\n      this.phi = Math.acos(clamp(v[2] / this.radius, -1, 1));\n    }\n\n    return this.check();\n  }\n\n  toVector3() {\n    return new Vector3(0, 0, this.radius).rotateX({\n      radians: this.theta\n    }).rotateZ({\n      radians: this.phi\n    });\n  }\n\n  makeSafe() {\n    this.phi = Math.max(EPSILON, Math.min(Math.PI - EPSILON, this.phi));\n    return this;\n  }\n\n  check() {\n    if (!Number.isFinite(this.phi) || !Number.isFinite(this.theta) || !(this.radius > 0)) {\n      throw new Error('SphericalCoordinates: some fields set to invalid numbers');\n    }\n\n    return this;\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(EPSILON, \"EPSILON\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@math.gl/core/dist/esm/classes/spherical-coordinates.js\");reactHotLoader.register(EARTH_RADIUS_METERS, \"EARTH_RADIUS_METERS\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@math.gl/core/dist/esm/classes/spherical-coordinates.js\");reactHotLoader.register(SphericalCoordinates, \"SphericalCoordinates\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@math.gl/core/dist/esm/classes/spherical-coordinates.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["Vector3","formatValue","equals","config","degrees","radians","clamp","vec3","EPSILON","EARTH_RADIUS_METERS","SphericalCoordinates","constructor","phi","theta","radius","bearing","pitch","altitude","radiusScale","_defineProperty","undefined","check","toString","formatString","printTypes","f","concat","other","exactEquals","v","Math","PI","longitude","latitude","lng","lat","z","set","clone","copy","fromLngLatZ","fromVector3","length","atan2","acos","toVector3","rotateX","rotateZ","makeSafe","max","min","Number","isFinite","Error","__reactstandin__regenerateByEval","key","code","eval","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["../../../src/classes/spherical-coordinates.ts"],"sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n// MIT License\n// Adaptation of THREE.js Spherical class, under MIT license\nimport Vector3 from './vector3';\nimport {formatValue, equals, config} from '../lib/common';\nimport {degrees, radians, clamp} from '../lib/common';\nimport * as vec3 from 'gl-matrix/vec3';\nimport {NumericArray} from '@math.gl/types';\n\ntype SphericalCoordinatesOptions = {\n  phi?: number;\n  theta?: number;\n  radius?: number;\n  bearing?: number;\n  pitch?: number;\n  altitude?: number;\n  radiusScale?: number;\n};\n\ntype FormatOptions = {\n  printTypes?: boolean;\n};\n\n// TODO - import epsilon\nconst EPSILON = 0.000001;\nconst EARTH_RADIUS_METERS = 6371000;\n\n/**\n * The poles (phi) are at the positive and negative y axis.\n * The equator starts at positive z.\n * @link https://en.wikipedia.org/wiki/Spherical_coordinate_system\n */\nexport default class SphericalCoordinates {\n  phi: number;\n  theta: number;\n  radius: number;\n  radiusScale: number;\n  // bearing: number;\n  // pitch: number;\n  // altitude: number;\n\n  // lnglatZ coordinates\n  // longitude: number;\n  // latitude: number;\n  // lng: number;\n  // lat: number;\n  // z: number;\n\n  /**\n   * Creates a new SphericalCoordinates object\n   * @param options\n   * @param [options.phi] =0 - rotation around X (latitude)\n   * @param [options.theta] =0 - rotation around Y (longitude)\n   * @param [options.radius] =1 - Distance from center\n   * @param [options.bearing]\n   * @param [options.pitch]\n   * @param [options.altitude]\n   * @param [options.radiusScale] =1\n   */\n  // eslint-disable-next-line complexity\n  constructor({\n    phi = 0,\n    theta = 0,\n    radius = 1,\n    bearing,\n    pitch,\n    altitude,\n    radiusScale = EARTH_RADIUS_METERS\n  }: SphericalCoordinatesOptions = {}) {\n    this.phi = phi;\n    this.theta = theta;\n    // TODO - silently accepts illegal 0\n    this.radius = radius || altitude || 1; // radial distance from center\n    this.radiusScale = radiusScale || 1; // Used by lngLatZ\n    if (bearing !== undefined) {\n      this.bearing = bearing; // up / down towards top and bottom pole\n    }\n    if (pitch !== undefined) {\n      this.pitch = pitch; // around the equator of the sphere\n    }\n    this.check();\n  }\n\n  toString(): string {\n    return this.formatString(config);\n  }\n\n  formatString({printTypes = false}: FormatOptions): string {\n    const f = formatValue;\n    return `${printTypes ? 'Spherical' : ''}\\\n[rho:${f(this.radius)},theta:${f(this.theta)},phi:${f(this.phi)}]`;\n  }\n\n  equals(other: SphericalCoordinates): boolean {\n    return (\n      equals(this.radius, other.radius) &&\n      equals(this.theta, other.theta) &&\n      equals(this.phi, other.phi)\n    );\n  }\n\n  exactEquals(other: SphericalCoordinates): boolean {\n    return this.radius === other.radius && this.theta === other.theta && this.phi === other.phi;\n  }\n\n  /* eslint-disable brace-style */\n  // Cartographic (bearing 0 north, pitch 0 look from above)\n  get bearing(): number {\n    return 180 - degrees(this.phi);\n  }\n\n  set bearing(v: number) {\n    this.phi = Math.PI - radians(v);\n  }\n\n  get pitch(): number {\n    return degrees(this.theta);\n  }\n\n  set pitch(v: number) {\n    this.theta = radians(v);\n  }\n\n  // get pitch() { return 90 - degrees(this.phi); }\n  // set pitch(v) { this.phi = radians(v) + Math.PI / 2; }\n  // get altitude() { return this.radius - 1; } // relative altitude\n  // lnglatZ coordinates\n  get longitude(): number {\n    return degrees(this.phi);\n  }\n\n  get latitude(): number {\n    return degrees(this.theta);\n  }\n\n  get lng(): number {\n    return degrees(this.phi);\n  }\n\n  get lat(): number {\n    return degrees(this.theta);\n  }\n\n  get z(): number {\n    return (this.radius - 1) * this.radiusScale;\n  }\n\n  /* eslint-enable brace-style */\n  set(radius: number, phi: number, theta: number): this {\n    this.radius = radius;\n    this.phi = phi;\n    this.theta = theta;\n    return this.check();\n  }\n\n  clone(): SphericalCoordinates {\n    return new SphericalCoordinates().copy(this);\n  }\n\n  copy(other: SphericalCoordinates): this {\n    this.radius = other.radius;\n    this.phi = other.phi;\n    this.theta = other.theta;\n    return this.check();\n  }\n\n  fromLngLatZ([lng, lat, z]: [number, number, number]): this {\n    this.radius = 1 + z / this.radiusScale;\n    this.phi = radians(lat);\n    this.theta = radians(lng);\n    return this.check();\n  }\n\n  fromVector3(v: Readonly<NumericArray>): this {\n    this.radius = vec3.length(v);\n    if (this.radius > 0) {\n      this.theta = Math.atan2(v[0], v[1]); // equator angle around y-up axis\n      this.phi = Math.acos(clamp(v[2] / this.radius, -1, 1)); // polar angle\n    }\n    return this.check();\n  }\n\n  toVector3(): Vector3 {\n    return new Vector3(0, 0, this.radius)\n      .rotateX({radians: this.theta})\n      .rotateZ({radians: this.phi});\n  }\n\n  // restrict phi to be betwee EPS and PI-EPS\n  makeSafe(): this {\n    this.phi = Math.max(EPSILON, Math.min(Math.PI - EPSILON, this.phi));\n    return this;\n  }\n\n  check(): this {\n    // this.makeSafe();\n    if (!Number.isFinite(this.phi) || !Number.isFinite(this.theta) || !(this.radius > 0)) {\n      throw new Error('SphericalCoordinates: some fields set to invalid numbers');\n    }\n    return this;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}