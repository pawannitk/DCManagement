{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/** Turns an array of string/number options into options for a select input */\nexport function formatSelectOptions(options) {\n  return options.map((opt) => Array.isArray(opt) ? opt : [opt, opt.toString()]);\n}\n/**\n * Outputs array of arrays\n *   >> formatSelectOptionsForRange(1, 5)\n *   >> [[1,'1'], [2,'2'], [3,'3'], [4,'4'], [5,'5']]\n */\nexport function formatSelectOptionsForRange(start, end) {\n  const options = [];\n  for (let i = start; i <= end; i += 1) {\n    options.push([i, i.toString()]);\n  }\n  return options;\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(formatSelectOptions, \"formatSelectOptions\", \"/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-chart-controls/src/utils/selectOptions.ts\");reactHotLoader.register(formatSelectOptionsForRange, \"formatSelectOptionsForRange\", \"/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-chart-controls/src/utils/selectOptions.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["formatSelectOptions","options","map","opt","Array","isArray","toString","formatSelectOptionsForRange","start","end","i","push","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-chart-controls/src/utils/selectOptions.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n// helper functions for select controls\n\nexport type Formattable = string | number;\n\nexport type Formatted = [Formattable, string];\n\n/** Turns an array of string/number options into options for a select input */\nexport function formatSelectOptions<T extends Formattable>(\n  options: (T | [T, string])[],\n): [T, string][] {\n  return options.map(opt => (Array.isArray(opt) ? opt : [opt, opt.toString()]));\n}\n\n/**\n * Outputs array of arrays\n *   >> formatSelectOptionsForRange(1, 5)\n *   >> [[1,'1'], [2,'2'], [3,'3'], [4,'4'], [5,'5']]\n */\nexport function formatSelectOptionsForRange(start: number, end: number) {\n  const options: Formatted[] = [];\n  for (let i = start; i <= end; i += 1) {\n    options.push([i, i.toString()]);\n  }\n  return options;\n}\n"],"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAyBA;AACA,OAAM,SAAUA,mBAAmBA,CACjCC,OAA4B;EAE5B,OAAOA,OAAO,CAACC,GAAG,CAAC,CAAAC,GAAG,KAAKC,KAAK,CAACC,OAAO,CAACF,GAAG,CAAC,GAAGA,GAAG,GAAG,CAACA,GAAG,EAAEA,GAAG,CAACG,QAAQ,EAAE,CAAE,CAAC;AAC/E;AAEA;;;;;AAKA,OAAM,SAAUC,2BAA2BA,CAACC,KAAa,EAAEC,GAAW;EACpE,MAAMR,OAAO,GAAgB,EAAE;EAC/B,KAAK,IAAIS,CAAC,GAAGF,KAAK,EAAEE,CAAC,IAAID,GAAG,EAAEC,CAAC,IAAI,CAAC,EAAE;IACpCT,OAAO,CAACU,IAAI,CAAC,CAACD,CAAC,EAAEA,CAAC,CAACJ,QAAQ,EAAE,CAAC,CAAC;;EAEjC,OAAOL,OAAO;AAChB,CAAC,mBAAAW,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAC,OAAA,GAAAC,SAAA,MAAAH,cAAA,WAAAA,cAAA,CAAAI,QAAA,CAjBehB,mBAAmB,kJAAAY,cAAA,CAAAI,QAAA,CAWnBT,2BAA2B,kLAAAU,WAAA,UAAAJ,oBAAA,mBAAAA,oBAAA,CAAAI,WAAA,GAAAF,SAAA,CAAAE,WAAA,IAAAA,WAAA,CAAAC,MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}