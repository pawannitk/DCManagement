{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ExtensibleFunction } from '../models';\nimport { isRequired } from '../utils';\nexport const PREVIEW_VALUE = 12345.432;\nclass NumberFormatter extends ExtensibleFunction {\n\n\n\n\n\n  constructor(config) {\n    super((value) => this.format(value));this.id = void 0;this.label = void 0;this.description = void 0;this.formatFunc = void 0;this.isInvalid = void 0;\n    const { id = isRequired('config.id'), label, description = '', formatFunc = isRequired('config.formatFunc'), isInvalid = false } = config;\n    this.id = id;\n    this.label = label != null ? label : id;\n    this.description = description;\n    this.formatFunc = formatFunc;\n    this.isInvalid = isInvalid;\n  }\n  format(value) {\n    if (value === null || value === undefined || Number.isNaN(value)) {\n      return `${value}`;\n    }\n    if (value === Number.POSITIVE_INFINITY) {\n      return '∞';\n    }\n    if (value === Number.NEGATIVE_INFINITY) {\n      return '-∞';\n    }\n    return this.formatFunc(value);\n  }\n  preview(value = PREVIEW_VALUE) {\n    return `${value} => ${this.format(value)}`;\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}const _default = NumberFormatter;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(PREVIEW_VALUE, \"PREVIEW_VALUE\", \"/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/number-format/NumberFormatter.ts\");reactHotLoader.register(NumberFormatter, \"NumberFormatter\", \"/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/number-format/NumberFormatter.ts\");reactHotLoader.register(_default, \"default\", \"/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/number-format/NumberFormatter.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["ExtensibleFunction","isRequired","PREVIEW_VALUE","NumberFormatter","constructor","config","value","format","id","label","description","formatFunc","isInvalid","undefined","Number","isNaN","POSITIVE_INFINITY","NEGATIVE_INFINITY","preview","__reactstandin__regenerateByEval","key","code","eval","_default","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/number-format/NumberFormatter.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ExtensibleFunction } from '../models';\nimport { isRequired } from '../utils';\nimport { NumberFormatFunction } from './types';\n\nexport const PREVIEW_VALUE = 12345.432;\n\nexport interface NumberFormatterConfig {\n  id: string;\n  label?: string;\n  description?: string;\n  formatFunc: NumberFormatFunction;\n  isInvalid?: boolean;\n}\n\n// Use type augmentation to indicate that\n// an instance of NumberFormatter is also a function\ninterface NumberFormatter {\n  (value: number | null | undefined): string;\n}\n\nclass NumberFormatter extends ExtensibleFunction {\n  id: string;\n\n  label: string;\n\n  description: string;\n\n  formatFunc: NumberFormatFunction;\n\n  isInvalid: boolean;\n\n  constructor(config: NumberFormatterConfig) {\n    super((value: number) => this.format(value));\n\n    const {\n      id = isRequired('config.id'),\n      label,\n      description = '',\n      formatFunc = isRequired('config.formatFunc'),\n      isInvalid = false,\n    } = config;\n    this.id = id;\n    this.label = label ?? id;\n    this.description = description;\n    this.formatFunc = formatFunc;\n    this.isInvalid = isInvalid;\n  }\n\n  format(value: number | null | undefined) {\n    if (value === null || value === undefined || Number.isNaN(value)) {\n      return `${value}`;\n    }\n    if (value === Number.POSITIVE_INFINITY) {\n      return '∞';\n    }\n    if (value === Number.NEGATIVE_INFINITY) {\n      return '-∞';\n    }\n\n    return this.formatFunc(value);\n  }\n\n  preview(value = PREVIEW_VALUE) {\n    return `${value} => ${this.format(value)}`;\n  }\n}\n\nexport default NumberFormatter;\n"],"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAkBA,SAASA,kBAAkB,QAAQ,WAAW;AAC9C,SAASC,UAAU,QAAQ,UAAU;AAGrC,OAAO,MAAMC,aAAa,GAAG,SAAS;AAgBtC,MAAMC,eAAgB,SAAQH,kBAAkB;;;;;;EAW9CI,YAAYC,MAA6B;IACvC,KAAK,CAAC,CAACC,KAAa,KAAK,IAAI,CAACC,MAAM,CAACD,KAAK,CAAC,CAAC,CAAC,KAX/CE,EAAE,eAEFC,KAAK,eAELC,WAAW,eAEXC,UAAU,eAEVC,SAAS;IAKP,MAAM,EACJJ,EAAE,GAAGP,UAAU,CAAC,WAAW,CAAC,EAC5BQ,KAAK,EACLC,WAAW,GAAG,EAAE,EAChBC,UAAU,GAAGV,UAAU,CAAC,mBAAmB,CAAC,EAC5CW,SAAS,GAAG,KAAK,EAClB,GAAGP,MAAM;IACV,IAAI,CAACG,EAAE,GAAGA,EAAE;IACZ,IAAI,CAACC,KAAK,GAAGA,KAAK,WAALA,KAAK,GAAID,EAAE;IACxB,IAAI,CAACE,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,SAAS,GAAGA,SAAS;EAC5B;EAEAL,MAAMA,CAACD,KAAgC;IACrC,IAAIA,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKO,SAAS,IAAIC,MAAM,CAACC,KAAK,CAACT,KAAK,CAAC,EAAE;MAChE,OAAO,GAAGA,KAAK,EAAE;;IAEnB,IAAIA,KAAK,KAAKQ,MAAM,CAACE,iBAAiB,EAAE;MACtC,OAAO,GAAG;;IAEZ,IAAIV,KAAK,KAAKQ,MAAM,CAACG,iBAAiB,EAAE;MACtC,OAAO,IAAI;;IAGb,OAAO,IAAI,CAACN,UAAU,CAACL,KAAK,CAAC;EAC/B;EAEAY,OAAOA,CAACZ,KAAK,GAAGJ,aAAa;IAC3B,OAAO,GAAGI,KAAK,OAAO,IAAI,CAACC,MAAM,CAACD,KAAK,CAAC,EAAE;EAC5C,CAAC;EAAAa,iCAAAC,GAAA,EAAAC,IAAA;IAAA,KAAAD,GAAA,IAAAE,IAAA,CAAAD,IAAA,G,CACF,MAAAE,QAAA,GAEcpB,eAAe,CAA9B,eAAAoB,QAAA,CAA+B,mBAAAC,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAC,OAAA,GAAAb,SAAA,MAAAW,cAAA,WAAAA,cAAA,CAAAG,QAAA,CA/DlBzB,aAAa,4IAAAsB,cAAA,CAAAG,QAAA,CAgBpBxB,eAAgB,8IAAAqB,cAAA,CAAAG,QAAA,CAAAJ,QAAA,8JAAAK,WAAA,UAAAH,oBAAA,mBAAAA,oBAAA,CAAAG,WAAA,GAAAf,SAAA,CAAAe,WAAA,IAAAA,WAAA,CAAAC,MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}