{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport LayerManager from './layer-manager';\nimport ViewManager from './view-manager';\nimport MapView from '../views/map-view';\nimport EffectManager from './effect-manager';\nimport DeckRenderer from './deck-renderer';\nimport DeckPicker from './deck-picker';\nimport Tooltip from './tooltip';\nimport log from '../utils/log';\nimport { deepEqual } from '../utils/deep-equal';\nimport typedArrayManager from '../utils/typed-array-manager';\nimport { VERSION } from './init';\nimport { getBrowser } from '@probe.gl/env';\nimport { AnimationLoop, createGLContext, instrumentGLContext, setParameters, Timeline, lumaStats } from '@luma.gl/core';\nimport { Stats } from '@probe.gl/stats';\nimport { EventManager } from 'mjolnir.js';\nimport assert from '../utils/assert';\nimport { EVENTS } from './constants';\n\nfunction noop() {}\n\nconst getCursor = ({\n  isDragging\n}) => isDragging ? 'grabbing' : 'grab';\n\nconst defaultProps = {\n  id: '',\n  width: '100%',\n  height: '100%',\n  style: null,\n  viewState: null,\n  initialViewState: null,\n  pickingRadius: 0,\n  layerFilter: null,\n  glOptions: {},\n  parameters: {},\n  parent: null,\n  gl: null,\n  canvas: null,\n  layers: [],\n  effects: [],\n  views: null,\n  controller: null,\n  useDevicePixels: true,\n  touchAction: 'none',\n  eventRecognizerOptions: {},\n  _framebuffer: null,\n  _animate: false,\n  _pickable: true,\n  _typedArrayManagerProps: {},\n  _customRender: null,\n  onWebGLInitialized: noop,\n  onResize: noop,\n  onViewStateChange: noop,\n  onInteractionStateChange: noop,\n  onBeforeRender: noop,\n  onAfterRender: noop,\n  onLoad: noop,\n  onError: (error) => log.error(error.message, error.cause)(),\n  onHover: null,\n  onClick: null,\n  onDragStart: null,\n  onDrag: null,\n  onDragEnd: null,\n  _onMetrics: null,\n  getCursor,\n  getTooltip: null,\n  debug: false,\n  drawPickingColors: false\n};\nexport default class Deck {\n  constructor(props) {\n    _defineProperty(this, \"props\", void 0);\n\n    _defineProperty(this, \"width\", 0);\n\n    _defineProperty(this, \"height\", 0);\n\n    _defineProperty(this, \"userData\", {});\n\n    _defineProperty(this, \"canvas\", null);\n\n    _defineProperty(this, \"viewManager\", null);\n\n    _defineProperty(this, \"layerManager\", null);\n\n    _defineProperty(this, \"effectManager\", null);\n\n    _defineProperty(this, \"deckRenderer\", null);\n\n    _defineProperty(this, \"deckPicker\", null);\n\n    _defineProperty(this, \"eventManager\", null);\n\n    _defineProperty(this, \"tooltip\", null);\n\n    _defineProperty(this, \"metrics\", void 0);\n\n    _defineProperty(this, \"animationLoop\", void 0);\n\n    _defineProperty(this, \"stats\", void 0);\n\n    _defineProperty(this, \"viewState\", void 0);\n\n    _defineProperty(this, \"cursorState\", void 0);\n\n    _defineProperty(this, \"_needsRedraw\", void 0);\n\n    _defineProperty(this, \"_pickRequest\", void 0);\n\n    _defineProperty(this, \"_lastPointerDownInfo\", null);\n\n    _defineProperty(this, \"_metricsCounter\", void 0);\n\n    _defineProperty(this, \"_onPointerMove\", (event) => {\n      const {\n        _pickRequest\n      } = this;\n\n      if (event.type === 'pointerleave') {\n        _pickRequest.x = -1;\n        _pickRequest.y = -1;\n        _pickRequest.radius = 0;\n      } else if (event.leftButton || event.rightButton) {\n        return;\n      } else {\n        const pos = event.offsetCenter;\n\n        if (!pos) {\n          return;\n        }\n\n        _pickRequest.x = pos.x;\n        _pickRequest.y = pos.y;\n        _pickRequest.radius = this.props.pickingRadius;\n      }\n\n      if (this.layerManager) {\n        this.layerManager.context.mousePosition = {\n          x: _pickRequest.x,\n          y: _pickRequest.y\n        };\n      }\n\n      _pickRequest.event = event;\n    });\n\n    _defineProperty(this, \"_onEvent\", (event) => {\n      const eventOptions = EVENTS[event.type];\n      const pos = event.offsetCenter;\n\n      if (!eventOptions || !pos || !this.layerManager) {\n        return;\n      }\n\n      const layers = this.layerManager.getLayers();\n      const info = this.deckPicker.getLastPickedObject({\n        x: pos.x,\n        y: pos.y,\n        layers,\n        viewports: this.getViewports(pos)\n      }, this._lastPointerDownInfo);\n      const {\n        layer\n      } = info;\n      const layerHandler = layer && (layer[eventOptions.handler] || layer.props[eventOptions.handler]);\n      const rootHandler = this.props[eventOptions.handler];\n      let handled = false;\n\n      if (layerHandler) {\n        handled = layerHandler.call(layer, info, event);\n      }\n\n      if (!handled && rootHandler) {\n        rootHandler(info, event);\n      }\n    });\n\n    _defineProperty(this, \"_onPointerDown\", (event) => {\n      const pos = event.offsetCenter;\n\n      const pickedInfo = this._pick('pickObject', 'pickObject Time', {\n        x: pos.x,\n        y: pos.y,\n        radius: this.props.pickingRadius\n      });\n\n      this._lastPointerDownInfo = pickedInfo.result[0] || pickedInfo.emptyInfo;\n    });\n\n    this.props = { ...defaultProps,\n      ...props\n    };\n    props = this.props;\n    this._needsRedraw = 'Initial render';\n    this._pickRequest = {\n      mode: 'hover',\n      x: -1,\n      y: -1,\n      radius: 0,\n      event: null\n    };\n    this.cursorState = {\n      isHovering: false,\n      isDragging: false\n    };\n\n    if (props.viewState && props.initialViewState) {\n      log.warn('View state tracking is disabled. Use either `initialViewState` for auto update or `viewState` for manual update.')();\n    }\n\n    if (getBrowser() === 'IE') {\n      log.warn('IE 11 is not supported')();\n    }\n\n    this.viewState = props.initialViewState;\n\n    if (!props.gl) {\n      if (typeof document !== 'undefined') {\n        this.canvas = this._createCanvas(props);\n      }\n    }\n\n    this.animationLoop = this._createAnimationLoop(props);\n    this.stats = new Stats({\n      id: 'deck.gl'\n    });\n    this.metrics = {\n      fps: 0,\n      setPropsTime: 0,\n      updateAttributesTime: 0,\n      framesRedrawn: 0,\n      pickTime: 0,\n      pickCount: 0,\n      gpuTime: 0,\n      gpuTimePerFrame: 0,\n      cpuTime: 0,\n      cpuTimePerFrame: 0,\n      bufferMemory: 0,\n      textureMemory: 0,\n      renderbufferMemory: 0,\n      gpuMemory: 0\n    };\n    this._metricsCounter = 0;\n    this.setProps(props);\n\n    if (props._typedArrayManagerProps) {\n      typedArrayManager.setOptions(props._typedArrayManagerProps);\n    }\n\n    this.animationLoop.start();\n  }\n\n  finalize() {\n    var _this$animationLoop, _this$layerManager, _this$viewManager, _this$effectManager, _this$deckRenderer, _this$deckPicker, _this$eventManager, _this$tooltip;\n\n    (_this$animationLoop = this.animationLoop) === null || _this$animationLoop === void 0 ? void 0 : _this$animationLoop.stop();\n    this.animationLoop = null;\n    this._lastPointerDownInfo = null;\n    (_this$layerManager = this.layerManager) === null || _this$layerManager === void 0 ? void 0 : _this$layerManager.finalize();\n    this.layerManager = null;\n    (_this$viewManager = this.viewManager) === null || _this$viewManager === void 0 ? void 0 : _this$viewManager.finalize();\n    this.viewManager = null;\n    (_this$effectManager = this.effectManager) === null || _this$effectManager === void 0 ? void 0 : _this$effectManager.finalize();\n    this.effectManager = null;\n    (_this$deckRenderer = this.deckRenderer) === null || _this$deckRenderer === void 0 ? void 0 : _this$deckRenderer.finalize();\n    this.deckRenderer = null;\n    (_this$deckPicker = this.deckPicker) === null || _this$deckPicker === void 0 ? void 0 : _this$deckPicker.finalize();\n    this.deckPicker = null;\n    (_this$eventManager = this.eventManager) === null || _this$eventManager === void 0 ? void 0 : _this$eventManager.destroy();\n    this.eventManager = null;\n    (_this$tooltip = this.tooltip) === null || _this$tooltip === void 0 ? void 0 : _this$tooltip.remove();\n    this.tooltip = null;\n\n    if (!this.props.canvas && !this.props.gl && this.canvas) {\n      var _this$canvas$parentEl;\n\n      (_this$canvas$parentEl = this.canvas.parentElement) === null || _this$canvas$parentEl === void 0 ? void 0 : _this$canvas$parentEl.removeChild(this.canvas);\n      this.canvas = null;\n    }\n  }\n\n  setProps(props) {\n    this.stats.get('setProps Time').timeStart();\n\n    if ('onLayerHover' in props) {\n      log.removed('onLayerHover', 'onHover')();\n    }\n\n    if ('onLayerClick' in props) {\n      log.removed('onLayerClick', 'onClick')();\n    }\n\n    if (props.initialViewState && !deepEqual(this.props.initialViewState, props.initialViewState, 3)) {\n      this.viewState = props.initialViewState;\n    }\n\n    Object.assign(this.props, props);\n\n    this._setCanvasSize(this.props);\n\n    const resolvedProps = Object.create(this.props);\n    Object.assign(resolvedProps, {\n      views: this._getViews(),\n      width: this.width,\n      height: this.height,\n      viewState: this._getViewState()\n    });\n    this.animationLoop.setProps(resolvedProps);\n\n    if (this.layerManager) {\n      this.viewManager.setProps(resolvedProps);\n      this.layerManager.activateViewport(this.getViewports()[0]);\n      this.layerManager.setProps(resolvedProps);\n      this.effectManager.setProps(resolvedProps);\n      this.deckRenderer.setProps(resolvedProps);\n      this.deckPicker.setProps(resolvedProps);\n    }\n\n    this.stats.get('setProps Time').timeEnd();\n  }\n\n  needsRedraw(opts = {\n    clearRedrawFlags: false\n  }) {\n    if (!this.layerManager) {\n      return false;\n    }\n\n    if (this.props._animate) {\n      return 'Deck._animate';\n    }\n\n    let redraw = this._needsRedraw;\n\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n\n    const viewManagerNeedsRedraw = this.viewManager.needsRedraw(opts);\n    const layerManagerNeedsRedraw = this.layerManager.needsRedraw(opts);\n    const effectManagerNeedsRedraw = this.effectManager.needsRedraw(opts);\n    const deckRendererNeedsRedraw = this.deckRenderer.needsRedraw(opts);\n    redraw = redraw || viewManagerNeedsRedraw || layerManagerNeedsRedraw || effectManagerNeedsRedraw || deckRendererNeedsRedraw;\n    return redraw;\n  }\n\n  redraw(reason) {\n    if (!this.layerManager) {\n      return;\n    }\n\n    let redrawReason = this.needsRedraw({\n      clearRedrawFlags: true\n    });\n    redrawReason = reason || redrawReason;\n\n    if (!redrawReason) {\n      return;\n    }\n\n    this.stats.get('Redraw Count').incrementCount();\n\n    if (this.props._customRender) {\n      this.props._customRender(redrawReason);\n    } else {\n      this._drawLayers(redrawReason);\n    }\n  }\n\n  get isInitialized() {\n    return this.viewManager !== null;\n  }\n\n  getViews() {\n    assert(this.viewManager);\n    return this.viewManager.views;\n  }\n\n  getViewports(rect) {\n    assert(this.viewManager);\n    return this.viewManager.getViewports(rect);\n  }\n\n  pickObject(opts) {\n    const infos = this._pick('pickObject', 'pickObject Time', opts).result;\n\n    return infos.length ? infos[0] : null;\n  }\n\n  pickMultipleObjects(opts) {\n    opts.depth = opts.depth || 10;\n    return this._pick('pickObject', 'pickMultipleObjects Time', opts).result;\n  }\n\n  pickObjects(opts) {\n    return this._pick('pickObjects', 'pickObjects Time', opts);\n  }\n\n  _addResources(resources, forceUpdate = false) {\n    for (const id in resources) {\n      this.layerManager.resourceManager.add({\n        resourceId: id,\n        data: resources[id],\n        forceUpdate\n      });\n    }\n  }\n\n  _removeResources(resourceIds) {\n    for (const id of resourceIds) {\n      this.layerManager.resourceManager.remove(id);\n    }\n  }\n\n  _addDefaultEffect(effect) {\n    this.effectManager.addDefaultEffect(effect);\n  }\n\n  _pick(method, statKey, opts) {\n    assert(this.deckPicker);\n    const {\n      stats\n    } = this;\n    stats.get('Pick Count').incrementCount();\n    stats.get(statKey).timeStart();\n    const infos = this.deckPicker[method]({\n      layers: this.layerManager.getLayers(opts),\n      views: this.viewManager.getViews(),\n      viewports: this.getViewports(opts),\n      onViewportActive: this.layerManager.activateViewport,\n      effects: this.effectManager.getEffects(),\n      ...opts\n    });\n    stats.get(statKey).timeEnd();\n    return infos;\n  }\n\n  _createCanvas(props) {\n    let canvas = props.canvas;\n\n    if (typeof canvas === 'string') {\n      canvas = document.getElementById(canvas);\n      assert(canvas);\n    }\n\n    if (!canvas) {\n      canvas = document.createElement('canvas');\n      canvas.id = props.id || 'deckgl-overlay';\n      const parent = props.parent || document.body;\n      parent.appendChild(canvas);\n    }\n\n    Object.assign(canvas.style, props.style);\n    return canvas;\n  }\n\n  _setCanvasSize(props) {\n    if (!this.canvas) {\n      return;\n    }\n\n    const {\n      width,\n      height\n    } = props;\n\n    if (width || width === 0) {\n      const cssWidth = Number.isFinite(width) ? \"\".concat(width, \"px\") : width;\n      this.canvas.style.width = cssWidth;\n    }\n\n    if (height || height === 0) {\n      var _props$style;\n\n      const cssHeight = Number.isFinite(height) ? \"\".concat(height, \"px\") : height;\n      this.canvas.style.position = ((_props$style = props.style) === null || _props$style === void 0 ? void 0 : _props$style.position) || 'absolute';\n      this.canvas.style.height = cssHeight;\n    }\n  }\n\n  _updateCanvasSize() {\n    var _canvas$clientWidth, _canvas$clientHeight;\n\n    const {\n      canvas\n    } = this;\n\n    if (!canvas) {\n      return;\n    }\n\n    const newWidth = (_canvas$clientWidth = canvas.clientWidth) !== null && _canvas$clientWidth !== void 0 ? _canvas$clientWidth : canvas.width;\n    const newHeight = (_canvas$clientHeight = canvas.clientHeight) !== null && _canvas$clientHeight !== void 0 ? _canvas$clientHeight : canvas.height;\n\n    if (newWidth !== this.width || newHeight !== this.height) {\n      var _this$viewManager2, _this$layerManager2;\n\n      this.width = newWidth;\n      this.height = newHeight;\n      (_this$viewManager2 = this.viewManager) === null || _this$viewManager2 === void 0 ? void 0 : _this$viewManager2.setProps({\n        width: newWidth,\n        height: newHeight\n      });\n      (_this$layerManager2 = this.layerManager) === null || _this$layerManager2 === void 0 ? void 0 : _this$layerManager2.activateViewport(this.getViewports()[0]);\n      this.props.onResize({\n        width: newWidth,\n        height: newHeight\n      });\n    }\n  }\n\n  _createAnimationLoop(props) {\n    const {\n      width,\n      height,\n      gl,\n      glOptions,\n      debug,\n      onError,\n      onBeforeRender,\n      onAfterRender,\n      useDevicePixels\n    } = props;\n    return new AnimationLoop({\n      width,\n      height,\n      useDevicePixels,\n      autoResizeDrawingBuffer: !gl,\n      autoResizeViewport: false,\n      gl,\n      onCreateContext: (opts) => createGLContext({ ...glOptions,\n        ...opts,\n        canvas: this.canvas,\n        debug,\n        onContextLost: () => this._onContextLost()\n      }),\n      onInitialize: (context) => this._setGLContext(context.gl),\n      onRender: this._onRenderFrame.bind(this),\n      onBeforeRender,\n      onAfterRender,\n      onError\n    });\n  }\n\n  _getViewState() {\n    return this.props.viewState || this.viewState;\n  }\n\n  _getViews() {\n    let views = this.props.views || [new MapView({\n      id: 'default-view'\n    })];\n    views = Array.isArray(views) ? views : [views];\n\n    if (views.length && this.props.controller) {\n      views[0].props.controller = this.props.controller;\n    }\n\n    return views;\n  }\n\n  _onContextLost() {\n    const {\n      onError\n    } = this.props;\n\n    if (this.animationLoop && onError) {\n      onError(new Error('WebGL context is lost'));\n    }\n  }\n\n  _pickAndCallback() {\n    const {\n      _pickRequest\n    } = this;\n\n    if (_pickRequest.event) {\n      const {\n        result,\n        emptyInfo\n      } = this._pick('pickObject', 'pickObject Time', _pickRequest);\n\n      this.cursorState.isHovering = result.length > 0;\n      let pickedInfo = emptyInfo;\n      let handled = false;\n\n      for (const info of result) {\n        var _info$layer;\n\n        pickedInfo = info;\n        handled = ((_info$layer = info.layer) === null || _info$layer === void 0 ? void 0 : _info$layer.onHover(info, _pickRequest.event)) || handled;\n      }\n\n      if (!handled && this.props.onHover) {\n        this.props.onHover(pickedInfo, _pickRequest.event);\n      }\n\n      if (this.props.getTooltip && this.tooltip) {\n        const displayInfo = this.props.getTooltip(pickedInfo);\n        this.tooltip.setTooltip(displayInfo, pickedInfo.x, pickedInfo.y);\n      }\n\n      _pickRequest.event = null;\n    }\n  }\n\n  _updateCursor() {\n    const container = this.props.parent || this.canvas;\n\n    if (container) {\n      container.style.cursor = this.props.getCursor(this.cursorState);\n    }\n  }\n\n  _setGLContext(gl) {\n    if (this.layerManager) {\n      return;\n    }\n\n    if (!this.canvas) {\n      this.canvas = gl.canvas;\n      instrumentGLContext(gl, {\n        enable: true,\n        copyState: true\n      });\n    }\n\n    this.tooltip = new Tooltip(this.canvas);\n    setParameters(gl, {\n      blend: true,\n      blendFunc: [770, 771, 1, 771],\n      polygonOffsetFill: true,\n      depthTest: true,\n      depthFunc: 515\n    });\n    this.props.onWebGLInitialized(gl);\n    const timeline = new Timeline();\n    timeline.play();\n    this.animationLoop.attachTimeline(timeline);\n    this.eventManager = new EventManager(this.props.parent || gl.canvas, {\n      touchAction: this.props.touchAction,\n      recognizerOptions: this.props.eventRecognizerOptions,\n      events: {\n        pointerdown: this._onPointerDown,\n        pointermove: this._onPointerMove,\n        pointerleave: this._onPointerMove\n      }\n    });\n\n    for (const eventType in EVENTS) {\n      this.eventManager.on(eventType, this._onEvent);\n    }\n\n    this.viewManager = new ViewManager({\n      timeline,\n      eventManager: this.eventManager,\n      onViewStateChange: this._onViewStateChange.bind(this),\n      onInteractionStateChange: this._onInteractionStateChange.bind(this),\n      views: this._getViews(),\n      viewState: this._getViewState(),\n      width: this.width,\n      height: this.height\n    });\n    const viewport = this.viewManager.getViewports()[0];\n    this.layerManager = new LayerManager(gl, {\n      deck: this,\n      stats: this.stats,\n      viewport,\n      timeline\n    });\n    this.effectManager = new EffectManager();\n    this.deckRenderer = new DeckRenderer(gl);\n    this.deckPicker = new DeckPicker(gl);\n    this.setProps(this.props);\n\n    this._updateCanvasSize();\n\n    this.props.onLoad();\n  }\n\n  _drawLayers(redrawReason, renderOptions) {\n    const {\n      gl\n    } = this.layerManager.context;\n    setParameters(gl, this.props.parameters);\n    this.props.onBeforeRender({\n      gl\n    });\n    this.deckRenderer.renderLayers({\n      target: this.props._framebuffer,\n      layers: this.layerManager.getLayers(),\n      viewports: this.viewManager.getViewports(),\n      onViewportActive: this.layerManager.activateViewport,\n      views: this.viewManager.getViews(),\n      pass: 'screen',\n      effects: this.effectManager.getEffects(),\n      ...renderOptions\n    });\n    this.props.onAfterRender({\n      gl\n    });\n  }\n\n  _onRenderFrame(animationProps) {\n    this._getFrameStats();\n\n    if (this._metricsCounter++ % 60 === 0) {\n      this._getMetrics();\n\n      this.stats.reset();\n      log.table(4, this.metrics)();\n\n      if (this.props._onMetrics) {\n        this.props._onMetrics(this.metrics);\n      }\n    }\n\n    this._updateCanvasSize();\n\n    this._updateCursor();\n\n    if (this.tooltip.isVisible && this.viewManager.needsRedraw()) {\n      this.tooltip.setTooltip(null);\n    }\n\n    this.layerManager.updateLayers();\n\n    this._pickAndCallback();\n\n    this.redraw();\n\n    if (this.viewManager) {\n      this.viewManager.updateViewStates();\n    }\n  }\n\n  _onViewStateChange(params) {\n    const viewState = this.props.onViewStateChange(params) || params.viewState;\n\n    if (this.viewState) {\n      this.viewState = { ...this.viewState,\n        [params.viewId]: viewState\n      };\n\n      if (!this.props.viewState) {\n        if (this.viewManager) {\n          this.viewManager.setProps({\n            viewState: this.viewState\n          });\n        }\n      }\n    }\n  }\n\n  _onInteractionStateChange(interactionState) {\n    this.cursorState.isDragging = interactionState.isDragging || false;\n    this.props.onInteractionStateChange(interactionState);\n  }\n\n  _getFrameStats() {\n    const {\n      stats\n    } = this;\n    stats.get('frameRate').timeEnd();\n    stats.get('frameRate').timeStart();\n    const animationLoopStats = this.animationLoop.stats;\n    stats.get('GPU Time').addTime(animationLoopStats.get('GPU Time').lastTiming);\n    stats.get('CPU Time').addTime(animationLoopStats.get('CPU Time').lastTiming);\n  }\n\n  _getMetrics() {\n    const {\n      metrics,\n      stats\n    } = this;\n    metrics.fps = stats.get('frameRate').getHz();\n    metrics.setPropsTime = stats.get('setProps Time').time;\n    metrics.updateAttributesTime = stats.get('Update Attributes').time;\n    metrics.framesRedrawn = stats.get('Redraw Count').count;\n    metrics.pickTime = stats.get('pickObject Time').time + stats.get('pickMultipleObjects Time').time + stats.get('pickObjects Time').time;\n    metrics.pickCount = stats.get('Pick Count').count;\n    metrics.gpuTime = stats.get('GPU Time').time;\n    metrics.cpuTime = stats.get('CPU Time').time;\n    metrics.gpuTimePerFrame = stats.get('GPU Time').getAverageTime();\n    metrics.cpuTimePerFrame = stats.get('CPU Time').getAverageTime();\n    const memoryStats = lumaStats.get('Memory Usage');\n    metrics.bufferMemory = memoryStats.get('Buffer Memory').count;\n    metrics.textureMemory = memoryStats.get('Texture Memory').count;\n    metrics.renderbufferMemory = memoryStats.get('Renderbuffer Memory').count;\n    metrics.gpuMemory = memoryStats.get('GPU Memory').count;\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\n\n_defineProperty(Deck, \"defaultProps\", defaultProps);\n\n_defineProperty(Deck, \"VERSION\", VERSION);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(noop, \"noop\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/core/dist/esm/lib/deck.js\");reactHotLoader.register(getCursor, \"getCursor\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/core/dist/esm/lib/deck.js\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/core/dist/esm/lib/deck.js\");reactHotLoader.register(Deck, \"Deck\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/core/dist/esm/lib/deck.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["LayerManager","ViewManager","MapView","EffectManager","DeckRenderer","DeckPicker","Tooltip","log","deepEqual","typedArrayManager","VERSION","getBrowser","AnimationLoop","createGLContext","instrumentGLContext","setParameters","Timeline","lumaStats","Stats","EventManager","assert","EVENTS","noop","getCursor","isDragging","defaultProps","id","width","height","style","viewState","initialViewState","pickingRadius","layerFilter","glOptions","parameters","parent","gl","canvas","layers","effects","views","controller","useDevicePixels","touchAction","eventRecognizerOptions","_framebuffer","_animate","_pickable","_typedArrayManagerProps","_customRender","onWebGLInitialized","onResize","onViewStateChange","onInteractionStateChange","onBeforeRender","onAfterRender","onLoad","onError","error","message","cause","onHover","onClick","onDragStart","onDrag","onDragEnd","_onMetrics","getTooltip","debug","drawPickingColors","Deck","constructor","props","_defineProperty","event","_pickRequest","type","x","y","radius","leftButton","rightButton","pos","offsetCenter","layerManager","context","mousePosition","eventOptions","getLayers","info","deckPicker","getLastPickedObject","viewports","getViewports","_lastPointerDownInfo","layer","layerHandler","handler","rootHandler","handled","call","pickedInfo","_pick","result","emptyInfo","_needsRedraw","mode","cursorState","isHovering","warn","document","_createCanvas","animationLoop","_createAnimationLoop","stats","metrics","fps","setPropsTime","updateAttributesTime","framesRedrawn","pickTime","pickCount","gpuTime","gpuTimePerFrame","cpuTime","cpuTimePerFrame","bufferMemory","textureMemory","renderbufferMemory","gpuMemory","_metricsCounter","setProps","setOptions","start","finalize","_this$animationLoop","_this$layerManager","_this$viewManager","_this$effectManager","_this$deckRenderer","_this$deckPicker","_this$eventManager","_this$tooltip","stop","viewManager","effectManager","deckRenderer","eventManager","destroy","tooltip","remove","_this$canvas$parentEl","parentElement","removeChild","get","timeStart","removed","Object","assign","_setCanvasSize","resolvedProps","create","_getViews","_getViewState","activateViewport","timeEnd","needsRedraw","opts","clearRedrawFlags","redraw","viewManagerNeedsRedraw","layerManagerNeedsRedraw","effectManagerNeedsRedraw","deckRendererNeedsRedraw","reason","redrawReason","incrementCount","_drawLayers","isInitialized","getViews","rect","pickObject","infos","length","pickMultipleObjects","depth","pickObjects","_addResources","resources","forceUpdate","resourceManager","add","resourceId","data","_removeResources","resourceIds","_addDefaultEffect","effect","addDefaultEffect","method","statKey","onViewportActive","getEffects","getElementById","createElement","body","appendChild","cssWidth","Number","isFinite","concat","_props$style","cssHeight","position","_updateCanvasSize","_canvas$clientWidth","_canvas$clientHeight","newWidth","clientWidth","newHeight","clientHeight","_this$viewManager2","_this$layerManager2","autoResizeDrawingBuffer","autoResizeViewport","onCreateContext","onContextLost","_onContextLost","onInitialize","_setGLContext","onRender","_onRenderFrame","bind","Array","isArray","Error","_pickAndCallback","_info$layer","displayInfo","setTooltip","_updateCursor","container","cursor","enable","copyState","blend","blendFunc","polygonOffsetFill","depthTest","depthFunc","timeline","play","attachTimeline","recognizerOptions","events","pointerdown","_onPointerDown","pointermove","_onPointerMove","pointerleave","eventType","on","_onEvent","_onViewStateChange","_onInteractionStateChange","viewport","deck","renderOptions","renderLayers","target","pass","animationProps","_getFrameStats","_getMetrics","reset","table","isVisible","updateLayers","updateViewStates","params","viewId","interactionState","animationLoopStats","addTime","lastTiming","getHz","time","count","getAverageTime","memoryStats","__reactstandin__regenerateByEval","key","code","eval","reactHotLoader","register","leaveModule","reactHotLoaderGlobal","undefined","module"],"sources":["../../../src/lib/deck.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport LayerManager from './layer-manager';\nimport ViewManager from './view-manager';\nimport MapView from '../views/map-view';\nimport EffectManager from './effect-manager';\nimport DeckRenderer from './deck-renderer';\nimport DeckPicker from './deck-picker';\nimport Tooltip from './tooltip';\nimport log from '../utils/log';\nimport {deepEqual} from '../utils/deep-equal';\nimport typedArrayManager from '../utils/typed-array-manager';\nimport {VERSION} from './init';\n\nimport {getBrowser} from '@probe.gl/env';\nimport GL from '@luma.gl/constants';\nimport {\n  AnimationLoop,\n  createGLContext,\n  instrumentGLContext,\n  setParameters,\n  Timeline,\n  lumaStats\n} from '@luma.gl/core';\nimport {Stats} from '@probe.gl/stats';\nimport {EventManager} from 'mjolnir.js';\n\nimport assert from '../utils/assert';\nimport {EVENTS} from './constants';\n\nimport type {Effect} from './effect';\nimport type {FilterContext} from '../passes/layers-pass';\nimport type Layer from './layer';\nimport type View from '../views/view';\nimport type Viewport from '../viewports/viewport';\nimport type {RecognizerOptions, MjolnirGestureEvent, MjolnirPointerEvent} from 'mjolnir.js';\nimport type {Framebuffer} from '@luma.gl/core';\nimport type {TypedArrayManagerOptions} from '../utils/typed-array-manager';\nimport type {ViewStateChangeParameters, InteractionState} from '../controllers/controller';\nimport type {PickingInfo} from './picking/pick-info';\nimport type {PickByPointOptions, PickByRectOptions} from './deck-picker';\nimport type {LayersList} from './layer-manager';\nimport type {TooltipContent} from './tooltip';\n\n/* global document */\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction noop() {}\n\nconst getCursor = ({isDragging}) => (isDragging ? 'grabbing' : 'grab');\n\nexport type DeckMetrics = {\n  fps: number;\n  setPropsTime: number;\n  updateAttributesTime: number;\n  framesRedrawn: number;\n  pickTime: number;\n  pickCount: number;\n  gpuTime: number;\n  gpuTimePerFrame: number;\n  cpuTime: number;\n  cpuTimePerFrame: number;\n  bufferMemory: number;\n  textureMemory: number;\n  renderbufferMemory: number;\n  gpuMemory: number;\n};\n\ntype CursorState = {\n  /** Whether the cursor is over a pickable object */\n  isHovering: boolean;\n  /** Whether the cursor is down */\n  isDragging: boolean;\n};\n\nexport type DeckProps = {\n  /** Id of this Deck instance */\n  id?: string;\n  /** Width of the canvas, a number in pixels or a valid CSS string.\n   * @default `'100%'`\n   */\n  width?: string | number | null;\n  /** Height of the canvas, a number in pixels or a valid CSS string.\n   * @default `'100%'`\n   */\n  height?: string | number | null;\n  /** Additional CSS styles for the canvas. */\n  style?: Partial<CSSStyleDeclaration> | null;\n\n  /** Controls the resolution of drawing buffer used for rendering.\n   * @default `true` (use browser devicePixelRatio)\n   */\n  useDevicePixels?: boolean | number;\n  /** Extra pixels around the pointer to include while picking.\n   * @default `0`\n   */\n  pickingRadius?: number;\n\n  /** WebGL parameters to be set before each frame is rendered.\n   * @see https://github.com/visgl/luma.gl/blob/8.5-release/modules/gltools/docs/api-reference/parameter-setting.md#parameters\n   */\n  parameters?: any;\n  /** If supplied, will be called before a layer is drawn to determine whether it should be rendered. */\n  layerFilter?: ((context: FilterContext) => boolean) | null;\n\n  /** The container to append the auto-created canvas to.\n   * @default `document.body`\n   */\n  parent?: HTMLDivElement | null;\n  /** The canvas to render into.\n   * Can be either a HTMLCanvasElement or the element id.\n   * Will be auto-created if not supplied.\n   */\n  canvas?: HTMLCanvasElement | string | null;\n  /** WebGL context. Will be auto-created if not supplied. */\n  gl?: WebGLRenderingContext | null;\n  /** Additional options used when creating the WebGL context. */\n  glOptions?: WebGLContextAttributes;\n\n  /**\n   * The array of Layer instances to be rendered.\n   * Nested arrays are accepted, as well as falsy values (`null`, `false`, `undefined`)\n   */\n  layers?: LayersList;\n  /** The array of effects to be rendered. A lighting effect will be added if an empty array is supplied. */\n  effects?: Effect[];\n  /** A single View instance, or an array of `View` instances.\n   * @default `new MapView()`\n   */\n  views?: View | View[] | null;\n  /** Options for viewport interactivity, e.g. pan, rotate and zoom with mouse, touch and keyboard.\n   * This is a shorthand for defining interaction with the `views` prop if you are using the default view (i.e. a single `MapView`)\n   */\n  controller?: View['props']['controller'];\n  /**\n   * An object that describes the view state for each view in the `views` prop.\n   * Use if the camera state should be managed external to the `Deck` instance.\n   */\n  viewState?: any;\n  /**\n   * If provided, the `Deck` instance will track camera state changes automatically,\n   * with `initialViewState` as its initial settings.\n   */\n  initialViewState?: any;\n\n  /** Allow browser default touch actions.\n   * @default `'none'`\n   */\n  touchAction?: string;\n  /** Set Hammer.js recognizer options for gesture recognition. See documentation for details. */\n  eventRecognizerOptions?: {\n    [type: string]: RecognizerOptions;\n  };\n\n  /** (Experimental) Render to a custom frame buffer other than to screen. */\n  _framebuffer?: Framebuffer | null;\n  /** (Experimental) Forces deck.gl to redraw layers every animation frame. */\n  _animate?: boolean;\n  /** (Experimental) If set to `false`, force disables all picking features, disregarding the `pickable` prop set in any layer. */\n  _pickable?: boolean;\n  /** (Experimental) Fine-tune attribute memory usage. See documentation for details. */\n  _typedArrayManagerProps?: TypedArrayManagerOptions;\n\n  /** Called once the WebGL context has been initiated. */\n  onWebGLInitialized?: (gl: WebGLRenderingContext) => void;\n  /** Called when the canvas resizes. */\n  onResize?: (dimensions: {width: number; height: number}) => void;\n  /** Called when the user has interacted with the deck.gl canvas, e.g. using mouse, touch or keyboard. */\n  onViewStateChange?: (params: ViewStateChangeParameters & {viewId: string}) => any;\n  /** Called when the user has interacted with the deck.gl canvas, e.g. using mouse, touch or keyboard. */\n  onInteractionStateChange?: (state: InteractionState) => void;\n  /** Called just before the canvas rerenders. */\n  onBeforeRender?: (context: {gl: WebGLRenderingContext}) => void;\n  /** Called right after the canvas rerenders. */\n  onAfterRender?: (context: {gl: WebGLRenderingContext}) => void;\n  /** Called once after gl context and all Deck components are created. */\n  onLoad?: () => void;\n  /** Called if deck.gl encounters an error.\n   * If this callback is set to `null`, errors are silently ignored.\n   * @default `console.error`\n   */\n  onError?: ((error: Error, layer?: Layer) => void) | null;\n  /** Called when the pointer moves over the canvas. */\n  onHover?: ((info: PickingInfo, event: MjolnirPointerEvent) => void) | null;\n  /** Called when clicking on the canvas. */\n  onClick?: ((info: PickingInfo, event: MjolnirGestureEvent) => void) | null;\n  /** Called when the user starts dragging on the canvas. */\n  onDragStart?: ((info: PickingInfo, event: MjolnirGestureEvent) => void) | null;\n  /** Called when dragging the canvas. */\n  onDrag?: ((info: PickingInfo, event: MjolnirGestureEvent) => void) | null;\n  /** Called when the user releases from dragging the canvas. */\n  onDragEnd?: ((info: PickingInfo, event: MjolnirGestureEvent) => void) | null;\n\n  /** (Experimental) Replace the default redraw procedure */\n  _customRender?: ((reason: string) => void) | null;\n  /** (Experimental) Called once every second with performance metrics. */\n  _onMetrics?: ((metrics: DeckMetrics) => void) | null;\n\n  /** A custom callback to retrieve the cursor type. */\n  getCursor?: (state: CursorState) => string;\n  /** Callback that takes a hovered-over point and renders a tooltip. */\n  getTooltip?: ((info: PickingInfo) => TooltipContent) | null;\n\n  /** (Debug) Flag to enable WebGL debug mode. Requires importing `@luma.gl/debug`. */\n  debug?: boolean;\n  /** (Debug) Render the picking buffer to screen. */\n  drawPickingColors?: boolean;\n};\n\nconst defaultProps = {\n  id: '',\n  width: '100%',\n  height: '100%',\n  style: null,\n  viewState: null,\n  initialViewState: null,\n  pickingRadius: 0,\n  layerFilter: null,\n  glOptions: {},\n  parameters: {},\n  parent: null,\n  gl: null,\n  canvas: null,\n  layers: [],\n  effects: [],\n  views: null,\n  controller: null, // Rely on external controller, e.g. react-map-gl\n  useDevicePixels: true,\n  touchAction: 'none',\n  eventRecognizerOptions: {},\n  _framebuffer: null,\n  _animate: false,\n  _pickable: true,\n  _typedArrayManagerProps: {},\n  _customRender: null,\n\n  onWebGLInitialized: noop,\n  onResize: noop,\n  onViewStateChange: noop,\n  onInteractionStateChange: noop,\n  onBeforeRender: noop,\n  onAfterRender: noop,\n  onLoad: noop,\n  onError: (error: Error) => log.error(error.message, error.cause)(),\n  onHover: null,\n  onClick: null,\n  onDragStart: null,\n  onDrag: null,\n  onDragEnd: null,\n  _onMetrics: null,\n\n  getCursor,\n  getTooltip: null,\n\n  debug: false,\n  drawPickingColors: false\n};\n\n/* eslint-disable max-statements */\nexport default class Deck {\n  static defaultProps = defaultProps;\n  // This is used to defeat tree shaking of init.js\n  // https://github.com/visgl/deck.gl/issues/3213\n  static VERSION = VERSION;\n\n  readonly props: Required<DeckProps>;\n  readonly width: number = 0;\n  readonly height: number = 0;\n  // Allows attaching arbitrary data to the instance\n  readonly userData: Record<string, any> = {};\n\n  protected canvas: HTMLCanvasElement | null = null;\n  protected viewManager: ViewManager | null = null;\n  protected layerManager: LayerManager | null = null;\n  protected effectManager: EffectManager | null = null;\n  protected deckRenderer: DeckRenderer | null = null;\n  protected deckPicker: DeckPicker | null = null;\n  protected eventManager: EventManager | null = null;\n  protected tooltip: Tooltip | null = null;\n  protected metrics: DeckMetrics;\n  protected animationLoop: AnimationLoop;\n  protected stats: Stats;\n\n  /** Internal view state if no callback is supplied */\n  protected viewState: any;\n  protected cursorState: CursorState;\n\n  private _needsRedraw: false | string;\n  private _pickRequest: {\n    mode: string;\n    event: MjolnirPointerEvent | null;\n    x: number;\n    y: number;\n    radius: number;\n  };\n  /**\n   * Pick and store the object under the pointer on `pointerdown`.\n   * This object is reused for subsequent `onClick` and `onDrag*` callbacks.\n   */\n  private _lastPointerDownInfo: PickingInfo | null = null;\n  private _metricsCounter: number;\n\n  constructor(props: DeckProps) {\n    this.props = {...defaultProps, ...props};\n    props = this.props;\n\n    this._needsRedraw = 'Initial render';\n    this._pickRequest = {\n      mode: 'hover',\n      x: -1,\n      y: -1,\n      radius: 0,\n      event: null\n    };\n\n    this.cursorState = {\n      isHovering: false,\n      isDragging: false\n    };\n\n    if (props.viewState && props.initialViewState) {\n      log.warn(\n        'View state tracking is disabled. Use either `initialViewState` for auto update or `viewState` for manual update.'\n      )();\n    }\n    if (getBrowser() === 'IE') {\n      log.warn('IE 11 is not supported')();\n    }\n    this.viewState = props.initialViewState;\n\n    if (!props.gl) {\n      // Note: LayerManager creation deferred until gl context available\n      if (typeof document !== 'undefined') {\n        this.canvas = this._createCanvas(props);\n      }\n    }\n    this.animationLoop = this._createAnimationLoop(props);\n\n    this.stats = new Stats({id: 'deck.gl'});\n    this.metrics = {\n      fps: 0,\n      setPropsTime: 0,\n      updateAttributesTime: 0,\n      framesRedrawn: 0,\n      pickTime: 0,\n      pickCount: 0,\n      gpuTime: 0,\n      gpuTimePerFrame: 0,\n      cpuTime: 0,\n      cpuTimePerFrame: 0,\n      bufferMemory: 0,\n      textureMemory: 0,\n      renderbufferMemory: 0,\n      gpuMemory: 0\n    };\n    this._metricsCounter = 0;\n\n    this.setProps(props);\n\n    // UNSAFE/experimental prop: only set at initialization to avoid performance hit\n    if (props._typedArrayManagerProps) {\n      typedArrayManager.setOptions(props._typedArrayManagerProps);\n    }\n\n    this.animationLoop.start();\n  }\n\n  /** Stop rendering and dispose all resources */\n  finalize() {\n    this.animationLoop?.stop();\n    this.animationLoop = null;\n    this._lastPointerDownInfo = null;\n\n    this.layerManager?.finalize();\n    this.layerManager = null;\n\n    this.viewManager?.finalize();\n    this.viewManager = null;\n\n    this.effectManager?.finalize();\n    this.effectManager = null;\n\n    this.deckRenderer?.finalize();\n    this.deckRenderer = null;\n\n    this.deckPicker?.finalize();\n    this.deckPicker = null;\n\n    this.eventManager?.destroy();\n    this.eventManager = null;\n\n    this.tooltip?.remove();\n    this.tooltip = null;\n\n    if (!this.props.canvas && !this.props.gl && this.canvas) {\n      // remove internally created canvas\n      this.canvas.parentElement?.removeChild(this.canvas);\n      this.canvas = null;\n    }\n  }\n\n  /** Partially update props */\n  setProps(props: DeckProps): void {\n    this.stats.get('setProps Time').timeStart();\n\n    if ('onLayerHover' in props) {\n      log.removed('onLayerHover', 'onHover')();\n    }\n    if ('onLayerClick' in props) {\n      log.removed('onLayerClick', 'onClick')();\n    }\n    if (\n      props.initialViewState &&\n      // depth = 3 when comparing viewStates: viewId.position.0\n      !deepEqual(this.props.initialViewState, props.initialViewState, 3)\n    ) {\n      // Overwrite internal view state\n      this.viewState = props.initialViewState;\n    }\n\n    // Merge with existing props\n    Object.assign(this.props, props);\n\n    // Update CSS size of canvas\n    this._setCanvasSize(this.props);\n\n    // We need to overwrite CSS style width and height with actual, numeric values\n    const resolvedProps: Required<DeckProps> & {\n      width: number;\n      height: number;\n      views: View[];\n      viewState: Record<string, any>;\n    } = Object.create(this.props);\n    Object.assign(resolvedProps, {\n      views: this._getViews(),\n      width: this.width,\n      height: this.height,\n      viewState: this._getViewState()\n    });\n\n    // Update the animation loop\n    this.animationLoop.setProps(resolvedProps);\n\n    // If initialized, update sub manager props\n    if (this.layerManager) {\n      this.viewManager!.setProps(resolvedProps);\n      // Make sure that any new layer gets initialized with the current viewport\n      this.layerManager.activateViewport(this.getViewports()[0]);\n      this.layerManager.setProps(resolvedProps);\n      this.effectManager!.setProps(resolvedProps);\n      this.deckRenderer!.setProps(resolvedProps);\n      this.deckPicker!.setProps(resolvedProps);\n    }\n\n    this.stats.get('setProps Time').timeEnd();\n  }\n\n  // Public API\n\n  /**\n   * Check if a redraw is needed\n   * @returns `false` or a string summarizing the redraw reason\n   */\n  needsRedraw(\n    opts: {\n      /** Reset the redraw flag afterwards. Default `true` */\n      clearRedrawFlags: boolean;\n    } = {clearRedrawFlags: false}\n  ): false | string {\n    if (!this.layerManager) {\n      // Not initialized or already finalized\n      return false;\n    }\n    if (this.props._animate) {\n      return 'Deck._animate';\n    }\n\n    let redraw: false | string = this._needsRedraw;\n\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n\n    const viewManagerNeedsRedraw = this.viewManager!.needsRedraw(opts);\n    const layerManagerNeedsRedraw = this.layerManager.needsRedraw(opts);\n    const effectManagerNeedsRedraw = this.effectManager!.needsRedraw(opts);\n    const deckRendererNeedsRedraw = this.deckRenderer!.needsRedraw(opts);\n\n    redraw =\n      redraw ||\n      viewManagerNeedsRedraw ||\n      layerManagerNeedsRedraw ||\n      effectManagerNeedsRedraw ||\n      deckRendererNeedsRedraw;\n    return redraw;\n  }\n\n  /**\n   * Redraw the GL context\n   * @param reason If not provided, only redraw if deemed necessary. Otherwise redraw regardless of internal states.\n   * @returns\n   */\n  redraw(reason?: string): void {\n    if (!this.layerManager) {\n      // Not yet initialized\n      return;\n    }\n    // Check if we need to redraw\n    let redrawReason = this.needsRedraw({clearRedrawFlags: true});\n    // User-supplied should take precedent, however the redraw flags get cleared regardless\n    redrawReason = reason || redrawReason;\n\n    if (!redrawReason) {\n      return;\n    }\n\n    this.stats.get('Redraw Count').incrementCount();\n    if (this.props._customRender) {\n      this.props._customRender(redrawReason);\n    } else {\n      this._drawLayers(redrawReason);\n    }\n  }\n\n  /** Flag indicating that the Deck instance has initialized its resources and it's safe to call public methods. */\n  get isInitialized(): boolean {\n    return this.viewManager !== null;\n  }\n\n  /** Get a list of views that are currently rendered */\n  getViews(): View[] {\n    assert(this.viewManager);\n    return this.viewManager.views;\n  }\n\n  /** Get a list of viewports that are currently rendered.\n   * @param rect If provided, only returns viewports within the given bounding box.\n   */\n  getViewports(rect?: {x: number; y: number; width?: number; height?: number}): Viewport[] {\n    assert(this.viewManager);\n    return this.viewManager.getViewports(rect);\n  }\n\n  /** Query the object rendered on top at a given point */\n  pickObject(opts: {\n    /** x position in pixels */\n    x: number;\n    /** y position in pixels */\n    y: number;\n    /** Radius of tolerance in pixels. Default `0`. */\n    radius?: number;\n    /** A list of layer ids to query from. If not specified, then all pickable and visible layers are queried. */\n    layerIds?: string[];\n    /** If `true`, `info.coordinate` will be a 3D point by unprojecting the `x, y` screen coordinates onto the picked geometry. Default `false`. */\n    unproject3D?: boolean;\n  }): PickingInfo | null {\n    const infos = this._pick('pickObject', 'pickObject Time', opts).result;\n    return infos.length ? infos[0] : null;\n  }\n\n  /* Query all rendered objects at a given point */\n  pickMultipleObjects(opts: {\n    /** x position in pixels */\n    x: number;\n    /** y position in pixels */\n    y: number;\n    /** Radius of tolerance in pixels. Default `0`. */\n    radius?: number;\n    /** Specifies the max number of objects to return. Default `10`. */\n    depth?: number;\n    /** A list of layer ids to query from. If not specified, then all pickable and visible layers are queried. */\n    layerIds?: string[];\n    /** If `true`, `info.coordinate` will be a 3D point by unprojecting the `x, y` screen coordinates onto the picked geometry. Default `false`. */\n    unproject3D?: boolean;\n  }): PickingInfo[] {\n    opts.depth = opts.depth || 10;\n    return this._pick('pickObject', 'pickMultipleObjects Time', opts).result;\n  }\n\n  /* Query all objects rendered on top within a bounding box */\n  pickObjects(opts: {\n    /** Left of the bounding box in pixels */\n    x: number;\n    /** Top of the bounding box in pixels */\n    y: number;\n    /** Width of the bounding box in pixels. Default `1` */\n    width?: number;\n    /** Height of the bounding box in pixels. Default `1` */\n    height?: number;\n    /** A list of layer ids to query from. If not specified, then all pickable and visible layers are queried. */\n    layerIds?: string[];\n    /** If specified, limits the number of objects that can be returned. */\n    maxObjects?: number | null;\n  }): PickingInfo[] {\n    return this._pick('pickObjects', 'pickObjects Time', opts);\n  }\n\n  /** Experimental\n   * Add a global resource for sharing among layers\n   */\n  _addResources(\n    resources: {\n      [id: string]: any;\n    },\n    forceUpdate = false\n  ) {\n    for (const id in resources) {\n      this.layerManager!.resourceManager.add({resourceId: id, data: resources[id], forceUpdate});\n    }\n  }\n\n  /** Experimental\n   * Remove a global resource\n   */\n  _removeResources(resourceIds: string[]) {\n    for (const id of resourceIds) {\n      this.layerManager!.resourceManager.remove(id);\n    }\n  }\n\n  /** Experimental\n   * Register a default effect. Effects will be sorted by order, those with a low order will be rendered first\n   */\n  _addDefaultEffect(effect: Effect) {\n    this.effectManager!.addDefaultEffect(effect);\n  }\n\n  // Private Methods\n\n  private _pick(\n    method: 'pickObject',\n    statKey: string,\n    opts: PickByPointOptions & {layerIds?: string[]}\n  ): {\n    result: PickingInfo[];\n    emptyInfo: PickingInfo;\n  };\n  private _pick(\n    method: 'pickObjects',\n    statKey: string,\n    opts: PickByRectOptions & {layerIds?: string[]}\n  ): PickingInfo[];\n\n  private _pick(\n    method: 'pickObject' | 'pickObjects',\n    statKey: string,\n    opts: (PickByPointOptions | PickByRectOptions) & {layerIds?: string[]}\n  ) {\n    assert(this.deckPicker);\n\n    const {stats} = this;\n\n    stats.get('Pick Count').incrementCount();\n    stats.get(statKey).timeStart();\n\n    const infos = this.deckPicker[method]({\n      // layerManager, viewManager and effectManager are always defined if deckPicker is\n      layers: this.layerManager!.getLayers(opts),\n      views: this.viewManager!.getViews(),\n      viewports: this.getViewports(opts),\n      onViewportActive: this.layerManager!.activateViewport,\n      effects: this.effectManager!.getEffects(),\n      ...opts\n    });\n\n    stats.get(statKey).timeEnd();\n\n    return infos;\n  }\n\n  /** Resolve props.canvas to element */\n  private _createCanvas(props: DeckProps): HTMLCanvasElement {\n    let canvas = props.canvas;\n\n    // TODO EventManager should accept element id\n    if (typeof canvas === 'string') {\n      canvas = document.getElementById(canvas) as HTMLCanvasElement;\n      assert(canvas);\n    }\n\n    if (!canvas) {\n      canvas = document.createElement('canvas');\n      canvas.id = props.id || 'deckgl-overlay';\n      const parent = props.parent || document.body;\n      parent.appendChild(canvas);\n    }\n\n    Object.assign(canvas.style, props.style);\n\n    return canvas;\n  }\n\n  /** Updates canvas width and/or height, if provided as props */\n  private _setCanvasSize(props: Required<DeckProps>): void {\n    if (!this.canvas) {\n      return;\n    }\n\n    const {width, height} = props;\n    // Set size ONLY if props are being provided, otherwise let canvas be layouted freely\n    if (width || width === 0) {\n      const cssWidth = Number.isFinite(width) ? `${width}px` : (width as string);\n      this.canvas.style.width = cssWidth;\n    }\n    if (height || height === 0) {\n      const cssHeight = Number.isFinite(height) ? `${height}px` : (height as string);\n      // Note: position==='absolute' required for height 100% to work\n      this.canvas.style.position = props.style?.position || 'absolute';\n      this.canvas.style.height = cssHeight;\n    }\n  }\n\n  /** If canvas size has changed, reads out the new size and update */\n  private _updateCanvasSize(): void {\n    const {canvas} = this;\n    if (!canvas) {\n      return;\n    }\n    // Fallback to width/height when clientWidth/clientHeight are undefined (OffscreenCanvas).\n    const newWidth = canvas.clientWidth ?? canvas.width;\n    const newHeight = canvas.clientHeight ?? canvas.height;\n    if (newWidth !== this.width || newHeight !== this.height) {\n      // @ts-expect-error private assign to read-only property\n      this.width = newWidth;\n      // @ts-expect-error private assign to read-only property\n      this.height = newHeight;\n      this.viewManager?.setProps({width: newWidth, height: newHeight});\n      // Make sure that any new layer gets initialized with the current viewport\n      this.layerManager?.activateViewport(this.getViewports()[0]);\n      this.props.onResize({width: newWidth, height: newHeight});\n    }\n  }\n\n  private _createAnimationLoop(props: DeckProps): AnimationLoop {\n    const {\n      width,\n      height,\n      gl,\n      glOptions,\n      debug,\n      onError,\n      onBeforeRender,\n      onAfterRender,\n      useDevicePixels\n    } = props;\n\n    return new AnimationLoop({\n      width,\n      height,\n      useDevicePixels,\n      autoResizeDrawingBuffer: !gl, // do not auto resize external context\n      autoResizeViewport: false,\n      gl,\n      onCreateContext: opts =>\n        createGLContext({\n          ...glOptions,\n          ...opts,\n          canvas: this.canvas,\n          debug,\n          onContextLost: () => this._onContextLost()\n        }),\n      onInitialize: context => this._setGLContext(context.gl),\n      onRender: this._onRenderFrame.bind(this),\n      onBeforeRender,\n      onAfterRender,\n      onError\n    });\n  }\n\n  // Get the most relevant view state: props.viewState, if supplied, shadows internal viewState\n  // TODO: For backwards compatibility ensure numeric width and height is added to the viewState\n  private _getViewState(): Record<string, any> {\n    return this.props.viewState || this.viewState;\n  }\n\n  // Get the view descriptor list\n  private _getViews(): View[] {\n    // Default to a full screen map view port\n    let views = this.props.views || [new MapView({id: 'default-view'})];\n    views = Array.isArray(views) ? views : [views];\n    if (views.length && this.props.controller) {\n      // Backward compatibility: support controller prop\n      views[0].props.controller = this.props.controller;\n    }\n    return views;\n  }\n\n  private _onContextLost() {\n    const {onError} = this.props;\n    if (this.animationLoop && onError) {\n      onError(new Error('WebGL context is lost'));\n    }\n  }\n\n  // The `pointermove` event may fire multiple times in between two animation frames,\n  // it's a waste of time to run picking without rerender. Instead we save the last pick\n  // request and only do it once on the next animation frame.\n  /** Internal use only: event handler for pointerdown */\n  _onPointerMove = (event: MjolnirPointerEvent) => {\n    const {_pickRequest} = this;\n    if (event.type === 'pointerleave') {\n      _pickRequest.x = -1;\n      _pickRequest.y = -1;\n      _pickRequest.radius = 0;\n    } else if (event.leftButton || event.rightButton) {\n      // Do not trigger onHover callbacks if mouse button is down.\n      return;\n    } else {\n      const pos = event.offsetCenter;\n      // Do not trigger callbacks when click/hover position is invalid. Doing so will cause a\n      // assertion error when attempting to unproject the position.\n      if (!pos) {\n        return;\n      }\n      _pickRequest.x = pos.x;\n      _pickRequest.y = pos.y;\n      _pickRequest.radius = this.props.pickingRadius;\n    }\n\n    if (this.layerManager) {\n      this.layerManager.context.mousePosition = {x: _pickRequest.x, y: _pickRequest.y};\n    }\n\n    _pickRequest.event = event;\n  };\n\n  /** Actually run picking */\n  private _pickAndCallback() {\n    const {_pickRequest} = this;\n\n    if (_pickRequest.event) {\n      // Perform picking\n      const {result, emptyInfo} = this._pick('pickObject', 'pickObject Time', _pickRequest);\n      this.cursorState.isHovering = result.length > 0;\n\n      // There are 4 possible scenarios:\n      // result is [outInfo, pickedInfo] (moved from one pickable layer to another)\n      // result is [outInfo] (moved outside of a pickable layer)\n      // result is [pickedInfo] (moved into or over a pickable layer)\n      // result is [] (nothing is or was picked)\n      //\n      // `layer.props.onHover` should be called on all affected layers (out/over)\n      // `deck.props.onHover` should be called with the picked info if any, or empty info otherwise\n      // `deck.props.getTooltip` should be called with the picked info if any, or empty info otherwise\n\n      // Execute callbacks\n      let pickedInfo = emptyInfo;\n      let handled = false;\n      for (const info of result) {\n        pickedInfo = info;\n        handled = info.layer?.onHover(info, _pickRequest.event) || handled;\n      }\n      if (!handled && this.props.onHover) {\n        this.props.onHover(pickedInfo, _pickRequest.event);\n      }\n\n      // Update tooltip\n      if (this.props.getTooltip && this.tooltip) {\n        const displayInfo = this.props.getTooltip(pickedInfo);\n        this.tooltip.setTooltip(displayInfo, pickedInfo.x, pickedInfo.y);\n      }\n\n      // Clear pending pickRequest\n      _pickRequest.event = null;\n    }\n  }\n\n  private _updateCursor(): void {\n    const container = this.props.parent || this.canvas;\n    if (container) {\n      container.style.cursor = this.props.getCursor(this.cursorState);\n    }\n  }\n\n  private _setGLContext(gl: WebGLRenderingContext) {\n    if (this.layerManager) {\n      return;\n    }\n\n    // if external context...\n    if (!this.canvas) {\n      this.canvas = gl.canvas;\n      instrumentGLContext(gl, {enable: true, copyState: true});\n    }\n\n    this.tooltip = new Tooltip(this.canvas);\n\n    setParameters(gl, {\n      blend: true,\n      blendFunc: [GL.SRC_ALPHA, GL.ONE_MINUS_SRC_ALPHA, GL.ONE, GL.ONE_MINUS_SRC_ALPHA],\n      polygonOffsetFill: true,\n      depthTest: true,\n      depthFunc: GL.LEQUAL\n    });\n\n    this.props.onWebGLInitialized(gl);\n\n    // timeline for transitions\n    const timeline = new Timeline();\n    timeline.play();\n    this.animationLoop.attachTimeline(timeline);\n\n    this.eventManager = new EventManager(this.props.parent || gl.canvas, {\n      touchAction: this.props.touchAction,\n      recognizerOptions: this.props.eventRecognizerOptions,\n      events: {\n        pointerdown: this._onPointerDown,\n        pointermove: this._onPointerMove,\n        pointerleave: this._onPointerMove\n      }\n    });\n    for (const eventType in EVENTS) {\n      this.eventManager.on(eventType as keyof typeof EVENTS, this._onEvent);\n    }\n\n    this.viewManager = new ViewManager({\n      timeline,\n      eventManager: this.eventManager,\n      onViewStateChange: this._onViewStateChange.bind(this),\n      onInteractionStateChange: this._onInteractionStateChange.bind(this),\n      views: this._getViews(),\n      viewState: this._getViewState(),\n      width: this.width,\n      height: this.height\n    });\n\n    // viewManager must be initialized before layerManager\n    // layerManager depends on viewport created by viewManager.\n    const viewport = this.viewManager.getViewports()[0];\n\n    // Note: avoid React setState due GL animation loop / setState timing issue\n    this.layerManager = new LayerManager(gl, {\n      deck: this,\n      stats: this.stats,\n      viewport,\n      timeline\n    });\n\n    this.effectManager = new EffectManager();\n\n    this.deckRenderer = new DeckRenderer(gl);\n\n    this.deckPicker = new DeckPicker(gl);\n\n    this.setProps(this.props);\n\n    this._updateCanvasSize();\n    this.props.onLoad();\n  }\n\n  /** Internal only: default render function (redraw all layers and views) */\n  _drawLayers(\n    redrawReason: string,\n    renderOptions?: {\n      target?: Framebuffer;\n      layerFilter?: (context: FilterContext) => boolean;\n      layers?: Layer[];\n      viewports?: Viewport[];\n      views?: {[viewId: string]: View};\n      pass?: string;\n      effects?: Effect[];\n      clearStack?: boolean;\n      clearCanvas?: boolean;\n    }\n  ) {\n    const {gl} = this.layerManager!.context;\n\n    setParameters(gl, this.props.parameters);\n\n    this.props.onBeforeRender({gl});\n\n    this.deckRenderer!.renderLayers({\n      target: this.props._framebuffer,\n      layers: this.layerManager!.getLayers(),\n      viewports: this.viewManager!.getViewports(),\n      onViewportActive: this.layerManager!.activateViewport,\n      views: this.viewManager!.getViews(),\n      pass: 'screen',\n      effects: this.effectManager!.getEffects(),\n      ...renderOptions\n    });\n\n    this.props.onAfterRender({gl});\n  }\n\n  // Callbacks\n\n  private _onRenderFrame(animationProps: any) {\n    this._getFrameStats();\n\n    // Log perf stats every second\n    if (this._metricsCounter++ % 60 === 0) {\n      this._getMetrics();\n      this.stats.reset();\n      log.table(4, this.metrics)();\n\n      // Experimental: report metrics\n      if (this.props._onMetrics) {\n        this.props._onMetrics(this.metrics);\n      }\n    }\n\n    this._updateCanvasSize();\n\n    this._updateCursor();\n\n    // If view state has changed, clear tooltip\n    if (this.tooltip!.isVisible && this.viewManager!.needsRedraw()) {\n      this.tooltip!.setTooltip(null);\n    }\n\n    // Update layers if needed (e.g. some async prop has loaded)\n    // Note: This can trigger a redraw\n    this.layerManager!.updateLayers();\n\n    // Perform picking request if any\n    this._pickAndCallback();\n\n    // Redraw if necessary\n    this.redraw();\n\n    // Update viewport transition if needed\n    // Note: this can trigger `onViewStateChange`, and affect layers\n    // We want to defer these changes to the next frame\n    if (this.viewManager) {\n      this.viewManager.updateViewStates();\n    }\n  }\n\n  // Callbacks\n\n  private _onViewStateChange(params: ViewStateChangeParameters & {viewId: string}) {\n    // Let app know that view state is changing, and give it a chance to change it\n    const viewState = this.props.onViewStateChange(params) || params.viewState;\n\n    // If initialViewState was set on creation, auto track position\n    if (this.viewState) {\n      this.viewState = {...this.viewState, [params.viewId]: viewState};\n      if (!this.props.viewState) {\n        // Apply internal view state\n        if (this.viewManager) {\n          this.viewManager.setProps({viewState: this.viewState});\n        }\n      }\n    }\n  }\n\n  private _onInteractionStateChange(interactionState: InteractionState) {\n    this.cursorState.isDragging = interactionState.isDragging || false;\n    this.props.onInteractionStateChange(interactionState);\n  }\n\n  /** Internal use only: event handler for click & drag */\n  _onEvent = (event: MjolnirGestureEvent) => {\n    const eventOptions = EVENTS[event.type];\n    const pos = event.offsetCenter;\n\n    if (!eventOptions || !pos || !this.layerManager) {\n      return;\n    }\n\n    // Reuse last picked object\n    const layers = this.layerManager.getLayers();\n    const info = this.deckPicker!.getLastPickedObject(\n      {\n        x: pos.x,\n        y: pos.y,\n        layers,\n        viewports: this.getViewports(pos)\n      },\n      this._lastPointerDownInfo\n    );\n\n    const {layer} = info;\n    const layerHandler =\n      layer && (layer[eventOptions.handler] || layer.props[eventOptions.handler]);\n    const rootHandler = this.props[eventOptions.handler];\n    let handled = false;\n\n    if (layerHandler) {\n      handled = layerHandler.call(layer, info, event);\n    }\n    if (!handled && rootHandler) {\n      rootHandler(info, event);\n    }\n  };\n\n  /** Internal use only: evnet handler for pointerdown */\n  _onPointerDown = (event: MjolnirPointerEvent) => {\n    const pos = event.offsetCenter;\n    const pickedInfo = this._pick('pickObject', 'pickObject Time', {\n      x: pos.x,\n      y: pos.y,\n      radius: this.props.pickingRadius\n    });\n    this._lastPointerDownInfo = pickedInfo.result[0] || pickedInfo.emptyInfo;\n  };\n\n  private _getFrameStats(): void {\n    const {stats} = this;\n    stats.get('frameRate').timeEnd();\n    stats.get('frameRate').timeStart();\n\n    // Get individual stats from luma.gl so reset works\n    const animationLoopStats = this.animationLoop.stats;\n    stats.get('GPU Time').addTime(animationLoopStats.get('GPU Time').lastTiming);\n    stats.get('CPU Time').addTime(animationLoopStats.get('CPU Time').lastTiming);\n  }\n\n  private _getMetrics(): void {\n    const {metrics, stats} = this;\n    metrics.fps = stats.get('frameRate').getHz();\n    metrics.setPropsTime = stats.get('setProps Time').time;\n    metrics.updateAttributesTime = stats.get('Update Attributes').time;\n    metrics.framesRedrawn = stats.get('Redraw Count').count;\n    metrics.pickTime =\n      stats.get('pickObject Time').time +\n      stats.get('pickMultipleObjects Time').time +\n      stats.get('pickObjects Time').time;\n    metrics.pickCount = stats.get('Pick Count').count;\n\n    // Luma stats\n    metrics.gpuTime = stats.get('GPU Time').time;\n    metrics.cpuTime = stats.get('CPU Time').time;\n    metrics.gpuTimePerFrame = stats.get('GPU Time').getAverageTime();\n    metrics.cpuTimePerFrame = stats.get('CPU Time').getAverageTime();\n\n    const memoryStats = lumaStats.get('Memory Usage');\n    metrics.bufferMemory = memoryStats.get('Buffer Memory').count;\n    metrics.textureMemory = memoryStats.get('Texture Memory').count;\n    metrics.renderbufferMemory = memoryStats.get('Renderbuffer Memory').count;\n    metrics.gpuMemory = memoryStats.get('GPU Memory').count;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}