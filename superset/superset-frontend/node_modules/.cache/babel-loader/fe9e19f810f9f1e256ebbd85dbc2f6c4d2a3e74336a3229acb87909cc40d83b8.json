{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { buildQueryContext, GenericDataType, getColumnLabel, isPhysicalColumn } from '@superset-ui/core';\nimport { DEFAULT_FORM_DATA } from './types';\nconst buildQuery = (formData, options) => {\n  const { search, coltypeMap } = (options == null ? void 0 : options.ownState) || {};\n  const { sortAscending, sortMetric } = { ...DEFAULT_FORM_DATA, ...formData };\n  return buildQueryContext(formData, (baseQueryObject) => {\n    const { columns = [], filters = [] } = baseQueryObject;\n    const extraFilters = [];\n    if (search) {\n      columns.filter(isPhysicalColumn).forEach((column) => {\n        const label = getColumnLabel(column);\n        if (coltypeMap[label] === GenericDataType.String ||\n        coltypeMap[label] === GenericDataType.Numeric &&\n        !Number.isNaN(Number(search))) {\n          extraFilters.push({\n            col: column,\n            op: 'ILIKE',\n            val: `%${search}%`\n          });\n        }\n      });\n    }\n    const sortColumns = sortMetric ? [sortMetric] : columns;\n    const query = [\n    {\n      ...baseQueryObject,\n      columns,\n      metrics: sortMetric ? [sortMetric] : [],\n      filters: filters.concat(extraFilters),\n      orderby: sortMetric || sortAscending !== undefined ?\n      sortColumns.map((column) => [column, !!sortAscending]) :\n      []\n    }];\n\n    return query;\n  });\n};const _default =\nbuildQuery;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(buildQuery, \"buildQuery\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/filters/components/Select/buildQuery.ts\");reactHotLoader.register(_default, \"default\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/filters/components/Select/buildQuery.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["buildQueryContext","GenericDataType","getColumnLabel","isPhysicalColumn","DEFAULT_FORM_DATA","buildQuery","formData","options","search","coltypeMap","ownState","sortAscending","sortMetric","baseQueryObject","columns","filters","extraFilters","filter","forEach","column","label","String","Numeric","Number","isNaN","push","col","op","val","sortColumns","query","metrics","concat","orderby","undefined","map","_default","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/filters/components/Select/buildQuery.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  buildQueryContext,\n  GenericDataType,\n  getColumnLabel,\n  isPhysicalColumn,\n  QueryObject,\n  QueryObjectFilterClause,\n  BuildQuery,\n} from '@superset-ui/core';\nimport { DEFAULT_FORM_DATA, PluginFilterSelectQueryFormData } from './types';\n\nconst buildQuery: BuildQuery<PluginFilterSelectQueryFormData> = (\n  formData: PluginFilterSelectQueryFormData,\n  options,\n) => {\n  const { search, coltypeMap } = options?.ownState || {};\n  const { sortAscending, sortMetric } = { ...DEFAULT_FORM_DATA, ...formData };\n  return buildQueryContext(formData, baseQueryObject => {\n    const { columns = [], filters = [] } = baseQueryObject;\n    const extraFilters: QueryObjectFilterClause[] = [];\n    if (search) {\n      columns.filter(isPhysicalColumn).forEach(column => {\n        const label = getColumnLabel(column);\n        if (\n          coltypeMap[label] === GenericDataType.String ||\n          (coltypeMap[label] === GenericDataType.Numeric &&\n            !Number.isNaN(Number(search)))\n        ) {\n          extraFilters.push({\n            col: column,\n            op: 'ILIKE',\n            val: `%${search}%`,\n          });\n        }\n      });\n    }\n\n    const sortColumns = sortMetric ? [sortMetric] : columns;\n    const query: QueryObject[] = [\n      {\n        ...baseQueryObject,\n        columns,\n        metrics: sortMetric ? [sortMetric] : [],\n        filters: filters.concat(extraFilters),\n        orderby:\n          sortMetric || sortAscending !== undefined\n            ? sortColumns.map(column => [column, !!sortAscending])\n            : [],\n      },\n    ];\n    return query;\n  });\n};\n\nexport default buildQuery;\n"],"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAkBA,SACEA,iBAAiB,EACjBC,eAAe,EACfC,cAAc,EACdC,gBAAgB,QAIX,mBAAmB;AAC1B,SAASC,iBAAiB,QAAyC,SAAS;AAE5E,MAAMC,UAAU,GAAgDA,CAC9DC,QAAyC,EACzCC,OAAO,KACL;EACF,MAAM,EAAEC,MAAM,EAAEC,UAAU,EAAE,GAAG,CAAAF,OAAO,oBAAPA,OAAO,CAAEG,QAAQ,KAAI,EAAE;EACtD,MAAM,EAAEC,aAAa,EAAEC,UAAU,EAAE,GAAG,EAAE,GAAGR,iBAAiB,EAAE,GAAGE,QAAQ,EAAE;EAC3E,OAAON,iBAAiB,CAACM,QAAQ,EAAE,CAAAO,eAAe,KAAG;IACnD,MAAM,EAAEC,OAAO,GAAG,EAAE,EAAEC,OAAO,GAAG,EAAE,EAAE,GAAGF,eAAe;IACtD,MAAMG,YAAY,GAA8B,EAAE;IAClD,IAAIR,MAAM,EAAE;MACVM,OAAO,CAACG,MAAM,CAACd,gBAAgB,CAAC,CAACe,OAAO,CAAC,CAAAC,MAAM,KAAG;QAChD,MAAMC,KAAK,GAAGlB,cAAc,CAACiB,MAAM,CAAC;QACpC,IACEV,UAAU,CAACW,KAAK,CAAC,KAAKnB,eAAe,CAACoB,MAAM;QAC3CZ,UAAU,CAACW,KAAK,CAAC,KAAKnB,eAAe,CAACqB,OAAO;QAC5C,CAACC,MAAM,CAACC,KAAK,CAACD,MAAM,CAACf,MAAM,CAAC,CAAE,EAChC;UACAQ,YAAY,CAACS,IAAI,CAAC;YAChBC,GAAG,EAAEP,MAAM;YACXQ,EAAE,EAAE,OAAO;YACXC,GAAG,EAAE,IAAIpB,MAAM;WAChB,CAAC;;MAEN,CAAC,CAAC;;IAGJ,MAAMqB,WAAW,GAAGjB,UAAU,GAAG,CAACA,UAAU,CAAC,GAAGE,OAAO;IACvD,MAAMgB,KAAK,GAAkB;IAC3B;MACE,GAAGjB,eAAe;MAClBC,OAAO;MACPiB,OAAO,EAAEnB,UAAU,GAAG,CAACA,UAAU,CAAC,GAAG,EAAE;MACvCG,OAAO,EAAEA,OAAO,CAACiB,MAAM,CAAChB,YAAY,CAAC;MACrCiB,OAAO,EACLrB,UAAU,IAAID,aAAa,KAAKuB,SAAS;MACrCL,WAAW,CAACM,GAAG,CAAC,CAAAhB,MAAM,KAAI,CAACA,MAAM,EAAE,CAAC,CAACR,aAAa,CAAC,CAAC;MACpD;KACP,CACF;;IACD,OAAOmB,KAAK;EACd,CAAC,CAAC;AACJ,CAAC,CAAC,MAAAM,QAAA;AAEa/B,UAAU,CAAzB,eAAA+B,QAAA,CAA0B,mBAAAC,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAC,OAAA,GAAAL,SAAA,MAAAG,cAAA,WAAAA,cAAA,CAAAG,QAAA,CA3CpBnC,UAAU,sHAAAgC,cAAA,CAAAG,QAAA,CAAAJ,QAAA,2IAAAK,WAAA,UAAAH,oBAAA,mBAAAA,oBAAA,CAAAG,WAAA,GAAAP,SAAA,CAAAO,WAAA,IAAAA,WAAA,CAAAC,MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}