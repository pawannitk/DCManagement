{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * Checks if a given item matches the ITableColumn interface\n * @param item Object to check if it matches the ITableColumn interface\n * @returns boolean true if matches interface\n */\nexport const isITableColumn = (item) => {\n  let match = true;\n  const BASE_ERROR = 'The object provided to isITableColumn does match the interface.';\n  if (typeof (item == null ? void 0 : item.name) !== 'string') {\n    match = false;\n    // eslint-disable-next-line no-console\n    console.error(`${BASE_ERROR} The property 'name' is required and must be a string`);\n  }\n  if (match && typeof (item == null ? void 0 : item.type) !== 'string') {\n    match = false;\n    // eslint-disable-next-line no-console\n    console.error(`${BASE_ERROR} The property 'type' is required and must be a string`);\n  }\n  return match;\n};\n/**\n * Checks if a given item matches the isIDatabsetTable interface\n * @param item Object to check if it matches the isIDatabsetTable interface\n * @returns boolean true if matches interface\n */\nexport const isIDatabaseTable = (item) => {\n  let match = true;\n  if (typeof (item == null ? void 0 : item.name) !== 'string') {\n    match = false;\n  }\n  if (match && !Array.isArray(item.columns)) {\n    match = false;\n  }\n  if (match && item.columns.length > 0) {\n    const invalid = item.columns.some((column, index) => {\n      const valid = isITableColumn(column);\n      if (!valid) {\n        // eslint-disable-next-line no-console\n        console.error(`The provided object does not match the IDatabaseTable interface. columns[${index}] is invalid and does not match the ITableColumn interface`);\n      }\n      return !valid;\n    });\n    match = !invalid;\n  }\n  return match;\n};;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(isITableColumn, \"isITableColumn\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/features/datasets/AddDataset/DatasetPanel/types.ts\");reactHotLoader.register(isIDatabaseTable, \"isIDatabaseTable\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/features/datasets/AddDataset/DatasetPanel/types.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["isITableColumn","item","match","BASE_ERROR","name","console","error","type","isIDatabaseTable","Array","isArray","columns","length","invalid","some","column","index","valid","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/features/datasets/AddDataset/DatasetPanel/types.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/**\n * Interface for table columns dataset\n */\nexport interface ITableColumn {\n  /**\n   * Name of the column\n   */\n  name: string;\n  /**\n   * Datatype of the column\n   */\n  type: string;\n}\n\n/**\n * Checks if a given item matches the ITableColumn interface\n * @param item Object to check if it matches the ITableColumn interface\n * @returns boolean true if matches interface\n */\nexport const isITableColumn = (item: any): boolean => {\n  let match = true;\n  const BASE_ERROR =\n    'The object provided to isITableColumn does match the interface.';\n  if (typeof item?.name !== 'string') {\n    match = false;\n    // eslint-disable-next-line no-console\n    console.error(\n      `${BASE_ERROR} The property 'name' is required and must be a string`,\n    );\n  }\n  if (match && typeof item?.type !== 'string') {\n    match = false;\n    // eslint-disable-next-line no-console\n    console.error(\n      `${BASE_ERROR} The property 'type' is required and must be a string`,\n    );\n  }\n  return match;\n};\n\nexport interface IDatabaseTable {\n  name: string;\n  columns: ITableColumn[];\n}\n\n/**\n * Checks if a given item matches the isIDatabsetTable interface\n * @param item Object to check if it matches the isIDatabsetTable interface\n * @returns boolean true if matches interface\n */\nexport const isIDatabaseTable = (item: any): boolean => {\n  let match = true;\n  if (typeof item?.name !== 'string') {\n    match = false;\n  }\n  if (match && !Array.isArray(item.columns)) {\n    match = false;\n  }\n  if (match && item.columns.length > 0) {\n    const invalid = item.columns.some((column: any, index: number) => {\n      const valid = isITableColumn(column);\n      if (!valid) {\n        // eslint-disable-next-line no-console\n        console.error(\n          `The provided object does not match the IDatabaseTable interface. columns[${index}] is invalid and does not match the ITableColumn interface`,\n        );\n      }\n      return !valid;\n    });\n    match = !invalid;\n  }\n  return match;\n};\n"],"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAiCA;;;;;AAKA,OAAO,MAAMA,cAAc,GAAGA,CAACC,IAAS,KAAa;EACnD,IAAIC,KAAK,GAAG,IAAI;EAChB,MAAMC,UAAU,GACd,iEAAiE;EACnE,IAAI,QAAOF,IAAI,oBAAJA,IAAI,CAAEG,IAAI,MAAK,QAAQ,EAAE;IAClCF,KAAK,GAAG,KAAK;IACb;IACAG,OAAO,CAACC,KAAK,CACX,GAAGH,UAAU,uDAAuD,CACrE;;EAEH,IAAID,KAAK,IAAI,QAAOD,IAAI,oBAAJA,IAAI,CAAEM,IAAI,MAAK,QAAQ,EAAE;IAC3CL,KAAK,GAAG,KAAK;IACb;IACAG,OAAO,CAACC,KAAK,CACX,GAAGH,UAAU,uDAAuD,CACrE;;EAEH,OAAOD,KAAK;AACd,CAAC;AAOD;;;;;AAKA,OAAO,MAAMM,gBAAgB,GAAGA,CAACP,IAAS,KAAa;EACrD,IAAIC,KAAK,GAAG,IAAI;EAChB,IAAI,QAAOD,IAAI,oBAAJA,IAAI,CAAEG,IAAI,MAAK,QAAQ,EAAE;IAClCF,KAAK,GAAG,KAAK;;EAEf,IAAIA,KAAK,IAAI,CAACO,KAAK,CAACC,OAAO,CAACT,IAAI,CAACU,OAAO,CAAC,EAAE;IACzCT,KAAK,GAAG,KAAK;;EAEf,IAAIA,KAAK,IAAID,IAAI,CAACU,OAAO,CAACC,MAAM,GAAG,CAAC,EAAE;IACpC,MAAMC,OAAO,GAAGZ,IAAI,CAACU,OAAO,CAACG,IAAI,CAAC,CAACC,MAAW,EAAEC,KAAa,KAAI;MAC/D,MAAMC,KAAK,GAAGjB,cAAc,CAACe,MAAM,CAAC;MACpC,IAAI,CAACE,KAAK,EAAE;QACV;QACAZ,OAAO,CAACC,KAAK,CACX,4EAA4EU,KAAK,4DAA4D,CAC9I;;MAEH,OAAO,CAACC,KAAK;IACf,CAAC,CAAC;IACFf,KAAK,GAAG,CAACW,OAAO;;EAElB,OAAOX,KAAK;AACd,CAAC,CAAC,mBAAAgB,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAC,OAAA,GAAAC,SAAA,MAAAH,cAAA,WAAAA,cAAA,CAAAI,QAAA,CArDWtB,cAAc,qIAAAkB,cAAA,CAAAI,QAAA,CA+Bdd,gBAAgB,+JAAAe,WAAA,UAAAJ,oBAAA,mBAAAA,oBAAA,CAAAI,WAAA,GAAAF,SAAA,CAAAE,WAAA,IAAAA,WAAA,CAAAC,MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}