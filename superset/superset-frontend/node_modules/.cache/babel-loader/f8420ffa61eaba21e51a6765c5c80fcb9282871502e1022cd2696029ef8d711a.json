{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect, useReducer, useCallback, useMemo } from 'react';\nimport { t, getClientErrorObject } from '@superset-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addReport, editReport } from 'src/features/reports/ReportModal/actions';\nimport Alert from 'src/components/Alert';\nimport TimezoneSelector from 'src/components/TimezoneSelector';\nimport LabeledErrorBoundInput from 'src/components/Form/LabeledErrorBoundInput';\nimport Icons from 'src/components/Icons';\nimport { Input } from 'src/components/Input';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { NotificationFormats } from 'src/features/reports/types';\nimport { reportSelector } from 'src/views/CRUD/hooks';\nimport { StyledInputContainer } from 'src/features/alerts/AlertReportModal';\nimport { CreationMethod } from './HeaderReportDropdown';\nimport { antDErrorAlertStyles, CustomWidthHeaderStyle, StyledModal, StyledTopSection, StyledBottomSection, StyledIconWrapper, StyledScheduleTitle, StyledCronPicker, StyledCronError, noBottomMargin, StyledFooterButton, TimezoneHeaderStyle, SectionHeaderStyle, StyledMessageContentTitle, StyledRadio, StyledRadioGroup } from './styles';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst TEXT_BASED_VISUALIZATION_TYPES = [\n'pivot_table_v2',\n'table',\n'paired_ttest'];\n\nconst INITIAL_STATE = {\n  crontab: '0 12 * * 1'\n};\n// Same instance to be used in useEffects\nconst EMPTY_OBJECT = {};\nfunction ReportModal({ onHide, show = false, dashboardId, chart, userId, userEmail, creationMethod, dashboardName, chartName }) {var _chart$sliceFormData;\n  const vizType = chart == null ? void 0 : (_chart$sliceFormData = chart.sliceFormData) == null ? void 0 : _chart$sliceFormData.viz_type;\n  const isChart = !!chart;\n  const isTextBasedChart = isChart && vizType && TEXT_BASED_VISUALIZATION_TYPES.includes(vizType);\n  const defaultNotificationFormat = isTextBasedChart ?\n  NotificationFormats.Text :\n  NotificationFormats.PNG;\n  const entityName = dashboardName || chartName;\n  const initialState = useMemo(() => ({\n    ...INITIAL_STATE,\n    name: entityName ?\n    t('Weekly Report for %s', entityName) :\n    t('Weekly Report')\n  }), [entityName]);\n  const reportReducer = useCallback((state, action) => {\n    if (action === 'reset') {\n      return initialState;\n    }\n    return {\n      ...state,\n      ...action\n    };\n  }, [initialState]);\n  const [currentReport, setCurrentReport] = useReducer(reportReducer, initialState);\n  const [cronError, setCronError] = useState();\n  const dispatch = useDispatch();\n  // Report fetch logic\n  const report = useSelector((state) => {\n    const resourceType = dashboardId ?\n    CreationMethod.Dashboards :\n    CreationMethod.Charts;\n    return reportSelector(state, resourceType, dashboardId || (chart == null ? void 0 : chart.id)) ||\n    EMPTY_OBJECT;\n  });\n  const isEditMode = report && Object.keys(report).length;\n  useEffect(() => {\n    if (isEditMode) {\n      setCurrentReport(report);\n    } else\n    {\n      setCurrentReport('reset');\n    }\n  }, [isEditMode, report]);\n  const onSave = async () => {\n    // Create new Report\n    const newReportValues = {\n      type: 'Report',\n      active: true,\n      force_screenshot: false,\n      custom_width: currentReport.custom_width,\n      creation_method: creationMethod,\n      dashboard: dashboardId,\n      chart: chart == null ? void 0 : chart.id,\n      owners: [userId],\n      recipients: [\n      {\n        recipient_config_json: { target: userEmail },\n        type: 'Email'\n      }],\n\n      name: currentReport.name,\n      description: currentReport.description,\n      crontab: currentReport.crontab,\n      report_format: currentReport.report_format || defaultNotificationFormat,\n      timezone: currentReport.timezone\n    };\n    setCurrentReport({ isSubmitting: true, error: undefined });\n    try {\n      if (isEditMode) {\n        await dispatch(editReport(currentReport.id, newReportValues));\n      } else\n      {\n        await dispatch(addReport(newReportValues));\n      }\n      onHide();\n    }\n    catch (e) {\n      const { error } = await getClientErrorObject(e);\n      setCurrentReport({ error });\n    }\n    setCurrentReport({ isSubmitting: false });\n  };\n  const wrappedTitle = ___EmotionJSX(StyledIconWrapper, null,\n  ___EmotionJSX(Icons.Calendar, null),\n  ___EmotionJSX(\"span\", { className: \"text\" },\n  isEditMode ? t('Edit email report') : t('Schedule a new email report')\n  )\n  );\n  const renderModalFooter = ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(StyledFooterButton, { key: \"back\", onClick: onHide },\n  t('Cancel')\n  ),\n  ___EmotionJSX(StyledFooterButton, { key: \"submit\", buttonStyle: \"primary\", onClick: onSave, disabled: !currentReport.name, loading: currentReport.isSubmitting },\n  isEditMode ? t('Save') : t('Add')\n  )\n  );\n  const renderMessageContentSection = ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(StyledMessageContentTitle, null,\n  ___EmotionJSX(\"h4\", null, t('Message content'))\n  ),\n  ___EmotionJSX(\"div\", { className: \"inline-container\" },\n  ___EmotionJSX(StyledRadioGroup, { onChange: (event) => {\n      setCurrentReport({ report_format: event.target.value });\n    }, value: currentReport.report_format || defaultNotificationFormat },\n  isTextBasedChart && ___EmotionJSX(StyledRadio, { value: NotificationFormats.Text },\n  t('Text embedded in email')\n  ),\n  ___EmotionJSX(StyledRadio, { value: NotificationFormats.PNG },\n  t('Image (PNG) embedded in email')\n  ),\n  ___EmotionJSX(StyledRadio, { value: NotificationFormats.CSV },\n  t('Formatted CSV attached in email')\n  )\n  )\n  )\n  );\n  const renderCustomWidthSection = ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\", css: CustomWidthHeaderStyle },\n  t('Screenshot width')\n  ),\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(Input, { type: \"number\", name: \"custom_width\", value: (currentReport == null ? void 0 : currentReport.custom_width) || '', placeholder: t('Input custom width in pixels'), onChange: (event) => {\n      setCurrentReport({\n        custom_width: parseInt(event.target.value, 10) || null\n      });\n    } })\n  )\n  );\n  return ___EmotionJSX(StyledModal, { show: show, onHide: onHide, title: wrappedTitle, footer: renderModalFooter, width: \"432\", centered: true },\n  ___EmotionJSX(StyledTopSection, null,\n  ___EmotionJSX(LabeledErrorBoundInput, { id: \"name\", name: \"name\", value: currentReport.name || '', placeholder: initialState.name, required: true, validationMethods: {\n      onChange: ({ target }) => setCurrentReport({ name: target.value })\n    }, label: t('Report Name'), \"data-test\": \"report-name-test\" }),\n  ___EmotionJSX(LabeledErrorBoundInput, { id: \"description\", name: \"description\", value: (currentReport == null ? void 0 : currentReport.description) || '', validationMethods: {\n      onChange: ({ target }) => {\n        setCurrentReport({ description: target.value });\n      }\n    }, label: t('Description'), placeholder: t('Include a description that will be sent with your report'), css: noBottomMargin, \"data-test\": \"report-description-test\" })\n  ),\n\n  ___EmotionJSX(StyledBottomSection, null,\n  ___EmotionJSX(StyledScheduleTitle, null,\n  ___EmotionJSX(\"h4\", { css: (theme) => SectionHeaderStyle(theme) },\n  t('Schedule')\n  ),\n  ___EmotionJSX(\"p\", null, t('The report will be sent to your email at'))\n  ),\n\n  ___EmotionJSX(StyledCronPicker, { clearButton: false, value: currentReport.crontab || '0 12 * * 1', setValue: (newValue) => {\n      setCurrentReport({ crontab: newValue });\n    }, onError: setCronError }),\n  ___EmotionJSX(StyledCronError, null, cronError),\n  ___EmotionJSX(\"div\", { className: \"control-label\", css: (theme) => TimezoneHeaderStyle(theme) },\n  t('Timezone')\n  ),\n  ___EmotionJSX(TimezoneSelector, { timezone: currentReport.timezone, onTimezoneChange: (value) => {\n      setCurrentReport({ timezone: value });\n    } }),\n  isChart && renderMessageContentSection,\n  (!isChart || !isTextBasedChart) && renderCustomWidthSection\n  ),\n  currentReport.error && ___EmotionJSX(Alert, { type: \"error\", css: (theme) => antDErrorAlertStyles(theme), message: isEditMode ?\n    t('Failed to update report') :\n    t('Failed to create report'), description: currentReport.error })\n  );\n}__signature__(ReportModal, \"useMemo{initialState}\\nuseCallback{reportReducer}\\nuseReducer{[currentReport, setCurrentReport](initialState)}\\nuseState{[cronError, setCronError]}\\nuseDispatch{dispatch}\\nuseSelector{report}\\nuseEffect{}\", () => [useDispatch, useSelector]);const _default =\nwithToasts(ReportModal);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(TEXT_BASED_VISUALIZATION_TYPES, \"TEXT_BASED_VISUALIZATION_TYPES\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/features/reports/ReportModal/index.tsx\");reactHotLoader.register(INITIAL_STATE, \"INITIAL_STATE\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/features/reports/ReportModal/index.tsx\");reactHotLoader.register(EMPTY_OBJECT, \"EMPTY_OBJECT\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/features/reports/ReportModal/index.tsx\");reactHotLoader.register(ReportModal, \"ReportModal\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/features/reports/ReportModal/index.tsx\");reactHotLoader.register(_default, \"default\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/features/reports/ReportModal/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["React","useState","useEffect","useReducer","useCallback","useMemo","t","getClientErrorObject","useDispatch","useSelector","addReport","editReport","Alert","TimezoneSelector","LabeledErrorBoundInput","Icons","Input","withToasts","NotificationFormats","reportSelector","StyledInputContainer","CreationMethod","antDErrorAlertStyles","CustomWidthHeaderStyle","StyledModal","StyledTopSection","StyledBottomSection","StyledIconWrapper","StyledScheduleTitle","StyledCronPicker","StyledCronError","noBottomMargin","StyledFooterButton","TimezoneHeaderStyle","SectionHeaderStyle","StyledMessageContentTitle","StyledRadio","StyledRadioGroup","jsx","___EmotionJSX","TEXT_BASED_VISUALIZATION_TYPES","INITIAL_STATE","crontab","EMPTY_OBJECT","ReportModal","onHide","show","dashboardId","chart","userId","userEmail","creationMethod","dashboardName","chartName","_chart$sliceFormData","vizType","sliceFormData","viz_type","isChart","isTextBasedChart","includes","defaultNotificationFormat","Text","PNG","entityName","initialState","name","reportReducer","state","action","currentReport","setCurrentReport","cronError","setCronError","dispatch","report","resourceType","Dashboards","Charts","id","isEditMode","Object","keys","length","onSave","newReportValues","type","active","force_screenshot","custom_width","creation_method","dashboard","owners","recipients","recipient_config_json","target","description","report_format","timezone","isSubmitting","error","undefined","e","wrappedTitle","Calendar","className","renderModalFooter","Fragment","key","onClick","buttonStyle","disabled","loading","renderMessageContentSection","onChange","event","value","CSV","renderCustomWidthSection","css","placeholder","parseInt","title","footer","width","centered","required","validationMethods","label","theme","clearButton","setValue","newValue","onError","onTimezoneChange","message","__signature__","_default","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/features/reports/ReportModal/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, {\n  useState,\n  useEffect,\n  useReducer,\n  useCallback,\n  useMemo,\n} from 'react';\nimport { t, SupersetTheme, getClientErrorObject } from '@superset-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  addReport,\n  editReport,\n} from 'src/features/reports/ReportModal/actions';\nimport Alert from 'src/components/Alert';\nimport TimezoneSelector from 'src/components/TimezoneSelector';\nimport LabeledErrorBoundInput from 'src/components/Form/LabeledErrorBoundInput';\nimport Icons from 'src/components/Icons';\nimport { CronError } from 'src/components/CronPicker';\nimport { RadioChangeEvent } from 'src/components';\nimport { Input } from 'src/components/Input';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { ChartState } from 'src/explore/types';\nimport {\n  ReportCreationMethod,\n  ReportObject,\n  NotificationFormats,\n} from 'src/features/reports/types';\nimport { reportSelector } from 'src/views/CRUD/hooks';\nimport { StyledInputContainer } from 'src/features/alerts/AlertReportModal';\nimport { CreationMethod } from './HeaderReportDropdown';\nimport {\n  antDErrorAlertStyles,\n  CustomWidthHeaderStyle,\n  StyledModal,\n  StyledTopSection,\n  StyledBottomSection,\n  StyledIconWrapper,\n  StyledScheduleTitle,\n  StyledCronPicker,\n  StyledCronError,\n  noBottomMargin,\n  StyledFooterButton,\n  TimezoneHeaderStyle,\n  SectionHeaderStyle,\n  StyledMessageContentTitle,\n  StyledRadio,\n  StyledRadioGroup,\n} from './styles';\n\ninterface ReportProps {\n  onHide: () => {};\n  addDangerToast: (msg: string) => void;\n  show: boolean;\n  userId: number;\n  userEmail: string;\n  chart?: ChartState;\n  chartName?: string;\n  dashboardId?: number;\n  dashboardName?: string;\n  creationMethod: ReportCreationMethod;\n  props: any;\n}\n\nconst TEXT_BASED_VISUALIZATION_TYPES = [\n  'pivot_table_v2',\n  'table',\n  'paired_ttest',\n];\n\nconst INITIAL_STATE = {\n  crontab: '0 12 * * 1',\n};\n\ntype ReportObjectState = Partial<ReportObject> & {\n  error?: string;\n  /**\n   * Is submitting changes to the backend.\n   */\n  isSubmitting?: boolean;\n};\n\n// Same instance to be used in useEffects\nconst EMPTY_OBJECT = {};\n\nfunction ReportModal({\n  onHide,\n  show = false,\n  dashboardId,\n  chart,\n  userId,\n  userEmail,\n  creationMethod,\n  dashboardName,\n  chartName,\n}: ReportProps) {\n  const vizType = chart?.sliceFormData?.viz_type;\n  const isChart = !!chart;\n  const isTextBasedChart =\n    isChart && vizType && TEXT_BASED_VISUALIZATION_TYPES.includes(vizType);\n  const defaultNotificationFormat = isTextBasedChart\n    ? NotificationFormats.Text\n    : NotificationFormats.PNG;\n  const entityName = dashboardName || chartName;\n  const initialState: ReportObjectState = useMemo(\n    () => ({\n      ...INITIAL_STATE,\n      name: entityName\n        ? t('Weekly Report for %s', entityName)\n        : t('Weekly Report'),\n    }),\n    [entityName],\n  );\n\n  const reportReducer = useCallback(\n    (state: ReportObjectState | null, action: 'reset' | ReportObjectState) => {\n      if (action === 'reset') {\n        return initialState;\n      }\n      return {\n        ...state,\n        ...action,\n      };\n    },\n    [initialState],\n  );\n\n  const [currentReport, setCurrentReport] = useReducer(\n    reportReducer,\n    initialState,\n  );\n  const [cronError, setCronError] = useState<CronError>();\n\n  const dispatch = useDispatch();\n  // Report fetch logic\n  const report = useSelector<any, ReportObject>(state => {\n    const resourceType = dashboardId\n      ? CreationMethod.Dashboards\n      : CreationMethod.Charts;\n    return (\n      reportSelector(state, resourceType, dashboardId || chart?.id) ||\n      EMPTY_OBJECT\n    );\n  });\n  const isEditMode = report && Object.keys(report).length;\n\n  useEffect(() => {\n    if (isEditMode) {\n      setCurrentReport(report);\n    } else {\n      setCurrentReport('reset');\n    }\n  }, [isEditMode, report]);\n\n  const onSave = async () => {\n    // Create new Report\n    const newReportValues: Partial<ReportObject> = {\n      type: 'Report',\n      active: true,\n      force_screenshot: false,\n      custom_width: currentReport.custom_width,\n      creation_method: creationMethod,\n      dashboard: dashboardId,\n      chart: chart?.id,\n      owners: [userId],\n      recipients: [\n        {\n          recipient_config_json: { target: userEmail },\n          type: 'Email',\n        },\n      ],\n      name: currentReport.name,\n      description: currentReport.description,\n      crontab: currentReport.crontab,\n      report_format: currentReport.report_format || defaultNotificationFormat,\n      timezone: currentReport.timezone,\n    };\n\n    setCurrentReport({ isSubmitting: true, error: undefined });\n    try {\n      if (isEditMode) {\n        await dispatch(\n          editReport(currentReport.id, newReportValues as ReportObject),\n        );\n      } else {\n        await dispatch(addReport(newReportValues as ReportObject));\n      }\n      onHide();\n    } catch (e) {\n      const { error } = await getClientErrorObject(e);\n      setCurrentReport({ error });\n    }\n    setCurrentReport({ isSubmitting: false });\n  };\n\n  const wrappedTitle = (\n    <StyledIconWrapper>\n      <Icons.Calendar />\n      <span className=\"text\">\n        {isEditMode ? t('Edit email report') : t('Schedule a new email report')}\n      </span>\n    </StyledIconWrapper>\n  );\n\n  const renderModalFooter = (\n    <>\n      <StyledFooterButton key=\"back\" onClick={onHide}>\n        {t('Cancel')}\n      </StyledFooterButton>\n      <StyledFooterButton\n        key=\"submit\"\n        buttonStyle=\"primary\"\n        onClick={onSave}\n        disabled={!currentReport.name}\n        loading={currentReport.isSubmitting}\n      >\n        {isEditMode ? t('Save') : t('Add')}\n      </StyledFooterButton>\n    </>\n  );\n\n  const renderMessageContentSection = (\n    <>\n      <StyledMessageContentTitle>\n        <h4>{t('Message content')}</h4>\n      </StyledMessageContentTitle>\n      <div className=\"inline-container\">\n        <StyledRadioGroup\n          onChange={(event: RadioChangeEvent) => {\n            setCurrentReport({ report_format: event.target.value });\n          }}\n          value={currentReport.report_format || defaultNotificationFormat}\n        >\n          {isTextBasedChart && (\n            <StyledRadio value={NotificationFormats.Text}>\n              {t('Text embedded in email')}\n            </StyledRadio>\n          )}\n          <StyledRadio value={NotificationFormats.PNG}>\n            {t('Image (PNG) embedded in email')}\n          </StyledRadio>\n          <StyledRadio value={NotificationFormats.CSV}>\n            {t('Formatted CSV attached in email')}\n          </StyledRadio>\n        </StyledRadioGroup>\n      </div>\n    </>\n  );\n  const renderCustomWidthSection = (\n    <StyledInputContainer>\n      <div className=\"control-label\" css={CustomWidthHeaderStyle}>\n        {t('Screenshot width')}\n      </div>\n      <div className=\"input-container\">\n        <Input\n          type=\"number\"\n          name=\"custom_width\"\n          value={currentReport?.custom_width || ''}\n          placeholder={t('Input custom width in pixels')}\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n            setCurrentReport({\n              custom_width: parseInt(event.target.value, 10) || null,\n            });\n          }}\n        />\n      </div>\n    </StyledInputContainer>\n  );\n\n  return (\n    <StyledModal\n      show={show}\n      onHide={onHide}\n      title={wrappedTitle}\n      footer={renderModalFooter}\n      width=\"432\"\n      centered\n    >\n      <StyledTopSection>\n        <LabeledErrorBoundInput\n          id=\"name\"\n          name=\"name\"\n          value={currentReport.name || ''}\n          placeholder={initialState.name}\n          required\n          validationMethods={{\n            onChange: ({ target }: { target: HTMLInputElement }) =>\n              setCurrentReport({ name: target.value }),\n          }}\n          label={t('Report Name')}\n          data-test=\"report-name-test\"\n        />\n        <LabeledErrorBoundInput\n          id=\"description\"\n          name=\"description\"\n          value={currentReport?.description || ''}\n          validationMethods={{\n            onChange: ({ target }: { target: HTMLInputElement }) => {\n              setCurrentReport({ description: target.value });\n            },\n          }}\n          label={t('Description')}\n          placeholder={t(\n            'Include a description that will be sent with your report',\n          )}\n          css={noBottomMargin}\n          data-test=\"report-description-test\"\n        />\n      </StyledTopSection>\n\n      <StyledBottomSection>\n        <StyledScheduleTitle>\n          <h4 css={(theme: SupersetTheme) => SectionHeaderStyle(theme)}>\n            {t('Schedule')}\n          </h4>\n          <p>{t('The report will be sent to your email at')}</p>\n        </StyledScheduleTitle>\n\n        <StyledCronPicker\n          clearButton={false}\n          value={currentReport.crontab || '0 12 * * 1'}\n          setValue={(newValue: string) => {\n            setCurrentReport({ crontab: newValue });\n          }}\n          onError={setCronError}\n        />\n        <StyledCronError>{cronError}</StyledCronError>\n        <div\n          className=\"control-label\"\n          css={(theme: SupersetTheme) => TimezoneHeaderStyle(theme)}\n        >\n          {t('Timezone')}\n        </div>\n        <TimezoneSelector\n          timezone={currentReport.timezone}\n          onTimezoneChange={value => {\n            setCurrentReport({ timezone: value });\n          }}\n        />\n        {isChart && renderMessageContentSection}\n        {(!isChart || !isTextBasedChart) && renderCustomWidthSection}\n      </StyledBottomSection>\n      {currentReport.error && (\n        <Alert\n          type=\"error\"\n          css={(theme: SupersetTheme) => antDErrorAlertStyles(theme)}\n          message={\n            isEditMode\n              ? t('Failed to update report')\n              : t('Failed to create report')\n          }\n          description={currentReport.error}\n        />\n      )}\n    </StyledModal>\n  );\n}\n\nexport default withToasts(ReportModal);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}