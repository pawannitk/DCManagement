{"ast":null,"code":"import _isObject from \"lodash/isObject\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useRef } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport rison from 'rison';\nimport { SupersetClient, runningQueryStateList } from '@superset-ui/core';\nimport useInterval from 'src/SqlLab/utils/useInterval';\nimport { refreshQueries, clearInactiveQueries } from 'src/SqlLab/actions/sqlLab';\nexport const QUERY_UPDATE_FREQ = 2000;\nconst QUERY_UPDATE_BUFFER_MS = 5000;\nconst MAX_QUERY_AGE_TO_POLL = 21600000;\nconst QUERY_TIMEOUT_LIMIT = 10000;\n// returns true if the Query.state matches one of the specifc values indicating the query is still processing on server\nexport const isQueryRunning = (q) => runningQueryStateList.includes(q == null ? void 0 : q.state);\n// returns true if at least one query is running and within the max age to poll timeframe\nexport const shouldCheckForQueries = (queryList) => {\n  let shouldCheck = false;\n  const now = Date.now();\n  if (_isObject(queryList)) {\n    shouldCheck = Object.values(queryList).some((q) => isQueryRunning(q) && now - (q == null ? void 0 : q.startDttm) < MAX_QUERY_AGE_TO_POLL);\n  }\n  return shouldCheck;\n};\nfunction QueryAutoRefresh({ queries, queriesLastUpdate }) {\n  // We do not want to spam requests in the case of slow connections and potentially receive responses out of order\n  // pendingRequest check ensures we only have one active http call to check for query statuses\n  const pendingRequestRef = useRef(false);\n  const cleanInactiveRequestRef = useRef(false);\n  const dispatch = useDispatch();\n  const checkForRefresh = () => {\n    const shouldRequestChecking = shouldCheckForQueries(queries);\n    if (!pendingRequestRef.current && shouldRequestChecking) {\n      const params = rison.encode({\n        last_updated_ms: queriesLastUpdate - QUERY_UPDATE_BUFFER_MS\n      });\n      pendingRequestRef.current = true;\n      SupersetClient.get({\n        endpoint: `/api/v1/query/updated_since?q=${params}`,\n        timeout: QUERY_TIMEOUT_LIMIT,\n        parseMethod: 'json-bigint'\n      }).\n      then(({ json }) => {\n        if (json) {var _jsonPayload$result;\n          const jsonPayload = json;\n          if (jsonPayload != null && (_jsonPayload$result = jsonPayload.result) != null && _jsonPayload$result.length) {var _jsonPayload$result$r, _jsonPayload$result2;\n            const queries = (_jsonPayload$result$r = jsonPayload == null ? void 0 : (_jsonPayload$result2 = jsonPayload.result) == null ? void 0 : _jsonPayload$result2.reduce((acc, current) => {\n              acc[current.id] = current;\n              return acc;\n            }, {})) != null ? _jsonPayload$result$r : {};\n            dispatch(refreshQueries(queries));\n          } else\n          {\n            dispatch(clearInactiveQueries(QUERY_UPDATE_FREQ));\n          }\n        }\n      }).\n      catch(() => {}).\n      finally(() => {\n        pendingRequestRef.current = false;\n      });\n    }\n    if (!cleanInactiveRequestRef.current && !shouldRequestChecking) {\n      dispatch(clearInactiveQueries(QUERY_UPDATE_FREQ));\n      cleanInactiveRequestRef.current = true;\n    }\n  };\n  // Solves issue where direct usage of setInterval in function components\n  // uses stale props / state from closure\n  // See comments in the useInterval.ts file for more information\n  useInterval(() => {\n    checkForRefresh();\n  }, QUERY_UPDATE_FREQ);\n  return null;\n}__signature__(QueryAutoRefresh, \"useRef{pendingRequestRef}\\nuseRef{cleanInactiveRequestRef}\\nuseDispatch{dispatch}\\nuseInterval{}\", () => [useDispatch, useInterval]);const _default =\nQueryAutoRefresh;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(QUERY_UPDATE_FREQ, \"QUERY_UPDATE_FREQ\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/QueryAutoRefresh/index.tsx\");reactHotLoader.register(QUERY_UPDATE_BUFFER_MS, \"QUERY_UPDATE_BUFFER_MS\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/QueryAutoRefresh/index.tsx\");reactHotLoader.register(MAX_QUERY_AGE_TO_POLL, \"MAX_QUERY_AGE_TO_POLL\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/QueryAutoRefresh/index.tsx\");reactHotLoader.register(QUERY_TIMEOUT_LIMIT, \"QUERY_TIMEOUT_LIMIT\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/QueryAutoRefresh/index.tsx\");reactHotLoader.register(isQueryRunning, \"isQueryRunning\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/QueryAutoRefresh/index.tsx\");reactHotLoader.register(shouldCheckForQueries, \"shouldCheckForQueries\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/QueryAutoRefresh/index.tsx\");reactHotLoader.register(QueryAutoRefresh, \"QueryAutoRefresh\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/QueryAutoRefresh/index.tsx\");reactHotLoader.register(_default, \"default\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/QueryAutoRefresh/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["useRef","useDispatch","rison","SupersetClient","runningQueryStateList","useInterval","refreshQueries","clearInactiveQueries","QUERY_UPDATE_FREQ","QUERY_UPDATE_BUFFER_MS","MAX_QUERY_AGE_TO_POLL","QUERY_TIMEOUT_LIMIT","isQueryRunning","q","includes","state","shouldCheckForQueries","queryList","shouldCheck","now","Date","_isObject","Object","values","some","startDttm","QueryAutoRefresh","queries","queriesLastUpdate","pendingRequestRef","cleanInactiveRequestRef","dispatch","checkForRefresh","shouldRequestChecking","current","params","encode","last_updated_ms","get","endpoint","timeout","parseMethod","then","json","_jsonPayload$result","jsonPayload","result","length","_jsonPayload$result$r","_jsonPayload$result2","reduce","acc","id","catch","finally","__signature__","_default","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/QueryAutoRefresh/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { isObject } from 'lodash';\nimport rison from 'rison';\nimport {\n  SupersetClient,\n  Query,\n  runningQueryStateList,\n  QueryResponse,\n} from '@superset-ui/core';\nimport { QueryDictionary } from 'src/SqlLab/types';\nimport useInterval from 'src/SqlLab/utils/useInterval';\nimport {\n  refreshQueries,\n  clearInactiveQueries,\n} from 'src/SqlLab/actions/sqlLab';\n\nexport const QUERY_UPDATE_FREQ = 2000;\nconst QUERY_UPDATE_BUFFER_MS = 5000;\nconst MAX_QUERY_AGE_TO_POLL = 21600000;\nconst QUERY_TIMEOUT_LIMIT = 10000;\n\nexport interface QueryAutoRefreshProps {\n  queries: QueryDictionary;\n  queriesLastUpdate: number;\n}\n\n// returns true if the Query.state matches one of the specifc values indicating the query is still processing on server\nexport const isQueryRunning = (q: Query): boolean =>\n  runningQueryStateList.includes(q?.state);\n\n// returns true if at least one query is running and within the max age to poll timeframe\nexport const shouldCheckForQueries = (queryList: QueryDictionary): boolean => {\n  let shouldCheck = false;\n  const now = Date.now();\n  if (isObject(queryList)) {\n    shouldCheck = Object.values(queryList).some(\n      q => isQueryRunning(q) && now - q?.startDttm < MAX_QUERY_AGE_TO_POLL,\n    );\n  }\n  return shouldCheck;\n};\n\nfunction QueryAutoRefresh({\n  queries,\n  queriesLastUpdate,\n}: QueryAutoRefreshProps) {\n  // We do not want to spam requests in the case of slow connections and potentially receive responses out of order\n  // pendingRequest check ensures we only have one active http call to check for query statuses\n  const pendingRequestRef = useRef(false);\n  const cleanInactiveRequestRef = useRef(false);\n  const dispatch = useDispatch();\n\n  const checkForRefresh = () => {\n    const shouldRequestChecking = shouldCheckForQueries(queries);\n    if (!pendingRequestRef.current && shouldRequestChecking) {\n      const params = rison.encode({\n        last_updated_ms: queriesLastUpdate - QUERY_UPDATE_BUFFER_MS,\n      });\n\n      pendingRequestRef.current = true;\n      SupersetClient.get({\n        endpoint: `/api/v1/query/updated_since?q=${params}`,\n        timeout: QUERY_TIMEOUT_LIMIT,\n        parseMethod: 'json-bigint',\n      })\n        .then(({ json }) => {\n          if (json) {\n            const jsonPayload = json as { result?: QueryResponse[] };\n            if (jsonPayload?.result?.length) {\n              const queries =\n                jsonPayload?.result?.reduce((acc, current) => {\n                  acc[current.id] = current;\n                  return acc;\n                }, {}) ?? {};\n              dispatch(refreshQueries(queries));\n            } else {\n              dispatch(clearInactiveQueries(QUERY_UPDATE_FREQ));\n            }\n          }\n        })\n        .catch(() => {})\n        .finally(() => {\n          pendingRequestRef.current = false;\n        });\n    }\n    if (!cleanInactiveRequestRef.current && !shouldRequestChecking) {\n      dispatch(clearInactiveQueries(QUERY_UPDATE_FREQ));\n      cleanInactiveRequestRef.current = true;\n    }\n  };\n\n  // Solves issue where direct usage of setInterval in function components\n  // uses stale props / state from closure\n  // See comments in the useInterval.ts file for more information\n  useInterval(() => {\n    checkForRefresh();\n  }, QUERY_UPDATE_FREQ);\n\n  return null;\n}\n\nexport default QueryAutoRefresh;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}