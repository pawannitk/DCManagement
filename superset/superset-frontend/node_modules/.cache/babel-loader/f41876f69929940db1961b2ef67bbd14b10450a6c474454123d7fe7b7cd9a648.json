{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { css, styled, usePrevious, useTheme } from '@superset-ui/core';\nimport { Global } from '@emotion/react';\nimport { SQL_EDITOR_LEFTBAR_WIDTH } from 'src/SqlLab/constants';\nimport { queryEditorSetSelectedText } from 'src/SqlLab/actions/sqlLab';\nimport { FullSQLEditor as AceEditor } from 'src/components/AsyncAceEditor';\nimport useQueryEditor from 'src/SqlLab/hooks/useQueryEditor';\nimport { useAnnotations } from './useAnnotations';\nimport { useKeywords } from './useKeywords';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst StyledAceEditor = styled(AceEditor)`\n  ${({ theme }) => css`\n    && {\n      // double class is better than !important\n      border: 1px solid ${theme.colors.grayscale.light2};\n      font-feature-settings:\n        'liga' off,\n        'calt' off;\n    }\n  `}\n`;\nconst AceEditorWrapper = ({ autocomplete, onBlur = () => {}, onChange = () => {}, queryEditorId, onCursorPositionChange, height, hotkeys }) => {var _queryEditor$sql, _queryEditor$cursorPo;\n  const dispatch = useDispatch();\n  const queryEditor = useQueryEditor(queryEditorId, [\n  'id',\n  'dbId',\n  'sql',\n  'catalog',\n  'schema',\n  'templateParams',\n  'cursorPosition']\n  );\n  const currentSql = (_queryEditor$sql = queryEditor.sql) != null ? _queryEditor$sql : '';\n  const cursorPosition = (_queryEditor$cursorPo = queryEditor.cursorPosition) != null ? _queryEditor$cursorPo : { row: 0, column: 0 };\n  const [sql, setSql] = useState(currentSql);\n  // The editor changeSelection is called multiple times in a row,\n  // faster than React reconciliation process, so the selected text\n  // needs to be stored out of the state to ensure changes to it\n  // get saved immediately\n  const currentSelectionCache = useRef('');\n  useEffect(() => {\n    // Making sure no text is selected from previous mount\n    dispatch(queryEditorSetSelectedText(queryEditor, null));\n  }, []);\n  const prevSql = usePrevious(currentSql);\n  useEffect(() => {\n    if (currentSql !== prevSql) {\n      setSql(currentSql);\n    }\n  }, [currentSql]);\n  const onBlurSql = () => {\n    onBlur(sql);\n  };\n  const onAltEnter = () => {\n    onBlur(sql);\n  };\n  const onEditorLoad = (editor) => {\n    editor.commands.addCommand({\n      name: 'runQuery',\n      bindKey: { win: 'Alt-enter', mac: 'Alt-enter' },\n      exec: () => {\n        onAltEnter();\n      }\n    });\n    hotkeys.forEach((keyConfig) => {\n      editor.commands.addCommand({\n        name: keyConfig.name,\n        bindKey: { win: keyConfig.key, mac: keyConfig.key },\n        exec: keyConfig.func\n      });\n    });\n    editor.$blockScrolling = Infinity; // eslint-disable-line no-param-reassign\n    editor.selection.on('changeSelection', () => {\n      const selectedText = editor.getSelectedText();\n      // Backspace trigger 1 character selection, ignoring\n      if (selectedText !== currentSelectionCache.current &&\n      selectedText.length !== 1) {\n        dispatch(queryEditorSetSelectedText(queryEditor, selectedText));\n      }\n      currentSelectionCache.current = selectedText;\n    });\n    editor.selection.on('changeCursor', () => {\n      const cursor = editor.getCursorPosition();\n      onCursorPositionChange(cursor);\n    });\n    const { row, column } = cursorPosition;\n    editor.moveCursorToPosition({ row, column });\n    editor.focus();\n    editor.scrollToLine(row, true, true);\n  };\n  const onChangeText = (text) => {\n    if (text !== sql) {\n      setSql(text);\n      onChange(text);\n    }\n  };\n  const { data: annotations } = useAnnotations({\n    dbId: queryEditor.dbId,\n    catalog: queryEditor.catalog,\n    schema: queryEditor.schema,\n    sql: currentSql,\n    templateParams: queryEditor.templateParams\n  });\n  const keywords = useKeywords({\n    queryEditorId,\n    dbId: queryEditor.dbId,\n    catalog: queryEditor.catalog,\n    schema: queryEditor.schema\n  }, !autocomplete);\n  const theme = useTheme();\n  return ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(Global, { styles: css`\n          .ace_text-layer {\n            width: 100% !important;\n          }\n\n          .ace_autocomplete {\n            // Use !important because Ace Editor applies extra CSS at the last second\n            // when opening the autocomplete.\n            width: ${theme.gridUnit * 130}px !important;\n          }\n\n          .ace_tooltip {\n            max-width: ${SQL_EDITOR_LEFTBAR_WIDTH}px;\n          }\n\n          .ace_scroller {\n            background-color: ${theme.colors.grayscale.light4};\n          }\n        ` }),\n  ___EmotionJSX(StyledAceEditor, { keywords: keywords, onLoad: onEditorLoad, onBlur: onBlurSql, height: height, onChange: onChangeText, width: \"100%\", editorProps: { $blockScrolling: true }, enableLiveAutocompletion: autocomplete, value: sql, annotations: annotations })\n  );\n};__signature__(AceEditorWrapper, \"useDispatch{dispatch}\\nuseQueryEditor{queryEditor}\\nuseState{[sql, setSql](currentSql)}\\nuseRef{currentSelectionCache}\\nuseEffect{}\\nusePrevious{prevSql}\\nuseEffect{}\\nuseAnnotations{{ data: annotations }}\\nuseKeywords{keywords}\\nuseTheme{theme}\", () => [useDispatch, useQueryEditor, usePrevious, useAnnotations, useKeywords, useTheme]);const _default =\nAceEditorWrapper;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(StyledAceEditor, \"StyledAceEditor\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/AceEditorWrapper/index.tsx\");reactHotLoader.register(AceEditorWrapper, \"AceEditorWrapper\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/AceEditorWrapper/index.tsx\");reactHotLoader.register(_default, \"default\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/AceEditorWrapper/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["React","useState","useEffect","useRef","useDispatch","css","styled","usePrevious","useTheme","Global","SQL_EDITOR_LEFTBAR_WIDTH","queryEditorSetSelectedText","FullSQLEditor","AceEditor","useQueryEditor","useAnnotations","useKeywords","jsx","___EmotionJSX","StyledAceEditor","theme","colors","grayscale","light2","AceEditorWrapper","autocomplete","onBlur","onChange","queryEditorId","onCursorPositionChange","height","hotkeys","_queryEditor$sql","_queryEditor$cursorPo","dispatch","queryEditor","currentSql","sql","cursorPosition","row","column","setSql","currentSelectionCache","prevSql","onBlurSql","onAltEnter","onEditorLoad","editor","commands","addCommand","name","bindKey","win","mac","exec","forEach","keyConfig","key","func","$blockScrolling","Infinity","selection","on","selectedText","getSelectedText","current","length","cursor","getCursorPosition","moveCursorToPosition","focus","scrollToLine","onChangeText","text","data","annotations","dbId","catalog","schema","templateParams","keywords","Fragment","styles","gridUnit","light4","onLoad","width","editorProps","enableLiveAutocompletion","value","__signature__","_default","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/AceEditorWrapper/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect, useRef } from 'react';\nimport type { IAceEditor } from 'react-ace/lib/types';\nimport { useDispatch } from 'react-redux';\nimport { css, styled, usePrevious, useTheme } from '@superset-ui/core';\nimport { Global } from '@emotion/react';\n\nimport { SQL_EDITOR_LEFTBAR_WIDTH } from 'src/SqlLab/constants';\nimport { queryEditorSetSelectedText } from 'src/SqlLab/actions/sqlLab';\nimport { FullSQLEditor as AceEditor } from 'src/components/AsyncAceEditor';\nimport type { KeyboardShortcut } from 'src/SqlLab/components/KeyboardShortcutButton';\nimport useQueryEditor from 'src/SqlLab/hooks/useQueryEditor';\nimport type { CursorPosition } from 'src/SqlLab/types';\nimport { useAnnotations } from './useAnnotations';\nimport { useKeywords } from './useKeywords';\n\ntype HotKey = {\n  key: KeyboardShortcut;\n  descr?: string;\n  name: string;\n  func: (aceEditor: IAceEditor) => void;\n};\n\ntype AceEditorWrapperProps = {\n  autocomplete: boolean;\n  onBlur: (sql: string) => void;\n  onChange: (sql: string) => void;\n  queryEditorId: string;\n  onCursorPositionChange: (position: CursorPosition) => void;\n  height: string;\n  hotkeys: HotKey[];\n};\n\nconst StyledAceEditor = styled(AceEditor)`\n  ${({ theme }) => css`\n    && {\n      // double class is better than !important\n      border: 1px solid ${theme.colors.grayscale.light2};\n      font-feature-settings:\n        'liga' off,\n        'calt' off;\n    }\n  `}\n`;\n\nconst AceEditorWrapper = ({\n  autocomplete,\n  onBlur = () => {},\n  onChange = () => {},\n  queryEditorId,\n  onCursorPositionChange,\n  height,\n  hotkeys,\n}: AceEditorWrapperProps) => {\n  const dispatch = useDispatch();\n  const queryEditor = useQueryEditor(queryEditorId, [\n    'id',\n    'dbId',\n    'sql',\n    'catalog',\n    'schema',\n    'templateParams',\n    'cursorPosition',\n  ]);\n\n  const currentSql = queryEditor.sql ?? '';\n  const cursorPosition = queryEditor.cursorPosition ?? { row: 0, column: 0 };\n  const [sql, setSql] = useState(currentSql);\n\n  // The editor changeSelection is called multiple times in a row,\n  // faster than React reconciliation process, so the selected text\n  // needs to be stored out of the state to ensure changes to it\n  // get saved immediately\n  const currentSelectionCache = useRef('');\n\n  useEffect(() => {\n    // Making sure no text is selected from previous mount\n    dispatch(queryEditorSetSelectedText(queryEditor, null));\n  }, []);\n\n  const prevSql = usePrevious(currentSql);\n\n  useEffect(() => {\n    if (currentSql !== prevSql) {\n      setSql(currentSql);\n    }\n  }, [currentSql]);\n\n  const onBlurSql = () => {\n    onBlur(sql);\n  };\n\n  const onAltEnter = () => {\n    onBlur(sql);\n  };\n\n  const onEditorLoad = (editor: any) => {\n    editor.commands.addCommand({\n      name: 'runQuery',\n      bindKey: { win: 'Alt-enter', mac: 'Alt-enter' },\n      exec: () => {\n        onAltEnter();\n      },\n    });\n\n    hotkeys.forEach(keyConfig => {\n      editor.commands.addCommand({\n        name: keyConfig.name,\n        bindKey: { win: keyConfig.key, mac: keyConfig.key },\n        exec: keyConfig.func,\n      });\n    });\n\n    editor.$blockScrolling = Infinity; // eslint-disable-line no-param-reassign\n    editor.selection.on('changeSelection', () => {\n      const selectedText = editor.getSelectedText();\n\n      // Backspace trigger 1 character selection, ignoring\n      if (\n        selectedText !== currentSelectionCache.current &&\n        selectedText.length !== 1\n      ) {\n        dispatch(queryEditorSetSelectedText(queryEditor, selectedText));\n      }\n\n      currentSelectionCache.current = selectedText;\n    });\n    editor.selection.on('changeCursor', () => {\n      const cursor = editor.getCursorPosition();\n      onCursorPositionChange(cursor);\n    });\n\n    const { row, column } = cursorPosition;\n    editor.moveCursorToPosition({ row, column });\n    editor.focus();\n    editor.scrollToLine(row, true, true);\n  };\n\n  const onChangeText = (text: string) => {\n    if (text !== sql) {\n      setSql(text);\n      onChange(text);\n    }\n  };\n\n  const { data: annotations } = useAnnotations({\n    dbId: queryEditor.dbId,\n    catalog: queryEditor.catalog,\n    schema: queryEditor.schema,\n    sql: currentSql,\n    templateParams: queryEditor.templateParams,\n  });\n\n  const keywords = useKeywords(\n    {\n      queryEditorId,\n      dbId: queryEditor.dbId,\n      catalog: queryEditor.catalog,\n      schema: queryEditor.schema,\n    },\n    !autocomplete,\n  );\n  const theme = useTheme();\n\n  return (\n    <>\n      <Global\n        styles={css`\n          .ace_text-layer {\n            width: 100% !important;\n          }\n\n          .ace_autocomplete {\n            // Use !important because Ace Editor applies extra CSS at the last second\n            // when opening the autocomplete.\n            width: ${theme.gridUnit * 130}px !important;\n          }\n\n          .ace_tooltip {\n            max-width: ${SQL_EDITOR_LEFTBAR_WIDTH}px;\n          }\n\n          .ace_scroller {\n            background-color: ${theme.colors.grayscale.light4};\n          }\n        `}\n      />\n      <StyledAceEditor\n        keywords={keywords}\n        onLoad={onEditorLoad}\n        onBlur={onBlurSql}\n        height={height}\n        onChange={onChangeText}\n        width=\"100%\"\n        editorProps={{ $blockScrolling: true }}\n        enableLiveAutocompletion={autocomplete}\n        value={sql}\n        annotations={annotations}\n      />\n    </>\n  );\n};\n\nexport default AceEditorWrapper;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}