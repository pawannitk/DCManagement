{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { buildQueryContext, ensureIsArray, getXAxisColumn, isXAxisSet, normalizeOrderBy } from '@superset-ui/core';\nimport { contributionOperator, extractExtraMetrics, flattenOperator, isTimeComparison, pivotOperator, prophetOperator, renameOperator, resampleOperator, rollingWindowOperator, sortOperator, timeComparePivotOperator, timeCompareOperator } from '@superset-ui/chart-controls';\nexport default function buildQuery(formData) {\n  const { groupby } = formData;\n  return buildQueryContext(formData, (baseQueryObject) => {\n    /* the `pivotOperatorInRuntime` determines how to pivot the dataframe returned from the raw query.\n       1. If it's a time compared query, there will return a pivoted dataframe that append time compared metrics. for instance:\n                                 MAX(value) MAX(value)__1 year ago MIN(value) MIN(value)__1 year ago\n          city               LA                     LA         LA                     LA\n          __timestamp\n          2015-01-01      568.0                  671.0        5.0                    6.0\n          2015-02-01      407.0                  649.0        4.0                    3.0\n          2015-03-01      318.0                  465.0        0.0                    3.0\n            2. If it's a normal query, there will return a pivoted dataframe.\n                          MAX(value)  MIN(value)\n          city               LA          LA\n          __timestamp\n          2015-01-01      568.0         5.0\n          2015-02-01      407.0         4.0\n          2015-03-01      318.0         0.0\n          */\n\n\n\n\n    // only add series limit metric if it's explicitly needed e.g. for sorting\n    const extra_metrics = extractExtraMetrics(formData);\n    const pivotOperatorInRuntime = isTimeComparison(formData, baseQueryObject) ?\n    timeComparePivotOperator(formData, baseQueryObject) :\n    pivotOperator(formData, baseQueryObject);\n    const columns = [\n    ...(isXAxisSet(formData) ? ensureIsArray(getXAxisColumn(formData)) : []),\n    ...ensureIsArray(groupby)];\n\n    const time_offsets = isTimeComparison(formData, baseQueryObject) ?\n    formData.time_compare :\n    [];\n    return [\n    {\n      ...baseQueryObject,\n      metrics: [...(baseQueryObject.metrics || []), ...extra_metrics],\n      columns,\n      series_columns: groupby,\n      ...(isXAxisSet(formData) ? {} : { is_timeseries: true }),\n      // todo: move `normalizeOrderBy to extractQueryFields`\n      orderby: normalizeOrderBy(baseQueryObject).orderby,\n      time_offsets,\n      /* Note that:\n        1. The resample, rolling, cum, timeCompare operators should be after pivot.\n        2. the flatOperator makes multiIndex Dataframe into flat Dataframe\n      */\n      post_processing: [\n      pivotOperatorInRuntime,\n      rollingWindowOperator(formData, baseQueryObject),\n      timeCompareOperator(formData, baseQueryObject),\n      resampleOperator(formData, baseQueryObject),\n      renameOperator(formData, baseQueryObject),\n      contributionOperator(formData, baseQueryObject, time_offsets),\n      sortOperator(formData, baseQueryObject),\n      flattenOperator(formData, baseQueryObject),\n      // todo: move prophet before flatten\n      prophetOperator(formData, baseQueryObject)]\n\n    }];\n\n  });\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(buildQuery, \"buildQuery\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-echarts/src/Timeseries/buildQuery.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["buildQueryContext","ensureIsArray","getXAxisColumn","isXAxisSet","normalizeOrderBy","contributionOperator","extractExtraMetrics","flattenOperator","isTimeComparison","pivotOperator","prophetOperator","renameOperator","resampleOperator","rollingWindowOperator","sortOperator","timeComparePivotOperator","timeCompareOperator","buildQuery","formData","groupby","baseQueryObject","extra_metrics","pivotOperatorInRuntime","columns","time_offsets","time_compare","metrics","series_columns","is_timeseries","orderby","post_processing","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-echarts/src/Timeseries/buildQuery.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  buildQueryContext,\n  ensureIsArray,\n  getXAxisColumn,\n  isXAxisSet,\n  normalizeOrderBy,\n  PostProcessingPivot,\n  QueryFormData,\n} from '@superset-ui/core';\nimport {\n  contributionOperator,\n  extractExtraMetrics,\n  flattenOperator,\n  isTimeComparison,\n  pivotOperator,\n  prophetOperator,\n  renameOperator,\n  resampleOperator,\n  rollingWindowOperator,\n  sortOperator,\n  timeComparePivotOperator,\n  timeCompareOperator,\n} from '@superset-ui/chart-controls';\n\nexport default function buildQuery(formData: QueryFormData) {\n  const { groupby } = formData;\n  return buildQueryContext(formData, baseQueryObject => {\n    /* the `pivotOperatorInRuntime` determines how to pivot the dataframe returned from the raw query.\n       1. If it's a time compared query, there will return a pivoted dataframe that append time compared metrics. for instance:\n\n                            MAX(value) MAX(value)__1 year ago MIN(value) MIN(value)__1 year ago\n          city               LA                     LA         LA                     LA\n          __timestamp\n          2015-01-01      568.0                  671.0        5.0                    6.0\n          2015-02-01      407.0                  649.0        4.0                    3.0\n          2015-03-01      318.0                  465.0        0.0                    3.0\n\n       2. If it's a normal query, there will return a pivoted dataframe.\n\n                     MAX(value)  MIN(value)\n          city               LA          LA\n          __timestamp\n          2015-01-01      568.0         5.0\n          2015-02-01      407.0         4.0\n          2015-03-01      318.0         0.0\n\n     */\n    // only add series limit metric if it's explicitly needed e.g. for sorting\n    const extra_metrics = extractExtraMetrics(formData);\n\n    const pivotOperatorInRuntime: PostProcessingPivot = isTimeComparison(\n      formData,\n      baseQueryObject,\n    )\n      ? timeComparePivotOperator(formData, baseQueryObject)\n      : pivotOperator(formData, baseQueryObject);\n\n    const columns = [\n      ...(isXAxisSet(formData) ? ensureIsArray(getXAxisColumn(formData)) : []),\n      ...ensureIsArray(groupby),\n    ];\n\n    const time_offsets = isTimeComparison(formData, baseQueryObject)\n      ? formData.time_compare\n      : [];\n\n    return [\n      {\n        ...baseQueryObject,\n        metrics: [...(baseQueryObject.metrics || []), ...extra_metrics],\n        columns,\n        series_columns: groupby,\n        ...(isXAxisSet(formData) ? {} : { is_timeseries: true }),\n        // todo: move `normalizeOrderBy to extractQueryFields`\n        orderby: normalizeOrderBy(baseQueryObject).orderby,\n        time_offsets,\n        /* Note that:\n          1. The resample, rolling, cum, timeCompare operators should be after pivot.\n          2. the flatOperator makes multiIndex Dataframe into flat Dataframe\n        */\n        post_processing: [\n          pivotOperatorInRuntime,\n          rollingWindowOperator(formData, baseQueryObject),\n          timeCompareOperator(formData, baseQueryObject),\n          resampleOperator(formData, baseQueryObject),\n          renameOperator(formData, baseQueryObject),\n          contributionOperator(formData, baseQueryObject, time_offsets),\n          sortOperator(formData, baseQueryObject),\n          flattenOperator(formData, baseQueryObject),\n          // todo: move prophet before flatten\n          prophetOperator(formData, baseQueryObject),\n        ],\n      },\n    ];\n  });\n}\n"],"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAkBA,SACEA,iBAAiB,EACjBC,aAAa,EACbC,cAAc,EACdC,UAAU,EACVC,gBAAgB,QAGX,mBAAmB;AAC1B,SACEC,oBAAoB,EACpBC,mBAAmB,EACnBC,eAAe,EACfC,gBAAgB,EAChBC,aAAa,EACbC,eAAe,EACfC,cAAc,EACdC,gBAAgB,EAChBC,qBAAqB,EACrBC,YAAY,EACZC,wBAAwB,EACxBC,mBAAmB,QACd,6BAA6B;AAEpC,eAAc,SAAUC,UAAUA,CAACC,QAAuB;EACxD,MAAM,EAAEC,OAAO,EAAE,GAAGD,QAAQ;EAC5B,OAAOlB,iBAAiB,CAACkB,QAAQ,EAAE,CAAAE,eAAe,KAAG;IACnD;;;;;;;;;;;;;;;;;;;;IAoBA;IACA,MAAMC,aAAa,GAAGf,mBAAmB,CAACY,QAAQ,CAAC;IAEnD,MAAMI,sBAAsB,GAAwBd,gBAAgB,CAClEU,QAAQ,EACRE,eAAe,CAChB;IACGL,wBAAwB,CAACG,QAAQ,EAAEE,eAAe,CAAC;IACnDX,aAAa,CAACS,QAAQ,EAAEE,eAAe,CAAC;IAE5C,MAAMG,OAAO,GAAG;IACd,IAAIpB,UAAU,CAACe,QAAQ,CAAC,GAAGjB,aAAa,CAACC,cAAc,CAACgB,QAAQ,CAAC,CAAC,GAAG,EAAE,CAAC;IACxE,GAAGjB,aAAa,CAACkB,OAAO,CAAC,CAC1B;;IAED,MAAMK,YAAY,GAAGhB,gBAAgB,CAACU,QAAQ,EAAEE,eAAe,CAAC;IAC5DF,QAAQ,CAACO,YAAY;IACrB,EAAE;IAEN,OAAO;IACL;MACE,GAAGL,eAAe;MAClBM,OAAO,EAAE,CAAC,IAAIN,eAAe,CAACM,OAAO,IAAI,EAAE,CAAC,EAAE,GAAGL,aAAa,CAAC;MAC/DE,OAAO;MACPI,cAAc,EAAER,OAAO;MACvB,IAAIhB,UAAU,CAACe,QAAQ,CAAC,GAAG,EAAE,GAAG,EAAEU,aAAa,EAAE,IAAI,EAAE,CAAC;MACxD;MACAC,OAAO,EAAEzB,gBAAgB,CAACgB,eAAe,CAAC,CAACS,OAAO;MAClDL,YAAY;MACZ;;;;MAIAM,eAAe,EAAE;MACfR,sBAAsB;MACtBT,qBAAqB,CAACK,QAAQ,EAAEE,eAAe,CAAC;MAChDJ,mBAAmB,CAACE,QAAQ,EAAEE,eAAe,CAAC;MAC9CR,gBAAgB,CAACM,QAAQ,EAAEE,eAAe,CAAC;MAC3CT,cAAc,CAACO,QAAQ,EAAEE,eAAe,CAAC;MACzCf,oBAAoB,CAACa,QAAQ,EAAEE,eAAe,EAAEI,YAAY,CAAC;MAC7DV,YAAY,CAACI,QAAQ,EAAEE,eAAe,CAAC;MACvCb,eAAe,CAACW,QAAQ,EAAEE,eAAe,CAAC;MAC1C;MACAV,eAAe,CAACQ,QAAQ,EAAEE,eAAe,CAAC;;KAE7C,CACF;;EACH,CAAC,CAAC;AACJ,CAAC,mBAAAW,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAC,OAAA,GAAAC,SAAA,MAAAH,cAAA,WAAAA,cAAA,CAAAI,QAAA,CAvEuBlB,UAAU,4JAAAmB,WAAA,UAAAJ,oBAAA,mBAAAA,oBAAA,CAAAI,WAAA,GAAAF,SAAA,CAAAE,WAAA,IAAAA,WAAA,CAAAC,MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}