{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n// TODO: Replace to react-use-event-hook once https://github.com/facebook/react/pull/25881 is released\nimport useEventCallback from 'use-event-callback';\n/**\n * Similar to useCallback, with a few subtle differences:\n * @external\n * https://github.com/reactjs/rfcs/blob/useevent/text/0000-useevent.md#internal-implementation\n * @example\n * const onStateChanged = useEffectEvent((state: T) => log(['clicked', state]));\n *\n * useEffect(() => {\n *   onStateChanged(state);\n * }, [onStateChanged, state]);\n * // ^ onStateChanged is guaranteed to never change and always be up to date!\n */\nexport default function useEffectEvent(fn) {\n  return useEventCallback(fn);\n}__signature__(useEffectEvent, \"useEventCallback{}\", () => [useEventCallback]);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(useEffectEvent, \"useEffectEvent\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/hooks/useEffectEvent.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["useEventCallback","useEffectEvent","fn","__signature__","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/hooks/useEffectEvent.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n// TODO: Replace to react-use-event-hook once https://github.com/facebook/react/pull/25881 is released\nimport useEventCallback from 'use-event-callback';\n\ndeclare type Fn<ARGS extends any[], R> = (...args: ARGS) => R;\n\n/**\n * Similar to useCallback, with a few subtle differences:\n * @external\n * https://github.com/reactjs/rfcs/blob/useevent/text/0000-useevent.md#internal-implementation\n * @example\n * const onStateChanged = useEffectEvent((state: T) => log(['clicked', state]));\n *\n * useEffect(() => {\n *   onStateChanged(state);\n * }, [onStateChanged, state]);\n * // ^ onStateChanged is guaranteed to never change and always be up to date!\n */\nexport default function useEffectEvent<A extends any[], R>(\n  fn: Fn<A, R>,\n): Fn<A, R> {\n  return useEventCallback(fn);\n}\n"],"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAkBA;AACA,OAAOA,gBAAgB,MAAM,oBAAoB;AAIjD;;;;;;;;;;;;AAYA,eAAc,SAAUC,cAAcA,CACpCC,EAAY;EAEZ,OAAOF,gBAAgB,CAACE,EAAE,CAAC;AAC7B,CAACC,aAAA,CAJuBF,cAAc,+BAG7BD,gBAAgB,sBAAAI,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAC,OAAA,GAAAC,SAAA,MAAAH,cAAA,WAAAA,cAAA,CAAAI,QAAA,CAHDP,cAAc,kIAAAQ,WAAA,UAAAJ,oBAAA,mBAAAA,oBAAA,CAAAI,WAAA,GAAAF,SAAA,CAAAE,WAAA,IAAAA,WAAA,CAAAC,MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}