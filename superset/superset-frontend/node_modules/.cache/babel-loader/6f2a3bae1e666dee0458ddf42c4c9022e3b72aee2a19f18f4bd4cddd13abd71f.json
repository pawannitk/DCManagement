{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport Modal from 'src/components/Modal';\nimport Button from 'src/components/Button';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst ModalTrigger = /*#__PURE__*/React.forwardRef(__signature__((props, ref) => {\n  const [showModal, setShowModal] = useState(false);\n  const { beforeOpen = () => {}, onExit = () => {}, isButton = false, resizable = false, draggable = false, className = '', tooltip, modalFooter, triggerNode, destroyOnClose = true, modalBody, draggableConfig = {}, resizableConfig = {}, modalTitle, responsive, width, maxWidth } = props;\n  const close = () => {\n    setShowModal(false);\n    onExit == null ? void 0 : onExit();\n  };\n  const open = (e) => {\n    e.preventDefault();\n    beforeOpen == null ? void 0 : beforeOpen();\n    setShowModal(true);\n  };\n  if (ref) {\n    ref.current = { close, open, showModal }; // eslint-disable-line\n  }\n  /* eslint-disable jsx-a11y/interactive-supports-focus */\n  return ___EmotionJSX(React.Fragment, null,\n  isButton && ___EmotionJSX(Button, { className: \"modal-trigger\", \"data-test\": \"btn-modal-trigger\", tooltip: tooltip, onClick: open },\n  triggerNode\n  ),\n  !isButton && ___EmotionJSX(\"span\", { \"data-test\": \"span-modal-trigger\", onClick: open, role: \"button\" },\n  triggerNode\n  ),\n  ___EmotionJSX(Modal, { className: className, show: showModal, onHide: close, title: modalTitle, footer: modalFooter, hideFooter: !modalFooter, width: width, maxWidth: maxWidth, responsive: responsive, resizable: resizable, resizableConfig: resizableConfig, draggable: draggable, draggableConfig: draggableConfig, destroyOnClose: destroyOnClose },\n  modalBody\n  )\n  );\n}, \"useState{[showModal, setShowModal](false)}\"));const _default =\nModalTrigger;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(ModalTrigger, \"ModalTrigger\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/ModalTrigger/index.tsx\");reactHotLoader.register(_default, \"default\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/ModalTrigger/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["React","useState","Modal","Button","jsx","___EmotionJSX","ModalTrigger","forwardRef","__signature__","props","ref","showModal","setShowModal","beforeOpen","onExit","isButton","resizable","draggable","className","tooltip","modalFooter","triggerNode","destroyOnClose","modalBody","draggableConfig","resizableConfig","modalTitle","responsive","width","maxWidth","close","open","e","preventDefault","current","Fragment","onClick","role","show","onHide","title","footer","hideFooter","_default","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/components/ModalTrigger/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport Modal from 'src/components/Modal';\nimport Button from 'src/components/Button';\n\ninterface ModalTriggerProps {\n  dialogClassName?: string;\n  triggerNode: React.ReactNode;\n  modalTitle?: string;\n  modalBody?: React.ReactNode; // not required because it can be generated by beforeOpen\n  modalFooter?: React.ReactNode;\n  beforeOpen?: Function;\n  onExit?: Function;\n  isButton?: boolean;\n  className?: string;\n  tooltip?: string;\n  width?: string;\n  maxWidth?: string;\n  responsive?: boolean;\n  resizable?: boolean;\n  resizableConfig?: any;\n  draggable?: boolean;\n  draggableConfig?: any;\n  destroyOnClose?: boolean;\n}\n\nexport interface ModalTriggerRef {\n  current: {\n    close: Function;\n    open: Function;\n    showModal: boolean;\n  };\n}\n\nconst ModalTrigger = React.forwardRef(\n  (props: ModalTriggerProps, ref: ModalTriggerRef | null) => {\n    const [showModal, setShowModal] = useState(false);\n    const {\n      beforeOpen = () => {},\n      onExit = () => {},\n      isButton = false,\n      resizable = false,\n      draggable = false,\n      className = '',\n      tooltip,\n      modalFooter,\n      triggerNode,\n      destroyOnClose = true,\n      modalBody,\n      draggableConfig = {},\n      resizableConfig = {},\n      modalTitle,\n      responsive,\n      width,\n      maxWidth,\n    } = props;\n\n    const close = () => {\n      setShowModal(false);\n      onExit?.();\n    };\n\n    const open = (e: React.MouseEvent) => {\n      e.preventDefault();\n      beforeOpen?.();\n      setShowModal(true);\n    };\n\n    if (ref) {\n      ref.current = { close, open, showModal }; // eslint-disable-line\n    }\n\n    /* eslint-disable jsx-a11y/interactive-supports-focus */\n    return (\n      <>\n        {isButton && (\n          <Button\n            className=\"modal-trigger\"\n            data-test=\"btn-modal-trigger\"\n            tooltip={tooltip}\n            onClick={open}\n          >\n            {triggerNode}\n          </Button>\n        )}\n        {!isButton && (\n          <span data-test=\"span-modal-trigger\" onClick={open} role=\"button\">\n            {triggerNode}\n          </span>\n        )}\n        <Modal\n          className={className}\n          show={showModal}\n          onHide={close}\n          title={modalTitle}\n          footer={modalFooter}\n          hideFooter={!modalFooter}\n          width={width}\n          maxWidth={maxWidth}\n          responsive={responsive}\n          resizable={resizable}\n          resizableConfig={resizableConfig}\n          draggable={draggable}\n          draggableConfig={draggableConfig}\n          destroyOnClose={destroyOnClose}\n        >\n          {modalBody}\n        </Modal>\n      </>\n    );\n  },\n);\n\nexport default ModalTrigger;\n"],"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,sBAAsB;AACxC,OAAOC,MAAM,MAAM,uBAAuB,CAAC,SAAAC,GAAA,IAAAC,aAAA;AA+B3C,MAAMC,YAAY,gBAAGN,KAAK,CAACO,UAAU,CAAAC,aAAA,CACnC,CAACC,KAAwB,EAAEC,GAA2B,KAAI;EACxD,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,EACJY,UAAU,GAAGA,CAAA,KAAK,CAAE,CAAC,EACrBC,MAAM,GAAGA,CAAA,KAAK,CAAE,CAAC,EACjBC,QAAQ,GAAG,KAAK,EAChBC,SAAS,GAAG,KAAK,EACjBC,SAAS,GAAG,KAAK,EACjBC,SAAS,GAAG,EAAE,EACdC,OAAO,EACPC,WAAW,EACXC,WAAW,EACXC,cAAc,GAAG,IAAI,EACrBC,SAAS,EACTC,eAAe,GAAG,EAAE,EACpBC,eAAe,GAAG,EAAE,EACpBC,UAAU,EACVC,UAAU,EACVC,KAAK,EACLC,QAAQ,EACT,GAAGpB,KAAK;EAET,MAAMqB,KAAK,GAAGA,CAAA,KAAK;IACjBlB,YAAY,CAAC,KAAK,CAAC;IACnBE,MAAM,oBAANA,MAAM,CAAE,CAAE;EACZ,CAAC;EAED,MAAMiB,IAAI,GAAGA,CAACC,CAAmB,KAAI;IACnCA,CAAC,CAACC,cAAc,EAAE;IAClBpB,UAAU,oBAAVA,UAAU,CAAE,CAAE;IACdD,YAAY,CAAC,IAAI,CAAC;EACpB,CAAC;EAED,IAAIF,GAAG,EAAE;IACPA,GAAG,CAACwB,OAAO,GAAG,EAAEJ,KAAK,EAAEC,IAAI,EAAEpB,SAAS,EAAE,CAAC,CAAC;;EAG5C;EACA,OACEN,aAAA,CAAAL,KAAA,CAAAmC,QAAA;EACGpB,QAAQ,IACPV,aAAA,CAACF,MAAM,IACLe,SAAS,EAAC,eAAe,EACzB,aAAU,mBAAmB,EAC7BC,OAAO,EAAEA,OAAQ,EACjBiB,OAAO,EAAEL,IAAK;EAEbV;EACK,CACT;EACA,CAACN,QAAQ,IACRV,aAAA,WAAM,aAAU,oBAAoB,EAAC+B,OAAO,EAAEL,IAAK,EAACM,IAAI,EAAC,QAAQ;EAC9DhB;EACG,CACP;EACDhB,aAAA,CAACH,KAAK,IACJgB,SAAS,EAAEA,SAAU,EACrBoB,IAAI,EAAE3B,SAAU,EAChB4B,MAAM,EAAET,KAAM,EACdU,KAAK,EAAEd,UAAW,EAClBe,MAAM,EAAErB,WAAY,EACpBsB,UAAU,EAAE,CAACtB,WAAY,EACzBQ,KAAK,EAAEA,KAAM,EACbC,QAAQ,EAAEA,QAAS,EACnBF,UAAU,EAAEA,UAAW,EACvBX,SAAS,EAAEA,SAAU,EACrBS,eAAe,EAAEA,eAAgB,EACjCR,SAAS,EAAEA,SAAU,EACrBO,eAAe,EAAEA,eAAgB,EACjCF,cAAc,EAAEA,cAAe;EAE9BC;EACI;EACT,CAAG;AAEP,CAAC,gDACF,CAAC,MAAAoB,QAAA;AAEarC,YAAY,CAA3B,eAAAqC,QAAA,CAA4B,mBAAAC,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAC,OAAA,GAAAC,SAAA,MAAAH,cAAA,WAAAA,cAAA,CAAAI,QAAA,CA/EtB1C,YAAY,kHAAAsC,cAAA,CAAAI,QAAA,CAAAL,QAAA,qIAAAM,WAAA,UAAAJ,oBAAA,mBAAAA,oBAAA,CAAAI,WAAA,GAAAF,SAAA,CAAAE,WAAA,IAAAA,WAAA,CAAAC,MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}