{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { isAdhocMetricSimple, isAdhocMetricSQL, isSavedMetric, isSimpleAdhocFilter } from '@superset-ui/core';\nconst isControlValueCompatibleWithDatasource = (datasource, controlState, value) => {\n  if (controlState.options && typeof value === 'string') {\n    if (controlState.options.some((option) => Array.isArray(option) ?\n    option[0] === value :\n    option.column_name === value)) {\n      return datasource.columns.some((column) => column.column_name === value);\n    }\n  }\n  if (controlState.savedMetrics &&\n  isSavedMetric(value) &&\n  controlState.savedMetrics.some((savedMetric) => savedMetric.metric_name === value)) {\n    return datasource.metrics.some((metric) => metric.metric_name === value);\n  }\n  if (controlState.columns && (\n  isAdhocMetricSimple(value) || isSimpleAdhocFilter(value)) &&\n  controlState.columns.some((column) => {var _value$column;return column.column_name === ((_value$column = value.column) == null ? void 0 : _value$column.column_name) ||\n    column.column_name === value.subject;})) {\n    return datasource.columns.some((column) => {var _value$column2;return column.column_name === ((_value$column2 = value.column) == null ? void 0 : _value$column2.column_name) ||\n      column.column_name === value.subject;});\n  }\n  if (isAdhocMetricSQL(value)) {\n    Object.assign(value, { datasourceWarning: true });\n    return true;\n  }\n  return false;\n};\nexport const getControlValuesCompatibleWithDatasource = (datasource, controlState, value) => {\n  if (value === undefined || value === null) {\n    return undefined;\n  }\n  if (Array.isArray(value)) {\n    const compatibleValues = value.filter((val) => isControlValueCompatibleWithDatasource(datasource, controlState, val));\n    return compatibleValues.length > 0 ?\n    compatibleValues :\n    controlState.default;\n  }\n  return isControlValueCompatibleWithDatasource(datasource, controlState, value) ?\n  value :\n  controlState.default;\n};;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(isControlValueCompatibleWithDatasource, \"isControlValueCompatibleWithDatasource\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/controlUtils/getControlValuesCompatibleWithDatasource.ts\");reactHotLoader.register(getControlValuesCompatibleWithDatasource, \"getControlValuesCompatibleWithDatasource\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/controlUtils/getControlValuesCompatibleWithDatasource.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["isAdhocMetricSimple","isAdhocMetricSQL","isSavedMetric","isSimpleAdhocFilter","isControlValueCompatibleWithDatasource","datasource","controlState","value","options","some","option","Array","isArray","column_name","columns","column","savedMetrics","savedMetric","metric_name","metrics","metric","_value$column","subject","_value$column2","Object","assign","datasourceWarning","getControlValuesCompatibleWithDatasource","undefined","compatibleValues","filter","val","length","default","reactHotLoader","reactHotLoaderGlobal","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/controlUtils/getControlValuesCompatibleWithDatasource.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { ControlState, Dataset, Metric } from '@superset-ui/chart-controls';\nimport {\n  Column,\n  isAdhocMetricSimple,\n  isAdhocMetricSQL,\n  isSavedMetric,\n  isSimpleAdhocFilter,\n  JsonValue,\n  SimpleAdhocFilter,\n} from '@superset-ui/core';\nimport AdhocMetric from 'src/explore/components/controls/MetricControl/AdhocMetric';\n\nconst isControlValueCompatibleWithDatasource = (\n  datasource: Dataset,\n  controlState: ControlState,\n  value: any,\n) => {\n  if (controlState.options && typeof value === 'string') {\n    if (\n      controlState.options.some(\n        (option: [string | number, string] | { column_name: string }) =>\n          Array.isArray(option)\n            ? option[0] === value\n            : option.column_name === value,\n      )\n    ) {\n      return datasource.columns.some(column => column.column_name === value);\n    }\n  }\n  if (\n    controlState.savedMetrics &&\n    isSavedMetric(value) &&\n    controlState.savedMetrics.some(\n      (savedMetric: Metric) => savedMetric.metric_name === value,\n    )\n  ) {\n    return datasource.metrics.some(\n      (metric: Metric) => metric.metric_name === value,\n    );\n  }\n  if (\n    controlState.columns &&\n    (isAdhocMetricSimple(value) || isSimpleAdhocFilter(value)) &&\n    controlState.columns.some(\n      (column: Column) =>\n        column.column_name === (value as AdhocMetric).column?.column_name ||\n        column.column_name === (value as SimpleAdhocFilter).subject,\n    )\n  ) {\n    return datasource.columns.some(\n      (column: Column) =>\n        column.column_name === (value as AdhocMetric).column?.column_name ||\n        column.column_name === (value as SimpleAdhocFilter).subject,\n    );\n  }\n  if (isAdhocMetricSQL(value)) {\n    Object.assign(value, { datasourceWarning: true });\n    return true;\n  }\n  return false;\n};\n\nexport const getControlValuesCompatibleWithDatasource = (\n  datasource: Dataset,\n  controlState: ControlState,\n  value: JsonValue,\n) => {\n  if (value === undefined || value === null) {\n    return undefined;\n  }\n  if (Array.isArray(value)) {\n    const compatibleValues = value.filter(val =>\n      isControlValueCompatibleWithDatasource(datasource, controlState, val),\n    );\n    return compatibleValues.length > 0\n      ? compatibleValues\n      : controlState.default;\n  }\n  return isControlValueCompatibleWithDatasource(datasource, controlState, value)\n    ? value\n    : controlState.default;\n};\n"],"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAoBA,SAEEA,mBAAmB,EACnBC,gBAAgB,EAChBC,aAAa,EACbC,mBAAmB,QAGd,mBAAmB;AAG1B,MAAMC,sCAAsC,GAAGA,CAC7CC,UAAmB,EACnBC,YAA0B,EAC1BC,KAAU,KACR;EACF,IAAID,YAAY,CAACE,OAAO,IAAI,OAAOD,KAAK,KAAK,QAAQ,EAAE;IACrD,IACED,YAAY,CAACE,OAAO,CAACC,IAAI,CACvB,CAACC,MAA2D,KAC1DC,KAAK,CAACC,OAAO,CAACF,MAAM,CAAC;IACjBA,MAAM,CAAC,CAAC,CAAC,KAAKH,KAAK;IACnBG,MAAM,CAACG,WAAW,KAAKN,KAAK,CACnC,EACD;MACA,OAAOF,UAAU,CAACS,OAAO,CAACL,IAAI,CAAC,CAAAM,MAAM,KAAIA,MAAM,CAACF,WAAW,KAAKN,KAAK,CAAC;;;EAG1E,IACED,YAAY,CAACU,YAAY;EACzBd,aAAa,CAACK,KAAK,CAAC;EACpBD,YAAY,CAACU,YAAY,CAACP,IAAI,CAC5B,CAACQ,WAAmB,KAAKA,WAAW,CAACC,WAAW,KAAKX,KAAK,CAC3D,EACD;IACA,OAAOF,UAAU,CAACc,OAAO,CAACV,IAAI,CAC5B,CAACW,MAAc,KAAKA,MAAM,CAACF,WAAW,KAAKX,KAAK,CACjD;;EAEH,IACED,YAAY,CAACQ,OAAO;EACnBd,mBAAmB,CAACO,KAAK,CAAC,IAAIJ,mBAAmB,CAACI,KAAK,CAAC,CAAC;EAC1DD,YAAY,CAACQ,OAAO,CAACL,IAAI,CACvB,CAACM,MAAc,UAAAM,aAAA,QACbN,MAAM,CAACF,WAAW,OAAAQ,aAAA,GAAMd,KAAqB,CAACQ,MAAM,qBAA5BM,aAAA,CAA8BR,WAAW;IACjEE,MAAM,CAACF,WAAW,KAAMN,KAA2B,CAACe,OAAO,GAC9D,EACD;IACA,OAAOjB,UAAU,CAACS,OAAO,CAACL,IAAI,CAC5B,CAACM,MAAc,UAAAQ,cAAA,QACbR,MAAM,CAACF,WAAW,OAAAU,cAAA,GAAMhB,KAAqB,CAACQ,MAAM,qBAA5BQ,cAAA,CAA8BV,WAAW;MACjEE,MAAM,CAACF,WAAW,KAAMN,KAA2B,CAACe,OAAO,GAC9D;;EAEH,IAAIrB,gBAAgB,CAACM,KAAK,CAAC,EAAE;IAC3BiB,MAAM,CAACC,MAAM,CAAClB,KAAK,EAAE,EAAEmB,iBAAiB,EAAE,IAAI,EAAE,CAAC;IACjD,OAAO,IAAI;;EAEb,OAAO,KAAK;AACd,CAAC;AAED,OAAO,MAAMC,wCAAwC,GAAGA,CACtDtB,UAAmB,EACnBC,YAA0B,EAC1BC,KAAgB,KACd;EACF,IAAIA,KAAK,KAAKqB,SAAS,IAAIrB,KAAK,KAAK,IAAI,EAAE;IACzC,OAAOqB,SAAS;;EAElB,IAAIjB,KAAK,CAACC,OAAO,CAACL,KAAK,CAAC,EAAE;IACxB,MAAMsB,gBAAgB,GAAGtB,KAAK,CAACuB,MAAM,CAAC,CAAAC,GAAG,KACvC3B,sCAAsC,CAACC,UAAU,EAAEC,YAAY,EAAEyB,GAAG,CAAC,CACtE;IACD,OAAOF,gBAAgB,CAACG,MAAM,GAAG,CAAC;IAC9BH,gBAAgB;IAChBvB,YAAY,CAAC2B,OAAO;;EAE1B,OAAO7B,sCAAsC,CAACC,UAAU,EAAEC,YAAY,EAAEC,KAAK,CAAC;EAC1EA,KAAK;EACLD,YAAY,CAAC2B,OAAO;AAC1B,CAAC,CAAC,mBAAAC,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAF,OAAA,GAAAL,SAAA,MAAAM,cAAA,WAAAA,cAAA,CAAAE,QAAA,CArEIhC,sCAAsC,2KAAA8B,cAAA,CAAAE,QAAA,CAkD/BT,wCAAwC,qMAAAU,WAAA,UAAAF,oBAAA,mBAAAA,oBAAA,CAAAE,WAAA,GAAAT,SAAA,CAAAS,WAAA,IAAAA,WAAA,CAAAC,MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}