{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { getExtensionsRegistry, styled, SupersetClient, t } from '@superset-ui/core';\nimport React, { useState, useMemo, useCallback } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport rison from 'rison';\nimport { createFetchRelated, createFetchDistinct, createErrorHandler } from 'src/views/CRUD/utils';\nimport { useListViewResource } from 'src/views/CRUD/hooks';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport { DatasourceModal } from 'src/components/Datasource';\nimport DeleteModal from 'src/components/DeleteModal';\nimport handleResourceExport from 'src/utils/export';\nimport ListView, { FilterOperator } from 'src/components/ListView';\nimport Loading from 'src/components/Loading';\nimport SubMenu from 'src/features/home/SubMenu';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport FacePile from 'src/components/FacePile';\nimport CertifiedBadge from 'src/components/CertifiedBadge';\nimport InfoTooltip from 'src/components/InfoTooltip';\nimport ImportModelsModal from 'src/components/ImportModal/index';\nimport WarningIconWithTooltip from 'src/components/WarningIconWithTooltip';\nimport { isUserAdmin } from 'src/dashboard/util/permissionUtils';\nimport { GenericLink } from 'src/components/GenericLink/GenericLink';\nimport { PAGE_SIZE, SORT_BY, PASSWORDS_NEEDED_MESSAGE, CONFIRM_OVERWRITE_MESSAGE } from 'src/features/datasets/constants';\nimport DuplicateDatasetModal from 'src/features/datasets/DuplicateDatasetModal';\nimport { useSelector } from 'react-redux';\nimport { ModifiedInfo } from 'src/components/AuditInfo';\nimport { QueryObjectColumns } from 'src/views/CRUD/types';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst extensionsRegistry = getExtensionsRegistry();\nconst DatasetDeleteRelatedExtension = extensionsRegistry.get('dataset.delete.related');\nconst FlexRowContainer = styled.div`\n  align-items: center;\n  display: flex;\n\n  svg {\n    margin-right: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\nconst Actions = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.base};\n\n  .disabled {\n    svg,\n    i {\n      &:hover {\n        path {\n          fill: ${({ theme }) => theme.colors.grayscale.light1};\n        }\n      }\n    }\n    color: ${({ theme }) => theme.colors.grayscale.light1};\n    .ant-menu-item:hover {\n      color: ${({ theme }) => theme.colors.grayscale.light1};\n      cursor: default;\n    }\n    &::after {\n      color: ${({ theme }) => theme.colors.grayscale.light1};\n    }\n  }\n`;\nconst DatasetList = ({ addDangerToast, addSuccessToast, user }) => {\n  const history = useHistory();\n  const { state: { loading, resourceCount: datasetCount, resourceCollection: datasets, bulkSelectEnabled }, hasPerm, fetchData, toggleBulkSelect, refreshData } = useListViewResource('dataset', t('dataset'), addDangerToast);\n  const [datasetCurrentlyDeleting, setDatasetCurrentlyDeleting] = useState(null);\n  const [datasetCurrentlyEditing, setDatasetCurrentlyEditing] = useState(null);\n  const [datasetCurrentlyDuplicating, setDatasetCurrentlyDuplicating] = useState(null);\n  const [importingDataset, showImportModal] = useState(false);\n  const [passwordFields, setPasswordFields] = useState([]);\n  const [preparingExport, setPreparingExport] = useState(false);\n  const [sshTunnelPasswordFields, setSSHTunnelPasswordFields] = useState([]);\n  const [sshTunnelPrivateKeyFields, setSSHTunnelPrivateKeyFields] = useState([]);\n  const [sshTunnelPrivateKeyPasswordFields, setSSHTunnelPrivateKeyPasswordFields] = useState([]);\n  const PREVENT_UNSAFE_DEFAULT_URLS_ON_DATASET = useSelector((state) => {var _state$common, _state$common$conf;return ((_state$common = state.common) == null ? void 0 : (_state$common$conf = _state$common.conf) == null ? void 0 : _state$common$conf.PREVENT_UNSAFE_DEFAULT_URLS_ON_DATASET) || false;});\n  const openDatasetImportModal = () => {\n    showImportModal(true);\n  };\n  const closeDatasetImportModal = () => {\n    showImportModal(false);\n  };\n  const handleDatasetImport = () => {\n    showImportModal(false);\n    refreshData();\n    addSuccessToast(t('Dataset imported'));\n  };\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canCreate = hasPerm('can_write');\n  const canDuplicate = hasPerm('can_duplicate');\n  const canExport = hasPerm('can_export');\n  const initialSort = SORT_BY;\n  const openDatasetEditModal = useCallback(({ id }) => {\n    SupersetClient.get({\n      endpoint: `/api/v1/dataset/${id}`\n    }).\n    then(({ json = {} }) => {\n      const addCertificationFields = json.result.columns.map((column) => {\n        const { certification: { details = '', certified_by = '' } = {} } = JSON.parse(column.extra || '{}') || {};\n        return {\n          ...column,\n          certification_details: details || '',\n          certified_by: certified_by || '',\n          is_certified: details || certified_by\n        };\n      });\n      // eslint-disable-next-line no-param-reassign\n      json.result.columns = [...addCertificationFields];\n      setDatasetCurrentlyEditing(json.result);\n    }).\n    catch(() => {\n      addDangerToast(t('An error occurred while fetching dataset related data'));\n    });\n  }, [addDangerToast]);\n  const openDatasetDeleteModal = (dataset) => SupersetClient.get({\n    endpoint: `/api/v1/dataset/${dataset.id}/related_objects`\n  }).\n  then(({ json = {} }) => {\n    setDatasetCurrentlyDeleting({\n      ...dataset,\n      chart_count: json.charts.count,\n      dashboard_count: json.dashboards.count\n    });\n  }).\n  catch(createErrorHandler((errMsg) => t('An error occurred while fetching dataset related data: %s', errMsg)));\n  const openDatasetDuplicateModal = (dataset) => {\n    setDatasetCurrentlyDuplicating(dataset);\n  };\n  const handleBulkDatasetExport = (datasetsToExport) => {\n    const ids = datasetsToExport.map(({ id }) => id);\n    handleResourceExport('dataset', ids, () => {\n      setPreparingExport(false);\n    });\n    setPreparingExport(true);\n  };\n  const columns = useMemo(() => [\n  {\n    Cell: ({ row: { original: { kind } } }) => {\n      if (kind === 'physical') {\n        return ___EmotionJSX(Tooltip, { id: \"physical-dataset-tooltip\", title: t('Physical dataset') },\n        ___EmotionJSX(Icons.DatasetPhysical, null)\n        );\n      }\n      return ___EmotionJSX(Tooltip, { id: \"virtual-dataset-tooltip\", title: t('Virtual dataset') },\n      ___EmotionJSX(Icons.DatasetVirtual, null)\n      );\n    },\n    accessor: 'kind_icon',\n    disableSortBy: true,\n    size: 'xs',\n    id: 'id'\n  },\n  {\n    Cell: ({ row: { original: { extra, table_name: datasetTitle, description, explore_url: exploreURL } } }) => {\n      let titleLink;\n      if (PREVENT_UNSAFE_DEFAULT_URLS_ON_DATASET) {\n        titleLink = ___EmotionJSX(Link, { \"data-test\": \"internal-link\", to: exploreURL },\n        datasetTitle\n        );\n      } else\n      {\n        titleLink =\n        // exploreUrl can be a link to Explore or an external link\n        // in the first case use SPA routing, else use HTML anchor\n        ___EmotionJSX(GenericLink, { to: exploreURL }, datasetTitle);\n      }\n      try {\n        const parsedExtra = JSON.parse(extra);\n        return ___EmotionJSX(FlexRowContainer, null,\n        (parsedExtra == null ? void 0 : parsedExtra.certification) && ___EmotionJSX(CertifiedBadge, { certifiedBy: parsedExtra.certification.certified_by, details: parsedExtra.certification.details, size: \"l\" }),\n        (parsedExtra == null ? void 0 : parsedExtra.warning_markdown) && ___EmotionJSX(WarningIconWithTooltip, { warningMarkdown: parsedExtra.warning_markdown, size: \"l\" }),\n        titleLink,\n        description && ___EmotionJSX(InfoTooltip, { tooltip: description })\n        );\n      }\n      catch {\n        return titleLink;\n      }\n    },\n    Header: t('Name'),\n    accessor: 'table_name'\n  },\n  {\n    Cell: ({ row: { original: { kind } } }) => kind === 'physical' ? t('Physical') : t('Virtual'),\n    Header: t('Type'),\n    accessor: 'kind',\n    disableSortBy: true,\n    size: 'md'\n  },\n  {\n    Header: t('Database'),\n    accessor: 'database.database_name',\n    size: 'lg'\n  },\n  {\n    Header: t('Schema'),\n    accessor: 'schema',\n    size: 'lg'\n  },\n  {\n    accessor: 'database',\n    disableSortBy: true,\n    hidden: true\n  },\n  {\n    Cell: ({ row: { original: { owners = [] } } }) => ___EmotionJSX(FacePile, { users: owners }),\n    Header: t('Owners'),\n    id: 'owners',\n    disableSortBy: true,\n    size: 'lg'\n  },\n  {\n    Cell: ({ row: { original: { changed_on_delta_humanized: changedOn, changed_by: changedBy } } }) => ___EmotionJSX(ModifiedInfo, { date: changedOn, user: changedBy }),\n    Header: t('Last modified'),\n    accessor: 'changed_on_delta_humanized',\n    size: 'xl'\n  },\n  {\n    accessor: 'sql',\n    hidden: true,\n    disableSortBy: true\n  },\n  {\n    Cell: ({ row: { original } }) => {\n      // Verify owner or isAdmin\n      const allowEdit = original.owners.map((o) => o.id).includes(user.userId) ||\n      isUserAdmin(user);\n      const handleEdit = () => openDatasetEditModal(original);\n      const handleDelete = () => openDatasetDeleteModal(original);\n      const handleExport = () => handleBulkDatasetExport([original]);\n      const handleDuplicate = () => openDatasetDuplicateModal(original);\n      if (!canEdit && !canDelete && !canExport && !canDuplicate) {\n        return null;\n      }\n      return ___EmotionJSX(Actions, { className: \"actions\" },\n      canDelete && ___EmotionJSX(Tooltip, { id: \"delete-action-tooltip\", title: t('Delete'), placement: \"bottom\" },\n      ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: handleDelete },\n      ___EmotionJSX(Icons.Trash, null)\n      )\n      ),\n      canExport && ___EmotionJSX(Tooltip, { id: \"export-action-tooltip\", title: t('Export'), placement: \"bottom\" },\n      ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: handleExport },\n      ___EmotionJSX(Icons.Share, null)\n      )\n      ),\n      canEdit && ___EmotionJSX(Tooltip, { id: \"edit-action-tooltip\", title: allowEdit ?\n        t('Edit') :\n        t('You must be a dataset owner in order to edit. Please reach out to a dataset owner to request modifications or edit access.'), placement: \"bottomRight\" },\n      ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: allowEdit ? 'action-button' : 'disabled', onClick: allowEdit ? handleEdit : undefined },\n      ___EmotionJSX(Icons.EditAlt, null)\n      )\n      ),\n      canDuplicate && original.kind === 'virtual' && ___EmotionJSX(Tooltip, { id: \"duplicate-action-tooltop\", title: t('Duplicate'), placement: \"bottom\" },\n      ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: handleDuplicate },\n      ___EmotionJSX(Icons.Copy, null)\n      )\n      )\n      );\n    },\n    Header: t('Actions'),\n    id: 'actions',\n    hidden: !canEdit && !canDelete && !canDuplicate,\n    disableSortBy: true\n  },\n  {\n    accessor: QueryObjectColumns.ChangedBy,\n    hidden: true\n  }],\n  [canEdit, canDelete, canExport, openDatasetEditModal, canDuplicate, user]);\n  const filterTypes = useMemo(() => [\n  {\n    Header: t('Name'),\n    key: 'search',\n    id: 'table_name',\n    input: 'search',\n    operator: FilterOperator.Contains\n  },\n  {\n    Header: t('Type'),\n    key: 'sql',\n    id: 'sql',\n    input: 'select',\n    operator: FilterOperator.DatasetIsNullOrEmpty,\n    unfilteredLabel: 'All',\n    selects: [\n    { label: t('Virtual'), value: false },\n    { label: t('Physical'), value: true }]\n\n  },\n  {\n    Header: t('Database'),\n    key: 'database',\n    id: 'database',\n    input: 'select',\n    operator: FilterOperator.RelationOneMany,\n    unfilteredLabel: 'All',\n    fetchSelects: createFetchRelated('dataset', 'database', createErrorHandler((errMsg) => t('An error occurred while fetching datasets: %s', errMsg))),\n    paginate: true\n  },\n  {\n    Header: t('Schema'),\n    key: 'schema',\n    id: 'schema',\n    input: 'select',\n    operator: FilterOperator.Equals,\n    unfilteredLabel: 'All',\n    fetchSelects: createFetchDistinct('dataset', 'schema', createErrorHandler((errMsg) => t('An error occurred while fetching schema values: %s', errMsg))),\n    paginate: true\n  },\n  {\n    Header: t('Owner'),\n    key: 'owner',\n    id: 'owners',\n    input: 'select',\n    operator: FilterOperator.RelationManyMany,\n    unfilteredLabel: 'All',\n    fetchSelects: createFetchRelated('dataset', 'owners', createErrorHandler((errMsg) => t('An error occurred while fetching dataset owner values: %s', errMsg)), user),\n    paginate: true\n  },\n  {\n    Header: t('Certified'),\n    key: 'certified',\n    id: 'id',\n    urlDisplay: 'certified',\n    input: 'select',\n    operator: FilterOperator.DatasetIsCertified,\n    unfilteredLabel: t('Any'),\n    selects: [\n    { label: t('Yes'), value: true },\n    { label: t('No'), value: false }]\n\n  },\n  {\n    Header: t('Modified by'),\n    key: 'changed_by',\n    id: 'changed_by',\n    input: 'select',\n    operator: FilterOperator.RelationOneMany,\n    unfilteredLabel: t('All'),\n    fetchSelects: createFetchRelated('dataset', 'changed_by', createErrorHandler((errMsg) => t('An error occurred while fetching dataset datasource values: %s', errMsg)), user),\n    paginate: true\n  }],\n  [user]);\n  const menuData = {\n    activeChild: 'Datasets',\n    name: t('Datasets')\n  };\n  const buttonArr = [];\n  if (canDelete || canExport) {\n    buttonArr.push({\n      name: t('Bulk select'),\n      onClick: toggleBulkSelect,\n      buttonStyle: 'secondary'\n    });\n  }\n  if (canCreate) {\n    buttonArr.push({\n      name: ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(\"i\", { className: \"fa fa-plus\" }), \" \", t('Dataset'), ' '\n      ),\n      onClick: () => {\n        history.push('/dataset/add/');\n      },\n      buttonStyle: 'primary'\n    });\n    buttonArr.push({\n      name: ___EmotionJSX(Tooltip, { id: \"import-tooltip\", title: t('Import datasets'), placement: \"bottomRight\" },\n      ___EmotionJSX(Icons.Import, { \"data-test\": \"import-button\" })\n      ),\n      buttonStyle: 'link',\n      onClick: openDatasetImportModal\n    });\n  }\n  menuData.buttons = buttonArr;\n  const closeDatasetDeleteModal = () => {\n    setDatasetCurrentlyDeleting(null);\n  };\n  const closeDatasetEditModal = () => {\n    setDatasetCurrentlyEditing(null);\n  };\n  const closeDatasetDuplicateModal = () => {\n    setDatasetCurrentlyDuplicating(null);\n  };\n  const handleDatasetDelete = ({ id, table_name: tableName }) => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/dataset/${id}`\n    }).then(() => {\n      refreshData();\n      setDatasetCurrentlyDeleting(null);\n      addSuccessToast(t('Deleted: %s', tableName));\n    }, createErrorHandler((errMsg) => addDangerToast(t('There was an issue deleting %s: %s', tableName, errMsg))));\n  };\n  const handleBulkDatasetDelete = (datasetsToDelete) => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/dataset/?q=${rison.encode(datasetsToDelete.map(({ id }) => id))}`\n    }).then(({ json = {} }) => {\n      refreshData();\n      addSuccessToast(json.message);\n    }, createErrorHandler((errMsg) => addDangerToast(t('There was an issue deleting the selected datasets: %s', errMsg))));\n  };\n  const handleDatasetDuplicate = (newDatasetName) => {\n    if (datasetCurrentlyDuplicating === null) {\n      addDangerToast(t('There was an issue duplicating the dataset.'));\n    }\n    SupersetClient.post({\n      endpoint: `/api/v1/dataset/duplicate`,\n      jsonPayload: {\n        base_model_id: datasetCurrentlyDuplicating == null ? void 0 : datasetCurrentlyDuplicating.id,\n        table_name: newDatasetName\n      }\n    }).then(() => {\n      setDatasetCurrentlyDuplicating(null);\n      refreshData();\n    }, createErrorHandler((errMsg) => addDangerToast(t('There was an issue duplicating the selected datasets: %s', errMsg))));\n  };\n  return ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(SubMenu, menuData),\n  datasetCurrentlyDeleting && ___EmotionJSX(DeleteModal, { description: ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(\"p\", null,\n    t('The dataset %s is linked to %s charts that appear on %s dashboards. Are you sure you want to continue? Deleting the dataset will break those objects.', datasetCurrentlyDeleting.table_name, datasetCurrentlyDeleting.chart_count, datasetCurrentlyDeleting.dashboard_count)\n    ),\n    DatasetDeleteRelatedExtension && ___EmotionJSX(DatasetDeleteRelatedExtension, { dataset: datasetCurrentlyDeleting })\n    ), onConfirm: () => {\n      if (datasetCurrentlyDeleting) {\n        handleDatasetDelete(datasetCurrentlyDeleting);\n      }\n    }, onHide: closeDatasetDeleteModal, open: true, title: t('Delete Dataset?') }),\n  datasetCurrentlyEditing && ___EmotionJSX(DatasourceModal, { datasource: datasetCurrentlyEditing, onDatasourceSave: refreshData, onHide: closeDatasetEditModal, show: true }),\n  ___EmotionJSX(DuplicateDatasetModal, { dataset: datasetCurrentlyDuplicating, onHide: closeDatasetDuplicateModal, onDuplicate: handleDatasetDuplicate }),\n  ___EmotionJSX(ConfirmStatusChange, { title: t('Please confirm'), description: t('Are you sure you want to delete the selected datasets?'), onConfirm: handleBulkDatasetDelete },\n  (confirmDelete) => {\n    const bulkActions = [];\n    if (canDelete) {\n      bulkActions.push({\n        key: 'delete',\n        name: t('Delete'),\n        onSelect: confirmDelete,\n        type: 'danger'\n      });\n    }\n    if (canExport) {\n      bulkActions.push({\n        key: 'export',\n        name: t('Export'),\n        type: 'primary',\n        onSelect: handleBulkDatasetExport\n      });\n    }\n    return ___EmotionJSX(ListView, { className: \"dataset-list-view\", columns: columns, data: datasets, count: datasetCount, pageSize: PAGE_SIZE, fetchData: fetchData, filters: filterTypes, loading: loading, initialSort: initialSort, bulkActions: bulkActions, bulkSelectEnabled: bulkSelectEnabled, disableBulkSelect: toggleBulkSelect, addDangerToast: addDangerToast, addSuccessToast: addSuccessToast, refreshData: refreshData, renderBulkSelectCopy: (selected) => {\n        const { virtualCount, physicalCount } = selected.reduce((acc, e) => {\n          if (e.original.kind === 'physical')\n          acc.physicalCount += 1;else\n          if (e.original.kind === 'virtual') {\n            acc.virtualCount += 1;\n          }\n          return acc;\n        }, { virtualCount: 0, physicalCount: 0 });\n        if (!selected.length) {\n          return t('0 Selected');\n        }\n        if (virtualCount && !physicalCount) {\n          return t('%s Selected (Virtual)', selected.length, virtualCount);\n        }\n        if (physicalCount && !virtualCount) {\n          return t('%s Selected (Physical)', selected.length, physicalCount);\n        }\n        return t('%s Selected (%s Physical, %s Virtual)', selected.length, physicalCount, virtualCount);\n      } });\n  }\n  ),\n\n  ___EmotionJSX(ImportModelsModal, { resourceName: \"dataset\", resourceLabel: t('dataset'), passwordsNeededMessage: PASSWORDS_NEEDED_MESSAGE, confirmOverwriteMessage: CONFIRM_OVERWRITE_MESSAGE, addDangerToast: addDangerToast, addSuccessToast: addSuccessToast, onModelImport: handleDatasetImport, show: importingDataset, onHide: closeDatasetImportModal, passwordFields: passwordFields, setPasswordFields: setPasswordFields, sshTunnelPasswordFields: sshTunnelPasswordFields, setSSHTunnelPasswordFields: setSSHTunnelPasswordFields, sshTunnelPrivateKeyFields: sshTunnelPrivateKeyFields, setSSHTunnelPrivateKeyFields: setSSHTunnelPrivateKeyFields, sshTunnelPrivateKeyPasswordFields: sshTunnelPrivateKeyPasswordFields, setSSHTunnelPrivateKeyPasswordFields: setSSHTunnelPrivateKeyPasswordFields }),\n  preparingExport && ___EmotionJSX(Loading, null)\n  );\n};__signature__(DatasetList, \"useHistory{history}\\nuseListViewResource{{ state: { loading, resourceCount: datasetCount, resourceCollection: datasets, bulkSelectEnabled, }, hasPerm, fetchData, toggleBulkSelect, refreshData, }}\\nuseState{[datasetCurrentlyDeleting, setDatasetCurrentlyDeleting](null)}\\nuseState{[datasetCurrentlyEditing, setDatasetCurrentlyEditing](null)}\\nuseState{[datasetCurrentlyDuplicating, setDatasetCurrentlyDuplicating](null)}\\nuseState{[importingDataset, showImportModal](false)}\\nuseState{[passwordFields, setPasswordFields]([])}\\nuseState{[preparingExport, setPreparingExport](false)}\\nuseState{[sshTunnelPasswordFields, setSSHTunnelPasswordFields]([])}\\nuseState{[sshTunnelPrivateKeyFields, setSSHTunnelPrivateKeyFields]([])}\\nuseState{[sshTunnelPrivateKeyPasswordFields, setSSHTunnelPrivateKeyPasswordFields,]([])}\\nuseSelector{PREVENT_UNSAFE_DEFAULT_URLS_ON_DATASET}\\nuseCallback{openDatasetEditModal}\\nuseMemo{columns}\\nuseMemo{filterTypes}\", () => [useHistory, useListViewResource, useSelector]);const _default =\nwithToasts(DatasetList);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(extensionsRegistry, \"extensionsRegistry\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/pages/DatasetList/index.tsx\");reactHotLoader.register(DatasetDeleteRelatedExtension, \"DatasetDeleteRelatedExtension\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/pages/DatasetList/index.tsx\");reactHotLoader.register(FlexRowContainer, \"FlexRowContainer\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/pages/DatasetList/index.tsx\");reactHotLoader.register(Actions, \"Actions\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/pages/DatasetList/index.tsx\");reactHotLoader.register(DatasetList, \"DatasetList\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/pages/DatasetList/index.tsx\");reactHotLoader.register(_default, \"default\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/pages/DatasetList/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["getExtensionsRegistry","styled","SupersetClient","t","React","useState","useMemo","useCallback","Link","useHistory","rison","createFetchRelated","createFetchDistinct","createErrorHandler","useListViewResource","ConfirmStatusChange","DatasourceModal","DeleteModal","handleResourceExport","ListView","FilterOperator","Loading","SubMenu","withToasts","Tooltip","Icons","FacePile","CertifiedBadge","InfoTooltip","ImportModelsModal","WarningIconWithTooltip","isUserAdmin","GenericLink","PAGE_SIZE","SORT_BY","PASSWORDS_NEEDED_MESSAGE","CONFIRM_OVERWRITE_MESSAGE","DuplicateDatasetModal","useSelector","ModifiedInfo","QueryObjectColumns","jsx","___EmotionJSX","extensionsRegistry","DatasetDeleteRelatedExtension","get","FlexRowContainer","div","theme","gridUnit","Actions","colors","grayscale","base","light1","DatasetList","addDangerToast","addSuccessToast","user","history","state","loading","resourceCount","datasetCount","resourceCollection","datasets","bulkSelectEnabled","hasPerm","fetchData","toggleBulkSelect","refreshData","datasetCurrentlyDeleting","setDatasetCurrentlyDeleting","datasetCurrentlyEditing","setDatasetCurrentlyEditing","datasetCurrentlyDuplicating","setDatasetCurrentlyDuplicating","importingDataset","showImportModal","passwordFields","setPasswordFields","preparingExport","setPreparingExport","sshTunnelPasswordFields","setSSHTunnelPasswordFields","sshTunnelPrivateKeyFields","setSSHTunnelPrivateKeyFields","sshTunnelPrivateKeyPasswordFields","setSSHTunnelPrivateKeyPasswordFields","PREVENT_UNSAFE_DEFAULT_URLS_ON_DATASET","_state$common","_state$common$conf","common","conf","openDatasetImportModal","closeDatasetImportModal","handleDatasetImport","canEdit","canDelete","canCreate","canDuplicate","canExport","initialSort","openDatasetEditModal","id","endpoint","then","json","addCertificationFields","result","columns","map","column","certification","details","certified_by","JSON","parse","extra","certification_details","is_certified","catch","openDatasetDeleteModal","dataset","chart_count","charts","count","dashboard_count","dashboards","errMsg","openDatasetDuplicateModal","handleBulkDatasetExport","datasetsToExport","ids","Cell","row","original","kind","title","DatasetPhysical","DatasetVirtual","accessor","disableSortBy","size","table_name","datasetTitle","description","explore_url","exploreURL","titleLink","to","parsedExtra","certifiedBy","warning_markdown","warningMarkdown","tooltip","Header","hidden","owners","users","changed_on_delta_humanized","changedOn","changed_by","changedBy","date","allowEdit","o","includes","userId","handleEdit","handleDelete","handleExport","handleDuplicate","className","placement","role","tabIndex","onClick","Trash","Share","undefined","EditAlt","Copy","ChangedBy","filterTypes","key","input","operator","Contains","DatasetIsNullOrEmpty","unfilteredLabel","selects","label","value","RelationOneMany","fetchSelects","paginate","Equals","RelationManyMany","urlDisplay","DatasetIsCertified","menuData","activeChild","name","buttonArr","push","buttonStyle","Fragment","Import","buttons","closeDatasetDeleteModal","closeDatasetEditModal","closeDatasetDuplicateModal","handleDatasetDelete","tableName","delete","handleBulkDatasetDelete","datasetsToDelete","encode","message","handleDatasetDuplicate","newDatasetName","post","jsonPayload","base_model_id","onConfirm","onHide","open","datasource","onDatasourceSave","show","onDuplicate","confirmDelete","bulkActions","onSelect","type","data","pageSize","filters","disableBulkSelect","renderBulkSelectCopy","selected","virtualCount","physicalCount","reduce","acc","e","length","resourceName","resourceLabel","passwordsNeededMessage","confirmOverwriteMessage","onModelImport","__signature__","_default","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/pages/DatasetList/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  getExtensionsRegistry,\n  styled,\n  SupersetClient,\n  t,\n} from '@superset-ui/core';\nimport React, {\n  FunctionComponent,\n  useState,\n  useMemo,\n  useCallback,\n} from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport rison from 'rison';\nimport {\n  createFetchRelated,\n  createFetchDistinct,\n  createErrorHandler,\n} from 'src/views/CRUD/utils';\nimport { ColumnObject } from 'src/features/datasets/types';\nimport { useListViewResource } from 'src/views/CRUD/hooks';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport { DatasourceModal } from 'src/components/Datasource';\nimport DeleteModal from 'src/components/DeleteModal';\nimport handleResourceExport from 'src/utils/export';\nimport ListView, {\n  ListViewProps,\n  Filters,\n  FilterOperator,\n} from 'src/components/ListView';\nimport Loading from 'src/components/Loading';\nimport SubMenu, { SubMenuProps, ButtonProps } from 'src/features/home/SubMenu';\nimport Owner from 'src/types/Owner';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport FacePile from 'src/components/FacePile';\nimport CertifiedBadge from 'src/components/CertifiedBadge';\nimport InfoTooltip from 'src/components/InfoTooltip';\nimport ImportModelsModal from 'src/components/ImportModal/index';\nimport WarningIconWithTooltip from 'src/components/WarningIconWithTooltip';\nimport { isUserAdmin } from 'src/dashboard/util/permissionUtils';\nimport { GenericLink } from 'src/components/GenericLink/GenericLink';\n\nimport {\n  PAGE_SIZE,\n  SORT_BY,\n  PASSWORDS_NEEDED_MESSAGE,\n  CONFIRM_OVERWRITE_MESSAGE,\n} from 'src/features/datasets/constants';\nimport DuplicateDatasetModal from 'src/features/datasets/DuplicateDatasetModal';\nimport { useSelector } from 'react-redux';\nimport { ModifiedInfo } from 'src/components/AuditInfo';\nimport { QueryObjectColumns } from 'src/views/CRUD/types';\n\nconst extensionsRegistry = getExtensionsRegistry();\nconst DatasetDeleteRelatedExtension = extensionsRegistry.get(\n  'dataset.delete.related',\n);\n\nconst FlexRowContainer = styled.div`\n  align-items: center;\n  display: flex;\n\n  svg {\n    margin-right: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n\nconst Actions = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.base};\n\n  .disabled {\n    svg,\n    i {\n      &:hover {\n        path {\n          fill: ${({ theme }) => theme.colors.grayscale.light1};\n        }\n      }\n    }\n    color: ${({ theme }) => theme.colors.grayscale.light1};\n    .ant-menu-item:hover {\n      color: ${({ theme }) => theme.colors.grayscale.light1};\n      cursor: default;\n    }\n    &::after {\n      color: ${({ theme }) => theme.colors.grayscale.light1};\n    }\n  }\n`;\n\ntype Dataset = {\n  changed_by_name: string;\n  changed_by: string;\n  changed_on_delta_humanized: string;\n  database: {\n    id: string;\n    database_name: string;\n  };\n  kind: string;\n  explore_url: string;\n  id: number;\n  owners: Array<Owner>;\n  schema: string;\n  table_name: string;\n};\n\ninterface VirtualDataset extends Dataset {\n  extra: Record<string, any>;\n  sql: string;\n}\n\ninterface DatasetListProps {\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n  user: {\n    userId: string | number;\n    firstName: string;\n    lastName: string;\n  };\n}\n\nconst DatasetList: FunctionComponent<DatasetListProps> = ({\n  addDangerToast,\n  addSuccessToast,\n  user,\n}) => {\n  const history = useHistory();\n  const {\n    state: {\n      loading,\n      resourceCount: datasetCount,\n      resourceCollection: datasets,\n      bulkSelectEnabled,\n    },\n    hasPerm,\n    fetchData,\n    toggleBulkSelect,\n    refreshData,\n  } = useListViewResource<Dataset>('dataset', t('dataset'), addDangerToast);\n\n  const [datasetCurrentlyDeleting, setDatasetCurrentlyDeleting] = useState<\n    (Dataset & { chart_count: number; dashboard_count: number }) | null\n  >(null);\n\n  const [datasetCurrentlyEditing, setDatasetCurrentlyEditing] =\n    useState<Dataset | null>(null);\n\n  const [datasetCurrentlyDuplicating, setDatasetCurrentlyDuplicating] =\n    useState<VirtualDataset | null>(null);\n\n  const [importingDataset, showImportModal] = useState<boolean>(false);\n  const [passwordFields, setPasswordFields] = useState<string[]>([]);\n  const [preparingExport, setPreparingExport] = useState<boolean>(false);\n  const [sshTunnelPasswordFields, setSSHTunnelPasswordFields] = useState<\n    string[]\n  >([]);\n  const [sshTunnelPrivateKeyFields, setSSHTunnelPrivateKeyFields] = useState<\n    string[]\n  >([]);\n  const [\n    sshTunnelPrivateKeyPasswordFields,\n    setSSHTunnelPrivateKeyPasswordFields,\n  ] = useState<string[]>([]);\n\n  const PREVENT_UNSAFE_DEFAULT_URLS_ON_DATASET = useSelector<any, boolean>(\n    state =>\n      state.common?.conf?.PREVENT_UNSAFE_DEFAULT_URLS_ON_DATASET || false,\n  );\n\n  const openDatasetImportModal = () => {\n    showImportModal(true);\n  };\n\n  const closeDatasetImportModal = () => {\n    showImportModal(false);\n  };\n\n  const handleDatasetImport = () => {\n    showImportModal(false);\n    refreshData();\n    addSuccessToast(t('Dataset imported'));\n  };\n\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canCreate = hasPerm('can_write');\n  const canDuplicate = hasPerm('can_duplicate');\n  const canExport = hasPerm('can_export');\n\n  const initialSort = SORT_BY;\n\n  const openDatasetEditModal = useCallback(\n    ({ id }: Dataset) => {\n      SupersetClient.get({\n        endpoint: `/api/v1/dataset/${id}`,\n      })\n        .then(({ json = {} }) => {\n          const addCertificationFields = json.result.columns.map(\n            (column: ColumnObject) => {\n              const {\n                certification: { details = '', certified_by = '' } = {},\n              } = JSON.parse(column.extra || '{}') || {};\n              return {\n                ...column,\n                certification_details: details || '',\n                certified_by: certified_by || '',\n                is_certified: details || certified_by,\n              };\n            },\n          );\n          // eslint-disable-next-line no-param-reassign\n          json.result.columns = [...addCertificationFields];\n          setDatasetCurrentlyEditing(json.result);\n        })\n        .catch(() => {\n          addDangerToast(\n            t('An error occurred while fetching dataset related data'),\n          );\n        });\n    },\n    [addDangerToast],\n  );\n\n  const openDatasetDeleteModal = (dataset: Dataset) =>\n    SupersetClient.get({\n      endpoint: `/api/v1/dataset/${dataset.id}/related_objects`,\n    })\n      .then(({ json = {} }) => {\n        setDatasetCurrentlyDeleting({\n          ...dataset,\n          chart_count: json.charts.count,\n          dashboard_count: json.dashboards.count,\n        });\n      })\n      .catch(\n        createErrorHandler(errMsg =>\n          t(\n            'An error occurred while fetching dataset related data: %s',\n            errMsg,\n          ),\n        ),\n      );\n\n  const openDatasetDuplicateModal = (dataset: VirtualDataset) => {\n    setDatasetCurrentlyDuplicating(dataset);\n  };\n\n  const handleBulkDatasetExport = (datasetsToExport: Dataset[]) => {\n    const ids = datasetsToExport.map(({ id }) => id);\n    handleResourceExport('dataset', ids, () => {\n      setPreparingExport(false);\n    });\n    setPreparingExport(true);\n  };\n\n  const columns = useMemo(\n    () => [\n      {\n        Cell: ({\n          row: {\n            original: { kind },\n          },\n        }: any) => {\n          if (kind === 'physical') {\n            return (\n              <Tooltip\n                id=\"physical-dataset-tooltip\"\n                title={t('Physical dataset')}\n              >\n                <Icons.DatasetPhysical />\n              </Tooltip>\n            );\n          }\n\n          return (\n            <Tooltip id=\"virtual-dataset-tooltip\" title={t('Virtual dataset')}>\n              <Icons.DatasetVirtual />\n            </Tooltip>\n          );\n        },\n        accessor: 'kind_icon',\n        disableSortBy: true,\n        size: 'xs',\n        id: 'id',\n      },\n      {\n        Cell: ({\n          row: {\n            original: {\n              extra,\n              table_name: datasetTitle,\n              description,\n              explore_url: exploreURL,\n            },\n          },\n        }: any) => {\n          let titleLink: JSX.Element;\n          if (PREVENT_UNSAFE_DEFAULT_URLS_ON_DATASET) {\n            titleLink = (\n              <Link data-test=\"internal-link\" to={exploreURL}>\n                {datasetTitle}\n              </Link>\n            );\n          } else {\n            titleLink = (\n              // exploreUrl can be a link to Explore or an external link\n              // in the first case use SPA routing, else use HTML anchor\n              <GenericLink to={exploreURL}>{datasetTitle}</GenericLink>\n            );\n          }\n          try {\n            const parsedExtra = JSON.parse(extra);\n            return (\n              <FlexRowContainer>\n                {parsedExtra?.certification && (\n                  <CertifiedBadge\n                    certifiedBy={parsedExtra.certification.certified_by}\n                    details={parsedExtra.certification.details}\n                    size=\"l\"\n                  />\n                )}\n                {parsedExtra?.warning_markdown && (\n                  <WarningIconWithTooltip\n                    warningMarkdown={parsedExtra.warning_markdown}\n                    size=\"l\"\n                  />\n                )}\n                {titleLink}\n                {description && <InfoTooltip tooltip={description} />}\n              </FlexRowContainer>\n            );\n          } catch {\n            return titleLink;\n          }\n        },\n        Header: t('Name'),\n        accessor: 'table_name',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { kind },\n          },\n        }: any) => (kind === 'physical' ? t('Physical') : t('Virtual')),\n        Header: t('Type'),\n        accessor: 'kind',\n        disableSortBy: true,\n        size: 'md',\n      },\n      {\n        Header: t('Database'),\n        accessor: 'database.database_name',\n        size: 'lg',\n      },\n      {\n        Header: t('Schema'),\n        accessor: 'schema',\n        size: 'lg',\n      },\n      {\n        accessor: 'database',\n        disableSortBy: true,\n        hidden: true,\n      },\n      {\n        Cell: ({\n          row: {\n            original: { owners = [] },\n          },\n        }: any) => <FacePile users={owners} />,\n        Header: t('Owners'),\n        id: 'owners',\n        disableSortBy: true,\n        size: 'lg',\n      },\n      {\n        Cell: ({\n          row: {\n            original: {\n              changed_on_delta_humanized: changedOn,\n              changed_by: changedBy,\n            },\n          },\n        }: any) => <ModifiedInfo date={changedOn} user={changedBy} />,\n        Header: t('Last modified'),\n        accessor: 'changed_on_delta_humanized',\n        size: 'xl',\n      },\n      {\n        accessor: 'sql',\n        hidden: true,\n        disableSortBy: true,\n      },\n      {\n        Cell: ({ row: { original } }: any) => {\n          // Verify owner or isAdmin\n          const allowEdit =\n            original.owners.map((o: Owner) => o.id).includes(user.userId) ||\n            isUserAdmin(user);\n\n          const handleEdit = () => openDatasetEditModal(original);\n          const handleDelete = () => openDatasetDeleteModal(original);\n          const handleExport = () => handleBulkDatasetExport([original]);\n          const handleDuplicate = () => openDatasetDuplicateModal(original);\n          if (!canEdit && !canDelete && !canExport && !canDuplicate) {\n            return null;\n          }\n          return (\n            <Actions className=\"actions\">\n              {canDelete && (\n                <Tooltip\n                  id=\"delete-action-tooltip\"\n                  title={t('Delete')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={handleDelete}\n                  >\n                    <Icons.Trash />\n                  </span>\n                </Tooltip>\n              )}\n              {canExport && (\n                <Tooltip\n                  id=\"export-action-tooltip\"\n                  title={t('Export')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={handleExport}\n                  >\n                    <Icons.Share />\n                  </span>\n                </Tooltip>\n              )}\n              {canEdit && (\n                <Tooltip\n                  id=\"edit-action-tooltip\"\n                  title={\n                    allowEdit\n                      ? t('Edit')\n                      : t(\n                          'You must be a dataset owner in order to edit. Please reach out to a dataset owner to request modifications or edit access.',\n                        )\n                  }\n                  placement=\"bottomRight\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className={allowEdit ? 'action-button' : 'disabled'}\n                    onClick={allowEdit ? handleEdit : undefined}\n                  >\n                    <Icons.EditAlt />\n                  </span>\n                </Tooltip>\n              )}\n              {canDuplicate && original.kind === 'virtual' && (\n                <Tooltip\n                  id=\"duplicate-action-tooltop\"\n                  title={t('Duplicate')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={handleDuplicate}\n                  >\n                    <Icons.Copy />\n                  </span>\n                </Tooltip>\n              )}\n            </Actions>\n          );\n        },\n        Header: t('Actions'),\n        id: 'actions',\n        hidden: !canEdit && !canDelete && !canDuplicate,\n        disableSortBy: true,\n      },\n      {\n        accessor: QueryObjectColumns.ChangedBy,\n        hidden: true,\n      },\n    ],\n    [canEdit, canDelete, canExport, openDatasetEditModal, canDuplicate, user],\n  );\n\n  const filterTypes: Filters = useMemo(\n    () => [\n      {\n        Header: t('Name'),\n        key: 'search',\n        id: 'table_name',\n        input: 'search',\n        operator: FilterOperator.Contains,\n      },\n      {\n        Header: t('Type'),\n        key: 'sql',\n        id: 'sql',\n        input: 'select',\n        operator: FilterOperator.DatasetIsNullOrEmpty,\n        unfilteredLabel: 'All',\n        selects: [\n          { label: t('Virtual'), value: false },\n          { label: t('Physical'), value: true },\n        ],\n      },\n      {\n        Header: t('Database'),\n        key: 'database',\n        id: 'database',\n        input: 'select',\n        operator: FilterOperator.RelationOneMany,\n        unfilteredLabel: 'All',\n        fetchSelects: createFetchRelated(\n          'dataset',\n          'database',\n          createErrorHandler(errMsg =>\n            t('An error occurred while fetching datasets: %s', errMsg),\n          ),\n        ),\n        paginate: true,\n      },\n      {\n        Header: t('Schema'),\n        key: 'schema',\n        id: 'schema',\n        input: 'select',\n        operator: FilterOperator.Equals,\n        unfilteredLabel: 'All',\n        fetchSelects: createFetchDistinct(\n          'dataset',\n          'schema',\n          createErrorHandler(errMsg =>\n            t('An error occurred while fetching schema values: %s', errMsg),\n          ),\n        ),\n        paginate: true,\n      },\n      {\n        Header: t('Owner'),\n        key: 'owner',\n        id: 'owners',\n        input: 'select',\n        operator: FilterOperator.RelationManyMany,\n        unfilteredLabel: 'All',\n        fetchSelects: createFetchRelated(\n          'dataset',\n          'owners',\n          createErrorHandler(errMsg =>\n            t(\n              'An error occurred while fetching dataset owner values: %s',\n              errMsg,\n            ),\n          ),\n          user,\n        ),\n        paginate: true,\n      },\n      {\n        Header: t('Certified'),\n        key: 'certified',\n        id: 'id',\n        urlDisplay: 'certified',\n        input: 'select',\n        operator: FilterOperator.DatasetIsCertified,\n        unfilteredLabel: t('Any'),\n        selects: [\n          { label: t('Yes'), value: true },\n          { label: t('No'), value: false },\n        ],\n      },\n      {\n        Header: t('Modified by'),\n        key: 'changed_by',\n        id: 'changed_by',\n        input: 'select',\n        operator: FilterOperator.RelationOneMany,\n        unfilteredLabel: t('All'),\n        fetchSelects: createFetchRelated(\n          'dataset',\n          'changed_by',\n          createErrorHandler(errMsg =>\n            t(\n              'An error occurred while fetching dataset datasource values: %s',\n              errMsg,\n            ),\n          ),\n          user,\n        ),\n        paginate: true,\n      },\n    ],\n    [user],\n  );\n\n  const menuData: SubMenuProps = {\n    activeChild: 'Datasets',\n    name: t('Datasets'),\n  };\n\n  const buttonArr: Array<ButtonProps> = [];\n\n  if (canDelete || canExport) {\n    buttonArr.push({\n      name: t('Bulk select'),\n      onClick: toggleBulkSelect,\n      buttonStyle: 'secondary',\n    });\n  }\n\n  if (canCreate) {\n    buttonArr.push({\n      name: (\n        <>\n          <i className=\"fa fa-plus\" /> {t('Dataset')}{' '}\n        </>\n      ),\n      onClick: () => {\n        history.push('/dataset/add/');\n      },\n      buttonStyle: 'primary',\n    });\n\n    buttonArr.push({\n      name: (\n        <Tooltip\n          id=\"import-tooltip\"\n          title={t('Import datasets')}\n          placement=\"bottomRight\"\n        >\n          <Icons.Import data-test=\"import-button\" />\n        </Tooltip>\n      ),\n      buttonStyle: 'link',\n      onClick: openDatasetImportModal,\n    });\n  }\n\n  menuData.buttons = buttonArr;\n\n  const closeDatasetDeleteModal = () => {\n    setDatasetCurrentlyDeleting(null);\n  };\n\n  const closeDatasetEditModal = () => {\n    setDatasetCurrentlyEditing(null);\n  };\n\n  const closeDatasetDuplicateModal = () => {\n    setDatasetCurrentlyDuplicating(null);\n  };\n\n  const handleDatasetDelete = ({ id, table_name: tableName }: Dataset) => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/dataset/${id}`,\n    }).then(\n      () => {\n        refreshData();\n        setDatasetCurrentlyDeleting(null);\n        addSuccessToast(t('Deleted: %s', tableName));\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(\n          t('There was an issue deleting %s: %s', tableName, errMsg),\n        ),\n      ),\n    );\n  };\n\n  const handleBulkDatasetDelete = (datasetsToDelete: Dataset[]) => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/dataset/?q=${rison.encode(\n        datasetsToDelete.map(({ id }) => id),\n      )}`,\n    }).then(\n      ({ json = {} }) => {\n        refreshData();\n        addSuccessToast(json.message);\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(\n          t('There was an issue deleting the selected datasets: %s', errMsg),\n        ),\n      ),\n    );\n  };\n\n  const handleDatasetDuplicate = (newDatasetName: string) => {\n    if (datasetCurrentlyDuplicating === null) {\n      addDangerToast(t('There was an issue duplicating the dataset.'));\n    }\n\n    SupersetClient.post({\n      endpoint: `/api/v1/dataset/duplicate`,\n      jsonPayload: {\n        base_model_id: datasetCurrentlyDuplicating?.id,\n        table_name: newDatasetName,\n      },\n    }).then(\n      () => {\n        setDatasetCurrentlyDuplicating(null);\n        refreshData();\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(\n          t('There was an issue duplicating the selected datasets: %s', errMsg),\n        ),\n      ),\n    );\n  };\n\n  return (\n    <>\n      <SubMenu {...menuData} />\n      {datasetCurrentlyDeleting && (\n        <DeleteModal\n          description={\n            <>\n              <p>\n                {t(\n                  'The dataset %s is linked to %s charts that appear on %s dashboards. Are you sure you want to continue? Deleting the dataset will break those objects.',\n                  datasetCurrentlyDeleting.table_name,\n                  datasetCurrentlyDeleting.chart_count,\n                  datasetCurrentlyDeleting.dashboard_count,\n                )}\n              </p>\n              {DatasetDeleteRelatedExtension && (\n                <DatasetDeleteRelatedExtension\n                  dataset={datasetCurrentlyDeleting}\n                />\n              )}\n            </>\n          }\n          onConfirm={() => {\n            if (datasetCurrentlyDeleting) {\n              handleDatasetDelete(datasetCurrentlyDeleting);\n            }\n          }}\n          onHide={closeDatasetDeleteModal}\n          open\n          title={t('Delete Dataset?')}\n        />\n      )}\n      {datasetCurrentlyEditing && (\n        <DatasourceModal\n          datasource={datasetCurrentlyEditing}\n          onDatasourceSave={refreshData}\n          onHide={closeDatasetEditModal}\n          show\n        />\n      )}\n      <DuplicateDatasetModal\n        dataset={datasetCurrentlyDuplicating}\n        onHide={closeDatasetDuplicateModal}\n        onDuplicate={handleDatasetDuplicate}\n      />\n      <ConfirmStatusChange\n        title={t('Please confirm')}\n        description={t(\n          'Are you sure you want to delete the selected datasets?',\n        )}\n        onConfirm={handleBulkDatasetDelete}\n      >\n        {confirmDelete => {\n          const bulkActions: ListViewProps['bulkActions'] = [];\n          if (canDelete) {\n            bulkActions.push({\n              key: 'delete',\n              name: t('Delete'),\n              onSelect: confirmDelete,\n              type: 'danger',\n            });\n          }\n          if (canExport) {\n            bulkActions.push({\n              key: 'export',\n              name: t('Export'),\n              type: 'primary',\n              onSelect: handleBulkDatasetExport,\n            });\n          }\n          return (\n            <ListView<Dataset>\n              className=\"dataset-list-view\"\n              columns={columns}\n              data={datasets}\n              count={datasetCount}\n              pageSize={PAGE_SIZE}\n              fetchData={fetchData}\n              filters={filterTypes}\n              loading={loading}\n              initialSort={initialSort}\n              bulkActions={bulkActions}\n              bulkSelectEnabled={bulkSelectEnabled}\n              disableBulkSelect={toggleBulkSelect}\n              addDangerToast={addDangerToast}\n              addSuccessToast={addSuccessToast}\n              refreshData={refreshData}\n              renderBulkSelectCopy={selected => {\n                const { virtualCount, physicalCount } = selected.reduce(\n                  (acc, e) => {\n                    if (e.original.kind === 'physical') acc.physicalCount += 1;\n                    else if (e.original.kind === 'virtual') {\n                      acc.virtualCount += 1;\n                    }\n                    return acc;\n                  },\n                  { virtualCount: 0, physicalCount: 0 },\n                );\n\n                if (!selected.length) {\n                  return t('0 Selected');\n                }\n                if (virtualCount && !physicalCount) {\n                  return t(\n                    '%s Selected (Virtual)',\n                    selected.length,\n                    virtualCount,\n                  );\n                }\n                if (physicalCount && !virtualCount) {\n                  return t(\n                    '%s Selected (Physical)',\n                    selected.length,\n                    physicalCount,\n                  );\n                }\n\n                return t(\n                  '%s Selected (%s Physical, %s Virtual)',\n                  selected.length,\n                  physicalCount,\n                  virtualCount,\n                );\n              }}\n            />\n          );\n        }}\n      </ConfirmStatusChange>\n\n      <ImportModelsModal\n        resourceName=\"dataset\"\n        resourceLabel={t('dataset')}\n        passwordsNeededMessage={PASSWORDS_NEEDED_MESSAGE}\n        confirmOverwriteMessage={CONFIRM_OVERWRITE_MESSAGE}\n        addDangerToast={addDangerToast}\n        addSuccessToast={addSuccessToast}\n        onModelImport={handleDatasetImport}\n        show={importingDataset}\n        onHide={closeDatasetImportModal}\n        passwordFields={passwordFields}\n        setPasswordFields={setPasswordFields}\n        sshTunnelPasswordFields={sshTunnelPasswordFields}\n        setSSHTunnelPasswordFields={setSSHTunnelPasswordFields}\n        sshTunnelPrivateKeyFields={sshTunnelPrivateKeyFields}\n        setSSHTunnelPrivateKeyFields={setSSHTunnelPrivateKeyFields}\n        sshTunnelPrivateKeyPasswordFields={sshTunnelPrivateKeyPasswordFields}\n        setSSHTunnelPrivateKeyPasswordFields={\n          setSSHTunnelPrivateKeyPasswordFields\n        }\n      />\n      {preparingExport && <Loading />}\n    </>\n  );\n};\n\nexport default withToasts(DatasetList);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}