{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport getBBoxCeil from './svg/getBBoxCeil';\nimport { hiddenSvgFactory, textFactory } from './svg/factories';\nimport updateTextNode from './svg/updateTextNode';\n/**\n * get dimensions of multiple texts with same style\n * @param input\n * @param defaultDimension\n */\nexport default function getMultipleTextDimensions(input, defaultDimension) {\n  const { texts, className, style, container } = input;\n  const cache = new Map();\n  // for empty string\n  cache.set('', { height: 0, width: 0 });\n  let textNode;\n  let svgNode;\n  const dimensions = texts.map((text) => {\n    // Check if this string has been computed already\n    if (cache.has(text)) {\n      return cache.get(text);\n    }\n    // Lazy creation of text and svg nodes\n    if (!textNode) {\n      svgNode = hiddenSvgFactory.createInContainer(container);\n      textNode = textFactory.createInContainer(svgNode);\n    }\n    // Update text and get dimension\n    updateTextNode(textNode, { className, style, text });\n    const dimension = getBBoxCeil(textNode, defaultDimension);\n    // Store result to cache\n    cache.set(text, dimension);\n    return dimension;\n  });\n  // Remove svg node, if any\n  if (svgNode && textNode) {\n    // The nodes are added to the DOM briefly only to make getBBox works.\n    // (If not added to DOM getBBox will always return 0x0.)\n    // After that the svg nodes are not needed.\n    // We delay its removal in case there are subsequent calls to this function\n    // that can reuse the svg nodes.\n    // Experiments have shown that reusing existing nodes\n    // instead of deleting and adding new ones can save lot of time.\n    setTimeout(() => {\n      textFactory.removeFromContainer(svgNode);\n      hiddenSvgFactory.removeFromContainer(container);\n    }, 500);\n  }\n  return dimensions;\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(getMultipleTextDimensions, \"getMultipleTextDimensions\", \"/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/dimension/getMultipleTextDimensions.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["getBBoxCeil","hiddenSvgFactory","textFactory","updateTextNode","getMultipleTextDimensions","input","defaultDimension","texts","className","style","container","cache","Map","set","height","width","textNode","svgNode","dimensions","map","text","has","get","createInContainer","dimension","setTimeout","removeFromContainer","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/dimension/getMultipleTextDimensions.ts"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { TextStyle, Dimension } from './types';\nimport getBBoxCeil from './svg/getBBoxCeil';\nimport { hiddenSvgFactory, textFactory } from './svg/factories';\nimport updateTextNode from './svg/updateTextNode';\n\n/**\n * get dimensions of multiple texts with same style\n * @param input\n * @param defaultDimension\n */\nexport default function getMultipleTextDimensions(\n  input: {\n    className?: string;\n    container?: HTMLElement;\n    style?: TextStyle;\n    texts: string[];\n  },\n  defaultDimension?: Dimension,\n): Dimension[] {\n  const { texts, className, style, container } = input;\n\n  const cache = new Map<string, Dimension>();\n  // for empty string\n  cache.set('', { height: 0, width: 0 });\n  let textNode: SVGTextElement | undefined;\n  let svgNode: SVGSVGElement | undefined;\n\n  const dimensions = texts.map(text => {\n    // Check if this string has been computed already\n    if (cache.has(text)) {\n      return cache.get(text) as Dimension;\n    }\n\n    // Lazy creation of text and svg nodes\n    if (!textNode) {\n      svgNode = hiddenSvgFactory.createInContainer(container);\n      textNode = textFactory.createInContainer(svgNode);\n    }\n\n    // Update text and get dimension\n    updateTextNode(textNode, { className, style, text });\n    const dimension = getBBoxCeil(textNode, defaultDimension);\n    // Store result to cache\n    cache.set(text, dimension);\n\n    return dimension;\n  });\n\n  // Remove svg node, if any\n  if (svgNode && textNode) {\n    // The nodes are added to the DOM briefly only to make getBBox works.\n    // (If not added to DOM getBBox will always return 0x0.)\n    // After that the svg nodes are not needed.\n    // We delay its removal in case there are subsequent calls to this function\n    // that can reuse the svg nodes.\n    // Experiments have shown that reusing existing nodes\n    // instead of deleting and adding new ones can save lot of time.\n    setTimeout(() => {\n      textFactory.removeFromContainer(svgNode);\n      hiddenSvgFactory.removeFromContainer(container);\n    }, 500);\n  }\n\n  return dimensions;\n}\n"],"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAoBA,OAAOA,WAAW,MAAM,mBAAmB;AAC3C,SAASC,gBAAgB,EAAEC,WAAW,QAAQ,iBAAiB;AAC/D,OAAOC,cAAc,MAAM,sBAAsB;AAEjD;;;;;AAKA,eAAc,SAAUC,yBAAyBA,CAC/CC,KAKC,EACDC,gBAA4B;EAE5B,MAAM,EAAEC,KAAK,EAAEC,SAAS,EAAEC,KAAK,EAAEC,SAAS,EAAE,GAAGL,KAAK;EAEpD,MAAMM,KAAK,GAAG,IAAIC,GAAG,EAAqB;EAC1C;EACAD,KAAK,CAACE,GAAG,CAAC,EAAE,EAAE,EAAEC,MAAM,EAAE,CAAC,EAAEC,KAAK,EAAE,CAAC,EAAE,CAAC;EACtC,IAAIC,QAAoC;EACxC,IAAIC,OAAkC;EAEtC,MAAMC,UAAU,GAAGX,KAAK,CAACY,GAAG,CAAC,CAAAC,IAAI,KAAG;IAClC;IACA,IAAIT,KAAK,CAACU,GAAG,CAACD,IAAI,CAAC,EAAE;MACnB,OAAOT,KAAK,CAACW,GAAG,CAACF,IAAI,CAAc;;IAGrC;IACA,IAAI,CAACJ,QAAQ,EAAE;MACbC,OAAO,GAAGhB,gBAAgB,CAACsB,iBAAiB,CAACb,SAAS,CAAC;MACvDM,QAAQ,GAAGd,WAAW,CAACqB,iBAAiB,CAACN,OAAO,CAAC;;IAGnD;IACAd,cAAc,CAACa,QAAQ,EAAE,EAAER,SAAS,EAAEC,KAAK,EAAEW,IAAI,EAAE,CAAC;IACpD,MAAMI,SAAS,GAAGxB,WAAW,CAACgB,QAAQ,EAAEV,gBAAgB,CAAC;IACzD;IACAK,KAAK,CAACE,GAAG,CAACO,IAAI,EAAEI,SAAS,CAAC;IAE1B,OAAOA,SAAS;EAClB,CAAC,CAAC;EAEF;EACA,IAAIP,OAAO,IAAID,QAAQ,EAAE;IACvB;IACA;IACA;IACA;IACA;IACA;IACA;IACAS,UAAU,CAAC,MAAK;MACdvB,WAAW,CAACwB,mBAAmB,CAACT,OAAO,CAAC;MACxChB,gBAAgB,CAACyB,mBAAmB,CAAChB,SAAS,CAAC;IACjD,CAAC,EAAE,GAAG,CAAC;;EAGT,OAAOQ,UAAU;AACnB,CAAC,mBAAAS,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAC,OAAA,GAAAC,SAAA,MAAAH,cAAA,WAAAA,cAAA,CAAAI,QAAA,CAtDuB3B,yBAAyB,sLAAA4B,WAAA,UAAAJ,oBAAA,mBAAAA,oBAAA,CAAAI,WAAA,GAAAF,SAAA,CAAAE,WAAA,IAAAA,WAAA,CAAAC,MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}