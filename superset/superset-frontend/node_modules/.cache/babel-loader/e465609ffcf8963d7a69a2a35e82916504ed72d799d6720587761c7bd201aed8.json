{"ast":null,"code":"import _omit from \"lodash/omit\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint camelcase: 0 */\nimport { t } from '@superset-ui/core';\n\nimport { HYDRATE_DASHBOARD } from 'src/dashboard/actions/hydrate';\nimport { DatasourcesAction } from 'src/dashboard/actions/datasources';\nimport { getFormDataFromControls } from 'src/explore/controlUtils';\nimport { HYDRATE_EXPLORE } from 'src/explore/actions/hydrateExplore';\nimport { now } from 'src/utils/dates';\nimport * as actions from './chartAction';\nexport const chart = {\n  id: 0,\n  chartAlert: null,\n  chartStatus: 'loading',\n  chartStackTrace: null,\n  chartUpdateEndTime: null,\n  chartUpdateStartTime: 0,\n  latestQueryFormData: {},\n  sliceFormData: null,\n  queryController: null,\n  queriesResponse: null,\n  triggerQuery: true,\n  lastRendered: 0\n};\nexport default function chartReducer(charts = {}, action) {\n  const actionHandlers = {\n    [actions.ADD_CHART]() {\n      return {\n        ...chart,\n        ...action.chart\n      };\n    },\n    [actions.CHART_UPDATE_SUCCEEDED](state) {\n      return {\n        ...state,\n        chartStatus: 'success',\n        chartAlert: null,\n        queriesResponse: action.queriesResponse,\n        chartUpdateEndTime: now()\n      };\n    },\n    [actions.CHART_UPDATE_STARTED](state) {\n      return {\n        ...state,\n        chartStatus: 'loading',\n        chartStackTrace: null,\n        chartAlert: null,\n        chartUpdateEndTime: null,\n        chartUpdateStartTime: now(),\n        queryController: action.queryController\n      };\n    },\n    [actions.CHART_UPDATE_STOPPED](state) {\n      return {\n        ...state,\n        chartStatus: 'stopped',\n        chartAlert: t('Updating chart was stopped'),\n        chartUpdateEndTime: now()\n      };\n    },\n    [actions.CHART_RENDERING_SUCCEEDED](state) {\n      return { ...state, chartStatus: 'rendered', chartUpdateEndTime: now() };\n    },\n    [actions.CHART_RENDERING_FAILED](state) {\n      return {\n        ...state,\n        chartStatus: 'failed',\n        chartStackTrace: action.stackTrace,\n        chartAlert: t('An error occurred while rendering the visualization: %s', action.error)\n      };\n    },\n    [actions.CHART_UPDATE_FAILED](state) {var _action$queriesRespon, _action$queriesRespon2, _action$queriesRespon3, _action$queriesRespon4;\n      return {\n        ...state,\n        chartStatus: 'failed',\n        chartAlert: action.queriesResponse ? (_action$queriesRespon =\n        action.queriesResponse) == null ? void 0 : (_action$queriesRespon2 = _action$queriesRespon[0]) == null ? void 0 : _action$queriesRespon2.error :\n        t('Network error.'),\n        chartUpdateEndTime: now(),\n        queriesResponse: action.queriesResponse,\n        chartStackTrace: action.queriesResponse ? (_action$queriesRespon3 =\n        action.queriesResponse) == null ? void 0 : (_action$queriesRespon4 = _action$queriesRespon3[0]) == null ? void 0 : _action$queriesRespon4.stacktrace :\n        null\n      };\n    },\n    [actions.DYNAMIC_PLUGIN_CONTROLS_READY](state) {\n      const sliceFormData = getFormDataFromControls(action.controlsState);\n      return { ...state, sliceFormData };\n    },\n    [actions.TRIGGER_QUERY](state) {\n      return {\n        ...state,\n        triggerQuery: action.value,\n        chartStatus: 'loading'\n      };\n    },\n    [actions.RENDER_TRIGGERED](state) {\n      return { ...state, lastRendered: action.value };\n    },\n    [actions.UPDATE_QUERY_FORM_DATA](state) {\n      return { ...state, latestQueryFormData: action.value };\n    },\n    [actions.ANNOTATION_QUERY_STARTED](state) {var _state$annotationQuer;\n      if ((_state$annotationQuer = state.annotationQuery) != null && _state$annotationQuer[action.annotation.name]) {\n        state.annotationQuery[action.annotation.name].abort();\n      }\n      const annotationQuery = {\n        ...state.annotationQuery,\n        [action.annotation.name]: action.queryController\n      };\n      return {\n        ...state,\n        annotationQuery\n      };\n    },\n    [actions.ANNOTATION_QUERY_SUCCESS](state) {\n      const annotationData = {\n        ...state.annotationData,\n        [action.annotation.name]: action.queryResponse.data\n      };\n      const annotationError = { ...state.annotationError };\n      delete annotationError[action.annotation.name];\n      const annotationQuery = { ...state.annotationQuery };\n      delete annotationQuery[action.annotation.name];\n      return {\n        ...state,\n        annotationData,\n        annotationError,\n        annotationQuery\n      };\n    },\n    [actions.ANNOTATION_QUERY_FAILED](state) {\n      const annotationData = { ...state.annotationData };\n      delete annotationData[action.annotation.name];\n      const annotationError = {\n        ...state.annotationError,\n        [action.annotation.name]: action.queryResponse ?\n        action.queryResponse.error :\n        t('Network error.')\n      };\n      const annotationQuery = { ...state.annotationQuery };\n      delete annotationQuery[action.annotation.name];\n      return {\n        ...state,\n        annotationData,\n        annotationError,\n        annotationQuery\n      };\n    }\n  };\n  /* eslint-disable no-param-reassign */\n  if (action.type === actions.REMOVE_CHART) {\n    return _omit(charts, [action.key]);\n  }\n  if (action.type === actions.UPDATE_CHART_ID) {\n    const { newId, key } = action;\n    charts[newId] = {\n      ...charts[key],\n      id: newId\n    };\n    delete charts[key];\n    return charts;\n  }\n  if (action.type === HYDRATE_DASHBOARD || action.type === HYDRATE_EXPLORE) {\n    return { ...action.data.charts };\n  }\n  if (action.type === DatasourcesAction.SetDatasources) {\n    return Object.fromEntries(Object.entries(charts).map(([chartId, chart]) => [\n    chartId,\n    // some charts may not have properly handled missing datasource,\n    // causing a JS error, so we reset error message and try to re-render\n    // the chart once the datasource is fully loaded\n    chart.chartStatus === 'failed' && chart.chartStackTrace ?\n    {\n      ...chart,\n      chartStatus: '',\n      chartStackTrace: null,\n      chartAlert: null\n    } :\n    chart]\n    ));\n  }\n  if (action.type in actionHandlers) {\n    return {\n      ...charts,\n      [action.key]: actionHandlers[action.type](charts[action.key])\n    };\n  }\n  return charts;\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(chart, \"chart\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/chartReducer.ts\");reactHotLoader.register(chartReducer, \"chartReducer\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/chartReducer.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["t","HYDRATE_DASHBOARD","DatasourcesAction","getFormDataFromControls","HYDRATE_EXPLORE","now","actions","chart","id","chartAlert","chartStatus","chartStackTrace","chartUpdateEndTime","chartUpdateStartTime","latestQueryFormData","sliceFormData","queryController","queriesResponse","triggerQuery","lastRendered","chartReducer","charts","action","actionHandlers","ADD_CHART","CHART_UPDATE_SUCCEEDED","state","CHART_UPDATE_STARTED","CHART_UPDATE_STOPPED","CHART_RENDERING_SUCCEEDED","CHART_RENDERING_FAILED","stackTrace","error","CHART_UPDATE_FAILED","_action$queriesRespon","_action$queriesRespon2","_action$queriesRespon3","_action$queriesRespon4","stacktrace","DYNAMIC_PLUGIN_CONTROLS_READY","controlsState","TRIGGER_QUERY","value","RENDER_TRIGGERED","UPDATE_QUERY_FORM_DATA","ANNOTATION_QUERY_STARTED","_state$annotationQuer","annotationQuery","annotation","name","abort","ANNOTATION_QUERY_SUCCESS","annotationData","queryResponse","data","annotationError","ANNOTATION_QUERY_FAILED","type","REMOVE_CHART","_omit","key","UPDATE_CHART_ID","newId","SetDatasources","Object","fromEntries","entries","map","chartId","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/chartReducer.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint camelcase: 0 */\nimport { t } from '@superset-ui/core';\nimport { omit } from 'lodash';\nimport { HYDRATE_DASHBOARD } from 'src/dashboard/actions/hydrate';\nimport { DatasourcesAction } from 'src/dashboard/actions/datasources';\nimport { ChartState } from 'src/explore/types';\nimport { getFormDataFromControls } from 'src/explore/controlUtils';\nimport { HYDRATE_EXPLORE } from 'src/explore/actions/hydrateExplore';\nimport { now } from 'src/utils/dates';\nimport * as actions from './chartAction';\n\nexport const chart: ChartState = {\n  id: 0,\n  chartAlert: null,\n  chartStatus: 'loading',\n  chartStackTrace: null,\n  chartUpdateEndTime: null,\n  chartUpdateStartTime: 0,\n  latestQueryFormData: {},\n  sliceFormData: null,\n  queryController: null,\n  queriesResponse: null,\n  triggerQuery: true,\n  lastRendered: 0,\n};\n\ntype ChartActionHandler = (state: ChartState) => ChartState;\n\ntype AnyChartAction = Record<string, any>;\n\nexport default function chartReducer(\n  charts: Record<string, ChartState> = {},\n  action: AnyChartAction,\n) {\n  const actionHandlers: Record<string, ChartActionHandler> = {\n    [actions.ADD_CHART]() {\n      return {\n        ...chart,\n        ...action.chart,\n      };\n    },\n    [actions.CHART_UPDATE_SUCCEEDED](state) {\n      return {\n        ...state,\n        chartStatus: 'success',\n        chartAlert: null,\n        queriesResponse: action.queriesResponse,\n        chartUpdateEndTime: now(),\n      };\n    },\n    [actions.CHART_UPDATE_STARTED](state) {\n      return {\n        ...state,\n        chartStatus: 'loading',\n        chartStackTrace: null,\n        chartAlert: null,\n        chartUpdateEndTime: null,\n        chartUpdateStartTime: now(),\n        queryController: action.queryController,\n      };\n    },\n    [actions.CHART_UPDATE_STOPPED](state) {\n      return {\n        ...state,\n        chartStatus: 'stopped',\n        chartAlert: t('Updating chart was stopped'),\n        chartUpdateEndTime: now(),\n      };\n    },\n    [actions.CHART_RENDERING_SUCCEEDED](state) {\n      return { ...state, chartStatus: 'rendered', chartUpdateEndTime: now() };\n    },\n    [actions.CHART_RENDERING_FAILED](state) {\n      return {\n        ...state,\n        chartStatus: 'failed',\n        chartStackTrace: action.stackTrace,\n        chartAlert: t(\n          'An error occurred while rendering the visualization: %s',\n          action.error,\n        ),\n      };\n    },\n    [actions.CHART_UPDATE_FAILED](state) {\n      return {\n        ...state,\n        chartStatus: 'failed',\n        chartAlert: action.queriesResponse\n          ? action.queriesResponse?.[0]?.error\n          : t('Network error.'),\n        chartUpdateEndTime: now(),\n        queriesResponse: action.queriesResponse,\n        chartStackTrace: action.queriesResponse\n          ? action.queriesResponse?.[0]?.stacktrace\n          : null,\n      };\n    },\n    [actions.DYNAMIC_PLUGIN_CONTROLS_READY](state) {\n      const sliceFormData = getFormDataFromControls(action.controlsState);\n      return { ...state, sliceFormData };\n    },\n    [actions.TRIGGER_QUERY](state) {\n      return {\n        ...state,\n        triggerQuery: action.value,\n        chartStatus: 'loading',\n      };\n    },\n    [actions.RENDER_TRIGGERED](state) {\n      return { ...state, lastRendered: action.value };\n    },\n    [actions.UPDATE_QUERY_FORM_DATA](state) {\n      return { ...state, latestQueryFormData: action.value };\n    },\n    [actions.ANNOTATION_QUERY_STARTED](state) {\n      if (state.annotationQuery?.[action.annotation.name]) {\n        state.annotationQuery[action.annotation.name].abort();\n      }\n      const annotationQuery = {\n        ...state.annotationQuery,\n        [action.annotation.name]: action.queryController,\n      };\n      return {\n        ...state,\n        annotationQuery,\n      };\n    },\n    [actions.ANNOTATION_QUERY_SUCCESS](state) {\n      const annotationData = {\n        ...state.annotationData,\n        [action.annotation.name]: action.queryResponse.data,\n      };\n      const annotationError = { ...state.annotationError };\n      delete annotationError[action.annotation.name];\n      const annotationQuery = { ...state.annotationQuery };\n      delete annotationQuery[action.annotation.name];\n      return {\n        ...state,\n        annotationData,\n        annotationError,\n        annotationQuery,\n      };\n    },\n    [actions.ANNOTATION_QUERY_FAILED](state) {\n      const annotationData = { ...state.annotationData };\n      delete annotationData[action.annotation.name];\n      const annotationError = {\n        ...state.annotationError,\n        [action.annotation.name]: action.queryResponse\n          ? action.queryResponse.error\n          : t('Network error.'),\n      };\n      const annotationQuery = { ...state.annotationQuery };\n      delete annotationQuery[action.annotation.name];\n      return {\n        ...state,\n        annotationData,\n        annotationError,\n        annotationQuery,\n      };\n    },\n  };\n\n  /* eslint-disable no-param-reassign */\n  if (action.type === actions.REMOVE_CHART) {\n    return omit(charts, [action.key]);\n  }\n  if (action.type === actions.UPDATE_CHART_ID) {\n    const { newId, key } = action;\n    charts[newId] = {\n      ...charts[key],\n      id: newId,\n    };\n    delete charts[key];\n    return charts;\n  }\n  if (action.type === HYDRATE_DASHBOARD || action.type === HYDRATE_EXPLORE) {\n    return { ...action.data.charts };\n  }\n  if (action.type === DatasourcesAction.SetDatasources) {\n    return Object.fromEntries(\n      Object.entries(charts).map(([chartId, chart]) => [\n        chartId,\n        // some charts may not have properly handled missing datasource,\n        // causing a JS error, so we reset error message and try to re-render\n        // the chart once the datasource is fully loaded\n        chart.chartStatus === 'failed' && chart.chartStackTrace\n          ? {\n              ...chart,\n              chartStatus: '',\n              chartStackTrace: null,\n              chartAlert: null,\n            }\n          : chart,\n      ]),\n    );\n  }\n\n  if (action.type in actionHandlers) {\n    return {\n      ...charts,\n      [action.key]: actionHandlers[action.type](charts[action.key]),\n    };\n  }\n\n  return charts;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}