{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { t, validateNonEmpty } from '@superset-ui/core';\nimport { columnChoices, ColumnOption, formatSelectOptionsForRange } from '@superset-ui/chart-controls';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst config = {\n  controlPanelSections: [\n  {\n    label: t('Event definition'),\n    controlSetRows: [\n    ['entity'],\n    [\n    {\n      name: 'all_columns_x',\n      config: {\n        type: 'SelectControl',\n        label: t('Event Names'),\n        description: t('Columns to display'),\n        mapStateToProps: (state) => ({\n          choices: columnChoices(state == null ? void 0 : state.datasource)\n        }),\n        // choices is from `mapStateToProps`\n        default: (control) => {var _control$choices, _control$choices$;return ((_control$choices = control.choices) == null ? void 0 : (_control$choices$ = _control$choices[0]) == null ? void 0 : _control$choices$[0]) || null;},\n        validators: [validateNonEmpty]\n      }\n    }],\n\n    ['row_limit'],\n    [\n    {\n      name: 'order_by_entity',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Order by entity id'),\n        description: t('Important! Select this if the table is not already sorted by entity id, ' +\n        'else there is no guarantee that all events for each entity are returned.'),\n        default: true\n      }\n    }],\n\n    [\n    {\n      name: 'min_leaf_node_event_count',\n      config: {\n        type: 'SelectControl',\n        freeForm: false,\n        label: t('Minimum leaf node event count'),\n        default: 1,\n        choices: formatSelectOptionsForRange(1, 10),\n        description: t('Leaf nodes that represent fewer than this number of events will be initially ' +\n        'hidden in the visualization')\n      }\n    }]]\n\n\n  },\n  {\n    label: t('Query'),\n    expanded: true,\n    controlSetRows: [['adhoc_filters']]\n  },\n  {\n    label: t('Additional metadata'),\n    controlSetRows: [\n    [\n    {\n      name: 'all_columns',\n      // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n      config: {\n        type: 'SelectControl',\n        multi: true,\n        label: t('Metadata'),\n        default: [],\n        description: t('Select any columns for metadata inspection'),\n        optionRenderer: (c) => ___EmotionJSX(ColumnOption, { showType: true, column: c }),\n        valueRenderer: (c) => ___EmotionJSX(ColumnOption, { column: c }),\n        valueKey: 'column_name',\n        allowAll: true,\n        mapStateToProps: (state) => {var _state$datasource;return {\n            options: ((_state$datasource = state.datasource) == null ? void 0 : _state$datasource.columns) || []\n          };},\n        commaChoosesOption: false,\n        freeForm: true\n      }\n    }]]\n\n\n  }],\n\n  controlOverrides: {\n    entity: {\n      label: t('Entity ID'),\n      description: t('e.g., a \"user id\" column')\n    },\n    row_limit: {\n      label: t('Max Events'),\n      description: t('The maximum number of events to return, equivalent to the number of rows')\n    }\n  }\n};const _default =\nconfig;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(config, \"config\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-plugin-chart-event-flow/src/controlPanel.tsx\");reactHotLoader.register(_default, \"default\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-plugin-chart-event-flow/src/controlPanel.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["React","t","validateNonEmpty","columnChoices","ColumnOption","formatSelectOptionsForRange","jsx","___EmotionJSX","config","controlPanelSections","label","controlSetRows","name","type","description","mapStateToProps","state","choices","datasource","default","control","_control$choices","_control$choices$","validators","freeForm","expanded","multi","optionRenderer","c","showType","column","valueRenderer","valueKey","allowAll","_state$datasource","options","columns","commaChoosesOption","controlOverrides","entity","row_limit","_default","reactHotLoader","reactHotLoaderGlobal","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-plugin-chart-event-flow/src/controlPanel.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { t, validateNonEmpty } from '@superset-ui/core';\nimport {\n  columnChoices,\n  ColumnOption,\n  ColumnMeta,\n  ControlPanelConfig,\n  ControlState,\n  formatSelectOptionsForRange,\n  SelectControlConfig,\n} from '@superset-ui/chart-controls';\n\nconst config: ControlPanelConfig = {\n  controlPanelSections: [\n    {\n      label: t('Event definition'),\n      controlSetRows: [\n        ['entity'],\n        [\n          {\n            name: 'all_columns_x',\n            config: {\n              type: 'SelectControl',\n              label: t('Event Names'),\n              description: t('Columns to display'),\n              mapStateToProps: state => ({\n                choices: columnChoices(state?.datasource),\n              }),\n              // choices is from `mapStateToProps`\n              default: (control: ControlState) =>\n                control.choices?.[0]?.[0] || null,\n              validators: [validateNonEmpty],\n            },\n          },\n        ],\n        ['row_limit'],\n        [\n          {\n            name: 'order_by_entity',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Order by entity id'),\n              description: t(\n                'Important! Select this if the table is not already sorted by entity id, ' +\n                  'else there is no guarantee that all events for each entity are returned.',\n              ),\n              default: true,\n            },\n          },\n        ],\n        [\n          {\n            name: 'min_leaf_node_event_count',\n            config: {\n              type: 'SelectControl',\n              freeForm: false,\n              label: t('Minimum leaf node event count'),\n              default: 1,\n              choices: formatSelectOptionsForRange(1, 10),\n              description: t(\n                'Leaf nodes that represent fewer than this number of events will be initially ' +\n                  'hidden in the visualization',\n              ),\n            },\n          },\n        ],\n      ],\n    },\n    {\n      label: t('Query'),\n      expanded: true,\n      controlSetRows: [['adhoc_filters']],\n    },\n    {\n      label: t('Additional metadata'),\n      controlSetRows: [\n        [\n          {\n            name: 'all_columns',\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            config: {\n              type: 'SelectControl',\n              multi: true,\n              label: t('Metadata'),\n              default: [],\n              description: t('Select any columns for metadata inspection'),\n              optionRenderer: c => <ColumnOption showType column={c} />,\n              valueRenderer: c => <ColumnOption column={c} />,\n              valueKey: 'column_name',\n              allowAll: true,\n              mapStateToProps: state => ({\n                options: state.datasource?.columns || [],\n              }),\n              commaChoosesOption: false,\n              freeForm: true,\n            } as SelectControlConfig<ColumnMeta>,\n          },\n        ],\n      ],\n    },\n  ],\n  controlOverrides: {\n    entity: {\n      label: t('Entity ID'),\n      description: t('e.g., a \"user id\" column'),\n    },\n    row_limit: {\n      label: t('Max Events'),\n      description: t(\n        'The maximum number of events to return, equivalent to the number of rows',\n      ),\n    },\n  },\n};\n\nexport default config;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}