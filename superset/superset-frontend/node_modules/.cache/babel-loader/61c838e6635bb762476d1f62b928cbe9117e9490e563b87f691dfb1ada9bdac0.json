{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport buildQueryObject from './buildQueryObject';\nimport DatasourceKey from './DatasourceKey';\nimport { normalizeTimeColumn } from './normalizeTimeColumn';\nimport { isXAxisSet } from './getXAxis';\nconst WRAP_IN_ARRAY = (baseQueryObject) => [baseQueryObject];\nexport default function buildQueryContext(formData, options) {\n  const { queryFields, buildQuery = WRAP_IN_ARRAY } = typeof options === 'function' ?\n  { buildQuery: options, queryFields: {} } :\n  options || {};\n  let queries = buildQuery(buildQueryObject(formData, queryFields));\n  // --- query mutator begin ---\n  // todo(Yongjie): move the query mutator into buildQueryObject instead of buildQueryContext\n  queries.forEach((query) => {\n    if (Array.isArray(query.post_processing)) {\n      // eslint-disable-next-line no-param-reassign\n      query.post_processing = query.post_processing.filter(Boolean);\n    }\n  });\n  if (isXAxisSet(formData)) {\n    queries = queries.map((query) => normalizeTimeColumn(formData, query));\n  }\n  // --- query mutator end ---\n  return {\n    datasource: new DatasourceKey(formData.datasource).toObject(),\n    force: formData.force || false,\n    queries,\n    form_data: formData,\n    result_format: formData.result_format || 'json',\n    result_type: formData.result_type || 'full'\n  };\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(WRAP_IN_ARRAY, \"WRAP_IN_ARRAY\", \"/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/query/buildQueryContext.ts\");reactHotLoader.register(buildQueryContext, \"buildQueryContext\", \"/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/query/buildQueryContext.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["buildQueryObject","DatasourceKey","normalizeTimeColumn","isXAxisSet","WRAP_IN_ARRAY","baseQueryObject","buildQueryContext","formData","options","queryFields","buildQuery","queries","forEach","query","Array","isArray","post_processing","filter","Boolean","map","datasource","toObject","force","form_data","result_format","result_type","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/query/buildQueryContext.ts"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport buildQueryObject from './buildQueryObject';\nimport DatasourceKey from './DatasourceKey';\nimport { QueryFieldAliases, QueryFormData } from './types/QueryFormData';\nimport { QueryContext, QueryObject } from './types/Query';\nimport { SetDataMaskHook } from '../chart';\nimport { JsonObject } from '../connection';\nimport { normalizeTimeColumn } from './normalizeTimeColumn';\nimport { isXAxisSet } from './getXAxis';\n\nconst WRAP_IN_ARRAY = (baseQueryObject: QueryObject) => [baseQueryObject];\n\nexport type BuildFinalQueryObjects = (\n  baseQueryObject: QueryObject,\n) => QueryObject[];\n\nexport default function buildQueryContext(\n  formData: QueryFormData,\n  options?:\n    | {\n        buildQuery?: BuildFinalQueryObjects;\n        queryFields?: QueryFieldAliases;\n        ownState?: JsonObject;\n        hooks?: { setDataMask: SetDataMaskHook };\n      }\n    | BuildFinalQueryObjects,\n): QueryContext {\n  const { queryFields, buildQuery = WRAP_IN_ARRAY } =\n    typeof options === 'function'\n      ? { buildQuery: options, queryFields: {} }\n      : options || {};\n  let queries = buildQuery(buildQueryObject(formData, queryFields));\n  // --- query mutator begin ---\n  // todo(Yongjie): move the query mutator into buildQueryObject instead of buildQueryContext\n  queries.forEach(query => {\n    if (Array.isArray(query.post_processing)) {\n      // eslint-disable-next-line no-param-reassign\n      query.post_processing = query.post_processing.filter(Boolean);\n    }\n  });\n  if (isXAxisSet(formData)) {\n    queries = queries.map(query => normalizeTimeColumn(formData, query));\n  }\n  // --- query mutator end ---\n  return {\n    datasource: new DatasourceKey(formData.datasource).toObject(),\n    force: formData.force || false,\n    queries,\n    form_data: formData,\n    result_format: formData.result_format || 'json',\n    result_type: formData.result_type || 'full',\n  };\n}\n"],"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAmBA,OAAOA,gBAAgB,MAAM,oBAAoB;AACjD,OAAOC,aAAa,MAAM,iBAAiB;AAK3C,SAASC,mBAAmB,QAAQ,uBAAuB;AAC3D,SAASC,UAAU,QAAQ,YAAY;AAEvC,MAAMC,aAAa,GAAGA,CAACC,eAA4B,KAAK,CAACA,eAAe,CAAC;AAMzE,eAAc,SAAUC,iBAAiBA,CACvCC,QAAuB,EACvBC,OAO0B;EAE1B,MAAM,EAAEC,WAAW,EAAEC,UAAU,GAAGN,aAAa,EAAE,GAC/C,OAAOI,OAAO,KAAK,UAAU;EACzB,EAAEE,UAAU,EAAEF,OAAO,EAAEC,WAAW,EAAE,EAAE,EAAE;EACxCD,OAAO,IAAI,EAAE;EACnB,IAAIG,OAAO,GAAGD,UAAU,CAACV,gBAAgB,CAACO,QAAQ,EAAEE,WAAW,CAAC,CAAC;EACjE;EACA;EACAE,OAAO,CAACC,OAAO,CAAC,CAAAC,KAAK,KAAG;IACtB,IAAIC,KAAK,CAACC,OAAO,CAACF,KAAK,CAACG,eAAe,CAAC,EAAE;MACxC;MACAH,KAAK,CAACG,eAAe,GAAGH,KAAK,CAACG,eAAe,CAACC,MAAM,CAACC,OAAO,CAAC;;EAEjE,CAAC,CAAC;EACF,IAAIf,UAAU,CAACI,QAAQ,CAAC,EAAE;IACxBI,OAAO,GAAGA,OAAO,CAACQ,GAAG,CAAC,CAAAN,KAAK,KAAIX,mBAAmB,CAACK,QAAQ,EAAEM,KAAK,CAAC,CAAC;;EAEtE;EACA,OAAO;IACLO,UAAU,EAAE,IAAInB,aAAa,CAACM,QAAQ,CAACa,UAAU,CAAC,CAACC,QAAQ,EAAE;IAC7DC,KAAK,EAAEf,QAAQ,CAACe,KAAK,IAAI,KAAK;IAC9BX,OAAO;IACPY,SAAS,EAAEhB,QAAQ;IACnBiB,aAAa,EAAEjB,QAAQ,CAACiB,aAAa,IAAI,MAAM;IAC/CC,WAAW,EAAElB,QAAQ,CAACkB,WAAW,IAAI;GACtC;AACH,CAAC,mBAAAC,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAC,OAAA,GAAAC,SAAA,MAAAH,cAAA,WAAAA,cAAA,CAAAI,QAAA,CA1CK1B,aAAa,sIAAAsB,cAAA,CAAAI,QAAA,CAMKxB,iBAAiB,kKAAAyB,WAAA,UAAAJ,oBAAA,mBAAAA,oBAAA,CAAAI,WAAA,GAAAF,SAAA,CAAAE,WAAA,IAAAA,WAAA,CAAAC,MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}