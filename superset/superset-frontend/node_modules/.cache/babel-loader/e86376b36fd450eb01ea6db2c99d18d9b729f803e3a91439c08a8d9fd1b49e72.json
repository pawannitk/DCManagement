{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};import { project } from '@deck.gl/core';\nconst vs = \"\\n#ifdef NON_INSTANCED_MODEL\\nattribute float collisionPriorities;\\n#else\\nattribute float instanceCollisionPriorities;\\n#endif\\n\\nuniform sampler2D collision_texture;\\nuniform bool collision_sort;\\nuniform bool collision_enabled;\\n\\nvec2 collision_getCoords(vec4 position) {\\n  vec4 collision_clipspace = project_common_position_to_clipspace(position);\\n  return (1.0 + collision_clipspace.xy / collision_clipspace.w) / 2.0;\\n}\\n\\nfloat collision_match(vec2 tex, vec3 pickingColor) {\\n  vec4 collision_pickingColor = texture2D(collision_texture, tex);\\n  float delta = dot(abs(collision_pickingColor.rgb - pickingColor), vec3(1.0));\\n  float e = 0.001;\\n  return step(delta, e);\\n}\\n\\nfloat collision_isVisible(vec2 texCoords, vec3 pickingColor) {\\n  if (!collision_enabled) {\\n    return 1.0;\\n  }\\n\\n  // Visibility test, sample area of 5x5 pixels in order to fade in/out.\\n  // Due to the locality, the lookups will be cached\\n  // This reduces the flicker present when objects are shown/hidden\\n  const int N = 2;\\n  float accumulator = 0.0;\\n  vec2 step = vec2(1.0 / project_uViewportSize);\\n\\n  const float floatN = float(N);\\n  vec2 delta = -floatN * step;\\n  for(int i = -N; i <= N; i++) {\\n    delta.x = -step.x * floatN;\\n    for(int j = -N; j <= N; j++) {\\n      accumulator += collision_match(texCoords + delta, pickingColor);\\n      delta.x += step.x;\\n    }\\n    delta.y += step.y;\\n  }\\n\\n  float W = 2.0 * floatN + 1.0;\\n  return pow(accumulator / (W * W), 2.2);\\n}\\n\";\nconst inject = {\n  'vs:#decl': \"\\n  float collision_fade = 1.0;\\n\",\n  'vs:DECKGL_FILTER_GL_POSITION': \"\\n  if (collision_sort) {\\n    #ifdef NON_INSTANCED_MODEL\\n    float collisionPriority = collisionPriorities;\\n    #else\\n    float collisionPriority = instanceCollisionPriorities;\\n    #endif\\n    position.z = -0.001 * collisionPriority * position.w; // Support range -1000 -> 1000\\n  }\\n\\n  if (collision_enabled) {\\n    vec4 collision_common_position = project_position(vec4(geometry.worldPosition, 1.0));\\n    vec2 collision_texCoords = collision_getCoords(collision_common_position);\\n    collision_fade = collision_isVisible(collision_texCoords, geometry.pickingColor / 255.0);\\n    if (collision_fade < 0.0001) {\\n      // Position outside clip space bounds to discard\\n      position = vec4(0.0, 0.0, 2.0, 1.0);\\n    }\\n  }\\n  \",\n  'vs:DECKGL_FILTER_COLOR': \"\\n  color.a *= collision_fade;\\n  \"\n};\n\nconst getCollisionUniforms = (opts, uniforms) => {\n  if (!opts || !('dummyCollisionMap' in opts)) {\n    return {};\n  }\n\n  const {\n    collisionFBO,\n    drawToCollisionMap,\n    dummyCollisionMap\n  } = opts;\n  return {\n    collision_sort: Boolean(drawToCollisionMap),\n    collision_texture: !drawToCollisionMap && collisionFBO ? collisionFBO : dummyCollisionMap\n  };\n};const _default =\n\n{\n  name: 'collision',\n  dependencies: [project],\n  vs,\n  inject,\n  getUniforms: getCollisionUniforms\n};export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(vs, \"vs\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/extensions/dist/esm/collision-filter/shader-module.js\");reactHotLoader.register(inject, \"inject\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/extensions/dist/esm/collision-filter/shader-module.js\");reactHotLoader.register(getCollisionUniforms, \"getCollisionUniforms\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/extensions/dist/esm/collision-filter/shader-module.js\");reactHotLoader.register(_default, \"default\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/extensions/dist/esm/collision-filter/shader-module.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["project","vs","inject","getCollisionUniforms","opts","uniforms","collisionFBO","drawToCollisionMap","dummyCollisionMap","collision_sort","Boolean","collision_texture","_default","name","dependencies","getUniforms","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["../../../src/collision-filter/shader-module.ts"],"sourcesContent":["import {Framebuffer, Texture2D} from '@luma.gl/core';\nimport {project} from '@deck.gl/core';\nimport type {_ShaderModule as ShaderModule} from '@deck.gl/core';\n\nconst vs = `\n#ifdef NON_INSTANCED_MODEL\nattribute float collisionPriorities;\n#else\nattribute float instanceCollisionPriorities;\n#endif\n\nuniform sampler2D collision_texture;\nuniform bool collision_sort;\nuniform bool collision_enabled;\n\nvec2 collision_getCoords(vec4 position) {\n  vec4 collision_clipspace = project_common_position_to_clipspace(position);\n  return (1.0 + collision_clipspace.xy / collision_clipspace.w) / 2.0;\n}\n\nfloat collision_match(vec2 tex, vec3 pickingColor) {\n  vec4 collision_pickingColor = texture2D(collision_texture, tex);\n  float delta = dot(abs(collision_pickingColor.rgb - pickingColor), vec3(1.0));\n  float e = 0.001;\n  return step(delta, e);\n}\n\nfloat collision_isVisible(vec2 texCoords, vec3 pickingColor) {\n  if (!collision_enabled) {\n    return 1.0;\n  }\n\n  // Visibility test, sample area of 5x5 pixels in order to fade in/out.\n  // Due to the locality, the lookups will be cached\n  // This reduces the flicker present when objects are shown/hidden\n  const int N = 2;\n  float accumulator = 0.0;\n  vec2 step = vec2(1.0 / project_uViewportSize);\n\n  const float floatN = float(N);\n  vec2 delta = -floatN * step;\n  for(int i = -N; i <= N; i++) {\n    delta.x = -step.x * floatN;\n    for(int j = -N; j <= N; j++) {\n      accumulator += collision_match(texCoords + delta, pickingColor);\n      delta.x += step.x;\n    }\n    delta.y += step.y;\n  }\n\n  float W = 2.0 * floatN + 1.0;\n  return pow(accumulator / (W * W), 2.2);\n}\n`;\n\nconst inject = {\n  'vs:#decl': `\n  float collision_fade = 1.0;\n`,\n  'vs:DECKGL_FILTER_GL_POSITION': `\n  if (collision_sort) {\n    #ifdef NON_INSTANCED_MODEL\n    float collisionPriority = collisionPriorities;\n    #else\n    float collisionPriority = instanceCollisionPriorities;\n    #endif\n    position.z = -0.001 * collisionPriority * position.w; // Support range -1000 -> 1000\n  }\n\n  if (collision_enabled) {\n    vec4 collision_common_position = project_position(vec4(geometry.worldPosition, 1.0));\n    vec2 collision_texCoords = collision_getCoords(collision_common_position);\n    collision_fade = collision_isVisible(collision_texCoords, geometry.pickingColor / 255.0);\n    if (collision_fade < 0.0001) {\n      // Position outside clip space bounds to discard\n      position = vec4(0.0, 0.0, 2.0, 1.0);\n    }\n  }\n  `,\n  'vs:DECKGL_FILTER_COLOR': `\n  color.a *= collision_fade;\n  `\n};\n\ntype CollisionModuleSettings = {\n  collisionFBO?: Framebuffer;\n  drawToCollisionMap?: boolean;\n  dummyCollisionMap?: Texture2D;\n};\n\n/* eslint-disable camelcase */\ntype CollisionUniforms = {collision_sort?: boolean; collision_texture?: Framebuffer | Texture2D};\n\nconst getCollisionUniforms = (\n  opts: CollisionModuleSettings | {},\n  uniforms: Record<string, any>\n): CollisionUniforms => {\n  if (!opts || !('dummyCollisionMap' in opts)) {\n    return {};\n  }\n  const {collisionFBO, drawToCollisionMap, dummyCollisionMap} = opts;\n  return {\n    collision_sort: Boolean(drawToCollisionMap),\n    collision_texture: !drawToCollisionMap && collisionFBO ? collisionFBO : dummyCollisionMap\n  };\n};\n\nexport default {\n  name: 'collision',\n  dependencies: [project],\n  vs,\n  inject,\n  getUniforms: getCollisionUniforms\n} as ShaderModule;\n"],"mappings":"uSACA,SAAQA,OAAR,QAAsB,eAAtB;AAGA,MAAMC,EAAE,i9CAAR;AAmDA,MAAMC,MAAM,GAAG;EACb,+CADa;EAIb,iwBAJa;EAwBb;AAxBa,CAAf;;AAsCA,MAAMC,oBAAoB,GAAGA,CAC3BC,IAD2B,EAE3BC,QAF2B,KAGL;EACtB,IAAI,CAACD,IAAD,IAAS,EAAE,uBAAuBA,IAAzB,CAAb,EAA6C;IAC3C,OAAO,EAAP;EACD;;EACD,MAAM;IAACE,YAAD;IAAeC,kBAAf;IAAmCC;EAAnC,IAAwDJ,IAA9D;EACA,OAAO;IACLK,cAAc,EAAEC,OAAO,CAACH,kBAAD,CADlB;IAELI,iBAAiB,EAAE,CAACJ,kBAAD,IAAuBD,YAAvB,GAAsCA,YAAtC,GAAqDE;EAFnE,CAAP;AAID,CAZD,OAAAI,QAAA;;AAce;EACbC,IAAI,EAAE,WADO;EAEbC,YAAY,EAAE,CAACd,OAAD,CAFD;EAGbC,EAHa;EAIbC,MAJa;EAKba,WAAW,EAAEZ;AALA,CAAf,gBAAAS,QAAA,oBAAAI,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAC,OAAA,GAAAC,SAAA,MAAAH,cAAA,WAAAA,cAAA,CAAAI,QAAA,CAvGMnB,EAAE,iLAAAe,cAAA,CAAAI,QAAA,CAmDFlB,MAAM,qLAAAc,cAAA,CAAAI,QAAA,CAsCNjB,oBAAoB,mMAAAa,cAAA,CAAAI,QAAA,CAAAR,QAAA,8MAAAS,WAAA,UAAAJ,oBAAA,mBAAAA,oBAAA,CAAAI,WAAA,GAAAF,SAAA,CAAAE,WAAA,IAAAA,WAAA,CAAAC,MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}