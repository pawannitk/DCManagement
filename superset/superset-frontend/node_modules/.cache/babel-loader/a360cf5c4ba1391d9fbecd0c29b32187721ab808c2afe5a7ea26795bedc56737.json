{"ast":null,"code":"import _isEqual from \"lodash/isEqual\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useSelector } from 'react-redux';\n\nimport { createSelector } from '@reduxjs/toolkit';\nimport { useMemoCompare } from 'src/hooks/useMemoCompare';\nconst chartIdsSelector = createSelector((state) => state.charts, (charts) => Object.values(charts).map((chart) => chart.id));\nexport const useChartIds = () => {\n  const chartIds = useSelector(chartIdsSelector);\n  return useMemoCompare(chartIds, (prev, next) => prev === next || _isEqual(prev, next));\n};__signature__(useChartIds, \"useSelector{chartIds}\\nuseMemoCompare{}\", () => [useSelector, useMemoCompare]);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(chartIdsSelector, \"chartIdsSelector\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/util/charts/useChartIds.ts\");reactHotLoader.register(useChartIds, \"useChartIds\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/util/charts/useChartIds.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["useSelector","createSelector","useMemoCompare","chartIdsSelector","state","charts","Object","values","map","chart","id","useChartIds","chartIds","prev","next","_isEqual","__signature__","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/util/charts/useChartIds.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useSelector } from 'react-redux';\nimport { isEqual } from 'lodash';\nimport { createSelector } from '@reduxjs/toolkit';\nimport { RootState } from 'src/dashboard/types';\nimport { useMemoCompare } from 'src/hooks/useMemoCompare';\n\nconst chartIdsSelector = createSelector(\n  (state: RootState) => state.charts,\n  charts => Object.values(charts).map(chart => chart.id),\n);\n\nexport const useChartIds = () => {\n  const chartIds = useSelector<RootState, number[]>(chartIdsSelector);\n  return useMemoCompare(\n    chartIds,\n    (prev, next) => prev === next || isEqual(prev, next),\n  );\n};\n"],"mappings":"8UAAA;;;;;;;;;;;;;;;;;;AAkBA,SAASA,WAAW,QAAQ,aAAa;;AAEzC,SAASC,cAAc,QAAQ,kBAAkB;AAEjD,SAASC,cAAc,QAAQ,0BAA0B;AAEzD,MAAMC,gBAAgB,GAAGF,cAAc,CACrC,CAACG,KAAgB,KAAKA,KAAK,CAACC,MAAM,EAClC,CAAAA,MAAM,KAAIC,MAAM,CAACC,MAAM,CAACF,MAAM,CAAC,CAACG,GAAG,CAAC,CAAAC,KAAK,KAAIA,KAAK,CAACC,EAAE,CAAC,CACvD;AAED,OAAO,MAAMC,WAAW,GAAGA,CAAA,KAAK;EAC9B,MAAMC,QAAQ,GAAGZ,WAAW,CAAsBG,gBAAgB,CAAC;EACnE,OAAOD,cAAc,CACnBU,QAAQ,EACR,CAACC,IAAI,EAAEC,IAAI,KAAKD,IAAI,KAAKC,IAAI,IAAIC,QAAA,CAAQF,IAAI,EAAEC,IAAI,CAAC,CACrD;AACH,CAAC,CAACE,aAAA,CANWL,WAAW,oDACLX,WAAW,EACrBE,cAAc,sBAAAe,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAC,OAAA,GAAAC,SAAA,MAAAH,cAAA,WAAAA,cAAA,CAAAI,QAAA,CAPjBlB,gBAAgB,yHAAAc,cAAA,CAAAI,QAAA,CAKTV,WAAW,4IAAAW,WAAA,UAAAJ,oBAAA,mBAAAA,oBAAA,CAAAI,WAAA,GAAAF,SAAA,CAAAE,WAAA,IAAAA,WAAA,CAAAC,MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}