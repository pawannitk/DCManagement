{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /* eslint-disable camelcase */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitationsxw\n * under the License.\n */\nimport { ensureIsArray, ensureIsInt, RollingType } from '@superset-ui/core';\nimport { getMetricOffsetsMap, isTimeComparison } from './utils';\nexport const rollingWindowOperator = (formData, queryObject) => {\n  let columns;\n  if (isTimeComparison(formData, queryObject)) {\n    const metricsMap = getMetricOffsetsMap(formData, queryObject);\n    columns = [\n    ...Array.from(metricsMap.values()),\n    ...Array.from(metricsMap.keys())];\n\n  } else\n  {\n    columns = ensureIsArray(queryObject.metrics).map((metric) => {\n      if (typeof metric === 'string') {\n        return metric;\n      }\n      return metric.label;\n    });\n  }\n  const columnsMap = Object.fromEntries(columns.map((col) => [col, col]));\n  if (formData.rolling_type === RollingType.Cumsum) {\n    return {\n      operation: 'cum',\n      options: {\n        operator: 'sum',\n        columns: columnsMap\n      }\n    };\n  }\n  if ([RollingType.Sum, RollingType.Mean, RollingType.Std].includes(formData.rolling_type)) {\n    return {\n      operation: 'rolling',\n      options: {\n        rolling_type: formData.rolling_type,\n        window: ensureIsInt(formData.rolling_periods, 1),\n        min_periods: ensureIsInt(formData.min_periods, 0),\n        columns: columnsMap\n      }\n    };\n  }\n  return undefined;\n};;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(rollingWindowOperator, \"rollingWindowOperator\", \"/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-chart-controls/src/operators/rollingWindowOperator.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["ensureIsArray","ensureIsInt","RollingType","getMetricOffsetsMap","isTimeComparison","rollingWindowOperator","formData","queryObject","columns","metricsMap","Array","from","values","keys","metrics","map","metric","label","columnsMap","Object","fromEntries","col","rolling_type","Cumsum","operation","options","operator","Sum","Mean","Std","includes","window","rolling_periods","min_periods","undefined","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-chart-controls/src/operators/rollingWindowOperator.ts"],"sourcesContent":["/* eslint-disable camelcase */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitationsxw\n * under the License.\n */\nimport {\n  ensureIsArray,\n  ensureIsInt,\n  PostProcessingCum,\n  PostProcessingRolling,\n  RollingType,\n} from '@superset-ui/core';\nimport { getMetricOffsetsMap, isTimeComparison } from './utils';\nimport { PostProcessingFactory } from './types';\n\nexport const rollingWindowOperator: PostProcessingFactory<\n  PostProcessingRolling | PostProcessingCum\n> = (formData, queryObject) => {\n  let columns: (string | undefined)[];\n  if (isTimeComparison(formData, queryObject)) {\n    const metricsMap = getMetricOffsetsMap(formData, queryObject);\n    columns = [\n      ...Array.from(metricsMap.values()),\n      ...Array.from(metricsMap.keys()),\n    ];\n  } else {\n    columns = ensureIsArray(queryObject.metrics).map(metric => {\n      if (typeof metric === 'string') {\n        return metric;\n      }\n      return metric.label;\n    });\n  }\n  const columnsMap = Object.fromEntries(columns.map(col => [col, col]));\n\n  if (formData.rolling_type === RollingType.Cumsum) {\n    return {\n      operation: 'cum',\n      options: {\n        operator: 'sum',\n        columns: columnsMap,\n      },\n    };\n  }\n\n  if (\n    [RollingType.Sum, RollingType.Mean, RollingType.Std].includes(\n      formData.rolling_type,\n    )\n  ) {\n    return {\n      operation: 'rolling',\n      options: {\n        rolling_type: formData.rolling_type,\n        window: ensureIsInt(formData.rolling_periods, 1),\n        min_periods: ensureIsInt(formData.min_periods, 0),\n        columns: columnsMap,\n      },\n    };\n  }\n\n  return undefined;\n};\n"],"mappings":"wSAAA;AACA;;;;;;;;;;;;;;;;;;AAkBA,SACEA,aAAa,EACbC,WAAW,EAGXC,WAAW,QACN,mBAAmB;AAC1B,SAASC,mBAAmB,EAAEC,gBAAgB,QAAQ,SAAS;AAG/D,OAAO,MAAMC,qBAAqB,GAE9BA,CAACC,QAAQ,EAAEC,WAAW,KAAI;EAC5B,IAAIC,OAA+B;EACnC,IAAIJ,gBAAgB,CAACE,QAAQ,EAAEC,WAAW,CAAC,EAAE;IAC3C,MAAME,UAAU,GAAGN,mBAAmB,CAACG,QAAQ,EAAEC,WAAW,CAAC;IAC7DC,OAAO,GAAG;IACR,GAAGE,KAAK,CAACC,IAAI,CAACF,UAAU,CAACG,MAAM,EAAE,CAAC;IAClC,GAAGF,KAAK,CAACC,IAAI,CAACF,UAAU,CAACI,IAAI,EAAE,CAAC,CACjC;;GACF;EAAM;IACLL,OAAO,GAAGR,aAAa,CAACO,WAAW,CAACO,OAAO,CAAC,CAACC,GAAG,CAAC,CAAAC,MAAM,KAAG;MACxD,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;QAC9B,OAAOA,MAAM;;MAEf,OAAOA,MAAM,CAACC,KAAK;IACrB,CAAC,CAAC;;EAEJ,MAAMC,UAAU,GAAGC,MAAM,CAACC,WAAW,CAACZ,OAAO,CAACO,GAAG,CAAC,CAAAM,GAAG,KAAI,CAACA,GAAG,EAAEA,GAAG,CAAC,CAAC,CAAC;EAErE,IAAIf,QAAQ,CAACgB,YAAY,KAAKpB,WAAW,CAACqB,MAAM,EAAE;IAChD,OAAO;MACLC,SAAS,EAAE,KAAK;MAChBC,OAAO,EAAE;QACPC,QAAQ,EAAE,KAAK;QACflB,OAAO,EAAEU;;KAEZ;;EAGH,IACE,CAAChB,WAAW,CAACyB,GAAG,EAAEzB,WAAW,CAAC0B,IAAI,EAAE1B,WAAW,CAAC2B,GAAG,CAAC,CAACC,QAAQ,CAC3DxB,QAAQ,CAACgB,YAAY,CACtB,EACD;IACA,OAAO;MACLE,SAAS,EAAE,SAAS;MACpBC,OAAO,EAAE;QACPH,YAAY,EAAEhB,QAAQ,CAACgB,YAAY;QACnCS,MAAM,EAAE9B,WAAW,CAACK,QAAQ,CAAC0B,eAAe,EAAE,CAAC,CAAC;QAChDC,WAAW,EAAEhC,WAAW,CAACK,QAAQ,CAAC2B,WAAW,EAAE,CAAC,CAAC;QACjDzB,OAAO,EAAEU;;KAEZ;;EAGH,OAAOgB,SAAS;AAClB,CAAC,CAAC,mBAAAC,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAC,OAAA,GAAAH,SAAA,MAAAC,cAAA,WAAAA,cAAA,CAAAG,QAAA,CA/CWjC,qBAAqB,wLAAAkC,WAAA,UAAAH,oBAAA,mBAAAA,oBAAA,CAAAG,WAAA,GAAAL,SAAA,CAAAK,WAAA,IAAAA,WAAA,CAAAC,MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}