{"ast":null,"code":"import _pickBy from \"lodash/pickBy\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n// TODO: requires redux-localstorage > 1.0 for typescript support\nimport persistState from 'redux-localstorage';\n\nimport { isFeatureEnabled, FeatureFlag } from '@superset-ui/core';\nimport { filterUnsavedQueryEditorList } from 'src/SqlLab/components/EditorAutoSync';\nimport {\n  emptyTablePersistData,\n  emptyQueryResults,\n  clearQueryEditors } from\n'../utils/reduxStateToLocalStorageHelper';\nimport { BYTES_PER_CHAR, KB_STORAGE } from '../constants';\n\nconst CLEAR_ENTITY_HELPERS_MAP = {\n  tables: emptyTablePersistData,\n  queries: emptyQueryResults,\n  queryEditors: clearQueryEditors,\n  unsavedQueryEditor: (qe) => clearQueryEditors([qe])[0]\n};\n\nconst sqlLabPersistStateConfig = {\n  paths: ['sqlLab'],\n  config: {\n    slicer: (paths) => (state) => {\n      const subset = {};\n      paths.forEach((path) => {\n        if (isFeatureEnabled(FeatureFlag.SqllabBackendPersistence)) {\n          const {\n            queryEditors,\n            editorTabLastUpdatedAt,\n            unsavedQueryEditor,\n            tables,\n            queries,\n            tabHistory\n          } = state.sqlLab;\n          const unsavedQueryEditors = filterUnsavedQueryEditorList(\n            queryEditors,\n            unsavedQueryEditor,\n            editorTabLastUpdatedAt\n          );\n          if (unsavedQueryEditors.length > 0) {\n            const hasFinishedMigrationFromLocalStorage =\n            unsavedQueryEditors.every(\n              ({ inLocalStorage }) => !inLocalStorage\n            );\n            subset.sqlLab = {\n              queryEditors: unsavedQueryEditors,\n              ...(!hasFinishedMigrationFromLocalStorage && {\n                tabHistory,\n                tables: tables.filter((table) => table.inLocalStorage),\n                queries: _pickBy(\n                  queries,\n                  (query) => query.inLocalStorage && !query.isDataPreview\n                )\n              })\n            };\n          }\n          return;\n        }\n        // this line is used to remove old data from browser localStorage.\n        // we used to persist all redux state into localStorage, but\n        // it caused configurations passed from server-side got override.\n        // see PR 6257 for details\n        delete state[path].common; // eslint-disable-line no-param-reassign\n        if (path === 'sqlLab') {\n          subset[path] = Object.fromEntries(\n            Object.entries(state[path]).map(([key, value]) => {var _CLEAR_ENTITY_HELPERS, _CLEAR_ENTITY_HELPERS2;return [\n              key, (_CLEAR_ENTITY_HELPERS = (_CLEAR_ENTITY_HELPERS2 =\n              CLEAR_ENTITY_HELPERS_MAP[key]) == null ? void 0 : _CLEAR_ENTITY_HELPERS2.call(CLEAR_ENTITY_HELPERS_MAP, value)) != null ? _CLEAR_ENTITY_HELPERS : value];}\n            )\n          );\n        }\n      });\n\n      const data = JSON.stringify(subset);\n      // 2 digit precision\n      const currentSize =\n      Math.round(data.length * BYTES_PER_CHAR / KB_STORAGE * 100) / 100;\n      if (state.localStorageUsageInKilobytes !== currentSize) {\n        state.localStorageUsageInKilobytes = currentSize; // eslint-disable-line no-param-reassign\n      }\n\n      return subset;\n    },\n    merge: (initialState, persistedState = {}) => {\n      const result = {\n        ...initialState,\n        ...persistedState,\n        sqlLab: {\n          ...((persistedState == null ? void 0 : persistedState.sqlLab) || {}),\n          // Overwrite initialState over persistedState for sqlLab\n          // since a logic in getInitialState overrides the value from persistedState\n          ...initialState.sqlLab\n        }\n      };\n      return result;\n    }\n  }\n};\n\nexport const persistSqlLabStateEnhancer = persistState(\n  sqlLabPersistStateConfig.paths,\n  sqlLabPersistStateConfig.config\n);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(CLEAR_ENTITY_HELPERS_MAP, \"CLEAR_ENTITY_HELPERS_MAP\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/middlewares/persistSqlLabStateEnhancer.js\");reactHotLoader.register(sqlLabPersistStateConfig, \"sqlLabPersistStateConfig\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/middlewares/persistSqlLabStateEnhancer.js\");reactHotLoader.register(persistSqlLabStateEnhancer, \"persistSqlLabStateEnhancer\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/middlewares/persistSqlLabStateEnhancer.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["persistState","isFeatureEnabled","FeatureFlag","filterUnsavedQueryEditorList","emptyTablePersistData","emptyQueryResults","clearQueryEditors","BYTES_PER_CHAR","KB_STORAGE","CLEAR_ENTITY_HELPERS_MAP","tables","queries","queryEditors","unsavedQueryEditor","qe","sqlLabPersistStateConfig","paths","config","slicer","state","subset","forEach","path","SqllabBackendPersistence","editorTabLastUpdatedAt","tabHistory","sqlLab","unsavedQueryEditors","length","hasFinishedMigrationFromLocalStorage","every","inLocalStorage","filter","table","_pickBy","query","isDataPreview","common","Object","fromEntries","entries","map","key","value","_CLEAR_ENTITY_HELPERS","_CLEAR_ENTITY_HELPERS2","call","data","JSON","stringify","currentSize","Math","round","localStorageUsageInKilobytes","merge","initialState","persistedState","result","persistSqlLabStateEnhancer","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/middlewares/persistSqlLabStateEnhancer.js"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n// TODO: requires redux-localstorage > 1.0 for typescript support\nimport persistState from 'redux-localstorage';\nimport { pickBy } from 'lodash';\nimport { isFeatureEnabled, FeatureFlag } from '@superset-ui/core';\nimport { filterUnsavedQueryEditorList } from 'src/SqlLab/components/EditorAutoSync';\nimport {\n  emptyTablePersistData,\n  emptyQueryResults,\n  clearQueryEditors,\n} from '../utils/reduxStateToLocalStorageHelper';\nimport { BYTES_PER_CHAR, KB_STORAGE } from '../constants';\n\nconst CLEAR_ENTITY_HELPERS_MAP = {\n  tables: emptyTablePersistData,\n  queries: emptyQueryResults,\n  queryEditors: clearQueryEditors,\n  unsavedQueryEditor: qe => clearQueryEditors([qe])[0],\n};\n\nconst sqlLabPersistStateConfig = {\n  paths: ['sqlLab'],\n  config: {\n    slicer: paths => state => {\n      const subset = {};\n      paths.forEach(path => {\n        if (isFeatureEnabled(FeatureFlag.SqllabBackendPersistence)) {\n          const {\n            queryEditors,\n            editorTabLastUpdatedAt,\n            unsavedQueryEditor,\n            tables,\n            queries,\n            tabHistory,\n          } = state.sqlLab;\n          const unsavedQueryEditors = filterUnsavedQueryEditorList(\n            queryEditors,\n            unsavedQueryEditor,\n            editorTabLastUpdatedAt,\n          );\n          if (unsavedQueryEditors.length > 0) {\n            const hasFinishedMigrationFromLocalStorage =\n              unsavedQueryEditors.every(\n                ({ inLocalStorage }) => !inLocalStorage,\n              );\n            subset.sqlLab = {\n              queryEditors: unsavedQueryEditors,\n              ...(!hasFinishedMigrationFromLocalStorage && {\n                tabHistory,\n                tables: tables.filter(table => table.inLocalStorage),\n                queries: pickBy(\n                  queries,\n                  query => query.inLocalStorage && !query.isDataPreview,\n                ),\n              }),\n            };\n          }\n          return;\n        }\n        // this line is used to remove old data from browser localStorage.\n        // we used to persist all redux state into localStorage, but\n        // it caused configurations passed from server-side got override.\n        // see PR 6257 for details\n        delete state[path].common; // eslint-disable-line no-param-reassign\n        if (path === 'sqlLab') {\n          subset[path] = Object.fromEntries(\n            Object.entries(state[path]).map(([key, value]) => [\n              key,\n              CLEAR_ENTITY_HELPERS_MAP[key]?.(value) ?? value,\n            ]),\n          );\n        }\n      });\n\n      const data = JSON.stringify(subset);\n      // 2 digit precision\n      const currentSize =\n        Math.round(((data.length * BYTES_PER_CHAR) / KB_STORAGE) * 100) / 100;\n      if (state.localStorageUsageInKilobytes !== currentSize) {\n        state.localStorageUsageInKilobytes = currentSize; // eslint-disable-line no-param-reassign\n      }\n\n      return subset;\n    },\n    merge: (initialState, persistedState = {}) => {\n      const result = {\n        ...initialState,\n        ...persistedState,\n        sqlLab: {\n          ...(persistedState?.sqlLab || {}),\n          // Overwrite initialState over persistedState for sqlLab\n          // since a logic in getInitialState overrides the value from persistedState\n          ...initialState.sqlLab,\n        },\n      };\n      return result;\n    },\n  },\n};\n\nexport const persistSqlLabStateEnhancer = persistState(\n  sqlLabPersistStateConfig.paths,\n  sqlLabPersistStateConfig.config,\n);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}