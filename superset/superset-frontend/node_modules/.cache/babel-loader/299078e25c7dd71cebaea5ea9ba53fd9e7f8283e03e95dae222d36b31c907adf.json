{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { COMMON_ERR_MESSAGES, t, ErrorTypeEnum } from '@superset-ui/core';\nexport function parseErrorJson(responseObject) {\n  let error = { ...responseObject };\n  // Backwards compatibility for old error renderers with the new error object\n  if (error.errors && error.errors.length > 0) {var _error$errors$, _error$errors$$extra;\n    error.error = error.description = error.errors[0].message;\n    error.link = (_error$errors$ = error.errors[0]) == null ? void 0 : (_error$errors$$extra = _error$errors$.extra) == null ? void 0 : _error$errors$$extra.link;\n  }\n  // Marshmallow field validation returns the error message in the format\n  // of { message: { field1: [msg1, msg2], field2: [msg], } }\n  if (!error.error && error.message) {\n    if (typeof error.message === 'object') {var _Object$values$;\n      error.error =\n      ((_Object$values$ = Object.values(error.message)[0]) == null ? void 0 : _Object$values$[0]) ||\n      t('Invalid input');\n    }\n    if (typeof error.message === 'string') {\n      error.error = error.message;\n    }\n  }\n  if (error.stack) {\n    error = {\n      ...error,\n      error: t('Unexpected error: ') + (\n      error.description || t('(no description, click to see stack trace)')),\n      stacktrace: error.stack\n    };\n  } else\n  if (error.responseText && error.responseText.indexOf('CSRF') >= 0) {\n    error = {\n      ...error,\n      error: t(COMMON_ERR_MESSAGES.SESSION_TIMED_OUT)\n    };\n  }\n  return { ...error, error: error.error }; // explicit ClientErrorObject\n}\nexport function getClientErrorObject(response) {\n  // takes a SupersetClientResponse as input, attempts to read response as Json if possible,\n  // and returns a Promise that resolves to a plain object with error key and text value.\n  return new Promise((resolve) => {\n    if (typeof response === 'string') {\n      resolve({ error: response });\n      return;\n    }\n    if (response instanceof TypeError &&\n    response.message === 'Failed to fetch') {\n      resolve({\n        error: t('Network error')\n      });\n      return;\n    }\n    if ('timeout' in response &&\n    'statusText' in response &&\n    response.statusText === 'timeout') {\n      resolve({\n        ...response,\n        error: t('Request timed out'),\n        errors: [\n        {\n          error_type: ErrorTypeEnum.FRONTEND_TIMEOUT_ERROR,\n          extra: {\n            timeout: response.timeout / 1000,\n            issue_codes: [\n            {\n              code: 1000,\n              message: t('Issue 1000 - The dataset is too large to query.')\n            },\n            {\n              code: 1001,\n              message: t('Issue 1001 - The database is under an unusual load.')\n            }]\n\n          },\n          level: 'error',\n          message: 'Request timed out'\n        }]\n\n      });\n      return;\n    }\n    const responseObject = response instanceof Response ? response : response.response;\n    if (responseObject && !responseObject.bodyUsed) {\n      // attempt to read the body as json, and fallback to text. we must clone the\n      // response in order to fallback to .text() because Response is single-read\n      responseObject.\n      clone().\n      json().\n      then((errorJson) => {\n        const error = { ...responseObject, ...errorJson };\n        resolve(parseErrorJson(error));\n      }).\n      catch(() => {\n        // fall back to reading as text\n        responseObject.text().then((errorText) => {\n          resolve({ ...responseObject, error: errorText });\n        });\n      });\n      return;\n    }\n    // fall back to Response.statusText or generic error of we cannot read the response\n    let error = response.statusText || response.message;\n    if (!error) {\n      // eslint-disable-next-line no-console\n      console.error('non-standard error:', response);\n      error = t('An error occurred');\n    }\n    resolve({\n      ...responseObject,\n      error\n    });\n  });\n}\n/*\n * Utility to get standardized error text for generic update failures\n */\nexport async function getErrorText(errorObject, source) {\n  const { error, message } = await getClientErrorObject(errorObject);\n  let errorText = t('Sorry, an unknown error occurred.');\n  if (error) {\n    errorText = t('Sorry, there was an error saving this %s: %s', source, error);\n  }\n  if (typeof message === 'string' && message === 'Forbidden') {\n    errorText = t('You do not have permission to edit this %s', source);\n  }\n  return errorText;\n}\nexport function getClientErrorMessage(message, clientError) {\n  let finalMessage = message;\n  const errorMessage = (clientError == null ? void 0 : clientError.message) || (clientError == null ? void 0 : clientError.error);\n  if (errorMessage) {\n    finalMessage = `${finalMessage}:\\n${errorMessage}`;\n  }\n  return finalMessage;\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(parseErrorJson, \"parseErrorJson\", \"/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/query/getClientErrorObject.ts\");reactHotLoader.register(getClientErrorObject, \"getClientErrorObject\", \"/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/query/getClientErrorObject.ts\");reactHotLoader.register(getErrorText, \"getErrorText\", \"/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/query/getClientErrorObject.ts\");reactHotLoader.register(getClientErrorMessage, \"getClientErrorMessage\", \"/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/query/getClientErrorObject.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["COMMON_ERR_MESSAGES","t","ErrorTypeEnum","parseErrorJson","responseObject","error","errors","length","_error$errors$","_error$errors$$extra","description","message","link","extra","_Object$values$","Object","values","stack","stacktrace","responseText","indexOf","SESSION_TIMED_OUT","getClientErrorObject","response","Promise","resolve","TypeError","statusText","error_type","FRONTEND_TIMEOUT_ERROR","timeout","issue_codes","code","level","Response","bodyUsed","clone","json","then","errorJson","catch","text","errorText","console","getErrorText","errorObject","source","getClientErrorMessage","clientError","finalMessage","errorMessage","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/query/getClientErrorObject.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  COMMON_ERR_MESSAGES,\n  JsonObject,\n  SupersetClientResponse,\n  t,\n  SupersetError,\n  ErrorTypeEnum,\n} from '@superset-ui/core';\n\n// The response always contains an error attribute, can contain anything from the\n// SupersetClientResponse object, and can contain a spread JSON blob\nexport type ClientErrorObject = {\n  error: string;\n  errors?: SupersetError[];\n  link?: string;\n  message?: string;\n  severity?: string;\n  stacktrace?: string;\n  statusText?: string;\n} & Partial<SupersetClientResponse>;\n\n// see rejectAfterTimeout.ts\ninterface TimeoutError {\n  statusText: 'timeout';\n  timeout: number;\n}\n\ntype ErrorType =\n  | SupersetClientResponse\n  | TimeoutError\n  | { response: Response }\n  | string;\n\ntype ErrorTextSource = 'dashboard' | 'chart' | 'query' | 'dataset' | 'database';\n\nexport function parseErrorJson(responseObject: JsonObject): ClientErrorObject {\n  let error = { ...responseObject };\n  // Backwards compatibility for old error renderers with the new error object\n  if (error.errors && error.errors.length > 0) {\n    error.error = error.description = error.errors[0].message;\n    error.link = error.errors[0]?.extra?.link;\n  }\n  // Marshmallow field validation returns the error message in the format\n  // of { message: { field1: [msg1, msg2], field2: [msg], } }\n  if (!error.error && error.message) {\n    if (typeof error.message === 'object') {\n      error.error =\n        Object.values(error.message as Record<string, string[]>)[0]?.[0] ||\n        t('Invalid input');\n    }\n    if (typeof error.message === 'string') {\n      error.error = error.message;\n    }\n  }\n  if (error.stack) {\n    error = {\n      ...error,\n      error:\n        t('Unexpected error: ') +\n        (error.description || t('(no description, click to see stack trace)')),\n      stacktrace: error.stack,\n    };\n  } else if (error.responseText && error.responseText.indexOf('CSRF') >= 0) {\n    error = {\n      ...error,\n      error: t(COMMON_ERR_MESSAGES.SESSION_TIMED_OUT),\n    };\n  }\n\n  return { ...error, error: error.error }; // explicit ClientErrorObject\n}\n\nexport function getClientErrorObject(\n  response:\n    | SupersetClientResponse\n    | TimeoutError\n    | { response: Response }\n    | string,\n): Promise<ClientErrorObject> {\n  // takes a SupersetClientResponse as input, attempts to read response as Json if possible,\n  // and returns a Promise that resolves to a plain object with error key and text value.\n  return new Promise(resolve => {\n    if (typeof response === 'string') {\n      resolve({ error: response });\n      return;\n    }\n\n    if (\n      response instanceof TypeError &&\n      response.message === 'Failed to fetch'\n    ) {\n      resolve({\n        error: t('Network error'),\n      });\n      return;\n    }\n\n    if (\n      'timeout' in response &&\n      'statusText' in response &&\n      response.statusText === 'timeout'\n    ) {\n      resolve({\n        ...response,\n        error: t('Request timed out'),\n        errors: [\n          {\n            error_type: ErrorTypeEnum.FRONTEND_TIMEOUT_ERROR,\n            extra: {\n              timeout: response.timeout / 1000,\n              issue_codes: [\n                {\n                  code: 1000,\n                  message: t('Issue 1000 - The dataset is too large to query.'),\n                },\n                {\n                  code: 1001,\n                  message: t(\n                    'Issue 1001 - The database is under an unusual load.',\n                  ),\n                },\n              ],\n            },\n            level: 'error',\n            message: 'Request timed out',\n          },\n        ],\n      });\n      return;\n    }\n\n    const responseObject =\n      response instanceof Response ? response : response.response;\n    if (responseObject && !responseObject.bodyUsed) {\n      // attempt to read the body as json, and fallback to text. we must clone the\n      // response in order to fallback to .text() because Response is single-read\n      responseObject\n        .clone()\n        .json()\n        .then(errorJson => {\n          const error = { ...responseObject, ...errorJson };\n          resolve(parseErrorJson(error));\n        })\n        .catch(() => {\n          // fall back to reading as text\n          responseObject.text().then((errorText: any) => {\n            resolve({ ...responseObject, error: errorText });\n          });\n        });\n      return;\n    }\n\n    // fall back to Response.statusText or generic error of we cannot read the response\n    let error = (response as any).statusText || (response as any).message;\n    if (!error) {\n      // eslint-disable-next-line no-console\n      console.error('non-standard error:', response);\n      error = t('An error occurred');\n    }\n    resolve({\n      ...responseObject,\n      error,\n    });\n  });\n}\n\n/*\n * Utility to get standardized error text for generic update failures\n */\nexport async function getErrorText(\n  errorObject: ErrorType,\n  source: ErrorTextSource,\n) {\n  const { error, message } = await getClientErrorObject(errorObject);\n  let errorText = t('Sorry, an unknown error occurred.');\n\n  if (error) {\n    errorText = t(\n      'Sorry, there was an error saving this %s: %s',\n      source,\n      error,\n    );\n  }\n  if (typeof message === 'string' && message === 'Forbidden') {\n    errorText = t('You do not have permission to edit this %s', source);\n  }\n  return errorText;\n}\n\nexport function getClientErrorMessage(\n  message: string,\n  clientError?: ClientErrorObject,\n) {\n  let finalMessage = message;\n  const errorMessage = clientError?.message || clientError?.error;\n  if (errorMessage) {\n    finalMessage = `${finalMessage}:\\n${errorMessage}`;\n  }\n  return finalMessage;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}