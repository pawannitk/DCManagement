{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { getBounds, boundsContain, packVertices, scaleToAspectRatio, getTextureCoordinates, getTextureParams } from './heatmap-layer-utils';\nimport { Buffer, Texture2D, Transform, getParameters, withParameters, FEATURES, hasFeatures } from '@luma.gl/core';\nimport { AttributeManager, COORDINATE_SYSTEM, log } from '@deck.gl/core';\nimport TriangleLayer from './triangle-layer';\nimport AggregationLayer from '../aggregation-layer';\nimport { defaultColorRange, colorRangeToFlatArray } from '../utils/color-utils';\nimport weightsVs from './weights-vs.glsl';\nimport weightsFs from './weights-fs.glsl';\nimport vsMax from './max-vs.glsl';\nimport fsMax from './max-fs.glsl';\nconst RESOLUTION = 2;\nconst TEXTURE_OPTIONS = {\n  mipmaps: false,\n  parameters: {\n    [10240]: 9729,\n    [10241]: 9729,\n    [10242]: 33071,\n    [10243]: 33071\n  },\n  dataFormat: 6408\n};\nconst DEFAULT_COLOR_DOMAIN = [0, 0];\nconst AGGREGATION_MODE = {\n  SUM: 0,\n  MEAN: 1\n};\nconst defaultProps = {\n  getPosition: {\n    type: 'accessor',\n    value: (x) => x.position\n  },\n  getWeight: {\n    type: 'accessor',\n    value: 1\n  },\n  intensity: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  radiusPixels: {\n    type: 'number',\n    min: 1,\n    max: 100,\n    value: 50\n  },\n  colorRange: defaultColorRange,\n  threshold: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 0.05\n  },\n  colorDomain: {\n    type: 'array',\n    value: null,\n    optional: true\n  },\n  aggregation: 'SUM',\n  weightsTextureSize: {\n    type: 'number',\n    min: 128,\n    max: 2048,\n    value: 2048\n  },\n  debounceTimeout: {\n    type: 'number',\n    min: 0,\n    max: 1000,\n    value: 500\n  }\n};\nconst REQUIRED_FEATURES = [FEATURES.BLEND_EQUATION_MINMAX, FEATURES.TEXTURE_FLOAT];\nconst FLOAT_TARGET_FEATURES = [FEATURES.COLOR_ATTACHMENT_RGBA32F, FEATURES.FLOAT_BLEND];\nconst DIMENSIONS = {\n  data: {\n    props: ['radiusPixels']\n  }\n};\nexport default class HeatmapLayer extends AggregationLayer {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", void 0);\n  }\n\n  initializeState() {\n    const {\n      gl\n    } = this.context;\n\n    if (!hasFeatures(gl, REQUIRED_FEATURES)) {\n      this.setState({\n        supported: false\n      });\n      log.error(\"HeatmapLayer: \".concat(this.id, \" is not supported on this browser\"))();\n      return;\n    }\n\n    super.initializeAggregationLayer(DIMENSIONS);\n    this.setState({\n      supported: true,\n      colorDomain: DEFAULT_COLOR_DOMAIN\n    });\n\n    this._setupTextureParams();\n\n    this._setupAttributes();\n\n    this._setupResources();\n  }\n\n  shouldUpdateState({\n    changeFlags\n  }) {\n    return changeFlags.somethingChanged;\n  }\n\n  updateState(opts) {\n    if (!this.state.supported) {\n      return;\n    }\n\n    super.updateState(opts);\n\n    this._updateHeatmapState(opts);\n  }\n\n  _updateHeatmapState(opts) {\n    const {\n      props,\n      oldProps\n    } = opts;\n\n    const changeFlags = this._getChangeFlags(opts);\n\n    if (changeFlags.dataChanged || changeFlags.viewportChanged) {\n      changeFlags.boundsChanged = this._updateBounds(changeFlags.dataChanged);\n\n      this._updateTextureRenderingBounds();\n    }\n\n    if (changeFlags.dataChanged || changeFlags.boundsChanged) {\n      clearTimeout(this.state.updateTimer);\n      this.setState({\n        isWeightMapDirty: true\n      });\n    } else if (changeFlags.viewportZoomChanged) {\n      this._debouncedUpdateWeightmap();\n    }\n\n    if (props.colorRange !== oldProps.colorRange) {\n      this._updateColorTexture(opts);\n    }\n\n    if (this.state.isWeightMapDirty) {\n      this._updateWeightmap();\n    }\n\n    this.setState({\n      zoom: opts.context.viewport.zoom\n    });\n  }\n\n  renderLayers() {\n    if (!this.state.supported) {\n      return [];\n    }\n\n    const {\n      weightsTexture,\n      triPositionBuffer,\n      triTexCoordBuffer,\n      maxWeightsTexture,\n      colorTexture,\n      colorDomain\n    } = this.state;\n    const {\n      updateTriggers,\n      intensity,\n      threshold,\n      aggregation\n    } = this.props;\n    const TriangleLayerClass = this.getSubLayerClass('triangle', TriangleLayer);\n    return new TriangleLayerClass(this.getSubLayerProps({\n      id: 'triangle-layer',\n      updateTriggers\n    }), {\n      coordinateSystem: COORDINATE_SYSTEM.DEFAULT,\n      data: {\n        attributes: {\n          positions: triPositionBuffer,\n          texCoords: triTexCoordBuffer\n        }\n      },\n      vertexCount: 4,\n      maxTexture: maxWeightsTexture,\n      colorTexture,\n      aggregationMode: AGGREGATION_MODE[aggregation] || 0,\n      texture: weightsTexture,\n      intensity,\n      threshold,\n      colorDomain\n    });\n  }\n\n  finalizeState(context) {\n    super.finalizeState(context);\n    const {\n      weightsTransform,\n      weightsTexture,\n      maxWeightTransform,\n      maxWeightsTexture,\n      triPositionBuffer,\n      triTexCoordBuffer,\n      colorTexture,\n      updateTimer\n    } = this.state;\n    weightsTransform === null || weightsTransform === void 0 ? void 0 : weightsTransform.delete();\n    weightsTexture === null || weightsTexture === void 0 ? void 0 : weightsTexture.delete();\n    maxWeightTransform === null || maxWeightTransform === void 0 ? void 0 : maxWeightTransform.delete();\n    maxWeightsTexture === null || maxWeightsTexture === void 0 ? void 0 : maxWeightsTexture.delete();\n    triPositionBuffer === null || triPositionBuffer === void 0 ? void 0 : triPositionBuffer.delete();\n    triTexCoordBuffer === null || triTexCoordBuffer === void 0 ? void 0 : triTexCoordBuffer.delete();\n    colorTexture === null || colorTexture === void 0 ? void 0 : colorTexture.delete();\n\n    if (updateTimer) {\n      clearTimeout(updateTimer);\n    }\n  }\n\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats\n    });\n  }\n\n  _getChangeFlags(opts) {\n    const changeFlags = {};\n    const {\n      dimensions\n    } = this.state;\n    changeFlags.dataChanged = this.isAttributeChanged() || this.isAggregationDirty(opts, {\n      compareAll: true,\n      dimension: dimensions.data\n    });\n    changeFlags.viewportChanged = opts.changeFlags.viewportChanged;\n    const {\n      zoom\n    } = this.state;\n\n    if (!opts.context.viewport || opts.context.viewport.zoom !== zoom) {\n      changeFlags.viewportZoomChanged = true;\n    }\n\n    return changeFlags;\n  }\n\n  _createTextures() {\n    const {\n      gl\n    } = this.context;\n    const {\n      textureSize,\n      format,\n      type\n    } = this.state;\n    this.setState({\n      weightsTexture: new Texture2D(gl, {\n        width: textureSize,\n        height: textureSize,\n        format,\n        type,\n        ...TEXTURE_OPTIONS\n      }),\n      maxWeightsTexture: new Texture2D(gl, {\n        format,\n        type,\n        ...TEXTURE_OPTIONS\n      })\n    });\n  }\n\n  _setupAttributes() {\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      positions: {\n        size: 3,\n        type: 5130,\n        accessor: 'getPosition'\n      },\n      weights: {\n        size: 1,\n        accessor: 'getWeight'\n      }\n    });\n    this.setState({\n      positionAttributeName: 'positions'\n    });\n  }\n\n  _setupTextureParams() {\n    const {\n      gl\n    } = this.context;\n    const {\n      weightsTextureSize\n    } = this.props;\n    const textureSize = Math.min(weightsTextureSize, getParameters(gl, 3379));\n    const floatTargetSupport = hasFeatures(gl, FLOAT_TARGET_FEATURES);\n    const {\n      format,\n      type\n    } = getTextureParams({\n      gl,\n      floatTargetSupport\n    });\n    const weightsScale = floatTargetSupport ? 1 : 1 / 255;\n    this.setState({\n      textureSize,\n      format,\n      type,\n      weightsScale\n    });\n\n    if (!floatTargetSupport) {\n      log.warn(\"HeatmapLayer: \".concat(this.id, \" rendering to float texture not supported, fallingback to low precession format\"))();\n    }\n  }\n\n  getShaders(type) {\n    return super.getShaders(type === 'max-weights-transform' ? {\n      vs: vsMax,\n      _fs: fsMax\n    } : {\n      vs: weightsVs,\n      _fs: weightsFs\n    });\n  }\n\n  _createWeightsTransform(shaders = {}) {\n    var _weightsTransform;\n\n    const {\n      gl\n    } = this.context;\n    let {\n      weightsTransform\n    } = this.state;\n    const {\n      weightsTexture\n    } = this.state;\n    (_weightsTransform = weightsTransform) === null || _weightsTransform === void 0 ? void 0 : _weightsTransform.delete();\n    weightsTransform = new Transform(gl, {\n      id: \"\".concat(this.id, \"-weights-transform\"),\n      elementCount: 1,\n      _targetTexture: weightsTexture,\n      _targetTextureVarying: 'weightsTexture',\n      ...shaders\n    });\n    this.setState({\n      weightsTransform\n    });\n  }\n\n  _setupResources() {\n    const {\n      gl\n    } = this.context;\n\n    this._createTextures();\n\n    const {\n      textureSize,\n      weightsTexture,\n      maxWeightsTexture\n    } = this.state;\n    const weightsTransformShaders = this.getShaders('weights-transform');\n\n    this._createWeightsTransform(weightsTransformShaders);\n\n    const maxWeightsTransformShaders = this.getShaders('max-weights-transform');\n    const maxWeightTransform = new Transform(gl, {\n      id: \"\".concat(this.id, \"-max-weights-transform\"),\n      _sourceTextures: {\n        inTexture: weightsTexture\n      },\n      _targetTexture: maxWeightsTexture,\n      _targetTextureVarying: 'outTexture',\n      ...maxWeightsTransformShaders,\n      elementCount: textureSize * textureSize\n    });\n    this.setState({\n      weightsTexture,\n      maxWeightsTexture,\n      maxWeightTransform,\n      zoom: null,\n      triPositionBuffer: new Buffer(gl, {\n        byteLength: 48,\n        accessor: {\n          size: 3\n        }\n      }),\n      triTexCoordBuffer: new Buffer(gl, {\n        byteLength: 48,\n        accessor: {\n          size: 2\n        }\n      })\n    });\n  }\n\n  updateShaders(shaderOptions) {\n    this._createWeightsTransform(shaderOptions);\n  }\n\n  _updateMaxWeightValue() {\n    const {\n      maxWeightTransform\n    } = this.state;\n    maxWeightTransform.run({\n      parameters: {\n        blend: true,\n        depthTest: false,\n        blendFunc: [1, 1],\n        blendEquation: 32776\n      }\n    });\n  }\n\n  _updateBounds(forceUpdate = false) {\n    const {\n      viewport\n    } = this.context;\n    const viewportCorners = [viewport.unproject([0, 0]), viewport.unproject([viewport.width, 0]), viewport.unproject([viewport.width, viewport.height]), viewport.unproject([0, viewport.height])].map((p) => p.map(Math.fround));\n    const visibleWorldBounds = getBounds(viewportCorners);\n    const newState = {\n      visibleWorldBounds,\n      viewportCorners\n    };\n    let boundsChanged = false;\n\n    if (forceUpdate || !this.state.worldBounds || !boundsContain(this.state.worldBounds, visibleWorldBounds)) {\n      const scaledCommonBounds = this._worldToCommonBounds(visibleWorldBounds);\n\n      const worldBounds = this._commonToWorldBounds(scaledCommonBounds);\n\n      if (this.props.coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {\n        worldBounds[1] = Math.max(worldBounds[1], -85.051129);\n        worldBounds[3] = Math.min(worldBounds[3], 85.051129);\n        worldBounds[0] = Math.max(worldBounds[0], -360);\n        worldBounds[2] = Math.min(worldBounds[2], 360);\n      }\n\n      const normalizedCommonBounds = this._worldToCommonBounds(worldBounds);\n\n      newState.worldBounds = worldBounds;\n      newState.normalizedCommonBounds = normalizedCommonBounds;\n      boundsChanged = true;\n    }\n\n    this.setState(newState);\n    return boundsChanged;\n  }\n\n  _updateTextureRenderingBounds() {\n    const {\n      triPositionBuffer,\n      triTexCoordBuffer,\n      normalizedCommonBounds,\n      viewportCorners\n    } = this.state;\n    const {\n      viewport\n    } = this.context;\n    triPositionBuffer.subData(packVertices(viewportCorners, 3));\n    const textureBounds = viewportCorners.map((p) => getTextureCoordinates(viewport.projectPosition(p), normalizedCommonBounds));\n    triTexCoordBuffer.subData(packVertices(textureBounds, 2));\n  }\n\n  _updateColorTexture(opts) {\n    const {\n      colorRange\n    } = opts.props;\n    let {\n      colorTexture\n    } = this.state;\n    const colors = colorRangeToFlatArray(colorRange, false, Uint8Array);\n\n    if (colorTexture) {\n      colorTexture.setImageData({\n        data: colors,\n        width: colorRange.length\n      });\n    } else {\n      colorTexture = new Texture2D(this.context.gl, {\n        data: colors,\n        width: colorRange.length,\n        height: 1,\n        ...TEXTURE_OPTIONS\n      });\n    }\n\n    this.setState({\n      colorTexture\n    });\n  }\n\n  _updateWeightmap() {\n    const {\n      radiusPixels,\n      colorDomain,\n      aggregation\n    } = this.props;\n    const {\n      weightsTransform,\n      worldBounds,\n      textureSize,\n      weightsTexture,\n      weightsScale\n    } = this.state;\n    this.state.isWeightMapDirty = false;\n\n    const commonBounds = this._worldToCommonBounds(worldBounds, {\n      useLayerCoordinateSystem: true\n    });\n\n    if (colorDomain && aggregation === 'SUM') {\n      const {\n        viewport\n      } = this.context;\n      const metersPerPixel = viewport.distanceScales.metersPerUnit[2] * (commonBounds[2] - commonBounds[0]) / textureSize;\n      this.state.colorDomain = colorDomain.map((x) => x * metersPerPixel * weightsScale);\n    } else {\n      this.state.colorDomain = colorDomain || DEFAULT_COLOR_DOMAIN;\n    }\n\n    const uniforms = {\n      radiusPixels,\n      commonBounds,\n      textureWidth: textureSize,\n      weightsScale\n    };\n    weightsTransform.update({\n      elementCount: this.getNumInstances()\n    });\n    withParameters(this.context.gl, {\n      clearColor: [0, 0, 0, 0]\n    }, () => {\n      weightsTransform.run({\n        uniforms,\n        parameters: {\n          blend: true,\n          depthTest: false,\n          blendFunc: [1, 1],\n          blendEquation: 32774\n        },\n        clearRenderTarget: true,\n        attributes: this.getAttributes(),\n        moduleSettings: this.getModuleSettings()\n      });\n    });\n\n    this._updateMaxWeightValue();\n\n    weightsTexture.setParameters({\n      [10240]: 9729,\n      [10241]: 9729\n    });\n  }\n\n  _debouncedUpdateWeightmap(fromTimer = false) {\n    let {\n      updateTimer\n    } = this.state;\n    const {\n      debounceTimeout\n    } = this.props;\n\n    if (fromTimer) {\n      updateTimer = null;\n\n      this._updateBounds(true);\n\n      this._updateTextureRenderingBounds();\n\n      this.setState({\n        isWeightMapDirty: true\n      });\n    } else {\n      this.setState({\n        isWeightMapDirty: false\n      });\n      clearTimeout(updateTimer);\n      updateTimer = setTimeout(this._debouncedUpdateWeightmap.bind(this, true), debounceTimeout);\n    }\n\n    this.setState({\n      updateTimer\n    });\n  }\n\n  _worldToCommonBounds(worldBounds, opts = {}) {\n    const {\n      useLayerCoordinateSystem = false\n    } = opts;\n    const [minLong, minLat, maxLong, maxLat] = worldBounds;\n    const {\n      viewport\n    } = this.context;\n    const {\n      textureSize\n    } = this.state;\n    const {\n      coordinateSystem\n    } = this.props;\n    const offsetMode = useLayerCoordinateSystem && (coordinateSystem === COORDINATE_SYSTEM.LNGLAT_OFFSETS || coordinateSystem === COORDINATE_SYSTEM.METER_OFFSETS);\n    const offsetOriginCommon = offsetMode ? viewport.projectPosition(this.props.coordinateOrigin) : [0, 0];\n    const size = textureSize * RESOLUTION / viewport.scale;\n    let bottomLeftCommon;\n    let topRightCommon;\n\n    if (useLayerCoordinateSystem && !offsetMode) {\n      bottomLeftCommon = this.projectPosition([minLong, minLat, 0]);\n      topRightCommon = this.projectPosition([maxLong, maxLat, 0]);\n    } else {\n      bottomLeftCommon = viewport.projectPosition([minLong, minLat, 0]);\n      topRightCommon = viewport.projectPosition([maxLong, maxLat, 0]);\n    }\n\n    return scaleToAspectRatio([bottomLeftCommon[0] - offsetOriginCommon[0], bottomLeftCommon[1] - offsetOriginCommon[1], topRightCommon[0] - offsetOriginCommon[0], topRightCommon[1] - offsetOriginCommon[1]], size, size);\n  }\n\n  _commonToWorldBounds(commonBounds) {\n    const [xMin, yMin, xMax, yMax] = commonBounds;\n    const {\n      viewport\n    } = this.context;\n    const bottomLeftWorld = viewport.unprojectPosition([xMin, yMin]);\n    const topRightWorld = viewport.unprojectPosition([xMax, yMax]);\n    return bottomLeftWorld.slice(0, 2).concat(topRightWorld.slice(0, 2));\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\n\n_defineProperty(HeatmapLayer, \"layerName\", 'HeatmapLayer');\n\n_defineProperty(HeatmapLayer, \"defaultProps\", defaultProps);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(RESOLUTION, \"RESOLUTION\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/aggregation-layers/dist/esm/heatmap-layer/heatmap-layer.js\");reactHotLoader.register(TEXTURE_OPTIONS, \"TEXTURE_OPTIONS\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/aggregation-layers/dist/esm/heatmap-layer/heatmap-layer.js\");reactHotLoader.register(DEFAULT_COLOR_DOMAIN, \"DEFAULT_COLOR_DOMAIN\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/aggregation-layers/dist/esm/heatmap-layer/heatmap-layer.js\");reactHotLoader.register(AGGREGATION_MODE, \"AGGREGATION_MODE\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/aggregation-layers/dist/esm/heatmap-layer/heatmap-layer.js\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/aggregation-layers/dist/esm/heatmap-layer/heatmap-layer.js\");reactHotLoader.register(REQUIRED_FEATURES, \"REQUIRED_FEATURES\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/aggregation-layers/dist/esm/heatmap-layer/heatmap-layer.js\");reactHotLoader.register(FLOAT_TARGET_FEATURES, \"FLOAT_TARGET_FEATURES\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/aggregation-layers/dist/esm/heatmap-layer/heatmap-layer.js\");reactHotLoader.register(DIMENSIONS, \"DIMENSIONS\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/aggregation-layers/dist/esm/heatmap-layer/heatmap-layer.js\");reactHotLoader.register(HeatmapLayer, \"HeatmapLayer\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/aggregation-layers/dist/esm/heatmap-layer/heatmap-layer.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["getBounds","boundsContain","packVertices","scaleToAspectRatio","getTextureCoordinates","getTextureParams","Buffer","Texture2D","Transform","getParameters","withParameters","FEATURES","hasFeatures","AttributeManager","COORDINATE_SYSTEM","log","TriangleLayer","AggregationLayer","defaultColorRange","colorRangeToFlatArray","weightsVs","weightsFs","vsMax","fsMax","RESOLUTION","TEXTURE_OPTIONS","mipmaps","parameters","dataFormat","DEFAULT_COLOR_DOMAIN","AGGREGATION_MODE","SUM","MEAN","defaultProps","getPosition","type","value","x","position","getWeight","intensity","min","radiusPixels","max","colorRange","threshold","colorDomain","optional","aggregation","weightsTextureSize","debounceTimeout","REQUIRED_FEATURES","BLEND_EQUATION_MINMAX","TEXTURE_FLOAT","FLOAT_TARGET_FEATURES","COLOR_ATTACHMENT_RGBA32F","FLOAT_BLEND","DIMENSIONS","data","props","HeatmapLayer","constructor","args","_defineProperty","initializeState","gl","context","setState","supported","error","concat","id","initializeAggregationLayer","_setupTextureParams","_setupAttributes","_setupResources","shouldUpdateState","changeFlags","somethingChanged","updateState","opts","state","_updateHeatmapState","oldProps","_getChangeFlags","dataChanged","viewportChanged","boundsChanged","_updateBounds","_updateTextureRenderingBounds","clearTimeout","updateTimer","isWeightMapDirty","viewportZoomChanged","_debouncedUpdateWeightmap","_updateColorTexture","_updateWeightmap","zoom","viewport","renderLayers","weightsTexture","triPositionBuffer","triTexCoordBuffer","maxWeightsTexture","colorTexture","updateTriggers","TriangleLayerClass","getSubLayerClass","getSubLayerProps","coordinateSystem","DEFAULT","attributes","positions","texCoords","vertexCount","maxTexture","aggregationMode","texture","finalizeState","weightsTransform","maxWeightTransform","delete","_getAttributeManager","stats","dimensions","isAttributeChanged","isAggregationDirty","compareAll","dimension","_createTextures","textureSize","format","width","height","attributeManager","getAttributeManager","add","size","accessor","weights","positionAttributeName","Math","floatTargetSupport","weightsScale","warn","getShaders","vs","_fs","_createWeightsTransform","shaders","_weightsTransform","elementCount","_targetTexture","_targetTextureVarying","weightsTransformShaders","maxWeightsTransformShaders","_sourceTextures","inTexture","byteLength","updateShaders","shaderOptions","_updateMaxWeightValue","run","blend","depthTest","blendFunc","blendEquation","forceUpdate","viewportCorners","unproject","map","p","fround","visibleWorldBounds","newState","worldBounds","scaledCommonBounds","_worldToCommonBounds","_commonToWorldBounds","LNGLAT","normalizedCommonBounds","subData","textureBounds","projectPosition","colors","Uint8Array","setImageData","length","commonBounds","useLayerCoordinateSystem","metersPerPixel","distanceScales","metersPerUnit","uniforms","textureWidth","update","getNumInstances","clearColor","clearRenderTarget","getAttributes","moduleSettings","getModuleSettings","setParameters","fromTimer","setTimeout","bind","minLong","minLat","maxLong","maxLat","offsetMode","LNGLAT_OFFSETS","METER_OFFSETS","offsetOriginCommon","coordinateOrigin","scale","bottomLeftCommon","topRightCommon","xMin","yMin","xMax","yMax","bottomLeftWorld","unprojectPosition","topRightWorld","slice","__reactstandin__regenerateByEval","key","code","eval","reactHotLoader","register","leaveModule","reactHotLoaderGlobal","undefined","module"],"sources":["../../../src/heatmap-layer/heatmap-layer.ts"],"sourcesContent":["// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* global setTimeout clearTimeout */\nimport GL from '@luma.gl/constants';\nimport {\n  getBounds,\n  boundsContain,\n  packVertices,\n  scaleToAspectRatio,\n  getTextureCoordinates,\n  getTextureParams\n} from './heatmap-layer-utils';\nimport {\n  Buffer,\n  Texture2D,\n  Transform,\n  getParameters,\n  withParameters,\n  FEATURES,\n  hasFeatures\n} from '@luma.gl/core';\nimport {\n  Accessor,\n  AccessorFunction,\n  AttributeManager,\n  ChangeFlags,\n  Color,\n  COORDINATE_SYSTEM,\n  Layer,\n  LayerContext,\n  LayersList,\n  log,\n  Position,\n  UpdateParameters,\n  DefaultProps\n} from '@deck.gl/core';\nimport TriangleLayer from './triangle-layer';\nimport AggregationLayer, {AggregationLayerProps} from '../aggregation-layer';\nimport {defaultColorRange, colorRangeToFlatArray} from '../utils/color-utils';\nimport weightsVs from './weights-vs.glsl';\nimport weightsFs from './weights-fs.glsl';\nimport vsMax from './max-vs.glsl';\nimport fsMax from './max-fs.glsl';\n\nconst RESOLUTION = 2; // (number of common space pixels) / (number texels)\nconst TEXTURE_OPTIONS = {\n  mipmaps: false,\n  parameters: {\n    [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n    [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,\n    [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n    [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n  },\n  dataFormat: GL.RGBA\n};\nconst DEFAULT_COLOR_DOMAIN = [0, 0];\nconst AGGREGATION_MODE = {\n  SUM: 0,\n  MEAN: 1\n};\n\nconst defaultProps: DefaultProps<HeatmapLayerProps> = {\n  getPosition: {type: 'accessor', value: x => x.position},\n  getWeight: {type: 'accessor', value: 1},\n  intensity: {type: 'number', min: 0, value: 1},\n  radiusPixels: {type: 'number', min: 1, max: 100, value: 50},\n  colorRange: defaultColorRange,\n  threshold: {type: 'number', min: 0, max: 1, value: 0.05},\n  colorDomain: {type: 'array', value: null, optional: true},\n  // 'SUM' or 'MEAN'\n  aggregation: 'SUM',\n  weightsTextureSize: {type: 'number', min: 128, max: 2048, value: 2048},\n  debounceTimeout: {type: 'number', min: 0, max: 1000, value: 500}\n};\n\nconst REQUIRED_FEATURES = [\n  FEATURES.BLEND_EQUATION_MINMAX, // max weight calculation\n  FEATURES.TEXTURE_FLOAT // weight-map as texture\n];\n\nconst FLOAT_TARGET_FEATURES = [\n  FEATURES.COLOR_ATTACHMENT_RGBA32F, // ability to render to float texture\n  FEATURES.FLOAT_BLEND // ability to blend when rendering to float texture\n];\n\nconst DIMENSIONS = {\n  data: {\n    props: ['radiusPixels']\n  }\n};\n\nexport type HeatmapLayerProps<DataT = any> = _HeatmapLayerProps<DataT> &\n  AggregationLayerProps<DataT>;\n\ntype _HeatmapLayerProps<DataT> = {\n  /**\n   * Radius of the circle in pixels, to which the weight of an object is distributed.\n   *\n   * @default 30\n   */\n  radiusPixels?: number;\n\n  /**\n   * Specified as an array of colors [color1, color2, ...].\n   *\n   * @default `6-class YlOrRd` - [colorbrewer](http://colorbrewer2.org/#type=sequential&scheme=YlOrRd&n=6)\n   */\n  colorRange?: Color[];\n\n  /**\n   * Value that is multiplied with the total weight at a pixel to obtain the final weight.\n   *\n   * @default 1\n   */\n  intensity?: number;\n\n  /**\n   * Ratio of the fading weight to the max weight, between `0` and `1`.\n   *\n   * For example, `0.1` affects all pixels with weight under 10% of the max.\n   *\n   * Ignored when `colorDomain` is specified.\n   * @default 0.05\n   */\n  threshold?: number;\n\n  /**\n   * Controls how weight values are mapped to the `colorRange`, as an array of two numbers [`minValue`, `maxValue`].\n   *\n   * @default null\n   */\n  colorDomain?: [number, number] | null;\n\n  /**\n   * Defines the type of aggregation operation\n   *\n   * V valid values are 'SUM', 'MEAN'.\n   *\n   * @default 'SUM'\n   */\n  aggregation?: 'SUM' | 'MEAN';\n\n  /**\n   * Specifies the size of weight texture.\n   * @default 2048\n   */\n  weightsTextureSize?: number;\n\n  /**\n   * Interval in milliseconds during which changes to the viewport don't trigger aggregation.\n   *\n   * @default 500\n   */\n  debounceTimeout?: number;\n\n  /**\n   * Method called to retrieve the position of each object.\n   *\n   * @default d => d.position\n   */\n  getPosition?: AccessorFunction<DataT, Position>;\n\n  /**\n   * The weight of each object.\n   *\n   * @default 1\n   */\n  getWeight?: Accessor<DataT, number>;\n};\n\n/** Visualizes the spatial distribution of data. */\nexport default class HeatmapLayer<\n  DataT = any,\n  ExtraPropsT extends {} = {}\n> extends AggregationLayer<DataT, ExtraPropsT & Required<_HeatmapLayerProps<DataT>>> {\n  static layerName = 'HeatmapLayer';\n  static defaultProps = defaultProps;\n\n  state!: AggregationLayer<DataT>['state'] & {\n    supported: boolean;\n    colorDomain?: number[];\n    isWeightMapDirty?: boolean;\n    weightsTexture?: Texture2D;\n    zoom?: number;\n    worldBounds?: number[];\n    normalizedCommonBounds?: number[];\n    updateTimer?: any;\n    triPositionBuffer?: Buffer;\n    triTexCoordBuffer?: Buffer;\n  };\n\n  initializeState() {\n    const {gl} = this.context;\n    if (!hasFeatures(gl, REQUIRED_FEATURES)) {\n      this.setState({supported: false});\n      log.error(`HeatmapLayer: ${this.id} is not supported on this browser`)();\n      return;\n    }\n    super.initializeAggregationLayer(DIMENSIONS);\n    this.setState({supported: true, colorDomain: DEFAULT_COLOR_DOMAIN});\n    this._setupTextureParams();\n    this._setupAttributes();\n    this._setupResources();\n  }\n\n  shouldUpdateState({changeFlags}: UpdateParameters<this>) {\n    // Need to be updated when viewport changes\n    return changeFlags.somethingChanged;\n  }\n\n  /* eslint-disable max-statements,complexity */\n  updateState(opts: UpdateParameters<this>) {\n    if (!this.state.supported) {\n      return;\n    }\n    super.updateState(opts);\n    this._updateHeatmapState(opts);\n  }\n\n  _updateHeatmapState(opts: UpdateParameters<this>) {\n    const {props, oldProps} = opts;\n    const changeFlags = this._getChangeFlags(opts);\n\n    if (changeFlags.dataChanged || changeFlags.viewportChanged) {\n      // if data is changed, do not debounce and immediately update the weight map\n      changeFlags.boundsChanged = this._updateBounds(changeFlags.dataChanged);\n      this._updateTextureRenderingBounds();\n    }\n\n    if (changeFlags.dataChanged || changeFlags.boundsChanged) {\n      // Update weight map immediately\n      clearTimeout(this.state.updateTimer);\n      this.setState({isWeightMapDirty: true});\n    } else if (changeFlags.viewportZoomChanged) {\n      // Update weight map when zoom stops\n      this._debouncedUpdateWeightmap();\n    }\n\n    if (props.colorRange !== oldProps.colorRange) {\n      this._updateColorTexture(opts);\n    }\n\n    if (this.state.isWeightMapDirty) {\n      this._updateWeightmap();\n    }\n\n    this.setState({zoom: opts.context.viewport.zoom});\n  }\n\n  renderLayers(): LayersList | Layer {\n    if (!this.state.supported) {\n      return [];\n    }\n    const {\n      weightsTexture,\n      triPositionBuffer,\n      triTexCoordBuffer,\n      maxWeightsTexture,\n      colorTexture,\n      colorDomain\n    } = this.state;\n    const {updateTriggers, intensity, threshold, aggregation} = this.props;\n\n    const TriangleLayerClass = this.getSubLayerClass('triangle', TriangleLayer);\n\n    return new TriangleLayerClass(\n      this.getSubLayerProps({\n        id: 'triangle-layer',\n        updateTriggers\n      }),\n      {\n        // position buffer is filled with world coordinates generated from viewport.unproject\n        // i.e. LNGLAT if geospatial, CARTESIAN otherwise\n        coordinateSystem: COORDINATE_SYSTEM.DEFAULT,\n        data: {\n          attributes: {\n            positions: triPositionBuffer,\n            texCoords: triTexCoordBuffer\n          }\n        },\n        vertexCount: 4,\n        maxTexture: maxWeightsTexture,\n        colorTexture,\n        aggregationMode: AGGREGATION_MODE[aggregation] || 0,\n        texture: weightsTexture,\n        intensity,\n        threshold,\n        colorDomain\n      }\n    );\n  }\n\n  finalizeState(context: LayerContext) {\n    super.finalizeState(context);\n    const {\n      weightsTransform,\n      weightsTexture,\n      maxWeightTransform,\n      maxWeightsTexture,\n      triPositionBuffer,\n      triTexCoordBuffer,\n      colorTexture,\n      updateTimer\n    } = this.state;\n    weightsTransform?.delete();\n    weightsTexture?.delete();\n    maxWeightTransform?.delete();\n    maxWeightsTexture?.delete();\n    triPositionBuffer?.delete();\n    triTexCoordBuffer?.delete();\n    colorTexture?.delete();\n    if (updateTimer) {\n      clearTimeout(updateTimer);\n    }\n  }\n\n  // PRIVATE\n\n  // override Composite layer private method to create AttributeManager instance\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats\n    });\n  }\n\n  _getChangeFlags(opts: UpdateParameters<this>) {\n    const changeFlags: Partial<ChangeFlags> & {\n      boundsChanged?: boolean;\n      viewportZoomChanged?: boolean;\n    } = {};\n    const {dimensions} = this.state;\n    changeFlags.dataChanged =\n      this.isAttributeChanged() || // if any attribute is changed\n      this.isAggregationDirty(opts, {\n        compareAll: true,\n        dimension: dimensions.data\n      });\n    changeFlags.viewportChanged = opts.changeFlags.viewportChanged;\n\n    const {zoom} = this.state;\n    if (!opts.context.viewport || opts.context.viewport.zoom !== zoom) {\n      changeFlags.viewportZoomChanged = true;\n    }\n\n    return changeFlags;\n  }\n\n  _createTextures() {\n    const {gl} = this.context;\n    const {textureSize, format, type} = this.state;\n\n    this.setState({\n      weightsTexture: new Texture2D(gl, {\n        width: textureSize,\n        height: textureSize,\n        format,\n        type,\n        ...TEXTURE_OPTIONS\n      }),\n      maxWeightsTexture: new Texture2D(gl, {format, type, ...TEXTURE_OPTIONS}) // 1 X 1 texture,\n    });\n  }\n\n  _setupAttributes() {\n    const attributeManager = this.getAttributeManager()!;\n    attributeManager.add({\n      positions: {size: 3, type: GL.DOUBLE, accessor: 'getPosition'},\n      weights: {size: 1, accessor: 'getWeight'}\n    });\n    this.setState({positionAttributeName: 'positions'});\n  }\n\n  _setupTextureParams() {\n    const {gl} = this.context;\n    const {weightsTextureSize} = this.props;\n\n    const textureSize = Math.min(weightsTextureSize, getParameters(gl, gl.MAX_TEXTURE_SIZE));\n    const floatTargetSupport = hasFeatures(gl, FLOAT_TARGET_FEATURES);\n    const {format, type} = getTextureParams({gl, floatTargetSupport});\n    const weightsScale = floatTargetSupport ? 1 : 1 / 255;\n    this.setState({textureSize, format, type, weightsScale});\n    if (!floatTargetSupport) {\n      log.warn(\n        `HeatmapLayer: ${this.id} rendering to float texture not supported, fallingback to low precession format`\n      )();\n    }\n  }\n\n  getShaders(type) {\n    return super.getShaders(\n      type === 'max-weights-transform'\n        ? {\n            vs: vsMax,\n            _fs: fsMax\n          }\n        : {\n            vs: weightsVs,\n            _fs: weightsFs\n          }\n    );\n  }\n\n  _createWeightsTransform(shaders = {}) {\n    const {gl} = this.context;\n    let {weightsTransform} = this.state;\n    const {weightsTexture} = this.state;\n    weightsTransform?.delete();\n\n    weightsTransform = new Transform(gl, {\n      id: `${this.id}-weights-transform`,\n      elementCount: 1,\n      _targetTexture: weightsTexture,\n      _targetTextureVarying: 'weightsTexture',\n      ...shaders\n    });\n    this.setState({weightsTransform});\n  }\n\n  _setupResources() {\n    const {gl} = this.context;\n    this._createTextures();\n    const {textureSize, weightsTexture, maxWeightsTexture} = this.state;\n\n    const weightsTransformShaders = this.getShaders('weights-transform');\n    this._createWeightsTransform(weightsTransformShaders);\n\n    const maxWeightsTransformShaders = this.getShaders('max-weights-transform');\n    const maxWeightTransform = new Transform(gl, {\n      id: `${this.id}-max-weights-transform`,\n      _sourceTextures: {\n        inTexture: weightsTexture\n      },\n      _targetTexture: maxWeightsTexture,\n      _targetTextureVarying: 'outTexture',\n      ...maxWeightsTransformShaders,\n      elementCount: textureSize * textureSize\n    });\n\n    this.setState({\n      weightsTexture,\n      maxWeightsTexture,\n      maxWeightTransform,\n      zoom: null,\n      triPositionBuffer: new Buffer(gl, {\n        byteLength: 48,\n        accessor: {size: 3}\n      }),\n      triTexCoordBuffer: new Buffer(gl, {\n        byteLength: 48,\n        accessor: {size: 2}\n      })\n    });\n  }\n\n  // overwrite super class method to update transform model\n  updateShaders(shaderOptions) {\n    // sahder params (modules, injects) changed, update model object\n    this._createWeightsTransform(shaderOptions);\n  }\n\n  _updateMaxWeightValue() {\n    const {maxWeightTransform} = this.state;\n    maxWeightTransform.run({\n      parameters: {\n        blend: true,\n        depthTest: false,\n        blendFunc: [GL.ONE, GL.ONE],\n        blendEquation: GL.MAX\n      }\n    });\n  }\n\n  // Computes world bounds area that needs to be processed for generate heatmap\n  _updateBounds(forceUpdate: any = false): boolean {\n    const {viewport} = this.context;\n\n    // Unproject all 4 corners of the current screen coordinates into world coordinates (lng/lat)\n    // Takes care of viewport has non zero bearing/pitch (i.e axis not aligned with world coordiante system)\n    const viewportCorners = [\n      viewport.unproject([0, 0]),\n      viewport.unproject([viewport.width, 0]),\n      viewport.unproject([viewport.width, viewport.height]),\n      viewport.unproject([0, viewport.height])\n    ].map(p => p.map(Math.fround));\n\n    // #1: get world bounds for current viewport extends\n    const visibleWorldBounds = getBounds(viewportCorners); // TODO: Change to visible bounds\n\n    const newState: Partial<HeatmapLayer['state']> = {visibleWorldBounds, viewportCorners};\n    let boundsChanged = false;\n\n    if (\n      forceUpdate ||\n      !this.state.worldBounds ||\n      !boundsContain(this.state.worldBounds, visibleWorldBounds)\n    ) {\n      // #2 : convert world bounds to common (Flat) bounds\n      // #3 : extend common bounds to match aspect ratio with viewport\n      const scaledCommonBounds = this._worldToCommonBounds(visibleWorldBounds);\n\n      // #4 :convert aligned common bounds to world bounds\n      const worldBounds = this._commonToWorldBounds(scaledCommonBounds);\n\n      // Clip webmercator projection limits\n      if (this.props.coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {\n        worldBounds[1] = Math.max(worldBounds[1], -85.051129);\n        worldBounds[3] = Math.min(worldBounds[3], 85.051129);\n        worldBounds[0] = Math.max(worldBounds[0], -360);\n        worldBounds[2] = Math.min(worldBounds[2], 360);\n      }\n\n      // #5: now convert world bounds to common using Layer's coordiante system and origin\n      const normalizedCommonBounds = this._worldToCommonBounds(worldBounds);\n\n      newState.worldBounds = worldBounds;\n      newState.normalizedCommonBounds = normalizedCommonBounds;\n\n      boundsChanged = true;\n    }\n    this.setState(newState);\n    return boundsChanged;\n  }\n\n  _updateTextureRenderingBounds() {\n    // Just render visible portion of the texture\n    const {triPositionBuffer, triTexCoordBuffer, normalizedCommonBounds, viewportCorners} =\n      this.state;\n\n    const {viewport} = this.context;\n\n    triPositionBuffer.subData(packVertices(viewportCorners, 3));\n\n    const textureBounds = viewportCorners.map(p =>\n      getTextureCoordinates(viewport.projectPosition(p), normalizedCommonBounds!)\n    );\n    triTexCoordBuffer.subData(packVertices(textureBounds, 2));\n  }\n\n  _updateColorTexture(opts) {\n    const {colorRange} = opts.props;\n    let {colorTexture} = this.state;\n    const colors = colorRangeToFlatArray(colorRange, false, Uint8Array as any);\n\n    if (colorTexture) {\n      colorTexture.setImageData({\n        data: colors,\n        width: colorRange.length\n      });\n    } else {\n      colorTexture = new Texture2D(this.context.gl, {\n        data: colors,\n        width: colorRange.length,\n        height: 1,\n        ...TEXTURE_OPTIONS\n      });\n    }\n    this.setState({colorTexture});\n  }\n\n  _updateWeightmap() {\n    const {radiusPixels, colorDomain, aggregation} = this.props;\n    const {weightsTransform, worldBounds, textureSize, weightsTexture, weightsScale} = this.state;\n    this.state.isWeightMapDirty = false;\n\n    // convert world bounds to common using Layer's coordiante system and origin\n    const commonBounds = this._worldToCommonBounds(worldBounds, {\n      useLayerCoordinateSystem: true\n    });\n\n    if (colorDomain && aggregation === 'SUM') {\n      // scale color domain to weight per pixel\n      const {viewport} = this.context;\n      const metersPerPixel =\n        (viewport.distanceScales.metersPerUnit[2] * (commonBounds[2] - commonBounds[0])) /\n        textureSize;\n      this.state.colorDomain = colorDomain.map(x => x * metersPerPixel * weightsScale);\n    } else {\n      this.state.colorDomain = colorDomain || DEFAULT_COLOR_DOMAIN;\n    }\n\n    const uniforms = {\n      radiusPixels,\n      commonBounds,\n      textureWidth: textureSize,\n      weightsScale\n    };\n    // Attribute manager sets data array count as instaceCount on model\n    // we need to set that as elementCount on 'weightsTransform'\n    weightsTransform.update({\n      elementCount: this.getNumInstances()\n    });\n    // Need to explictly specify clearColor as external context may have modified it\n    withParameters(this.context.gl, {clearColor: [0, 0, 0, 0]}, () => {\n      weightsTransform.run({\n        uniforms,\n        parameters: {\n          blend: true,\n          depthTest: false,\n          blendFunc: [GL.ONE, GL.ONE],\n          blendEquation: GL.FUNC_ADD\n        },\n        clearRenderTarget: true,\n        attributes: this.getAttributes(),\n        moduleSettings: this.getModuleSettings()\n      });\n    });\n    this._updateMaxWeightValue();\n\n    // reset filtering parameters (TODO: remove once luma issue#1193 is fixed)\n    weightsTexture.setParameters({\n      [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n      [GL.TEXTURE_MIN_FILTER]: GL.LINEAR\n    });\n  }\n\n  _debouncedUpdateWeightmap(fromTimer = false) {\n    let {updateTimer} = this.state;\n    const {debounceTimeout} = this.props;\n\n    if (fromTimer) {\n      updateTimer = null;\n      // update\n      this._updateBounds(true);\n      this._updateTextureRenderingBounds();\n      this.setState({isWeightMapDirty: true});\n    } else {\n      this.setState({isWeightMapDirty: false});\n      clearTimeout(updateTimer);\n      updateTimer = setTimeout(this._debouncedUpdateWeightmap.bind(this, true), debounceTimeout);\n    }\n\n    this.setState({updateTimer});\n  }\n\n  // input: worldBounds: [minLong, minLat, maxLong, maxLat]\n  // input: opts.useLayerCoordinateSystem : layers coordiante system is used\n  // optput: commonBounds: [minX, minY, maxX, maxY] scaled to fit the current texture\n  _worldToCommonBounds(worldBounds, opts: {useLayerCoordinateSystem?: boolean} = {}) {\n    const {useLayerCoordinateSystem = false} = opts;\n    const [minLong, minLat, maxLong, maxLat] = worldBounds;\n    const {viewport} = this.context;\n    const {textureSize} = this.state;\n    const {coordinateSystem} = this.props;\n\n    const offsetMode =\n      useLayerCoordinateSystem &&\n      (coordinateSystem === COORDINATE_SYSTEM.LNGLAT_OFFSETS ||\n        coordinateSystem === COORDINATE_SYSTEM.METER_OFFSETS);\n    const offsetOriginCommon = offsetMode\n      ? viewport.projectPosition(this.props.coordinateOrigin)\n      : [0, 0];\n    const size = (textureSize * RESOLUTION) / viewport.scale;\n\n    let bottomLeftCommon;\n    let topRightCommon;\n\n    // Y-axis is flipped between World and Common bounds\n    if (useLayerCoordinateSystem && !offsetMode) {\n      bottomLeftCommon = this.projectPosition([minLong, minLat, 0]);\n      topRightCommon = this.projectPosition([maxLong, maxLat, 0]);\n    } else {\n      bottomLeftCommon = viewport.projectPosition([minLong, minLat, 0]);\n      topRightCommon = viewport.projectPosition([maxLong, maxLat, 0]);\n    }\n    // Ignore z component\n    return scaleToAspectRatio(\n      [\n        bottomLeftCommon[0] - offsetOriginCommon[0],\n        bottomLeftCommon[1] - offsetOriginCommon[1],\n        topRightCommon[0] - offsetOriginCommon[0],\n        topRightCommon[1] - offsetOriginCommon[1]\n      ],\n      size,\n      size\n    );\n  }\n\n  // input commonBounds: [xMin, yMin, xMax, yMax]\n  // output worldBounds: [minLong, minLat, maxLong, maxLat]\n  _commonToWorldBounds(commonBounds) {\n    const [xMin, yMin, xMax, yMax] = commonBounds;\n    const {viewport} = this.context;\n    const bottomLeftWorld = viewport.unprojectPosition([xMin, yMin]);\n    const topRightWorld = viewport.unprojectPosition([xMax, yMax]);\n\n    return bottomLeftWorld.slice(0, 2).concat(topRightWorld.slice(0, 2));\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}