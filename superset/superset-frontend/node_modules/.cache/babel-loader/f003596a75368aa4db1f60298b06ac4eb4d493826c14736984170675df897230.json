{"ast":null,"code":"import { css as _css } from \"@emotion/react\";import _isEmpty from \"lodash/isEmpty\";import _isBoolean from \"lodash/isBoolean\";import _throttle from \"lodash/throttle\";import _debounce from \"lodash/debounce\";var _bootstrapData$common, _bootstrapData$common2;(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();function _EMOTION_STRINGIFIED_CSS_ERROR__() {return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable jsx-a11y/anchor-is-valid */\n/* eslint-disable jsx-a11y/no-static-element-interactions */\nimport React, { useState, useEffect, useMemo, useRef, useCallback } from 'react';\nimport useEffectEvent from 'src/hooks/useEffectEvent';\nimport { CSSTransition } from 'react-transition-group';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport Split from 'react-split';\nimport { css, FeatureFlag, isFeatureEnabled, styled, t, useTheme, getExtensionsRegistry } from '@superset-ui/core';\n\nimport Modal from 'src/components/Modal';\nimport Mousetrap from 'mousetrap';\nimport Button from 'src/components/Button';\nimport Timer from 'src/components/Timer';\nimport ResizableSidebar from 'src/components/ResizableSidebar';\nimport { AntdDropdown, AntdSwitch, Skeleton } from 'src/components';\nimport { Input } from 'src/components/Input';\nimport { Menu } from 'src/components/Menu';\nimport Icons from 'src/components/Icons';\nimport { detectOS } from 'src/utils/common';\nimport { addNewQueryEditor, CtasEnum, estimateQueryCost, persistEditorHeight, postStopQuery, queryEditorSetAutorun, queryEditorSetSql, queryEditorSetCursorPosition, queryEditorSetAndSaveSql, queryEditorSetTemplateParams, runQueryFromSqlEditor, saveQuery, addSavedQueryToTabState, scheduleQuery, setActiveSouthPaneTab, updateSavedQuery, formatQuery, switchQueryEditor } from 'src/SqlLab/actions/sqlLab';\nimport { STATE_TYPE_MAP, SQL_EDITOR_GUTTER_HEIGHT, SQL_EDITOR_GUTTER_MARGIN, SQL_TOOLBAR_HEIGHT, SQL_EDITOR_LEFTBAR_WIDTH, SQL_EDITOR_PADDING, INITIAL_NORTH_PERCENT, INITIAL_SOUTH_PERCENT, SET_QUERY_EDITOR_SQL_DEBOUNCE_MS, WINDOW_RESIZE_THROTTLE_MS } from 'src/SqlLab/constants';\nimport { getItem, LocalStorageKeys, setItem } from 'src/utils/localStorageHelpers';\nimport { EmptyStateBig } from 'src/components/EmptyState';\nimport getBootstrapData from 'src/utils/getBootstrapData';\nimport TemplateParamsEditor from '../TemplateParamsEditor';\nimport SouthPane from '../SouthPane';\nimport SaveQuery from '../SaveQuery';\nimport ScheduleQueryButton from '../ScheduleQueryButton';\nimport EstimateQueryCostButton from '../EstimateQueryCostButton';\nimport ShareSqlLabQuery from '../ShareSqlLabQuery';\nimport SqlEditorLeftBar from '../SqlEditorLeftBar';\nimport AceEditorWrapper from '../AceEditorWrapper';\nimport RunQueryActionButton from '../RunQueryActionButton';\nimport QueryLimitSelect from '../QueryLimitSelect';\nimport KeyboardShortcutButton, { KEY_MAP, KeyboardShortcut } from '../KeyboardShortcutButton';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst bootstrapData = getBootstrapData();\nconst scheduledQueriesConf = bootstrapData == null ? void 0 : (_bootstrapData$common = bootstrapData.common) == null ? void 0 : (_bootstrapData$common2 = _bootstrapData$common.conf) == null ? void 0 : _bootstrapData$common2.SCHEDULED_QUERIES;\nconst StyledToolbar = styled.div`\n  padding: ${({ theme }) => theme.gridUnit * 2}px;\n  background: ${({ theme }) => theme.colors.grayscale.light5};\n  display: flex;\n  justify-content: space-between;\n  border: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n  border-top: 0;\n  column-gap: ${({ theme }) => theme.gridUnit}px;\n\n  form {\n    margin-block-end: 0;\n  }\n\n  .leftItems,\n  .rightItems {\n    display: flex;\n    align-items: center;\n    & > span {\n      margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n      display: inline-block;\n\n      &:last-child {\n        margin-right: 0;\n      }\n    }\n  }\n\n  .limitDropdown {\n    white-space: nowrap;\n  }\n`;\nconst StyledSidebar = styled.div`\n  flex: 0 0 ${({ width }) => width}px;\n  width: ${({ width }) => width}px;\n  padding: ${({ theme, hide }) => hide ? 0 : theme.gridUnit * 2.5}px;\n  border-right: 1px solid\n    ${({ theme, hide }) => hide ? 'transparent' : theme.colors.grayscale.light2};\n`;\nconst StyledSqlEditor = styled.div`\n  ${({ theme }) => css`\n    display: flex;\n    flex-direction: row;\n    height: 100%;\n\n    .schemaPane {\n      transition: transform ${theme.transitionTiming}s ease-in-out;\n    }\n\n    .queryPane {\n      flex: 1 1 auto;\n      padding: ${theme.gridUnit * 2}px;\n      overflow-y: auto;\n      overflow-x: scroll;\n    }\n\n    .schemaPane-enter-done,\n    .schemaPane-exit {\n      transform: translateX(0);\n      z-index: 7;\n    }\n\n    .schemaPane-exit-active {\n      transform: translateX(-120%);\n    }\n\n    .schemaPane-enter-active {\n      transform: translateX(0);\n      max-width: ${theme.gridUnit * 75}px;\n    }\n\n    .schemaPane-enter,\n    .schemaPane-exit-done {\n      max-width: 0;\n      transform: translateX(-120%);\n      overflow: hidden;\n    }\n\n    .schemaPane-exit-done + .queryPane {\n      margin-left: 0;\n    }\n\n    .gutter {\n      border-top: 1px solid ${theme.colors.grayscale.light2};\n      border-bottom: 1px solid ${theme.colors.grayscale.light2};\n      width: 3%;\n      margin: ${SQL_EDITOR_GUTTER_MARGIN}px 47%;\n    }\n\n    .gutter.gutter-vertical {\n      cursor: row-resize;\n    }\n  `}\n`;\nconst extensionsRegistry = getExtensionsRegistry();\nconst elementStyle = (dimension, elementSize, gutterSize) => ({\n  [dimension]: `calc(${elementSize}% - ${gutterSize + SQL_EDITOR_GUTTER_MARGIN}px)`\n});var _ref = process.env.NODE_ENV === \"production\" ? { name: \"1eoy87d\", styles: \"display:flex;justify-content:space-between\" } : { name: \"1egglng-renderDropdown\", styles: \"display:flex;justify-content:space-between;label:renderDropdown;\", map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", toString: _EMOTION_STRINGIFIED_CSS_ERROR__ };var _ref2 = process.env.NODE_ENV === \"production\" ? { name: \"1eoy87d\", styles: \"display:flex;justify-content:space-between\" } : { name: \"1egglng-renderDropdown\", styles: \"display:flex;justify-content:space-between;label:renderDropdown;\", map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3Bhd2Fuay9Eb2N1bWVudHMvZGNpbS9zdXBlcnNldC9zdXBlcnNldC1mcm9udGVuZC9zcmMvU3FsTGFiL2NvbXBvbmVudHMvU3FsRWRpdG9yL2luZGV4LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFrZG1CIiwiZmlsZSI6Ii9ob21lL3Bhd2Fuay9Eb2N1bWVudHMvZGNpbS9zdXBlcnNldC9zdXBlcnNldC1mcm9udGVuZC9zcmMvU3FsTGFiL2NvbXBvbmVudHMvU3FsRWRpdG9yL2luZGV4LnRzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIGpzeC1hMTF5L2FuY2hvci1pcy12YWxpZCAqL1xuLyogZXNsaW50LWRpc2FibGUganN4LWExMXkvbm8tc3RhdGljLWVsZW1lbnQtaW50ZXJhY3Rpb25zICovXG5pbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlTWVtbywgdXNlUmVmLCB1c2VDYWxsYmFjaywgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdXNlRWZmZWN0RXZlbnQgZnJvbSAnc3JjL2hvb2tzL3VzZUVmZmVjdEV2ZW50JztcbmltcG9ydCB7IENTU1RyYW5zaXRpb24gfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcbmltcG9ydCB7IHNoYWxsb3dFcXVhbCwgdXNlRGlzcGF0Y2gsIHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IFNwbGl0IGZyb20gJ3JlYWN0LXNwbGl0JztcbmltcG9ydCB7IGNzcywgRmVhdHVyZUZsYWcsIGlzRmVhdHVyZUVuYWJsZWQsIHN0eWxlZCwgdCwgdXNlVGhlbWUsIGdldEV4dGVuc2lvbnNSZWdpc3RyeSwgfSBmcm9tICdAc3VwZXJzZXQtdWkvY29yZSc7XG5pbXBvcnQgeyBkZWJvdW5jZSwgdGhyb3R0bGUsIGlzQm9vbGVhbiwgaXNFbXB0eSB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgTW9kYWwgZnJvbSAnc3JjL2NvbXBvbmVudHMvTW9kYWwnO1xuaW1wb3J0IE1vdXNldHJhcCBmcm9tICdtb3VzZXRyYXAnO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICdzcmMvY29tcG9uZW50cy9CdXR0b24nO1xuaW1wb3J0IFRpbWVyIGZyb20gJ3NyYy9jb21wb25lbnRzL1RpbWVyJztcbmltcG9ydCBSZXNpemFibGVTaWRlYmFyIGZyb20gJ3NyYy9jb21wb25lbnRzL1Jlc2l6YWJsZVNpZGViYXInO1xuaW1wb3J0IHsgQW50ZERyb3Bkb3duLCBBbnRkU3dpdGNoLCBTa2VsZXRvbiB9IGZyb20gJ3NyYy9jb21wb25lbnRzJztcbmltcG9ydCB7IElucHV0IH0gZnJvbSAnc3JjL2NvbXBvbmVudHMvSW5wdXQnO1xuaW1wb3J0IHsgTWVudSB9IGZyb20gJ3NyYy9jb21wb25lbnRzL01lbnUnO1xuaW1wb3J0IEljb25zIGZyb20gJ3NyYy9jb21wb25lbnRzL0ljb25zJztcbmltcG9ydCB7IGRldGVjdE9TIH0gZnJvbSAnc3JjL3V0aWxzL2NvbW1vbic7XG5pbXBvcnQgeyBhZGROZXdRdWVyeUVkaXRvciwgQ3Rhc0VudW0sIGVzdGltYXRlUXVlcnlDb3N0LCBwZXJzaXN0RWRpdG9ySGVpZ2h0LCBwb3N0U3RvcFF1ZXJ5LCBxdWVyeUVkaXRvclNldEF1dG9ydW4sIHF1ZXJ5RWRpdG9yU2V0U3FsLCBxdWVyeUVkaXRvclNldEN1cnNvclBvc2l0aW9uLCBxdWVyeUVkaXRvclNldEFuZFNhdmVTcWwsIHF1ZXJ5RWRpdG9yU2V0VGVtcGxhdGVQYXJhbXMsIHJ1blF1ZXJ5RnJvbVNxbEVkaXRvciwgc2F2ZVF1ZXJ5LCBhZGRTYXZlZFF1ZXJ5VG9UYWJTdGF0ZSwgc2NoZWR1bGVRdWVyeSwgc2V0QWN0aXZlU291dGhQYW5lVGFiLCB1cGRhdGVTYXZlZFF1ZXJ5LCBmb3JtYXRRdWVyeSwgc3dpdGNoUXVlcnlFZGl0b3IsIH0gZnJvbSAnc3JjL1NxbExhYi9hY3Rpb25zL3NxbExhYic7XG5pbXBvcnQgeyBTVEFURV9UWVBFX01BUCwgU1FMX0VESVRPUl9HVVRURVJfSEVJR0hULCBTUUxfRURJVE9SX0dVVFRFUl9NQVJHSU4sIFNRTF9UT09MQkFSX0hFSUdIVCwgU1FMX0VESVRPUl9MRUZUQkFSX1dJRFRILCBTUUxfRURJVE9SX1BBRERJTkcsIElOSVRJQUxfTk9SVEhfUEVSQ0VOVCwgSU5JVElBTF9TT1VUSF9QRVJDRU5ULCBTRVRfUVVFUllfRURJVE9SX1NRTF9ERUJPVU5DRV9NUywgV0lORE9XX1JFU0laRV9USFJPVFRMRV9NUywgfSBmcm9tICdzcmMvU3FsTGFiL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBnZXRJdGVtLCBMb2NhbFN0b3JhZ2VLZXlzLCBzZXRJdGVtLCB9IGZyb20gJ3NyYy91dGlscy9sb2NhbFN0b3JhZ2VIZWxwZXJzJztcbmltcG9ydCB7IEVtcHR5U3RhdGVCaWcgfSBmcm9tICdzcmMvY29tcG9uZW50cy9FbXB0eVN0YXRlJztcbmltcG9ydCBnZXRCb290c3RyYXBEYXRhIGZyb20gJ3NyYy91dGlscy9nZXRCb290c3RyYXBEYXRhJztcbmltcG9ydCBUZW1wbGF0ZVBhcmFtc0VkaXRvciBmcm9tICcuLi9UZW1wbGF0ZVBhcmFtc0VkaXRvcic7XG5pbXBvcnQgU291dGhQYW5lIGZyb20gJy4uL1NvdXRoUGFuZSc7XG5pbXBvcnQgU2F2ZVF1ZXJ5IGZyb20gJy4uL1NhdmVRdWVyeSc7XG5pbXBvcnQgU2NoZWR1bGVRdWVyeUJ1dHRvbiBmcm9tICcuLi9TY2hlZHVsZVF1ZXJ5QnV0dG9uJztcbmltcG9ydCBFc3RpbWF0ZVF1ZXJ5Q29zdEJ1dHRvbiBmcm9tICcuLi9Fc3RpbWF0ZVF1ZXJ5Q29zdEJ1dHRvbic7XG5pbXBvcnQgU2hhcmVTcWxMYWJRdWVyeSBmcm9tICcuLi9TaGFyZVNxbExhYlF1ZXJ5JztcbmltcG9ydCBTcWxFZGl0b3JMZWZ0QmFyIGZyb20gJy4uL1NxbEVkaXRvckxlZnRCYXInO1xuaW1wb3J0IEFjZUVkaXRvcldyYXBwZXIgZnJvbSAnLi4vQWNlRWRpdG9yV3JhcHBlcic7XG5pbXBvcnQgUnVuUXVlcnlBY3Rpb25CdXR0b24gZnJvbSAnLi4vUnVuUXVlcnlBY3Rpb25CdXR0b24nO1xuaW1wb3J0IFF1ZXJ5TGltaXRTZWxlY3QgZnJvbSAnLi4vUXVlcnlMaW1pdFNlbGVjdCc7XG5pbXBvcnQgS2V5Ym9hcmRTaG9ydGN1dEJ1dHRvbiwgeyBLRVlfTUFQLCBLZXlib2FyZFNob3J0Y3V0LCB9IGZyb20gJy4uL0tleWJvYXJkU2hvcnRjdXRCdXR0b24nO1xuY29uc3QgYm9vdHN0cmFwRGF0YSA9IGdldEJvb3RzdHJhcERhdGEoKTtcbmNvbnN0IHNjaGVkdWxlZFF1ZXJpZXNDb25mID0gYm9vdHN0cmFwRGF0YT8uY29tbW9uPy5jb25mPy5TQ0hFRFVMRURfUVVFUklFUztcbmNvbnN0IFN0eWxlZFRvb2xiYXIgPSBzdHlsZWQuZGl2IGBcbiAgcGFkZGluZzogJHsoeyB0aGVtZSB9KSA9PiB0aGVtZS5ncmlkVW5pdCAqIDJ9cHg7XG4gIGJhY2tncm91bmQ6ICR7KHsgdGhlbWUgfSkgPT4gdGhlbWUuY29sb3JzLmdyYXlzY2FsZS5saWdodDV9O1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gIGJvcmRlcjogMXB4IHNvbGlkICR7KHsgdGhlbWUgfSkgPT4gdGhlbWUuY29sb3JzLmdyYXlzY2FsZS5saWdodDJ9O1xuICBib3JkZXItdG9wOiAwO1xuICBjb2x1bW4tZ2FwOiAkeyh7IHRoZW1lIH0pID0+IHRoZW1lLmdyaWRVbml0fXB4O1xuXG4gIGZvcm0ge1xuICAgIG1hcmdpbi1ibG9jay1lbmQ6IDA7XG4gIH1cblxuICAubGVmdEl0ZW1zLFxuICAucmlnaHRJdGVtcyB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICYgPiBzcGFuIHtcbiAgICAgIG1hcmdpbi1yaWdodDogJHsoeyB0aGVtZSB9KSA9PiB0aGVtZS5ncmlkVW5pdCAqIDJ9cHg7XG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG5cbiAgICAgICY6bGFzdC1jaGlsZCB7XG4gICAgICAgIG1hcmdpbi1yaWdodDogMDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAubGltaXREcm9wZG93biB7XG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgfVxuYDtcbmNvbnN0IFN0eWxlZFNpZGViYXIgPSBzdHlsZWQuZGl2IGBcbiAgZmxleDogMCAwICR7KHsgd2lkdGggfSkgPT4gd2lkdGh9cHg7XG4gIHdpZHRoOiAkeyh7IHdpZHRoIH0pID0+IHdpZHRofXB4O1xuICBwYWRkaW5nOiAkeyh7IHRoZW1lLCBoaWRlIH0pID0+IChoaWRlID8gMCA6IHRoZW1lLmdyaWRVbml0ICogMi41KX1weDtcbiAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWRcbiAgICAkeyh7IHRoZW1lLCBoaWRlIH0pID0+IGhpZGUgPyAndHJhbnNwYXJlbnQnIDogdGhlbWUuY29sb3JzLmdyYXlzY2FsZS5saWdodDJ9O1xuYDtcbmNvbnN0IFN0eWxlZFNxbEVkaXRvciA9IHN0eWxlZC5kaXYgYFxuICAkeyh7IHRoZW1lIH0pID0+IGNzcyBgXG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICAgIGhlaWdodDogMTAwJTtcblxuICAgIC5zY2hlbWFQYW5lIHtcbiAgICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAke3RoZW1lLnRyYW5zaXRpb25UaW1pbmd9cyBlYXNlLWluLW91dDtcbiAgICB9XG5cbiAgICAucXVlcnlQYW5lIHtcbiAgICAgIGZsZXg6IDEgMSBhdXRvO1xuICAgICAgcGFkZGluZzogJHt0aGVtZS5ncmlkVW5pdCAqIDJ9cHg7XG4gICAgICBvdmVyZmxvdy15OiBhdXRvO1xuICAgICAgb3ZlcmZsb3cteDogc2Nyb2xsO1xuICAgIH1cblxuICAgIC5zY2hlbWFQYW5lLWVudGVyLWRvbmUsXG4gICAgLnNjaGVtYVBhbmUtZXhpdCB7XG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMCk7XG4gICAgICB6LWluZGV4OiA3O1xuICAgIH1cblxuICAgIC5zY2hlbWFQYW5lLWV4aXQtYWN0aXZlIHtcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtMTIwJSk7XG4gICAgfVxuXG4gICAgLnNjaGVtYVBhbmUtZW50ZXItYWN0aXZlIHtcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgwKTtcbiAgICAgIG1heC13aWR0aDogJHt0aGVtZS5ncmlkVW5pdCAqIDc1fXB4O1xuICAgIH1cblxuICAgIC5zY2hlbWFQYW5lLWVudGVyLFxuICAgIC5zY2hlbWFQYW5lLWV4aXQtZG9uZSB7XG4gICAgICBtYXgtd2lkdGg6IDA7XG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTEyMCUpO1xuICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICB9XG5cbiAgICAuc2NoZW1hUGFuZS1leGl0LWRvbmUgKyAucXVlcnlQYW5lIHtcbiAgICAgIG1hcmdpbi1sZWZ0OiAwO1xuICAgIH1cblxuICAgIC5ndXR0ZXIge1xuICAgICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICR7dGhlbWUuY29sb3JzLmdyYXlzY2FsZS5saWdodDJ9O1xuICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICR7dGhlbWUuY29sb3JzLmdyYXlzY2FsZS5saWdodDJ9O1xuICAgICAgd2lkdGg6IDMlO1xuICAgICAgbWFyZ2luOiAke1NRTF9FRElUT1JfR1VUVEVSX01BUkdJTn1weCA0NyU7XG4gICAgfVxuXG4gICAgLmd1dHRlci5ndXR0ZXItdmVydGljYWwge1xuICAgICAgY3Vyc29yOiByb3ctcmVzaXplO1xuICAgIH1cbiAgYH1cbmA7XG5jb25zdCBleHRlbnNpb25zUmVnaXN0cnkgPSBnZXRFeHRlbnNpb25zUmVnaXN0cnkoKTtcbmNvbnN0IGVsZW1lbnRTdHlsZSA9IChkaW1lbnNpb24sIGVsZW1lbnRTaXplLCBndXR0ZXJTaXplKSA9PiAoe1xuICAgIFtkaW1lbnNpb25dOiBgY2FsYygke2VsZW1lbnRTaXplfSUgLSAke2d1dHRlclNpemUgKyBTUUxfRURJVE9SX0dVVFRFUl9NQVJHSU59cHgpYCxcbn0pO1xuY29uc3QgU3FsRWRpdG9yID0gKHsgcXVlcnlFZGl0b3IsIGRlZmF1bHRRdWVyeUxpbWl0LCBtYXhSb3csIGRpc3BsYXlMaW1pdCwgc2F2ZVF1ZXJ5V2FybmluZywgc2NoZWR1bGVRdWVyeVdhcm5pbmcsIH0pID0+IHtcbiAgICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lKCk7XG4gICAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICAgIGNvbnN0IHsgZGF0YWJhc2UsIGxhdGVzdFF1ZXJ5LCBoaWRlTGVmdEJhciwgY3VycmVudFF1ZXJ5RWRpdG9ySWQgfSA9IHVzZVNlbGVjdG9yKCh7IHNxbExhYjogeyB1bnNhdmVkUXVlcnlFZGl0b3IsIGRhdGFiYXNlcywgcXVlcmllcywgdGFiSGlzdG9yeSB9IH0pID0+IHtcbiAgICAgICAgbGV0IHsgZGJJZCwgbGF0ZXN0UXVlcnlJZCwgaGlkZUxlZnRCYXIgfSA9IHF1ZXJ5RWRpdG9yO1xuICAgICAgICBpZiAodW5zYXZlZFF1ZXJ5RWRpdG9yPy5pZCA9PT0gcXVlcnlFZGl0b3IuaWQpIHtcbiAgICAgICAgICAgIGRiSWQgPSB1bnNhdmVkUXVlcnlFZGl0b3IuZGJJZCB8fCBkYklkO1xuICAgICAgICAgICAgbGF0ZXN0UXVlcnlJZCA9IHVuc2F2ZWRRdWVyeUVkaXRvci5sYXRlc3RRdWVyeUlkIHx8IGxhdGVzdFF1ZXJ5SWQ7XG4gICAgICAgICAgICBoaWRlTGVmdEJhciA9IGlzQm9vbGVhbih1bnNhdmVkUXVlcnlFZGl0b3IuaGlkZUxlZnRCYXIpXG4gICAgICAgICAgICAgICAgPyB1bnNhdmVkUXVlcnlFZGl0b3IuaGlkZUxlZnRCYXJcbiAgICAgICAgICAgICAgICA6IGhpZGVMZWZ0QmFyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkYXRhYmFzZTogZGF0YWJhc2VzW2RiSWQgfHwgJyddLFxuICAgICAgICAgICAgbGF0ZXN0UXVlcnk6IHF1ZXJpZXNbbGF0ZXN0UXVlcnlJZCB8fCAnJ10sXG4gICAgICAgICAgICBoaWRlTGVmdEJhcixcbiAgICAgICAgICAgIGN1cnJlbnRRdWVyeUVkaXRvcklkOiB0YWJIaXN0b3J5LnNsaWNlKC0xKVswXSxcbiAgICAgICAgfTtcbiAgICB9LCBzaGFsbG93RXF1YWwpO1xuICAgIGNvbnN0IGlzQWN0aXZlID0gY3VycmVudFF1ZXJ5RWRpdG9ySWQgPT09IHF1ZXJ5RWRpdG9yLmlkO1xuICAgIGNvbnN0IFtoZWlnaHQsIHNldEhlaWdodF0gPSB1c2VTdGF0ZSgwKTtcbiAgICBjb25zdCBbYXV0b3J1biwgc2V0QXV0b3J1bl0gPSB1c2VTdGF0ZShxdWVyeUVkaXRvci5hdXRvcnVuKTtcbiAgICBjb25zdCBbY3Rhcywgc2V0Q3Rhc10gPSB1c2VTdGF0ZSgnJyk7XG4gICAgY29uc3QgW25vcnRoUGVyY2VudCwgc2V0Tm9ydGhQZXJjZW50XSA9IHVzZVN0YXRlKHF1ZXJ5RWRpdG9yLm5vcnRoUGVyY2VudCB8fCBJTklUSUFMX05PUlRIX1BFUkNFTlQpO1xuICAgIGNvbnN0IFtzb3V0aFBlcmNlbnQsIHNldFNvdXRoUGVyY2VudF0gPSB1c2VTdGF0ZShxdWVyeUVkaXRvci5zb3V0aFBlcmNlbnQgfHwgSU5JVElBTF9TT1VUSF9QRVJDRU5UKTtcbiAgICBjb25zdCBbYXV0b2NvbXBsZXRlRW5hYmxlZCwgc2V0QXV0b2NvbXBsZXRlRW5hYmxlZF0gPSB1c2VTdGF0ZShnZXRJdGVtKExvY2FsU3RvcmFnZUtleXMuU3FsbGFiSXNBdXRvY29tcGxldGVFbmFibGVkLCB0cnVlKSk7XG4gICAgY29uc3QgW3JlbmRlckhUTUxFbmFibGVkLCBzZXRSZW5kZXJIVE1MRW5hYmxlZF0gPSB1c2VTdGF0ZShnZXRJdGVtKExvY2FsU3RvcmFnZUtleXMuU3FsbGFiSXNSZW5kZXJIdG1sRW5hYmxlZCwgZmFsc2UpKTtcbiAgICBjb25zdCBbc2hvd0NyZWF0ZUFzTW9kYWwsIHNldFNob3dDcmVhdGVBc01vZGFsXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgICBjb25zdCBbY3JlYXRlQXMsIHNldENyZWF0ZUFzXSA9IHVzZVN0YXRlKCcnKTtcbiAgICBjb25zdCBbc2hvd0VtcHR5U3RhdGUsIHNldFNob3dFbXB0eVN0YXRlXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgICBjb25zdCBzcWxFZGl0b3JSZWYgPSB1c2VSZWYobnVsbCk7XG4gICAgY29uc3Qgbm9ydGhQYW5lUmVmID0gdXNlUmVmKG51bGwpO1xuICAgIGNvbnN0IFNxbEZvcm1FeHRlbnNpb24gPSBleHRlbnNpb25zUmVnaXN0cnkuZ2V0KCdzcWxlZGl0b3IuZXh0ZW5zaW9uLmZvcm0nKTtcbiAgICBjb25zdCBzdGFydFF1ZXJ5ID0gdXNlQ2FsbGJhY2soKGN0YXNBcmcgPSBmYWxzZSwgY3Rhc19tZXRob2QgPSBDdGFzRW51bS5UYWJsZSkgPT4ge1xuICAgICAgICBpZiAoIWRhdGFiYXNlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZGlzcGF0Y2gocnVuUXVlcnlGcm9tU3FsRWRpdG9yKGRhdGFiYXNlLCBxdWVyeUVkaXRvciwgZGVmYXVsdFF1ZXJ5TGltaXQsIGN0YXNBcmcgPyBjdGFzIDogJycsIGN0YXNBcmcsIGN0YXNfbWV0aG9kKSk7XG4gICAgICAgIGRpc3BhdGNoKHNldEFjdGl2ZVNvdXRoUGFuZVRhYignUmVzdWx0cycpKTtcbiAgICB9LCBbY3RhcywgZGF0YWJhc2UsIGRlZmF1bHRRdWVyeUxpbWl0LCBkaXNwYXRjaCwgcXVlcnlFZGl0b3JdKTtcbiAgICBjb25zdCBmb3JtYXRDdXJyZW50UXVlcnkgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgICAgIGRpc3BhdGNoKGZvcm1hdFF1ZXJ5KHF1ZXJ5RWRpdG9yKSk7XG4gICAgfSwgW2Rpc3BhdGNoLCBxdWVyeUVkaXRvcl0pO1xuICAgIGNvbnN0IHN0b3BRdWVyeSA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgaWYgKGxhdGVzdFF1ZXJ5ICYmIFsncnVubmluZycsICdwZW5kaW5nJ10uaW5kZXhPZihsYXRlc3RRdWVyeS5zdGF0ZSkgPj0gMCkge1xuICAgICAgICAgICAgZGlzcGF0Y2gocG9zdFN0b3BRdWVyeShsYXRlc3RRdWVyeSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LCBbZGlzcGF0Y2gsIGxhdGVzdFF1ZXJ5XSk7XG4gICAgY29uc3QgcnVuUXVlcnkgPSAoKSA9PiB7XG4gICAgICAgIGlmIChkYXRhYmFzZSkge1xuICAgICAgICAgICAgc3RhcnRRdWVyeSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoYXV0b3J1bikge1xuICAgICAgICAgICAgc2V0QXV0b3J1bihmYWxzZSk7XG4gICAgICAgICAgICBkaXNwYXRjaChxdWVyeUVkaXRvclNldEF1dG9ydW4ocXVlcnlFZGl0b3IsIGZhbHNlKSk7XG4gICAgICAgICAgICBzdGFydFF1ZXJ5KCk7XG4gICAgICAgIH1cbiAgICB9LCBbYXV0b3J1biwgZGlzcGF0Y2gsIHF1ZXJ5RWRpdG9yLCBzdGFydFF1ZXJ5XSk7XG4gICAgLy8gT25lIGxheWVyIG9mIGFic3RyYWN0aW9uIGZvciBlYXN5IHNweWluZyBpbiB1bml0IHRlc3RzXG4gICAgY29uc3QgZ2V0U3FsRWRpdG9ySGVpZ2h0ID0gKCkgPT4gc3FsRWRpdG9yUmVmLmN1cnJlbnRcbiAgICAgICAgPyBzcWxFZGl0b3JSZWYuY3VycmVudC5jbGllbnRIZWlnaHQgLSBTUUxfRURJVE9SX1BBRERJTkcgKiAyXG4gICAgICAgIDogMDtcbiAgICBjb25zdCBnZXRIb3RrZXlDb25maWcgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgICAgIC8vIEdldCB0aGUgdXNlcidzIE9TXG4gICAgICAgIGNvbnN0IHVzZXJPUyA9IGRldGVjdE9TKCk7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ3J1blF1ZXJ5MScsXG4gICAgICAgICAgICAgICAga2V5OiBLZXlib2FyZFNob3J0Y3V0LkN0cmxSLFxuICAgICAgICAgICAgICAgIGRlc2NyOiBLRVlfTUFQW0tleWJvYXJkU2hvcnRjdXQuQ3RybFJdLFxuICAgICAgICAgICAgICAgIGZ1bmM6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHF1ZXJ5RWRpdG9yLnNxbC50cmltKCkgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydFF1ZXJ5KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAncnVuUXVlcnkyJyxcbiAgICAgICAgICAgICAgICBrZXk6IEtleWJvYXJkU2hvcnRjdXQuQ3RybEVudGVyLFxuICAgICAgICAgICAgICAgIGRlc2NyOiBLRVlfTUFQW0tleWJvYXJkU2hvcnRjdXQuQ3RybEVudGVyXSxcbiAgICAgICAgICAgICAgICBmdW5jOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChxdWVyeUVkaXRvci5zcWwudHJpbSgpICE9PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRRdWVyeSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ25ld1RhYicsXG4gICAgICAgICAgICAgICAgLi4uKHVzZXJPUyA9PT0gJ1dpbmRvd3MnXG4gICAgICAgICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBLZXlib2FyZFNob3J0Y3V0LkN0cmxRLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3I6IEtFWV9NQVBbS2V5Ym9hcmRTaG9ydGN1dC5DdHJsUV0sXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IEtleWJvYXJkU2hvcnRjdXQuQ3RybFQsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcjogS0VZX01BUFtLZXlib2FyZFNob3J0Y3V0LkN0cmxUXSxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgZnVuYzogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChhZGROZXdRdWVyeUVkaXRvcigpKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnc3RvcFF1ZXJ5JyxcbiAgICAgICAgICAgICAgICAuLi4odXNlck9TID09PSAnTWFjT1MnXG4gICAgICAgICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBLZXlib2FyZFNob3J0Y3V0LkN0cmxYLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3I6IEtFWV9NQVBbS2V5Ym9hcmRTaG9ydGN1dC5DdHJsWF0sXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IEtleWJvYXJkU2hvcnRjdXQuQ3RybEUsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcjogS0VZX01BUFtLZXlib2FyZFNob3J0Y3V0LkN0cmxFXSxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgZnVuYzogc3RvcFF1ZXJ5LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnZm9ybWF0UXVlcnknLFxuICAgICAgICAgICAgICAgIGtleTogS2V5Ym9hcmRTaG9ydGN1dC5DdHJsU2hpZnRGLFxuICAgICAgICAgICAgICAgIGRlc2NyOiBLRVlfTUFQW0tleWJvYXJkU2hvcnRjdXQuQ3RybFNoaWZ0Rl0sXG4gICAgICAgICAgICAgICAgZnVuYzogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBmb3JtYXRDdXJyZW50UXVlcnkoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXTtcbiAgICB9LCBbZGlzcGF0Y2gsIHF1ZXJ5RWRpdG9yLnNxbCwgc3RhcnRRdWVyeSwgc3RvcFF1ZXJ5LCBmb3JtYXRDdXJyZW50UXVlcnldKTtcbiAgICBjb25zdCBob3RrZXlzID0gdXNlTWVtbygoKSA9PiB7XG4gICAgICAgIC8vIEdldCBhbGwgaG90a2V5cyBpbmNsdWRpbmcgYWNlIGVkaXRvciBob3RrZXlzXG4gICAgICAgIC8vIEdldCB0aGUgdXNlcidzIE9TXG4gICAgICAgIGNvbnN0IHVzZXJPUyA9IGRldGVjdE9TKCk7XG4gICAgICAgIGNvbnN0IGJhc2UgPSBbXG4gICAgICAgICAgICAuLi5nZXRIb3RrZXlDb25maWcoKSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAncnVuUXVlcnkzJyxcbiAgICAgICAgICAgICAgICBrZXk6IEtleWJvYXJkU2hvcnRjdXQuQ3RybFNoaWZ0RW50ZXIsXG4gICAgICAgICAgICAgICAgZGVzY3I6IEtFWV9NQVBbS2V5Ym9hcmRTaG9ydGN1dC5DdHJsU2hpZnRFbnRlcl0sXG4gICAgICAgICAgICAgICAgZnVuYzogKGVkaXRvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWVkaXRvci5nZXRWYWx1ZSgpLnRyaW0oKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlc3Npb24gPSBlZGl0b3IuZ2V0U2Vzc2lvbigpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXJzb3JQb3NpdGlvbiA9IGVkaXRvci5nZXRDdXJzb3JQb3NpdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0b3RhbExpbmUgPSBzZXNzaW9uLmdldExlbmd0aCgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50Um93ID0gZWRpdG9yLmdldEZpcnN0VmlzaWJsZVJvdygpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZW5kID0gZWRpdG9yLmZpbmQoJzsnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrd2FyZHM6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2tpcEN1cnJlbnQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIH0pPy5lbmQ7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZW5kIHx8IGVuZC5yb3cgPCBjdXJzb3JQb3NpdGlvbi5yb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3c6IHRvdGFsTGluZSArIDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsZXQgc3RhcnQgPSBlZGl0b3IuZmluZCgnOycsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2t3YXJkczogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNraXBDdXJyZW50OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB9KT8uZW5kO1xuICAgICAgICAgICAgICAgICAgICBsZXQgY3VycmVudExpbmUgPSBzdGFydD8ucm93O1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWN1cnJlbnRMaW5lIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50TGluZSA+IGN1cnNvclBvc2l0aW9uLnJvdyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgKGN1cnJlbnRMaW5lID09PSBjdXJzb3JQb3NpdGlvbi5yb3cgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoc3RhcnQ/LmNvbHVtbiB8fCAwKSA+IGN1cnNvclBvc2l0aW9uLmNvbHVtbikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRMaW5lID0gMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsZXQgY29udGVudCA9IGN1cnJlbnRMaW5lID09PSBzdGFydD8ucm93XG4gICAgICAgICAgICAgICAgICAgICAgICA/IHNlc3Npb24uZ2V0TGluZShjdXJyZW50TGluZSkuc2xpY2Uoc3RhcnQuY29sdW1uKS50cmltKClcbiAgICAgICAgICAgICAgICAgICAgICAgIDogc2Vzc2lvbi5nZXRMaW5lKGN1cnJlbnRMaW5lKS50cmltKCk7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlICghY29udGVudCAmJiBjdXJyZW50TGluZSA8IHRvdGFsTGluZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudExpbmUgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBzZXNzaW9uLmdldExpbmUoY3VycmVudExpbmUpLnRyaW0oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudExpbmUgIT09IHN0YXJ0Py5yb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0geyByb3c6IGN1cnJlbnRMaW5lLCBjb2x1bW46IDAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlZGl0b3Iuc2VsZWN0aW9uLnNldFNlbGVjdGlvblJhbmdlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBzdGFydCA/PyB7IHJvdzogMCwgY29sdW1uOiAwIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGFydFF1ZXJ5KCk7XG4gICAgICAgICAgICAgICAgICAgIGVkaXRvci5zZWxlY3Rpb24uY2xlYXJTZWxlY3Rpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgZWRpdG9yLm1vdmVDdXJzb3JUb1Bvc2l0aW9uKGN1cnNvclBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgZWRpdG9yLnNjcm9sbFRvUm93KGN1cnJlbnRSb3cpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICBdO1xuICAgICAgICBpZiAodXNlck9TID09PSAnTWFjT1MnKSB7XG4gICAgICAgICAgICBiYXNlLnB1c2goe1xuICAgICAgICAgICAgICAgIG5hbWU6ICdwcmV2aW91c0xpbmUnLFxuICAgICAgICAgICAgICAgIGtleTogS2V5Ym9hcmRTaG9ydGN1dC5DdHJsUCxcbiAgICAgICAgICAgICAgICBkZXNjcjogS0VZX01BUFtLZXlib2FyZFNob3J0Y3V0LkN0cmxQXSxcbiAgICAgICAgICAgICAgICBmdW5jOiBlZGl0b3IgPT4ge1xuICAgICAgICAgICAgICAgICAgICBlZGl0b3IubmF2aWdhdGVVcCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYmFzZTtcbiAgICB9LCBbZ2V0SG90a2V5Q29uZmlnLCBzdGFydFF1ZXJ5XSk7XG4gICAgY29uc3Qgb25CZWZvcmVVbmxvYWQgPSB1c2VFZmZlY3RFdmVudChldmVudCA9PiB7XG4gICAgICAgIGlmIChkYXRhYmFzZT8uZXh0cmFfanNvbj8uY2FuY2VsX3F1ZXJ5X29uX3dpbmRvd3NfdW5sb2FkICYmXG4gICAgICAgICAgICBsYXRlc3RRdWVyeT8uc3RhdGUgPT09ICdydW5uaW5nJykge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHN0b3BRdWVyeSgpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgY29uc3Qgc2hvdWxkTG9hZFF1ZXJ5RWRpdG9yID0gaXNGZWF0dXJlRW5hYmxlZChGZWF0dXJlRmxhZy5TcWxsYWJCYWNrZW5kUGVyc2lzdGVuY2UpICYmXG4gICAgICAgICFxdWVyeUVkaXRvci5sb2FkZWQ7XG4gICAgY29uc3QgbG9hZFF1ZXJ5RWRpdG9yID0gdXNlRWZmZWN0RXZlbnQoKCkgPT4ge1xuICAgICAgICBpZiAoc2hvdWxkTG9hZFF1ZXJ5RWRpdG9yKSB7XG4gICAgICAgICAgICBkaXNwYXRjaChzd2l0Y2hRdWVyeUVkaXRvcihxdWVyeUVkaXRvciwgZGlzcGxheUxpbWl0KSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICAvLyBXZSBuZWVkIHRvIG1lYXN1cmUgdGhlIGhlaWdodCBvZiB0aGUgc3FsIGVkaXRvciBwb3N0IHJlbmRlciB0byBmaWd1cmUgdGhlIGhlaWdodCBvZlxuICAgICAgICAvLyB0aGUgc291dGggcGFuZSBzbyBpdCBnZXRzIHJlbmRlcmVkIHByb3Blcmx5XG4gICAgICAgIHNldEhlaWdodChnZXRTcWxFZGl0b3JIZWlnaHQoKSk7XG4gICAgICAgIGNvbnN0IGhhbmRsZVdpbmRvd1Jlc2l6ZVdpdGhUaHJvdHRsZSA9IHRocm90dGxlKCgpID0+IHNldEhlaWdodChnZXRTcWxFZGl0b3JIZWlnaHQoKSksIFdJTkRPV19SRVNJWkVfVEhST1RUTEVfTVMpO1xuICAgICAgICBpZiAoaXNBY3RpdmUpIHtcbiAgICAgICAgICAgIGxvYWRRdWVyeUVkaXRvcigpO1xuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVdpbmRvd1Jlc2l6ZVdpdGhUaHJvdHRsZSk7XG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgb25CZWZvcmVVbmxvYWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlV2luZG93UmVzaXplV2l0aFRocm90dGxlKTtcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdiZWZvcmV1bmxvYWQnLCBvbkJlZm9yZVVubG9hZCk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIFRPRE86IFJlbW92ZSB1c2VFZmZlY3RFdmVudCBkZXBzIG9uY2UgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L3B1bGwvMjU4ODEgaXMgcmVsZWFzZWRcbiAgICB9LCBbb25CZWZvcmVVbmxvYWQsIGxvYWRRdWVyeUVkaXRvciwgaXNBY3RpdmVdKTtcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoIWRhdGFiYXNlIHx8IGlzRW1wdHkoZGF0YWJhc2UpKSB7XG4gICAgICAgICAgICBzZXRTaG93RW1wdHlTdGF0ZSh0cnVlKTtcbiAgICAgICAgfVxuICAgIH0sIFtkYXRhYmFzZV0pO1xuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIC8vIHNldHVwIGhvdGtleXNcbiAgICAgICAgY29uc3QgaG90a2V5cyA9IGdldEhvdGtleUNvbmZpZygpO1xuICAgICAgICBpZiAoaXNBY3RpdmUpIHtcbiAgICAgICAgICAgIC8vIE1vdXNlVHJhcCBhbHdheXMgb3ZlcnJpZGUgdGhlIHNhbWUga2V5XG4gICAgICAgICAgICAvLyBVbmJpbmQgKHJlc2V0KSB3aWxsIGJlIGNhbGxlZCB3aGVuIEFwcCBjb21wb25lbnQgdW5tb3VudFxuICAgICAgICAgICAgaG90a2V5cy5mb3JFYWNoKGtleUNvbmZpZyA9PiB7XG4gICAgICAgICAgICAgICAgTW91c2V0cmFwLmJpbmQoW2tleUNvbmZpZy5rZXldLCBrZXlDb25maWcuZnVuYyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sIFtnZXRIb3RrZXlDb25maWcsIGxhdGVzdFF1ZXJ5LCBpc0FjdGl2ZV0pO1xuICAgIGNvbnN0IG9uUmVzaXplU3RhcnQgPSAoKSA9PiB7XG4gICAgICAgIC8vIFNldCB0aGUgaGVpZ2h0cyBvbiB0aGUgYWNlIGVkaXRvciBhbmQgdGhlIGFjZSBjb250ZW50IGFyZWEgYWZ0ZXIgZHJhZyBzdGFydHNcbiAgICAgICAgLy8gdG8gc21vb3RoIG91dCB0aGUgdmlzdWFsIHRyYW5zaXRpb24gdG8gdGhlIG5ldyBoZWlnaHRzIHdoZW4gZHJhZyBlbmRzXG4gICAgICAgIGNvbnN0IGVkaXRvckVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYWNlX2NvbnRlbnQnKVswXTtcbiAgICAgICAgaWYgKGVkaXRvckVsKSB7XG4gICAgICAgICAgICBlZGl0b3JFbC5zdHlsZS5oZWlnaHQgPSAnMTAwJSc7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IG9uUmVzaXplRW5kID0gKFtub3J0aFBlcmNlbnQsIHNvdXRoUGVyY2VudF0pID0+IHtcbiAgICAgICAgc2V0Tm9ydGhQZXJjZW50KG5vcnRoUGVyY2VudCk7XG4gICAgICAgIHNldFNvdXRoUGVyY2VudChzb3V0aFBlcmNlbnQpO1xuICAgICAgICBpZiAobm9ydGhQYW5lUmVmLmN1cnJlbnQ/LmNsaWVudEhlaWdodCkge1xuICAgICAgICAgICAgZGlzcGF0Y2gocGVyc2lzdEVkaXRvckhlaWdodChxdWVyeUVkaXRvciwgbm9ydGhQZXJjZW50LCBzb3V0aFBlcmNlbnQpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3Qgc2V0UXVlcnlFZGl0b3JBbmRTYXZlU3FsID0gdXNlQ2FsbGJhY2soc3FsID0+IHtcbiAgICAgICAgZGlzcGF0Y2gocXVlcnlFZGl0b3JTZXRBbmRTYXZlU3FsKHF1ZXJ5RWRpdG9yLCBzcWwpKTtcbiAgICB9LCBbZGlzcGF0Y2gsIHF1ZXJ5RWRpdG9yXSk7XG4gICAgY29uc3Qgc2V0UXVlcnlFZGl0b3JBbmRTYXZlU3FsV2l0aERlYm91bmNlID0gdXNlTWVtbygoKSA9PiBkZWJvdW5jZShzZXRRdWVyeUVkaXRvckFuZFNhdmVTcWwsIFNFVF9RVUVSWV9FRElUT1JfU1FMX0RFQk9VTkNFX01TKSwgW3NldFF1ZXJ5RWRpdG9yQW5kU2F2ZVNxbF0pO1xuICAgIGNvbnN0IG9uU3FsQ2hhbmdlZCA9IHVzZUVmZmVjdEV2ZW50KChzcWwpID0+IHtcbiAgICAgICAgZGlzcGF0Y2gocXVlcnlFZGl0b3JTZXRTcWwocXVlcnlFZGl0b3IsIHNxbCkpO1xuICAgIH0pO1xuICAgIC8vIFJldHVybiB0aGUgaGVpZ2h0cyBmb3IgdGhlIGFjZSBlZGl0b3IgYW5kIHRoZSBzb3V0aCBwYW5lIGFzIGFuIG9iamVjdFxuICAgIC8vIGdpdmVuIHRoZSBoZWlnaHQgb2YgdGhlIHNxbCBlZGl0b3IsIG5vcnRoIHBhbmUgcGVyY2VudCBhbmQgc291dGggcGFuZSBwZXJjZW50LlxuICAgIGNvbnN0IGdldEFjZUVkaXRvckFuZFNvdXRoUGFuZUhlaWdodHMgPSAoaGVpZ2h0LCBub3J0aFBlcmNlbnQsIHNvdXRoUGVyY2VudCkgPT4gKHtcbiAgICAgICAgYWNlRWRpdG9ySGVpZ2h0OiAoaGVpZ2h0ICogbm9ydGhQZXJjZW50KSAvICh0aGVtZS5ncmlkVW5pdCAqIDI1KSAtXG4gICAgICAgICAgICAoU1FMX0VESVRPUl9HVVRURVJfSEVJR0hUIC8gMiArIFNRTF9FRElUT1JfR1VUVEVSX01BUkdJTikgLVxuICAgICAgICAgICAgU1FMX1RPT0xCQVJfSEVJR0hULFxuICAgICAgICBzb3V0aFBhbmVIZWlnaHQ6IChoZWlnaHQgKiBzb3V0aFBlcmNlbnQpIC8gKHRoZW1lLmdyaWRVbml0ICogMjUpIC1cbiAgICAgICAgICAgIChTUUxfRURJVE9SX0dVVFRFUl9IRUlHSFQgLyAyICsgU1FMX0VESVRPUl9HVVRURVJfTUFSR0lOKSxcbiAgICB9KTtcbiAgICBjb25zdCBnZXRRdWVyeUNvc3RFc3RpbWF0ZSA9ICgpID0+IHtcbiAgICAgICAgaWYgKGRhdGFiYXNlKSB7XG4gICAgICAgICAgICBkaXNwYXRjaChlc3RpbWF0ZVF1ZXJ5Q29zdChxdWVyeUVkaXRvcikpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBoYW5kbGVUb2dnbGVBdXRvY29tcGxldGVFbmFibGVkID0gKCkgPT4ge1xuICAgICAgICBzZXRJdGVtKExvY2FsU3RvcmFnZUtleXMuU3FsbGFiSXNBdXRvY29tcGxldGVFbmFibGVkLCAhYXV0b2NvbXBsZXRlRW5hYmxlZCk7XG4gICAgICAgIHNldEF1dG9jb21wbGV0ZUVuYWJsZWQoIWF1dG9jb21wbGV0ZUVuYWJsZWQpO1xuICAgIH07XG4gICAgY29uc3QgaGFuZGxlVG9nZ2xlUmVuZGVySFRNTEVuYWJsZWQgPSAoKSA9PiB7XG4gICAgICAgIHNldEl0ZW0oTG9jYWxTdG9yYWdlS2V5cy5TcWxsYWJJc1JlbmRlckh0bWxFbmFibGVkLCAhcmVuZGVySFRNTEVuYWJsZWQpO1xuICAgICAgICBzZXRSZW5kZXJIVE1MRW5hYmxlZCghcmVuZGVySFRNTEVuYWJsZWQpO1xuICAgIH07XG4gICAgY29uc3QgY3JlYXRlVGFibGVBcyA9ICgpID0+IHtcbiAgICAgICAgc3RhcnRRdWVyeSh0cnVlLCBDdGFzRW51bS5UYWJsZSk7XG4gICAgICAgIHNldFNob3dDcmVhdGVBc01vZGFsKGZhbHNlKTtcbiAgICAgICAgc2V0Q3RhcygnJyk7XG4gICAgfTtcbiAgICBjb25zdCBjcmVhdGVWaWV3QXMgPSAoKSA9PiB7XG4gICAgICAgIHN0YXJ0UXVlcnkodHJ1ZSwgQ3Rhc0VudW0uVmlldyk7XG4gICAgICAgIHNldFNob3dDcmVhdGVBc01vZGFsKGZhbHNlKTtcbiAgICAgICAgc2V0Q3RhcygnJyk7XG4gICAgfTtcbiAgICBjb25zdCBjdGFzQ2hhbmdlZCA9IChldmVudCkgPT4ge1xuICAgICAgICBzZXRDdGFzKGV2ZW50LnRhcmdldC52YWx1ZSk7XG4gICAgfTtcbiAgICBjb25zdCByZW5kZXJEcm9wZG93biA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgcWUgPSBxdWVyeUVkaXRvcjtcbiAgICAgICAgY29uc3Qgc3VjY2Vzc2Z1bCA9IGxhdGVzdFF1ZXJ5Py5zdGF0ZSA9PT0gJ3N1Y2Nlc3MnO1xuICAgICAgICBjb25zdCBzY2hlZHVsZVRvb2xUaXAgPSBzdWNjZXNzZnVsXG4gICAgICAgICAgICA/IHQoJ1NjaGVkdWxlIHRoZSBxdWVyeSBwZXJpb2RpY2FsbHknKVxuICAgICAgICAgICAgOiB0KCdZb3UgbXVzdCBydW4gdGhlIHF1ZXJ5IHN1Y2Nlc3NmdWxseSBmaXJzdCcpO1xuICAgICAgICByZXR1cm4gKDxNZW51IGNzcz17eyB3aWR0aDogdGhlbWUuZ3JpZFVuaXQgKiA1MCB9fT5cbiAgICAgICAgPE1lbnUuSXRlbSBjc3M9e3sgZGlzcGxheTogJ2ZsZXgnLCBqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWJldHdlZW4nIH19PlxuICAgICAgICAgIHsnICd9XG4gICAgICAgICAgPHNwYW4+e3QoJ1JlbmRlciBIVE1MJyl9PC9zcGFuPnsnICd9XG4gICAgICAgICAgPEFudGRTd2l0Y2ggY2hlY2tlZD17cmVuZGVySFRNTEVuYWJsZWR9IG9uQ2hhbmdlPXtoYW5kbGVUb2dnbGVSZW5kZXJIVE1MRW5hYmxlZH0vPnsnICd9XG4gICAgICAgIDwvTWVudS5JdGVtPlxuICAgICAgICA8TWVudS5JdGVtIGNzcz17eyBkaXNwbGF5OiAnZmxleCcsIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYmV0d2VlbicgfX0+XG4gICAgICAgICAgeycgJ31cbiAgICAgICAgICA8c3Bhbj57dCgnQXV0b2NvbXBsZXRlJyl9PC9zcGFuPnsnICd9XG4gICAgICAgICAgPEFudGRTd2l0Y2ggY2hlY2tlZD17YXV0b2NvbXBsZXRlRW5hYmxlZH0gb25DaGFuZ2U9e2hhbmRsZVRvZ2dsZUF1dG9jb21wbGV0ZUVuYWJsZWR9Lz57JyAnfVxuICAgICAgICA8L01lbnUuSXRlbT5cbiAgICAgICAge2lzRmVhdHVyZUVuYWJsZWQoRmVhdHVyZUZsYWcuRW5hYmxlVGVtcGxhdGVQcm9jZXNzaW5nKSAmJiAoPE1lbnUuSXRlbT5cbiAgICAgICAgICAgIDxUZW1wbGF0ZVBhcmFtc0VkaXRvciBsYW5ndWFnZT1cImpzb25cIiBvbkNoYW5nZT17cGFyYW1zID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2gocXVlcnlFZGl0b3JTZXRUZW1wbGF0ZVBhcmFtcyhxZSwgcGFyYW1zKSk7XG4gICAgICAgICAgICAgICAgfX0gcXVlcnlFZGl0b3JJZD17cWUuaWR9Lz5cbiAgICAgICAgICA8L01lbnUuSXRlbT4pfVxuICAgICAgICA8TWVudS5JdGVtIG9uQ2xpY2s9e2Zvcm1hdEN1cnJlbnRRdWVyeX0+e3QoJ0Zvcm1hdCBTUUwnKX08L01lbnUuSXRlbT5cbiAgICAgICAgeyFpc0VtcHR5KHNjaGVkdWxlZFF1ZXJpZXNDb25mKSAmJiAoPE1lbnUuSXRlbT5cbiAgICAgICAgICAgIDxTY2hlZHVsZVF1ZXJ5QnV0dG9uIGRlZmF1bHRMYWJlbD17cWUubmFtZX0gc3FsPXtxZS5zcWx9IG9uU2NoZWR1bGU9eyhxdWVyeSkgPT4gZGlzcGF0Y2goc2NoZWR1bGVRdWVyeShxdWVyeSkpfSBzY2hlbWE9e3FlLnNjaGVtYX0gZGJJZD17cWUuZGJJZH0gc2NoZWR1bGVRdWVyeVdhcm5pbmc9e3NjaGVkdWxlUXVlcnlXYXJuaW5nfSB0b29sdGlwPXtzY2hlZHVsZVRvb2xUaXB9IGRpc2FibGVkPXshc3VjY2Vzc2Z1bH0vPlxuICAgICAgICAgIDwvTWVudS5JdGVtPil9XG4gICAgICAgIDxNZW51Lkl0ZW0+XG4gICAgICAgICAgPEtleWJvYXJkU2hvcnRjdXRCdXR0b24+XG4gICAgICAgICAgICB7dCgnS2V5Ym9hcmQgc2hvcnRjdXRzJyl9XG4gICAgICAgICAgPC9LZXlib2FyZFNob3J0Y3V0QnV0dG9uPlxuICAgICAgICA8L01lbnUuSXRlbT5cbiAgICAgIDwvTWVudT4pO1xuICAgIH07XG4gICAgY29uc3Qgb25TYXZlUXVlcnkgPSBhc3luYyAocXVlcnksIGNsaWVudElkKSA9PiB7XG4gICAgICAgIGNvbnN0IHNhdmVkUXVlcnkgPSBhd2FpdCBkaXNwYXRjaChzYXZlUXVlcnkocXVlcnksIGNsaWVudElkKSk7XG4gICAgICAgIGRpc3BhdGNoKGFkZFNhdmVkUXVlcnlUb1RhYlN0YXRlKHF1ZXJ5RWRpdG9yLCBzYXZlZFF1ZXJ5KSk7XG4gICAgfTtcbiAgICBjb25zdCByZW5kZXJFZGl0b3JCb3R0b21CYXIgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgYWxsb3dfY3RhczogYWxsb3dDVEFTLCBhbGxvd19jdmFzOiBhbGxvd0NWQVMgfSA9IGRhdGFiYXNlIHx8IHt9O1xuICAgICAgICBjb25zdCBzaG93TWVudSA9IGFsbG93Q1RBUyB8fCBhbGxvd0NWQVM7XG4gICAgICAgIGNvbnN0IHJ1bk1lbnVCdG4gPSAoPE1lbnU+XG4gICAgICAgIHthbGxvd0NUQVMgJiYgKDxNZW51Lkl0ZW0gb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzZXRTaG93Q3JlYXRlQXNNb2RhbCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0Q3JlYXRlQXMoQ3Rhc0VudW0uVGFibGUpO1xuICAgICAgICAgICAgICAgIH19IGtleT1cIjFcIj5cbiAgICAgICAgICAgIHt0KCdDUkVBVEUgVEFCTEUgQVMnKX1cbiAgICAgICAgICA8L01lbnUuSXRlbT4pfVxuICAgICAgICB7YWxsb3dDVkFTICYmICg8TWVudS5JdGVtIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc2V0U2hvd0NyZWF0ZUFzTW9kYWwodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHNldENyZWF0ZUFzKEN0YXNFbnVtLlZpZXcpO1xuICAgICAgICAgICAgICAgIH19IGtleT1cIjJcIj5cbiAgICAgICAgICAgIHt0KCdDUkVBVEUgVklFVyBBUycpfVxuICAgICAgICAgIDwvTWVudS5JdGVtPil9XG4gICAgICA8L01lbnU+KTtcbiAgICAgICAgcmV0dXJuICg8U3R5bGVkVG9vbGJhciBjbGFzc05hbWU9XCJzcWwtdG9vbGJhclwiIGlkPVwianMtc3FsLXRvb2xiYXJcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJsZWZ0SXRlbXNcIj5cbiAgICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgIDxSdW5RdWVyeUFjdGlvbkJ1dHRvbiBhbGxvd0FzeW5jPXtkYXRhYmFzZT8uYWxsb3dfcnVuX2FzeW5jID09PSB0cnVlfSBxdWVyeUVkaXRvcklkPXtxdWVyeUVkaXRvci5pZH0gcXVlcnlTdGF0ZT17bGF0ZXN0UXVlcnk/LnN0YXRlfSBydW5RdWVyeT17cnVuUXVlcnl9IHN0b3BRdWVyeT17c3RvcFF1ZXJ5fSBvdmVybGF5Q3JlYXRlQXNNZW51PXtzaG93TWVudSA/IHJ1bk1lbnVCdG4gOiBudWxsfS8+XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIHtpc0ZlYXR1cmVFbmFibGVkKEZlYXR1cmVGbGFnLkVzdGltYXRlUXVlcnlDb3N0KSAmJlxuICAgICAgICAgICAgICAgIGRhdGFiYXNlPy5hbGxvd3NfY29zdF9lc3RpbWF0ZSAmJiAoPHNwYW4+XG4gICAgICAgICAgICAgICAgPEVzdGltYXRlUXVlcnlDb3N0QnV0dG9uIGdldEVzdGltYXRlPXtnZXRRdWVyeUNvc3RFc3RpbWF0ZX0gcXVlcnlFZGl0b3JJZD17cXVlcnlFZGl0b3IuaWR9IHRvb2x0aXA9e3QoJ0VzdGltYXRlIHRoZSBjb3N0IGJlZm9yZSBydW5uaW5nIGEgcXVlcnknKX0vPlxuICAgICAgICAgICAgICA8L3NwYW4+KX1cbiAgICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgIDxRdWVyeUxpbWl0U2VsZWN0IHF1ZXJ5RWRpdG9ySWQ9e3F1ZXJ5RWRpdG9yLmlkfSBtYXhSb3c9e21heFJvd30gZGVmYXVsdFF1ZXJ5TGltaXQ9e2RlZmF1bHRRdWVyeUxpbWl0fS8+XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIHtsYXRlc3RRdWVyeSAmJiAoPFRpbWVyIHN0YXJ0VGltZT17bGF0ZXN0UXVlcnkuc3RhcnREdHRtfSBlbmRUaW1lPXtsYXRlc3RRdWVyeS5lbmREdHRtfSBzdGF0dXM9e1NUQVRFX1RZUEVfTUFQW2xhdGVzdFF1ZXJ5LnN0YXRlXX0gaXNSdW5uaW5nPXtsYXRlc3RRdWVyeS5zdGF0ZSA9PT0gJ3J1bm5pbmcnfS8+KX1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicmlnaHRJdGVtc1wiPlxuICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgPFNhdmVRdWVyeSBxdWVyeUVkaXRvcklkPXtxdWVyeUVkaXRvci5pZH0gY29sdW1ucz17bGF0ZXN0UXVlcnk/LnJlc3VsdHM/LmNvbHVtbnMgfHwgW119IG9uU2F2ZT17b25TYXZlUXVlcnl9IG9uVXBkYXRlPXsocXVlcnksIHJlbW90ZUlkKSA9PiBkaXNwYXRjaCh1cGRhdGVTYXZlZFF1ZXJ5KHF1ZXJ5LCByZW1vdGVJZCkpfSBzYXZlUXVlcnlXYXJuaW5nPXtzYXZlUXVlcnlXYXJuaW5nfSBkYXRhYmFzZT17ZGF0YWJhc2V9Lz5cbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICA8U2hhcmVTcWxMYWJRdWVyeSBxdWVyeUVkaXRvcklkPXtxdWVyeUVkaXRvci5pZH0vPlxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8QW50ZERyb3Bkb3duIG92ZXJsYXk9e3JlbmRlckRyb3Bkb3duKCl9IHRyaWdnZXI9e1snY2xpY2snXX0+XG4gICAgICAgICAgICA8SWNvbnMuTW9yZUhvcml6IGljb25Db2xvcj17dGhlbWUuY29sb3JzLmdyYXlzY2FsZS5iYXNlfS8+XG4gICAgICAgICAgPC9BbnRkRHJvcGRvd24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9TdHlsZWRUb29sYmFyPik7XG4gICAgfTtcbiAgICBjb25zdCBoYW5kbGVDdXJzb3JQb3NpdGlvbkNoYW5nZSA9IChuZXdQb3NpdGlvbikgPT4ge1xuICAgICAgICBkaXNwYXRjaChxdWVyeUVkaXRvclNldEN1cnNvclBvc2l0aW9uKHF1ZXJ5RWRpdG9yLCBuZXdQb3NpdGlvbikpO1xuICAgIH07XG4gICAgY29uc3QgcXVlcnlQYW5lID0gKCkgPT4ge1xuICAgICAgICBjb25zdCB7IGFjZUVkaXRvckhlaWdodCwgc291dGhQYW5lSGVpZ2h0IH0gPSBnZXRBY2VFZGl0b3JBbmRTb3V0aFBhbmVIZWlnaHRzKGhlaWdodCwgbm9ydGhQZXJjZW50LCBzb3V0aFBlcmNlbnQpO1xuICAgICAgICByZXR1cm4gKDxTcGxpdCBleHBhbmRUb01pbiBjbGFzc05hbWU9XCJxdWVyeVBhbmVcIiBzaXplcz17W25vcnRoUGVyY2VudCwgc291dGhQZXJjZW50XX0gZWxlbWVudFN0eWxlPXtlbGVtZW50U3R5bGV9IG1pblNpemU9ezIwMH0gZGlyZWN0aW9uPVwidmVydGljYWxcIiBndXR0ZXJTaXplPXtTUUxfRURJVE9SX0dVVFRFUl9IRUlHSFR9IG9uRHJhZ1N0YXJ0PXtvblJlc2l6ZVN0YXJ0fSBvbkRyYWdFbmQ9e29uUmVzaXplRW5kfT5cbiAgICAgICAgPGRpdiByZWY9e25vcnRoUGFuZVJlZn0gY2xhc3NOYW1lPVwibm9ydGgtcGFuZVwiPlxuICAgICAgICAgIHtTcWxGb3JtRXh0ZW5zaW9uICYmICg8U3FsRm9ybUV4dGVuc2lvbiBxdWVyeUVkaXRvcklkPXtxdWVyeUVkaXRvci5pZH0gc2V0UXVlcnlFZGl0b3JBbmRTYXZlU3FsV2l0aERlYm91bmNlPXtzZXRRdWVyeUVkaXRvckFuZFNhdmVTcWxXaXRoRGVib3VuY2V9IHN0YXJ0UXVlcnk9e3N0YXJ0UXVlcnl9Lz4pfVxuICAgICAgICAgIDxBY2VFZGl0b3JXcmFwcGVyIGF1dG9jb21wbGV0ZT17YXV0b2NvbXBsZXRlRW5hYmxlZH0gb25CbHVyPXtvblNxbENoYW5nZWR9IG9uQ2hhbmdlPXtvblNxbENoYW5nZWR9IHF1ZXJ5RWRpdG9ySWQ9e3F1ZXJ5RWRpdG9yLmlkfSBvbkN1cnNvclBvc2l0aW9uQ2hhbmdlPXtoYW5kbGVDdXJzb3JQb3NpdGlvbkNoYW5nZX0gaGVpZ2h0PXtgJHthY2VFZGl0b3JIZWlnaHR9cHhgfSBob3RrZXlzPXtob3RrZXlzfS8+XG4gICAgICAgICAge3JlbmRlckVkaXRvckJvdHRvbUJhcigpfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPFNvdXRoUGFuZSBxdWVyeUVkaXRvcklkPXtxdWVyeUVkaXRvci5pZH0gbGF0ZXN0UXVlcnlJZD17bGF0ZXN0UXVlcnk/LmlkfSBoZWlnaHQ9e3NvdXRoUGFuZUhlaWdodH0gZGlzcGxheUxpbWl0PXtkaXNwbGF5TGltaXR9IGRlZmF1bHRRdWVyeUxpbWl0PXtkZWZhdWx0UXVlcnlMaW1pdH0vPlxuICAgICAgPC9TcGxpdD4pO1xuICAgIH07XG4gICAgY29uc3QgY3JlYXRlVmlld01vZGFsVGl0bGUgPSBjcmVhdGVBcyA9PT0gQ3Rhc0VudW0uVmlldyA/ICdDUkVBVEUgVklFVyBBUycgOiAnQ1JFQVRFIFRBQkxFIEFTJztcbiAgICBjb25zdCBjcmVhdGVNb2RhbFBsYWNlSG9sZGVyID0gY3JlYXRlQXMgPT09IEN0YXNFbnVtLlZpZXdcbiAgICAgICAgPyB0KCdTcGVjaWZ5IG5hbWUgdG8gQ1JFQVRFIFZJRVcgQVMgc2NoZW1hIGluOiBwdWJsaWMnKVxuICAgICAgICA6IHQoJ1NwZWNpZnkgbmFtZSB0byBDUkVBVEUgVEFCTEUgQVMgc2NoZW1hIGluOiBwdWJsaWMnKTtcbiAgICBjb25zdCBsZWZ0QmFyU3RhdGVDbGFzcyA9IGhpZGVMZWZ0QmFyXG4gICAgICAgID8gJ3NjaGVtYVBhbmUtZXhpdC1kb25lJ1xuICAgICAgICA6ICdzY2hlbWFQYW5lLWVudGVyLWRvbmUnO1xuICAgIHJldHVybiAoPFN0eWxlZFNxbEVkaXRvciByZWY9e3NxbEVkaXRvclJlZn0gY2xhc3NOYW1lPVwiU3FsRWRpdG9yXCI+XG4gICAgICA8Q1NTVHJhbnNpdGlvbiBjbGFzc05hbWVzPVwic2NoZW1hUGFuZVwiIGluPXshaGlkZUxlZnRCYXJ9IHRpbWVvdXQ9ezMwMH0+XG4gICAgICAgIDxSZXNpemFibGVTaWRlYmFyIGlkPXtgc3FsbGFiOiR7cXVlcnlFZGl0b3IuaWR9YH0gbWluV2lkdGg9e1NRTF9FRElUT1JfTEVGVEJBUl9XSURUSH0gaW5pdGlhbFdpZHRoPXtTUUxfRURJVE9SX0xFRlRCQVJfV0lEVEh9IGVuYWJsZT17IWhpZGVMZWZ0QmFyfT5cbiAgICAgICAgICB7YWRqdXN0ZWRXaWR0aCA9PiAoPFN0eWxlZFNpZGViYXIgY2xhc3NOYW1lPXtgc2NoZW1hUGFuZSAke2xlZnRCYXJTdGF0ZUNsYXNzfWB9IHdpZHRoPXthZGp1c3RlZFdpZHRofSBoaWRlPXtoaWRlTGVmdEJhcn0+XG4gICAgICAgICAgICAgIDxTcWxFZGl0b3JMZWZ0QmFyIGRhdGFiYXNlPXtkYXRhYmFzZX0gcXVlcnlFZGl0b3JJZD17cXVlcnlFZGl0b3IuaWR9IHNldEVtcHR5U3RhdGU9e2Jvb2wgPT4gc2V0U2hvd0VtcHR5U3RhdGUoYm9vbCl9Lz5cbiAgICAgICAgICAgIDwvU3R5bGVkU2lkZWJhcj4pfVxuICAgICAgICA8L1Jlc2l6YWJsZVNpZGViYXI+XG4gICAgICA8L0NTU1RyYW5zaXRpb24+XG4gICAgICB7c2hvdWxkTG9hZFF1ZXJ5RWRpdG9yID8gKDxkaXYgZGF0YS10ZXN0PVwic3FsRWRpdG9yLWxvYWRpbmdcIiBjc3M9e2NzcyBgXG4gICAgICAgICAgICBmbGV4OiAxO1xuICAgICAgICAgICAgcGFkZGluZzogJHt0aGVtZS5ncmlkVW5pdCAqIDR9cHg7XG4gICAgICAgICAgYH0+XG4gICAgICAgICAgPFNrZWxldG9uIGFjdGl2ZS8+XG4gICAgICAgIDwvZGl2PikgOiBzaG93RW1wdHlTdGF0ZSA/ICg8RW1wdHlTdGF0ZUJpZyBpbWFnZT1cInZlY3Rvci5zdmdcIiB0aXRsZT17dCgnU2VsZWN0IGEgZGF0YWJhc2UgdG8gd3JpdGUgYSBxdWVyeScpfSBkZXNjcmlwdGlvbj17dCgnQ2hvb3NlIG9uZSBvZiB0aGUgYXZhaWxhYmxlIGRhdGFiYXNlcyBmcm9tIHRoZSBwYW5lbCBvbiB0aGUgbGVmdC4nKX0vPikgOiAocXVlcnlQYW5lKCkpfVxuICAgICAgPE1vZGFsIHNob3c9e3Nob3dDcmVhdGVBc01vZGFsfSB0aXRsZT17dChjcmVhdGVWaWV3TW9kYWxUaXRsZSl9IG9uSGlkZT17KCkgPT4gc2V0U2hvd0NyZWF0ZUFzTW9kYWwoZmFsc2UpfSBmb290ZXI9ezw+XG4gICAgICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9eygpID0+IHNldFNob3dDcmVhdGVBc01vZGFsKGZhbHNlKX0+XG4gICAgICAgICAgICAgIHt0KCdDYW5jZWwnKX1cbiAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAge2NyZWF0ZUFzID09PSBDdGFzRW51bS5UYWJsZSAmJiAoPEJ1dHRvbiBidXR0b25TdHlsZT1cInByaW1hcnlcIiBkaXNhYmxlZD17Y3Rhcy5sZW5ndGggPT09IDB9IG9uQ2xpY2s9e2NyZWF0ZVRhYmxlQXN9PlxuICAgICAgICAgICAgICAgIHt0KCdDcmVhdGUnKX1cbiAgICAgICAgICAgICAgPC9CdXR0b24+KX1cbiAgICAgICAgICAgIHtjcmVhdGVBcyA9PT0gQ3Rhc0VudW0uVmlldyAmJiAoPEJ1dHRvbiBidXR0b25TdHlsZT1cInByaW1hcnlcIiBkaXNhYmxlZD17Y3Rhcy5sZW5ndGggPT09IDB9IG9uQ2xpY2s9e2NyZWF0ZVZpZXdBc30+XG4gICAgICAgICAgICAgICAge3QoJ0NyZWF0ZScpfVxuICAgICAgICAgICAgICA8L0J1dHRvbj4pfVxuICAgICAgICAgIDwvPn0+XG4gICAgICAgIDxzcGFuPnt0KCdOYW1lJyl9PC9zcGFuPlxuICAgICAgICA8SW5wdXQgcGxhY2Vob2xkZXI9e2NyZWF0ZU1vZGFsUGxhY2VIb2xkZXJ9IG9uQ2hhbmdlPXtjdGFzQ2hhbmdlZH0vPlxuICAgICAgPC9Nb2RhbD5cbiAgICA8L1N0eWxlZFNxbEVkaXRvcj4pO1xufTtcbmV4cG9ydCBkZWZhdWx0IFNxbEVkaXRvcjtcbiJdfQ== */\", toString: _EMOTION_STRINGIFIED_CSS_ERROR__ };\nconst SqlEditor = ({ queryEditor, defaultQueryLimit, maxRow, displayLimit, saveQueryWarning, scheduleQueryWarning }) => {\n  const theme = useTheme();\n  const dispatch = useDispatch();\n  const { database, latestQuery, hideLeftBar, currentQueryEditorId } = useSelector(({ sqlLab: { unsavedQueryEditor, databases, queries, tabHistory } }) => {\n    let { dbId, latestQueryId, hideLeftBar } = queryEditor;\n    if ((unsavedQueryEditor == null ? void 0 : unsavedQueryEditor.id) === queryEditor.id) {\n      dbId = unsavedQueryEditor.dbId || dbId;\n      latestQueryId = unsavedQueryEditor.latestQueryId || latestQueryId;\n      hideLeftBar = _isBoolean(unsavedQueryEditor.hideLeftBar) ?\n      unsavedQueryEditor.hideLeftBar :\n      hideLeftBar;\n    }\n    return {\n      database: databases[dbId || ''],\n      latestQuery: queries[latestQueryId || ''],\n      hideLeftBar,\n      currentQueryEditorId: tabHistory.slice(-1)[0]\n    };\n  }, shallowEqual);\n  const isActive = currentQueryEditorId === queryEditor.id;\n  const [height, setHeight] = useState(0);\n  const [autorun, setAutorun] = useState(queryEditor.autorun);\n  const [ctas, setCtas] = useState('');\n  const [northPercent, setNorthPercent] = useState(queryEditor.northPercent || INITIAL_NORTH_PERCENT);\n  const [southPercent, setSouthPercent] = useState(queryEditor.southPercent || INITIAL_SOUTH_PERCENT);\n  const [autocompleteEnabled, setAutocompleteEnabled] = useState(getItem(LocalStorageKeys.SqllabIsAutocompleteEnabled, true));\n  const [renderHTMLEnabled, setRenderHTMLEnabled] = useState(getItem(LocalStorageKeys.SqllabIsRenderHtmlEnabled, false));\n  const [showCreateAsModal, setShowCreateAsModal] = useState(false);\n  const [createAs, setCreateAs] = useState('');\n  const [showEmptyState, setShowEmptyState] = useState(false);\n  const sqlEditorRef = useRef(null);\n  const northPaneRef = useRef(null);\n  const SqlFormExtension = extensionsRegistry.get('sqleditor.extension.form');\n  const startQuery = useCallback((ctasArg = false, ctas_method = CtasEnum.Table) => {\n    if (!database) {\n      return;\n    }\n    dispatch(runQueryFromSqlEditor(database, queryEditor, defaultQueryLimit, ctasArg ? ctas : '', ctasArg, ctas_method));\n    dispatch(setActiveSouthPaneTab('Results'));\n  }, [ctas, database, defaultQueryLimit, dispatch, queryEditor]);\n  const formatCurrentQuery = useCallback(() => {\n    dispatch(formatQuery(queryEditor));\n  }, [dispatch, queryEditor]);\n  const stopQuery = useCallback(() => {\n    if (latestQuery && ['running', 'pending'].indexOf(latestQuery.state) >= 0) {\n      dispatch(postStopQuery(latestQuery));\n    }\n    return false;\n  }, [dispatch, latestQuery]);\n  const runQuery = () => {\n    if (database) {\n      startQuery();\n    }\n  };\n  useEffect(() => {\n    if (autorun) {\n      setAutorun(false);\n      dispatch(queryEditorSetAutorun(queryEditor, false));\n      startQuery();\n    }\n  }, [autorun, dispatch, queryEditor, startQuery]);\n  // One layer of abstraction for easy spying in unit tests\n  const getSqlEditorHeight = () => sqlEditorRef.current ?\n  sqlEditorRef.current.clientHeight - SQL_EDITOR_PADDING * 2 :\n  0;\n  const getHotkeyConfig = useCallback(() => {\n    // Get the user's OS\n    const userOS = detectOS();\n    return [\n    {\n      name: 'runQuery1',\n      key: KeyboardShortcut.CtrlR,\n      descr: KEY_MAP[KeyboardShortcut.CtrlR],\n      func: () => {\n        if (queryEditor.sql.trim() !== '') {\n          startQuery();\n        }\n      }\n    },\n    {\n      name: 'runQuery2',\n      key: KeyboardShortcut.CtrlEnter,\n      descr: KEY_MAP[KeyboardShortcut.CtrlEnter],\n      func: () => {\n        if (queryEditor.sql.trim() !== '') {\n          startQuery();\n        }\n      }\n    },\n    {\n      name: 'newTab',\n      ...(userOS === 'Windows' ?\n      {\n        key: KeyboardShortcut.CtrlQ,\n        descr: KEY_MAP[KeyboardShortcut.CtrlQ]\n      } :\n      {\n        key: KeyboardShortcut.CtrlT,\n        descr: KEY_MAP[KeyboardShortcut.CtrlT]\n      }),\n      func: () => {\n        dispatch(addNewQueryEditor());\n      }\n    },\n    {\n      name: 'stopQuery',\n      ...(userOS === 'MacOS' ?\n      {\n        key: KeyboardShortcut.CtrlX,\n        descr: KEY_MAP[KeyboardShortcut.CtrlX]\n      } :\n      {\n        key: KeyboardShortcut.CtrlE,\n        descr: KEY_MAP[KeyboardShortcut.CtrlE]\n      }),\n      func: stopQuery\n    },\n    {\n      name: 'formatQuery',\n      key: KeyboardShortcut.CtrlShiftF,\n      descr: KEY_MAP[KeyboardShortcut.CtrlShiftF],\n      func: () => {\n        formatCurrentQuery();\n      }\n    }];\n\n  }, [dispatch, queryEditor.sql, startQuery, stopQuery, formatCurrentQuery]);\n  const hotkeys = useMemo(() => {\n    // Get all hotkeys including ace editor hotkeys\n    // Get the user's OS\n    const userOS = detectOS();\n    const base = [\n    ...getHotkeyConfig(),\n    {\n      name: 'runQuery3',\n      key: KeyboardShortcut.CtrlShiftEnter,\n      descr: KEY_MAP[KeyboardShortcut.CtrlShiftEnter],\n      func: (editor) => {var _editor$find, _editor$find2, _start, _start2, _start3, _start4, _start5;\n        if (!editor.getValue().trim()) {\n          return;\n        }\n        const session = editor.getSession();\n        const cursorPosition = editor.getCursorPosition();\n        const totalLine = session.getLength();\n        const currentRow = editor.getFirstVisibleRow();\n        let end = (_editor$find = editor.find(';', {\n          backwards: false,\n          skipCurrent: true\n        })) == null ? void 0 : _editor$find.end;\n        if (!end || end.row < cursorPosition.row) {\n          end = {\n            row: totalLine + 1,\n            column: 0\n          };\n        }\n        let start = (_editor$find2 = editor.find(';', {\n          backwards: true,\n          skipCurrent: true\n        })) == null ? void 0 : _editor$find2.end;\n        let currentLine = (_start = start) == null ? void 0 : _start.row;\n        if (!currentLine ||\n        currentLine > cursorPosition.row ||\n        currentLine === cursorPosition.row &&\n        (((_start2 = start) == null ? void 0 : _start2.column) || 0) > cursorPosition.column) {\n          currentLine = 0;\n        }\n        let content = currentLine === ((_start3 = start) == null ? void 0 : _start3.row) ?\n        session.getLine(currentLine).slice(start.column).trim() :\n        session.getLine(currentLine).trim();\n        while (!content && currentLine < totalLine) {\n          currentLine += 1;\n          content = session.getLine(currentLine).trim();\n        }\n        if (currentLine !== ((_start4 = start) == null ? void 0 : _start4.row)) {\n          start = { row: currentLine, column: 0 };\n        }\n        editor.selection.setSelectionRange({\n          start: (_start5 = start) != null ? _start5 : { row: 0, column: 0 },\n          end\n        });\n        startQuery();\n        editor.selection.clearSelection();\n        editor.moveCursorToPosition(cursorPosition);\n        editor.scrollToRow(currentRow);\n      }\n    }];\n\n    if (userOS === 'MacOS') {\n      base.push({\n        name: 'previousLine',\n        key: KeyboardShortcut.CtrlP,\n        descr: KEY_MAP[KeyboardShortcut.CtrlP],\n        func: (editor) => {\n          editor.navigateUp();\n        }\n      });\n    }\n    return base;\n  }, [getHotkeyConfig, startQuery]);\n  const onBeforeUnload = useEffectEvent((event) => {var _database$extra_json;\n    if (database != null && (_database$extra_json = database.extra_json) != null && _database$extra_json.cancel_query_on_windows_unload &&\n    (latestQuery == null ? void 0 : latestQuery.state) === 'running') {\n      event.preventDefault();\n      stopQuery();\n    }\n  });\n  const shouldLoadQueryEditor = isFeatureEnabled(FeatureFlag.SqllabBackendPersistence) &&\n  !queryEditor.loaded;\n  const loadQueryEditor = useEffectEvent(() => {\n    if (shouldLoadQueryEditor) {\n      dispatch(switchQueryEditor(queryEditor, displayLimit));\n    }\n  });\n  useEffect(() => {\n    // We need to measure the height of the sql editor post render to figure the height of\n    // the south pane so it gets rendered properly\n    setHeight(getSqlEditorHeight());\n    const handleWindowResizeWithThrottle = _throttle(() => setHeight(getSqlEditorHeight()), WINDOW_RESIZE_THROTTLE_MS);\n    if (isActive) {\n      loadQueryEditor();\n      window.addEventListener('resize', handleWindowResizeWithThrottle);\n      window.addEventListener('beforeunload', onBeforeUnload);\n    }\n    return () => {\n      window.removeEventListener('resize', handleWindowResizeWithThrottle);\n      window.removeEventListener('beforeunload', onBeforeUnload);\n    };\n    // TODO: Remove useEffectEvent deps once https://github.com/facebook/react/pull/25881 is released\n  }, [onBeforeUnload, loadQueryEditor, isActive]);\n  useEffect(() => {\n    if (!database || _isEmpty(database)) {\n      setShowEmptyState(true);\n    }\n  }, [database]);\n  useEffect(() => {\n    // setup hotkeys\n    const hotkeys = getHotkeyConfig();\n    if (isActive) {\n      // MouseTrap always override the same key\n      // Unbind (reset) will be called when App component unmount\n      hotkeys.forEach((keyConfig) => {\n        Mousetrap.bind([keyConfig.key], keyConfig.func);\n      });\n    }\n  }, [getHotkeyConfig, latestQuery, isActive]);\n  const onResizeStart = () => {\n    // Set the heights on the ace editor and the ace content area after drag starts\n    // to smooth out the visual transition to the new heights when drag ends\n    const editorEl = document.getElementsByClassName('ace_content')[0];\n    if (editorEl) {\n      editorEl.style.height = '100%';\n    }\n  };\n  const onResizeEnd = ([northPercent, southPercent]) => {var _northPaneRef$current;\n    setNorthPercent(northPercent);\n    setSouthPercent(southPercent);\n    if ((_northPaneRef$current = northPaneRef.current) != null && _northPaneRef$current.clientHeight) {\n      dispatch(persistEditorHeight(queryEditor, northPercent, southPercent));\n    }\n  };\n  const setQueryEditorAndSaveSql = useCallback((sql) => {\n    dispatch(queryEditorSetAndSaveSql(queryEditor, sql));\n  }, [dispatch, queryEditor]);\n  const setQueryEditorAndSaveSqlWithDebounce = useMemo(() => _debounce(setQueryEditorAndSaveSql, SET_QUERY_EDITOR_SQL_DEBOUNCE_MS), [setQueryEditorAndSaveSql]);\n  const onSqlChanged = useEffectEvent((sql) => {\n    dispatch(queryEditorSetSql(queryEditor, sql));\n  });\n  // Return the heights for the ace editor and the south pane as an object\n  // given the height of the sql editor, north pane percent and south pane percent.\n  const getAceEditorAndSouthPaneHeights = (height, northPercent, southPercent) => ({\n    aceEditorHeight: height * northPercent / (theme.gridUnit * 25) - (\n    SQL_EDITOR_GUTTER_HEIGHT / 2 + SQL_EDITOR_GUTTER_MARGIN) -\n    SQL_TOOLBAR_HEIGHT,\n    southPaneHeight: height * southPercent / (theme.gridUnit * 25) - (\n    SQL_EDITOR_GUTTER_HEIGHT / 2 + SQL_EDITOR_GUTTER_MARGIN)\n  });\n  const getQueryCostEstimate = () => {\n    if (database) {\n      dispatch(estimateQueryCost(queryEditor));\n    }\n  };\n  const handleToggleAutocompleteEnabled = () => {\n    setItem(LocalStorageKeys.SqllabIsAutocompleteEnabled, !autocompleteEnabled);\n    setAutocompleteEnabled(!autocompleteEnabled);\n  };\n  const handleToggleRenderHTMLEnabled = () => {\n    setItem(LocalStorageKeys.SqllabIsRenderHtmlEnabled, !renderHTMLEnabled);\n    setRenderHTMLEnabled(!renderHTMLEnabled);\n  };\n  const createTableAs = () => {\n    startQuery(true, CtasEnum.Table);\n    setShowCreateAsModal(false);\n    setCtas('');\n  };\n  const createViewAs = () => {\n    startQuery(true, CtasEnum.View);\n    setShowCreateAsModal(false);\n    setCtas('');\n  };\n  const ctasChanged = (event) => {\n    setCtas(event.target.value);\n  };\n  const renderDropdown = () => {\n    const qe = queryEditor;\n    const successful = (latestQuery == null ? void 0 : latestQuery.state) === 'success';\n    const scheduleToolTip = successful ?\n    t('Schedule the query periodically') :\n    t('You must run the query successfully first');\n    return ___EmotionJSX(Menu, { css: /*#__PURE__*/_css({ width: theme.gridUnit * 50 }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:renderDropdown;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\") },\n    ___EmotionJSX(Menu.Item, { css: _ref },\n    ' ',\n    ___EmotionJSX(\"span\", null, t('Render HTML')), ' ',\n    ___EmotionJSX(AntdSwitch, { checked: renderHTMLEnabled, onChange: handleToggleRenderHTMLEnabled }), ' '\n    ),\n    ___EmotionJSX(Menu.Item, { css: _ref2 },\n    ' ',\n    ___EmotionJSX(\"span\", null, t('Autocomplete')), ' ',\n    ___EmotionJSX(AntdSwitch, { checked: autocompleteEnabled, onChange: handleToggleAutocompleteEnabled }), ' '\n    ),\n    isFeatureEnabled(FeatureFlag.EnableTemplateProcessing) && ___EmotionJSX(Menu.Item, null,\n    ___EmotionJSX(TemplateParamsEditor, { language: \"json\", onChange: (params) => {\n        dispatch(queryEditorSetTemplateParams(qe, params));\n      }, queryEditorId: qe.id })\n    ),\n    ___EmotionJSX(Menu.Item, { onClick: formatCurrentQuery }, t('Format SQL')),\n    !_isEmpty(scheduledQueriesConf) && ___EmotionJSX(Menu.Item, null,\n    ___EmotionJSX(ScheduleQueryButton, { defaultLabel: qe.name, sql: qe.sql, onSchedule: (query) => dispatch(scheduleQuery(query)), schema: qe.schema, dbId: qe.dbId, scheduleQueryWarning: scheduleQueryWarning, tooltip: scheduleToolTip, disabled: !successful })\n    ),\n    ___EmotionJSX(Menu.Item, null,\n    ___EmotionJSX(KeyboardShortcutButton, null,\n    t('Keyboard shortcuts')\n    )\n    )\n    );\n  };\n  const onSaveQuery = async (query, clientId) => {\n    const savedQuery = await dispatch(saveQuery(query, clientId));\n    dispatch(addSavedQueryToTabState(queryEditor, savedQuery));\n  };\n  const renderEditorBottomBar = () => {var _latestQuery$results;\n    const { allow_ctas: allowCTAS, allow_cvas: allowCVAS } = database || {};\n    const showMenu = allowCTAS || allowCVAS;\n    const runMenuBtn = ___EmotionJSX(Menu, null,\n    allowCTAS && ___EmotionJSX(Menu.Item, { onClick: () => {\n        setShowCreateAsModal(true);\n        setCreateAs(CtasEnum.Table);\n      }, key: \"1\" },\n    t('CREATE TABLE AS')\n    ),\n    allowCVAS && ___EmotionJSX(Menu.Item, { onClick: () => {\n        setShowCreateAsModal(true);\n        setCreateAs(CtasEnum.View);\n      }, key: \"2\" },\n    t('CREATE VIEW AS')\n    )\n    );\n    return ___EmotionJSX(StyledToolbar, { className: \"sql-toolbar\", id: \"js-sql-toolbar\" },\n    ___EmotionJSX(\"div\", { className: \"leftItems\" },\n    ___EmotionJSX(\"span\", null,\n    ___EmotionJSX(RunQueryActionButton, { allowAsync: (database == null ? void 0 : database.allow_run_async) === true, queryEditorId: queryEditor.id, queryState: latestQuery == null ? void 0 : latestQuery.state, runQuery: runQuery, stopQuery: stopQuery, overlayCreateAsMenu: showMenu ? runMenuBtn : null })\n    ),\n    isFeatureEnabled(FeatureFlag.EstimateQueryCost) && (\n    database == null ? void 0 : database.allows_cost_estimate) && ___EmotionJSX(\"span\", null,\n    ___EmotionJSX(EstimateQueryCostButton, { getEstimate: getQueryCostEstimate, queryEditorId: queryEditor.id, tooltip: t('Estimate the cost before running a query') })\n    ),\n    ___EmotionJSX(\"span\", null,\n    ___EmotionJSX(QueryLimitSelect, { queryEditorId: queryEditor.id, maxRow: maxRow, defaultQueryLimit: defaultQueryLimit })\n    ),\n    latestQuery && ___EmotionJSX(Timer, { startTime: latestQuery.startDttm, endTime: latestQuery.endDttm, status: STATE_TYPE_MAP[latestQuery.state], isRunning: latestQuery.state === 'running' })\n    ),\n    ___EmotionJSX(\"div\", { className: \"rightItems\" },\n    ___EmotionJSX(\"span\", null,\n    ___EmotionJSX(SaveQuery, { queryEditorId: queryEditor.id, columns: (latestQuery == null ? void 0 : (_latestQuery$results = latestQuery.results) == null ? void 0 : _latestQuery$results.columns) || [], onSave: onSaveQuery, onUpdate: (query, remoteId) => dispatch(updateSavedQuery(query, remoteId)), saveQueryWarning: saveQueryWarning, database: database })\n    ),\n    ___EmotionJSX(\"span\", null,\n    ___EmotionJSX(ShareSqlLabQuery, { queryEditorId: queryEditor.id })\n    ),\n    ___EmotionJSX(AntdDropdown, { overlay: renderDropdown(), trigger: ['click'] },\n    ___EmotionJSX(Icons.MoreHoriz, { iconColor: theme.colors.grayscale.base })\n    )\n    )\n    );\n  };\n  const handleCursorPositionChange = (newPosition) => {\n    dispatch(queryEditorSetCursorPosition(queryEditor, newPosition));\n  };\n  const queryPane = () => {\n    const { aceEditorHeight, southPaneHeight } = getAceEditorAndSouthPaneHeights(height, northPercent, southPercent);\n    return ___EmotionJSX(Split, { expandToMin: true, className: \"queryPane\", sizes: [northPercent, southPercent], elementStyle: elementStyle, minSize: 200, direction: \"vertical\", gutterSize: SQL_EDITOR_GUTTER_HEIGHT, onDragStart: onResizeStart, onDragEnd: onResizeEnd },\n    ___EmotionJSX(\"div\", { ref: northPaneRef, className: \"north-pane\" },\n    SqlFormExtension && ___EmotionJSX(SqlFormExtension, { queryEditorId: queryEditor.id, setQueryEditorAndSaveSqlWithDebounce: setQueryEditorAndSaveSqlWithDebounce, startQuery: startQuery }),\n    ___EmotionJSX(AceEditorWrapper, { autocomplete: autocompleteEnabled, onBlur: onSqlChanged, onChange: onSqlChanged, queryEditorId: queryEditor.id, onCursorPositionChange: handleCursorPositionChange, height: `${aceEditorHeight}px`, hotkeys: hotkeys }),\n    renderEditorBottomBar()\n    ),\n    ___EmotionJSX(SouthPane, { queryEditorId: queryEditor.id, latestQueryId: latestQuery == null ? void 0 : latestQuery.id, height: southPaneHeight, displayLimit: displayLimit, defaultQueryLimit: defaultQueryLimit })\n    );\n  };\n  const createViewModalTitle = createAs === CtasEnum.View ? 'CREATE VIEW AS' : 'CREATE TABLE AS';\n  const createModalPlaceHolder = createAs === CtasEnum.View ?\n  t('Specify name to CREATE VIEW AS schema in: public') :\n  t('Specify name to CREATE TABLE AS schema in: public');\n  const leftBarStateClass = hideLeftBar ?\n  'schemaPane-exit-done' :\n  'schemaPane-enter-done';\n  return ___EmotionJSX(StyledSqlEditor, { ref: sqlEditorRef, className: \"SqlEditor\" },\n  ___EmotionJSX(CSSTransition, { classNames: \"schemaPane\", in: !hideLeftBar, timeout: 300 },\n  ___EmotionJSX(ResizableSidebar, { id: `sqllab:${queryEditor.id}`, minWidth: SQL_EDITOR_LEFTBAR_WIDTH, initialWidth: SQL_EDITOR_LEFTBAR_WIDTH, enable: !hideLeftBar },\n  (adjustedWidth) => ___EmotionJSX(StyledSidebar, { className: `schemaPane ${leftBarStateClass}`, width: adjustedWidth, hide: hideLeftBar },\n  ___EmotionJSX(SqlEditorLeftBar, { database: database, queryEditorId: queryEditor.id, setEmptyState: (bool) => setShowEmptyState(bool) })\n  )\n  )\n  ),\n  shouldLoadQueryEditor ? ___EmotionJSX(\"div\", { \"data-test\": \"sqlEditor-loading\", css: css`\n            flex: 1;\n            padding: ${theme.gridUnit * 4}px;\n          ` },\n  ___EmotionJSX(Skeleton, { active: true })\n  ) : showEmptyState ? ___EmotionJSX(EmptyStateBig, { image: \"vector.svg\", title: t('Select a database to write a query'), description: t('Choose one of the available databases from the panel on the left.') }) : queryPane(),\n  ___EmotionJSX(Modal, { show: showCreateAsModal, title: t(createViewModalTitle), onHide: () => setShowCreateAsModal(false), footer: ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(Button, { onClick: () => setShowCreateAsModal(false) },\n    t('Cancel')\n    ),\n    createAs === CtasEnum.Table && ___EmotionJSX(Button, { buttonStyle: \"primary\", disabled: ctas.length === 0, onClick: createTableAs },\n    t('Create')\n    ),\n    createAs === CtasEnum.View && ___EmotionJSX(Button, { buttonStyle: \"primary\", disabled: ctas.length === 0, onClick: createViewAs },\n    t('Create')\n    )\n    ) },\n  ___EmotionJSX(\"span\", null, t('Name')),\n  ___EmotionJSX(Input, { placeholder: createModalPlaceHolder, onChange: ctasChanged })\n  )\n  );\n};__signature__(SqlEditor, \"useTheme{theme}\\nuseDispatch{dispatch}\\nuseSelector{{ database, latestQuery, hideLeftBar, currentQueryEditorId }}\\nuseState{[height, setHeight](0)}\\nuseState{[autorun, setAutorun](queryEditor.autorun)}\\nuseState{[ctas, setCtas]('')}\\nuseState{[northPercent, setNorthPercent](queryEditor.northPercent || INITIAL_NORTH_PERCENT)}\\nuseState{[southPercent, setSouthPercent](queryEditor.southPercent || INITIAL_SOUTH_PERCENT)}\\nuseState{[autocompleteEnabled, setAutocompleteEnabled](getItem(LocalStorageKeys.SqllabIsAutocompleteEnabled, true))}\\nuseState{[renderHTMLEnabled, setRenderHTMLEnabled](getItem(LocalStorageKeys.SqllabIsRenderHtmlEnabled, false))}\\nuseState{[showCreateAsModal, setShowCreateAsModal](false)}\\nuseState{[createAs, setCreateAs]('')}\\nuseState{[showEmptyState, setShowEmptyState](false)}\\nuseRef{sqlEditorRef}\\nuseRef{northPaneRef}\\nuseCallback{startQuery}\\nuseCallback{formatCurrentQuery}\\nuseCallback{stopQuery}\\nuseEffect{}\\nuseCallback{getHotkeyConfig}\\nuseMemo{hotkeys}\\nuseEffectEvent{onBeforeUnload}\\nuseEffectEvent{loadQueryEditor}\\nuseEffect{}\\nuseEffect{}\\nuseEffect{}\\nuseCallback{setQueryEditorAndSaveSql}\\nuseMemo{setQueryEditorAndSaveSqlWithDebounce}\\nuseEffectEvent{onSqlChanged}\", () => [useTheme, useDispatch, useSelector, useEffectEvent, useEffectEvent, useEffectEvent]);const _default =\nSqlEditor;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(bootstrapData, \"bootstrapData\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/SqlEditor/index.tsx\");reactHotLoader.register(scheduledQueriesConf, \"scheduledQueriesConf\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/SqlEditor/index.tsx\");reactHotLoader.register(StyledToolbar, \"StyledToolbar\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/SqlEditor/index.tsx\");reactHotLoader.register(StyledSidebar, \"StyledSidebar\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/SqlEditor/index.tsx\");reactHotLoader.register(StyledSqlEditor, \"StyledSqlEditor\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/SqlEditor/index.tsx\");reactHotLoader.register(extensionsRegistry, \"extensionsRegistry\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/SqlEditor/index.tsx\");reactHotLoader.register(elementStyle, \"elementStyle\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/SqlEditor/index.tsx\");reactHotLoader.register(SqlEditor, \"SqlEditor\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/SqlEditor/index.tsx\");reactHotLoader.register(_default, \"default\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/SqlEditor/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["React","useState","useEffect","useMemo","useRef","useCallback","useEffectEvent","CSSTransition","shallowEqual","useDispatch","useSelector","Split","css","FeatureFlag","isFeatureEnabled","styled","t","useTheme","getExtensionsRegistry","Modal","Mousetrap","Button","Timer","ResizableSidebar","AntdDropdown","AntdSwitch","Skeleton","Input","Menu","Icons","detectOS","addNewQueryEditor","CtasEnum","estimateQueryCost","persistEditorHeight","postStopQuery","queryEditorSetAutorun","queryEditorSetSql","queryEditorSetCursorPosition","queryEditorSetAndSaveSql","queryEditorSetTemplateParams","runQueryFromSqlEditor","saveQuery","addSavedQueryToTabState","scheduleQuery","setActiveSouthPaneTab","updateSavedQuery","formatQuery","switchQueryEditor","STATE_TYPE_MAP","SQL_EDITOR_GUTTER_HEIGHT","SQL_EDITOR_GUTTER_MARGIN","SQL_TOOLBAR_HEIGHT","SQL_EDITOR_LEFTBAR_WIDTH","SQL_EDITOR_PADDING","INITIAL_NORTH_PERCENT","INITIAL_SOUTH_PERCENT","SET_QUERY_EDITOR_SQL_DEBOUNCE_MS","WINDOW_RESIZE_THROTTLE_MS","getItem","LocalStorageKeys","setItem","EmptyStateBig","getBootstrapData","TemplateParamsEditor","SouthPane","SaveQuery","ScheduleQueryButton","EstimateQueryCostButton","ShareSqlLabQuery","SqlEditorLeftBar","AceEditorWrapper","RunQueryActionButton","QueryLimitSelect","KeyboardShortcutButton","KEY_MAP","KeyboardShortcut","jsx","___EmotionJSX","bootstrapData","scheduledQueriesConf","_bootstrapData$common","common","_bootstrapData$common2","conf","SCHEDULED_QUERIES","StyledToolbar","div","theme","gridUnit","colors","grayscale","light5","light2","StyledSidebar","width","hide","StyledSqlEditor","transitionTiming","extensionsRegistry","elementStyle","dimension","elementSize","gutterSize","_ref","process","env","NODE_ENV","name","styles","map","toString","_EMOTION_STRINGIFIED_CSS_ERROR__","_ref2","SqlEditor","queryEditor","defaultQueryLimit","maxRow","displayLimit","saveQueryWarning","scheduleQueryWarning","dispatch","database","latestQuery","hideLeftBar","currentQueryEditorId","sqlLab","unsavedQueryEditor","databases","queries","tabHistory","dbId","latestQueryId","id","_isBoolean","slice","isActive","height","setHeight","autorun","setAutorun","ctas","setCtas","northPercent","setNorthPercent","southPercent","setSouthPercent","autocompleteEnabled","setAutocompleteEnabled","SqllabIsAutocompleteEnabled","renderHTMLEnabled","setRenderHTMLEnabled","SqllabIsRenderHtmlEnabled","showCreateAsModal","setShowCreateAsModal","createAs","setCreateAs","showEmptyState","setShowEmptyState","sqlEditorRef","northPaneRef","SqlFormExtension","get","startQuery","ctasArg","ctas_method","Table","formatCurrentQuery","stopQuery","indexOf","state","runQuery","getSqlEditorHeight","current","clientHeight","getHotkeyConfig","userOS","key","CtrlR","descr","func","sql","trim","CtrlEnter","CtrlQ","CtrlT","CtrlX","CtrlE","CtrlShiftF","hotkeys","base","CtrlShiftEnter","editor","_editor$find","_editor$find2","_start","_start2","_start3","_start4","_start5","getValue","session","getSession","cursorPosition","getCursorPosition","totalLine","getLength","currentRow","getFirstVisibleRow","end","find","backwards","skipCurrent","row","column","start","currentLine","content","getLine","selection","setSelectionRange","clearSelection","moveCursorToPosition","scrollToRow","push","CtrlP","navigateUp","onBeforeUnload","event","_database$extra_json","extra_json","cancel_query_on_windows_unload","preventDefault","shouldLoadQueryEditor","SqllabBackendPersistence","loaded","loadQueryEditor","handleWindowResizeWithThrottle","_throttle","window","addEventListener","removeEventListener","_isEmpty","forEach","keyConfig","bind","onResizeStart","editorEl","document","getElementsByClassName","style","onResizeEnd","_northPaneRef$current","setQueryEditorAndSaveSql","setQueryEditorAndSaveSqlWithDebounce","_debounce","onSqlChanged","getAceEditorAndSouthPaneHeights","aceEditorHeight","southPaneHeight","getQueryCostEstimate","handleToggleAutocompleteEnabled","handleToggleRenderHTMLEnabled","createTableAs","createViewAs","View","ctasChanged","target","value","renderDropdown","qe","successful","scheduleToolTip","_css","Item","checked","onChange","EnableTemplateProcessing","language","params","queryEditorId","onClick","defaultLabel","onSchedule","query","schema","tooltip","disabled","onSaveQuery","clientId","savedQuery","renderEditorBottomBar","_latestQuery$results","allow_ctas","allowCTAS","allow_cvas","allowCVAS","showMenu","runMenuBtn","className","allowAsync","allow_run_async","queryState","overlayCreateAsMenu","EstimateQueryCost","allows_cost_estimate","getEstimate","startTime","startDttm","endTime","endDttm","status","isRunning","columns","results","onSave","onUpdate","remoteId","overlay","trigger","MoreHoriz","iconColor","handleCursorPositionChange","newPosition","queryPane","expandToMin","sizes","minSize","direction","onDragStart","onDragEnd","ref","autocomplete","onBlur","onCursorPositionChange","createViewModalTitle","createModalPlaceHolder","leftBarStateClass","classNames","in","timeout","minWidth","initialWidth","enable","adjustedWidth","setEmptyState","bool","active","image","title","description","show","onHide","footer","Fragment","buttonStyle","length","placeholder","__signature__","_default","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/SqlEditor/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable jsx-a11y/anchor-is-valid */\n/* eslint-disable jsx-a11y/no-static-element-interactions */\nimport React, {\n  useState,\n  useEffect,\n  useMemo,\n  useRef,\n  useCallback,\n  ChangeEvent,\n} from 'react';\nimport type AceEditor from 'react-ace';\nimport useEffectEvent from 'src/hooks/useEffectEvent';\nimport { CSSTransition } from 'react-transition-group';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport Split from 'react-split';\nimport {\n  css,\n  FeatureFlag,\n  isFeatureEnabled,\n  styled,\n  t,\n  useTheme,\n  getExtensionsRegistry,\n  QueryResponse,\n  Query,\n} from '@superset-ui/core';\nimport type {\n  QueryEditor,\n  SqlLabRootState,\n  CursorPosition,\n} from 'src/SqlLab/types';\nimport type { DatabaseObject } from 'src/features/databases/types';\nimport { debounce, throttle, isBoolean, isEmpty } from 'lodash';\nimport Modal from 'src/components/Modal';\nimport Mousetrap from 'mousetrap';\nimport Button from 'src/components/Button';\nimport Timer from 'src/components/Timer';\nimport ResizableSidebar from 'src/components/ResizableSidebar';\nimport { AntdDropdown, AntdSwitch, Skeleton } from 'src/components';\nimport { Input } from 'src/components/Input';\nimport { Menu } from 'src/components/Menu';\nimport Icons from 'src/components/Icons';\nimport { detectOS } from 'src/utils/common';\nimport {\n  addNewQueryEditor,\n  CtasEnum,\n  estimateQueryCost,\n  persistEditorHeight,\n  postStopQuery,\n  queryEditorSetAutorun,\n  queryEditorSetSql,\n  queryEditorSetCursorPosition,\n  queryEditorSetAndSaveSql,\n  queryEditorSetTemplateParams,\n  runQueryFromSqlEditor,\n  saveQuery,\n  addSavedQueryToTabState,\n  scheduleQuery,\n  setActiveSouthPaneTab,\n  updateSavedQuery,\n  formatQuery,\n  switchQueryEditor,\n} from 'src/SqlLab/actions/sqlLab';\nimport {\n  STATE_TYPE_MAP,\n  SQL_EDITOR_GUTTER_HEIGHT,\n  SQL_EDITOR_GUTTER_MARGIN,\n  SQL_TOOLBAR_HEIGHT,\n  SQL_EDITOR_LEFTBAR_WIDTH,\n  SQL_EDITOR_PADDING,\n  INITIAL_NORTH_PERCENT,\n  INITIAL_SOUTH_PERCENT,\n  SET_QUERY_EDITOR_SQL_DEBOUNCE_MS,\n  WINDOW_RESIZE_THROTTLE_MS,\n} from 'src/SqlLab/constants';\nimport {\n  getItem,\n  LocalStorageKeys,\n  setItem,\n} from 'src/utils/localStorageHelpers';\nimport { EmptyStateBig } from 'src/components/EmptyState';\nimport getBootstrapData from 'src/utils/getBootstrapData';\nimport TemplateParamsEditor from '../TemplateParamsEditor';\nimport SouthPane from '../SouthPane';\nimport SaveQuery, { QueryPayload } from '../SaveQuery';\nimport ScheduleQueryButton from '../ScheduleQueryButton';\nimport EstimateQueryCostButton from '../EstimateQueryCostButton';\nimport ShareSqlLabQuery from '../ShareSqlLabQuery';\nimport SqlEditorLeftBar from '../SqlEditorLeftBar';\nimport AceEditorWrapper from '../AceEditorWrapper';\nimport RunQueryActionButton from '../RunQueryActionButton';\nimport QueryLimitSelect from '../QueryLimitSelect';\nimport KeyboardShortcutButton, {\n  KEY_MAP,\n  KeyboardShortcut,\n} from '../KeyboardShortcutButton';\n\nconst bootstrapData = getBootstrapData();\nconst scheduledQueriesConf = bootstrapData?.common?.conf?.SCHEDULED_QUERIES;\n\nconst StyledToolbar = styled.div`\n  padding: ${({ theme }) => theme.gridUnit * 2}px;\n  background: ${({ theme }) => theme.colors.grayscale.light5};\n  display: flex;\n  justify-content: space-between;\n  border: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n  border-top: 0;\n  column-gap: ${({ theme }) => theme.gridUnit}px;\n\n  form {\n    margin-block-end: 0;\n  }\n\n  .leftItems,\n  .rightItems {\n    display: flex;\n    align-items: center;\n    & > span {\n      margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n      display: inline-block;\n\n      &:last-child {\n        margin-right: 0;\n      }\n    }\n  }\n\n  .limitDropdown {\n    white-space: nowrap;\n  }\n`;\n\nconst StyledSidebar = styled.div<{ width: number; hide: boolean | undefined }>`\n  flex: 0 0 ${({ width }) => width}px;\n  width: ${({ width }) => width}px;\n  padding: ${({ theme, hide }) => (hide ? 0 : theme.gridUnit * 2.5)}px;\n  border-right: 1px solid\n    ${({ theme, hide }) =>\n      hide ? 'transparent' : theme.colors.grayscale.light2};\n`;\n\nconst StyledSqlEditor = styled.div`\n  ${({ theme }) => css`\n    display: flex;\n    flex-direction: row;\n    height: 100%;\n\n    .schemaPane {\n      transition: transform ${theme.transitionTiming}s ease-in-out;\n    }\n\n    .queryPane {\n      flex: 1 1 auto;\n      padding: ${theme.gridUnit * 2}px;\n      overflow-y: auto;\n      overflow-x: scroll;\n    }\n\n    .schemaPane-enter-done,\n    .schemaPane-exit {\n      transform: translateX(0);\n      z-index: 7;\n    }\n\n    .schemaPane-exit-active {\n      transform: translateX(-120%);\n    }\n\n    .schemaPane-enter-active {\n      transform: translateX(0);\n      max-width: ${theme.gridUnit * 75}px;\n    }\n\n    .schemaPane-enter,\n    .schemaPane-exit-done {\n      max-width: 0;\n      transform: translateX(-120%);\n      overflow: hidden;\n    }\n\n    .schemaPane-exit-done + .queryPane {\n      margin-left: 0;\n    }\n\n    .gutter {\n      border-top: 1px solid ${theme.colors.grayscale.light2};\n      border-bottom: 1px solid ${theme.colors.grayscale.light2};\n      width: 3%;\n      margin: ${SQL_EDITOR_GUTTER_MARGIN}px 47%;\n    }\n\n    .gutter.gutter-vertical {\n      cursor: row-resize;\n    }\n  `}\n`;\n\nconst extensionsRegistry = getExtensionsRegistry();\n\nexport type Props = {\n  queryEditor: QueryEditor;\n  defaultQueryLimit: number;\n  maxRow: number;\n  displayLimit: number;\n  saveQueryWarning: string | null;\n  scheduleQueryWarning: string | null;\n};\n\nconst elementStyle = (\n  dimension: string,\n  elementSize: number,\n  gutterSize: number,\n) => ({\n  [dimension]: `calc(${elementSize}% - ${\n    gutterSize + SQL_EDITOR_GUTTER_MARGIN\n  }px)`,\n});\n\nconst SqlEditor: React.FC<Props> = ({\n  queryEditor,\n  defaultQueryLimit,\n  maxRow,\n  displayLimit,\n  saveQueryWarning,\n  scheduleQueryWarning,\n}) => {\n  const theme = useTheme();\n  const dispatch = useDispatch();\n\n  const { database, latestQuery, hideLeftBar, currentQueryEditorId } =\n    useSelector<\n      SqlLabRootState,\n      {\n        database?: DatabaseObject;\n        latestQuery?: QueryResponse;\n        hideLeftBar?: boolean;\n        currentQueryEditorId: QueryEditor['id'];\n      }\n    >(({ sqlLab: { unsavedQueryEditor, databases, queries, tabHistory } }) => {\n      let { dbId, latestQueryId, hideLeftBar } = queryEditor;\n      if (unsavedQueryEditor?.id === queryEditor.id) {\n        dbId = unsavedQueryEditor.dbId || dbId;\n        latestQueryId = unsavedQueryEditor.latestQueryId || latestQueryId;\n        hideLeftBar = isBoolean(unsavedQueryEditor.hideLeftBar)\n          ? unsavedQueryEditor.hideLeftBar\n          : hideLeftBar;\n      }\n      return {\n        database: databases[dbId || ''],\n        latestQuery: queries[latestQueryId || ''],\n        hideLeftBar,\n        currentQueryEditorId: tabHistory.slice(-1)[0],\n      };\n    }, shallowEqual);\n\n  const isActive = currentQueryEditorId === queryEditor.id;\n  const [height, setHeight] = useState(0);\n  const [autorun, setAutorun] = useState(queryEditor.autorun);\n  const [ctas, setCtas] = useState('');\n  const [northPercent, setNorthPercent] = useState(\n    queryEditor.northPercent || INITIAL_NORTH_PERCENT,\n  );\n  const [southPercent, setSouthPercent] = useState(\n    queryEditor.southPercent || INITIAL_SOUTH_PERCENT,\n  );\n  const [autocompleteEnabled, setAutocompleteEnabled] = useState(\n    getItem(LocalStorageKeys.SqllabIsAutocompleteEnabled, true),\n  );\n  const [renderHTMLEnabled, setRenderHTMLEnabled] = useState(\n    getItem(LocalStorageKeys.SqllabIsRenderHtmlEnabled, false),\n  );\n  const [showCreateAsModal, setShowCreateAsModal] = useState(false);\n  const [createAs, setCreateAs] = useState('');\n  const [showEmptyState, setShowEmptyState] = useState(false);\n\n  const sqlEditorRef = useRef<HTMLDivElement>(null);\n  const northPaneRef = useRef<HTMLDivElement>(null);\n\n  const SqlFormExtension = extensionsRegistry.get('sqleditor.extension.form');\n\n  const startQuery = useCallback(\n    (ctasArg = false, ctas_method = CtasEnum.Table) => {\n      if (!database) {\n        return;\n      }\n\n      dispatch(\n        runQueryFromSqlEditor(\n          database,\n          queryEditor,\n          defaultQueryLimit,\n          ctasArg ? ctas : '',\n          ctasArg,\n          ctas_method,\n        ),\n      );\n      dispatch(setActiveSouthPaneTab('Results'));\n    },\n    [ctas, database, defaultQueryLimit, dispatch, queryEditor],\n  );\n\n  const formatCurrentQuery = useCallback(() => {\n    dispatch(formatQuery(queryEditor));\n  }, [dispatch, queryEditor]);\n\n  const stopQuery = useCallback(() => {\n    if (latestQuery && ['running', 'pending'].indexOf(latestQuery.state) >= 0) {\n      dispatch(postStopQuery(latestQuery));\n    }\n    return false;\n  }, [dispatch, latestQuery]);\n\n  const runQuery = () => {\n    if (database) {\n      startQuery();\n    }\n  };\n\n  useEffect(() => {\n    if (autorun) {\n      setAutorun(false);\n      dispatch(queryEditorSetAutorun(queryEditor, false));\n      startQuery();\n    }\n  }, [autorun, dispatch, queryEditor, startQuery]);\n\n  // One layer of abstraction for easy spying in unit tests\n  const getSqlEditorHeight = () =>\n    sqlEditorRef.current\n      ? sqlEditorRef.current.clientHeight - SQL_EDITOR_PADDING * 2\n      : 0;\n\n  const getHotkeyConfig = useCallback(() => {\n    // Get the user's OS\n    const userOS = detectOS();\n    return [\n      {\n        name: 'runQuery1',\n        key: KeyboardShortcut.CtrlR,\n        descr: KEY_MAP[KeyboardShortcut.CtrlR],\n        func: () => {\n          if (queryEditor.sql.trim() !== '') {\n            startQuery();\n          }\n        },\n      },\n      {\n        name: 'runQuery2',\n        key: KeyboardShortcut.CtrlEnter,\n        descr: KEY_MAP[KeyboardShortcut.CtrlEnter],\n        func: () => {\n          if (queryEditor.sql.trim() !== '') {\n            startQuery();\n          }\n        },\n      },\n      {\n        name: 'newTab',\n        ...(userOS === 'Windows'\n          ? {\n              key: KeyboardShortcut.CtrlQ,\n              descr: KEY_MAP[KeyboardShortcut.CtrlQ],\n            }\n          : {\n              key: KeyboardShortcut.CtrlT,\n              descr: KEY_MAP[KeyboardShortcut.CtrlT],\n            }),\n        func: () => {\n          dispatch(addNewQueryEditor());\n        },\n      },\n      {\n        name: 'stopQuery',\n        ...(userOS === 'MacOS'\n          ? {\n              key: KeyboardShortcut.CtrlX,\n              descr: KEY_MAP[KeyboardShortcut.CtrlX],\n            }\n          : {\n              key: KeyboardShortcut.CtrlE,\n              descr: KEY_MAP[KeyboardShortcut.CtrlE],\n            }),\n        func: stopQuery,\n      },\n      {\n        name: 'formatQuery',\n        key: KeyboardShortcut.CtrlShiftF,\n        descr: KEY_MAP[KeyboardShortcut.CtrlShiftF],\n        func: () => {\n          formatCurrentQuery();\n        },\n      },\n    ];\n  }, [dispatch, queryEditor.sql, startQuery, stopQuery, formatCurrentQuery]);\n\n  const hotkeys = useMemo(() => {\n    // Get all hotkeys including ace editor hotkeys\n    // Get the user's OS\n    const userOS = detectOS();\n    const base = [\n      ...getHotkeyConfig(),\n      {\n        name: 'runQuery3',\n        key: KeyboardShortcut.CtrlShiftEnter,\n        descr: KEY_MAP[KeyboardShortcut.CtrlShiftEnter],\n        func: (editor: AceEditor['editor']) => {\n          if (!editor.getValue().trim()) {\n            return;\n          }\n          const session = editor.getSession();\n          const cursorPosition = editor.getCursorPosition();\n          const totalLine = session.getLength();\n          const currentRow = editor.getFirstVisibleRow();\n          let end = editor.find(';', {\n            backwards: false,\n            skipCurrent: true,\n          })?.end;\n          if (!end || end.row < cursorPosition.row) {\n            end = {\n              row: totalLine + 1,\n              column: 0,\n            };\n          }\n          let start = editor.find(';', {\n            backwards: true,\n            skipCurrent: true,\n          })?.end;\n          let currentLine = start?.row;\n          if (\n            !currentLine ||\n            currentLine > cursorPosition.row ||\n            (currentLine === cursorPosition.row &&\n              (start?.column || 0) > cursorPosition.column)\n          ) {\n            currentLine = 0;\n          }\n          let content =\n            currentLine === start?.row\n              ? session.getLine(currentLine).slice(start.column).trim()\n              : session.getLine(currentLine).trim();\n          while (!content && currentLine < totalLine) {\n            currentLine += 1;\n            content = session.getLine(currentLine).trim();\n          }\n          if (currentLine !== start?.row) {\n            start = { row: currentLine, column: 0 };\n          }\n          editor.selection.setSelectionRange({\n            start: start ?? { row: 0, column: 0 },\n            end,\n          });\n          startQuery();\n          editor.selection.clearSelection();\n          editor.moveCursorToPosition(cursorPosition);\n          editor.scrollToRow(currentRow);\n        },\n      },\n    ];\n    if (userOS === 'MacOS') {\n      base.push({\n        name: 'previousLine',\n        key: KeyboardShortcut.CtrlP,\n        descr: KEY_MAP[KeyboardShortcut.CtrlP],\n        func: editor => {\n          editor.navigateUp();\n        },\n      });\n    }\n\n    return base;\n  }, [getHotkeyConfig, startQuery]);\n\n  const onBeforeUnload = useEffectEvent(event => {\n    if (\n      database?.extra_json?.cancel_query_on_windows_unload &&\n      latestQuery?.state === 'running'\n    ) {\n      event.preventDefault();\n      stopQuery();\n    }\n  });\n\n  const shouldLoadQueryEditor =\n    isFeatureEnabled(FeatureFlag.SqllabBackendPersistence) &&\n    !queryEditor.loaded;\n\n  const loadQueryEditor = useEffectEvent(() => {\n    if (shouldLoadQueryEditor) {\n      dispatch(switchQueryEditor(queryEditor, displayLimit));\n    }\n  });\n\n  useEffect(() => {\n    // We need to measure the height of the sql editor post render to figure the height of\n    // the south pane so it gets rendered properly\n    setHeight(getSqlEditorHeight());\n    const handleWindowResizeWithThrottle = throttle(\n      () => setHeight(getSqlEditorHeight()),\n      WINDOW_RESIZE_THROTTLE_MS,\n    );\n    if (isActive) {\n      loadQueryEditor();\n      window.addEventListener('resize', handleWindowResizeWithThrottle);\n      window.addEventListener('beforeunload', onBeforeUnload);\n    }\n\n    return () => {\n      window.removeEventListener('resize', handleWindowResizeWithThrottle);\n      window.removeEventListener('beforeunload', onBeforeUnload);\n    };\n    // TODO: Remove useEffectEvent deps once https://github.com/facebook/react/pull/25881 is released\n  }, [onBeforeUnload, loadQueryEditor, isActive]);\n\n  useEffect(() => {\n    if (!database || isEmpty(database)) {\n      setShowEmptyState(true);\n    }\n  }, [database]);\n\n  useEffect(() => {\n    // setup hotkeys\n    const hotkeys = getHotkeyConfig();\n    if (isActive) {\n      // MouseTrap always override the same key\n      // Unbind (reset) will be called when App component unmount\n      hotkeys.forEach(keyConfig => {\n        Mousetrap.bind([keyConfig.key], keyConfig.func);\n      });\n    }\n  }, [getHotkeyConfig, latestQuery, isActive]);\n\n  const onResizeStart = () => {\n    // Set the heights on the ace editor and the ace content area after drag starts\n    // to smooth out the visual transition to the new heights when drag ends\n    const editorEl = document.getElementsByClassName(\n      'ace_content',\n    )[0] as HTMLElement;\n    if (editorEl) {\n      editorEl.style.height = '100%';\n    }\n  };\n\n  const onResizeEnd = ([northPercent, southPercent]: number[]) => {\n    setNorthPercent(northPercent);\n    setSouthPercent(southPercent);\n\n    if (northPaneRef.current?.clientHeight) {\n      dispatch(persistEditorHeight(queryEditor, northPercent, southPercent));\n    }\n  };\n\n  const setQueryEditorAndSaveSql = useCallback(\n    sql => {\n      dispatch(queryEditorSetAndSaveSql(queryEditor, sql));\n    },\n    [dispatch, queryEditor],\n  );\n\n  const setQueryEditorAndSaveSqlWithDebounce = useMemo(\n    () => debounce(setQueryEditorAndSaveSql, SET_QUERY_EDITOR_SQL_DEBOUNCE_MS),\n    [setQueryEditorAndSaveSql],\n  );\n\n  const onSqlChanged = useEffectEvent((sql: string) => {\n    dispatch(queryEditorSetSql(queryEditor, sql));\n  });\n\n  // Return the heights for the ace editor and the south pane as an object\n  // given the height of the sql editor, north pane percent and south pane percent.\n  const getAceEditorAndSouthPaneHeights = (\n    height: number,\n    northPercent: number,\n    southPercent: number,\n  ) => ({\n    aceEditorHeight:\n      (height * northPercent) / (theme.gridUnit * 25) -\n      (SQL_EDITOR_GUTTER_HEIGHT / 2 + SQL_EDITOR_GUTTER_MARGIN) -\n      SQL_TOOLBAR_HEIGHT,\n    southPaneHeight:\n      (height * southPercent) / (theme.gridUnit * 25) -\n      (SQL_EDITOR_GUTTER_HEIGHT / 2 + SQL_EDITOR_GUTTER_MARGIN),\n  });\n\n  const getQueryCostEstimate = () => {\n    if (database) {\n      dispatch(estimateQueryCost(queryEditor));\n    }\n  };\n\n  const handleToggleAutocompleteEnabled = () => {\n    setItem(LocalStorageKeys.SqllabIsAutocompleteEnabled, !autocompleteEnabled);\n    setAutocompleteEnabled(!autocompleteEnabled);\n  };\n\n  const handleToggleRenderHTMLEnabled = () => {\n    setItem(LocalStorageKeys.SqllabIsRenderHtmlEnabled, !renderHTMLEnabled);\n    setRenderHTMLEnabled(!renderHTMLEnabled);\n  };\n\n  const createTableAs = () => {\n    startQuery(true, CtasEnum.Table);\n    setShowCreateAsModal(false);\n    setCtas('');\n  };\n\n  const createViewAs = () => {\n    startQuery(true, CtasEnum.View);\n    setShowCreateAsModal(false);\n    setCtas('');\n  };\n\n  const ctasChanged = (event: ChangeEvent<HTMLInputElement>) => {\n    setCtas(event.target.value);\n  };\n\n  const renderDropdown = () => {\n    const qe = queryEditor;\n    const successful = latestQuery?.state === 'success';\n    const scheduleToolTip = successful\n      ? t('Schedule the query periodically')\n      : t('You must run the query successfully first');\n    return (\n      <Menu css={{ width: theme.gridUnit * 50 }}>\n        <Menu.Item css={{ display: 'flex', justifyContent: 'space-between' }}>\n          {' '}\n          <span>{t('Render HTML')}</span>{' '}\n          <AntdSwitch\n            checked={renderHTMLEnabled}\n            onChange={handleToggleRenderHTMLEnabled}\n          />{' '}\n        </Menu.Item>\n        <Menu.Item css={{ display: 'flex', justifyContent: 'space-between' }}>\n          {' '}\n          <span>{t('Autocomplete')}</span>{' '}\n          <AntdSwitch\n            checked={autocompleteEnabled}\n            onChange={handleToggleAutocompleteEnabled}\n          />{' '}\n        </Menu.Item>\n        {isFeatureEnabled(FeatureFlag.EnableTemplateProcessing) && (\n          <Menu.Item>\n            <TemplateParamsEditor\n              language=\"json\"\n              onChange={params => {\n                dispatch(queryEditorSetTemplateParams(qe, params));\n              }}\n              queryEditorId={qe.id}\n            />\n          </Menu.Item>\n        )}\n        <Menu.Item onClick={formatCurrentQuery}>{t('Format SQL')}</Menu.Item>\n        {!isEmpty(scheduledQueriesConf) && (\n          <Menu.Item>\n            <ScheduleQueryButton\n              defaultLabel={qe.name}\n              sql={qe.sql}\n              onSchedule={(query: Query) => dispatch(scheduleQuery(query))}\n              schema={qe.schema}\n              dbId={qe.dbId}\n              scheduleQueryWarning={scheduleQueryWarning}\n              tooltip={scheduleToolTip}\n              disabled={!successful}\n            />\n          </Menu.Item>\n        )}\n        <Menu.Item>\n          <KeyboardShortcutButton>\n            {t('Keyboard shortcuts')}\n          </KeyboardShortcutButton>\n        </Menu.Item>\n      </Menu>\n    );\n  };\n\n  const onSaveQuery = async (query: QueryPayload, clientId: string) => {\n    const savedQuery = await dispatch(saveQuery(query, clientId));\n    dispatch(addSavedQueryToTabState(queryEditor, savedQuery));\n  };\n\n  const renderEditorBottomBar = () => {\n    const { allow_ctas: allowCTAS, allow_cvas: allowCVAS } = database || {};\n\n    const showMenu = allowCTAS || allowCVAS;\n    const runMenuBtn = (\n      <Menu>\n        {allowCTAS && (\n          <Menu.Item\n            onClick={() => {\n              setShowCreateAsModal(true);\n              setCreateAs(CtasEnum.Table);\n            }}\n            key=\"1\"\n          >\n            {t('CREATE TABLE AS')}\n          </Menu.Item>\n        )}\n        {allowCVAS && (\n          <Menu.Item\n            onClick={() => {\n              setShowCreateAsModal(true);\n              setCreateAs(CtasEnum.View);\n            }}\n            key=\"2\"\n          >\n            {t('CREATE VIEW AS')}\n          </Menu.Item>\n        )}\n      </Menu>\n    );\n\n    return (\n      <StyledToolbar className=\"sql-toolbar\" id=\"js-sql-toolbar\">\n        <div className=\"leftItems\">\n          <span>\n            <RunQueryActionButton\n              allowAsync={database?.allow_run_async === true}\n              queryEditorId={queryEditor.id}\n              queryState={latestQuery?.state}\n              runQuery={runQuery}\n              stopQuery={stopQuery}\n              overlayCreateAsMenu={showMenu ? runMenuBtn : null}\n            />\n          </span>\n          {isFeatureEnabled(FeatureFlag.EstimateQueryCost) &&\n            database?.allows_cost_estimate && (\n              <span>\n                <EstimateQueryCostButton\n                  getEstimate={getQueryCostEstimate}\n                  queryEditorId={queryEditor.id}\n                  tooltip={t('Estimate the cost before running a query')}\n                />\n              </span>\n            )}\n          <span>\n            <QueryLimitSelect\n              queryEditorId={queryEditor.id}\n              maxRow={maxRow}\n              defaultQueryLimit={defaultQueryLimit}\n            />\n          </span>\n          {latestQuery && (\n            <Timer\n              startTime={latestQuery.startDttm}\n              endTime={latestQuery.endDttm}\n              status={STATE_TYPE_MAP[latestQuery.state]}\n              isRunning={latestQuery.state === 'running'}\n            />\n          )}\n        </div>\n        <div className=\"rightItems\">\n          <span>\n            <SaveQuery\n              queryEditorId={queryEditor.id}\n              columns={latestQuery?.results?.columns || []}\n              onSave={onSaveQuery}\n              onUpdate={(query, remoteId) =>\n                dispatch(updateSavedQuery(query, remoteId))\n              }\n              saveQueryWarning={saveQueryWarning}\n              database={database}\n            />\n          </span>\n          <span>\n            <ShareSqlLabQuery queryEditorId={queryEditor.id} />\n          </span>\n          <AntdDropdown overlay={renderDropdown()} trigger={['click']}>\n            <Icons.MoreHoriz iconColor={theme.colors.grayscale.base} />\n          </AntdDropdown>\n        </div>\n      </StyledToolbar>\n    );\n  };\n\n  const handleCursorPositionChange = (newPosition: CursorPosition) => {\n    dispatch(queryEditorSetCursorPosition(queryEditor, newPosition));\n  };\n\n  const queryPane = () => {\n    const { aceEditorHeight, southPaneHeight } =\n      getAceEditorAndSouthPaneHeights(height, northPercent, southPercent);\n    return (\n      <Split\n        expandToMin\n        className=\"queryPane\"\n        sizes={[northPercent, southPercent]}\n        elementStyle={elementStyle}\n        minSize={200}\n        direction=\"vertical\"\n        gutterSize={SQL_EDITOR_GUTTER_HEIGHT}\n        onDragStart={onResizeStart}\n        onDragEnd={onResizeEnd}\n      >\n        <div ref={northPaneRef} className=\"north-pane\">\n          {SqlFormExtension && (\n            <SqlFormExtension\n              queryEditorId={queryEditor.id}\n              setQueryEditorAndSaveSqlWithDebounce={\n                setQueryEditorAndSaveSqlWithDebounce\n              }\n              startQuery={startQuery}\n            />\n          )}\n          <AceEditorWrapper\n            autocomplete={autocompleteEnabled}\n            onBlur={onSqlChanged}\n            onChange={onSqlChanged}\n            queryEditorId={queryEditor.id}\n            onCursorPositionChange={handleCursorPositionChange}\n            height={`${aceEditorHeight}px`}\n            hotkeys={hotkeys}\n          />\n          {renderEditorBottomBar()}\n        </div>\n        <SouthPane\n          queryEditorId={queryEditor.id}\n          latestQueryId={latestQuery?.id}\n          height={southPaneHeight}\n          displayLimit={displayLimit}\n          defaultQueryLimit={defaultQueryLimit}\n        />\n      </Split>\n    );\n  };\n\n  const createViewModalTitle =\n    createAs === CtasEnum.View ? 'CREATE VIEW AS' : 'CREATE TABLE AS';\n\n  const createModalPlaceHolder =\n    createAs === CtasEnum.View\n      ? t('Specify name to CREATE VIEW AS schema in: public')\n      : t('Specify name to CREATE TABLE AS schema in: public');\n\n  const leftBarStateClass = hideLeftBar\n    ? 'schemaPane-exit-done'\n    : 'schemaPane-enter-done';\n  return (\n    <StyledSqlEditor ref={sqlEditorRef} className=\"SqlEditor\">\n      <CSSTransition classNames=\"schemaPane\" in={!hideLeftBar} timeout={300}>\n        <ResizableSidebar\n          id={`sqllab:${queryEditor.id}`}\n          minWidth={SQL_EDITOR_LEFTBAR_WIDTH}\n          initialWidth={SQL_EDITOR_LEFTBAR_WIDTH}\n          enable={!hideLeftBar}\n        >\n          {adjustedWidth => (\n            <StyledSidebar\n              className={`schemaPane ${leftBarStateClass}`}\n              width={adjustedWidth}\n              hide={hideLeftBar}\n            >\n              <SqlEditorLeftBar\n                database={database}\n                queryEditorId={queryEditor.id}\n                setEmptyState={bool => setShowEmptyState(bool)}\n              />\n            </StyledSidebar>\n          )}\n        </ResizableSidebar>\n      </CSSTransition>\n      {shouldLoadQueryEditor ? (\n        <div\n          data-test=\"sqlEditor-loading\"\n          css={css`\n            flex: 1;\n            padding: ${theme.gridUnit * 4}px;\n          `}\n        >\n          <Skeleton active />\n        </div>\n      ) : showEmptyState ? (\n        <EmptyStateBig\n          image=\"vector.svg\"\n          title={t('Select a database to write a query')}\n          description={t(\n            'Choose one of the available databases from the panel on the left.',\n          )}\n        />\n      ) : (\n        queryPane()\n      )}\n      <Modal\n        show={showCreateAsModal}\n        title={t(createViewModalTitle)}\n        onHide={() => setShowCreateAsModal(false)}\n        footer={\n          <>\n            <Button onClick={() => setShowCreateAsModal(false)}>\n              {t('Cancel')}\n            </Button>\n            {createAs === CtasEnum.Table && (\n              <Button\n                buttonStyle=\"primary\"\n                disabled={ctas.length === 0}\n                onClick={createTableAs}\n              >\n                {t('Create')}\n              </Button>\n            )}\n            {createAs === CtasEnum.View && (\n              <Button\n                buttonStyle=\"primary\"\n                disabled={ctas.length === 0}\n                onClick={createViewAs}\n              >\n                {t('Create')}\n              </Button>\n            )}\n          </>\n        }\n      >\n        <span>{t('Name')}</span>\n        <Input placeholder={createModalPlaceHolder} onChange={ctasChanged} />\n      </Modal>\n    </StyledSqlEditor>\n  );\n};\n\nexport default SqlEditor;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}