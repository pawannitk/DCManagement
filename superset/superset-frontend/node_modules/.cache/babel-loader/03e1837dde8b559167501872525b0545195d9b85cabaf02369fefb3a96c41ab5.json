{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { clamp } from '@math.gl/core';\nimport Controller from './controller';\nimport { OrbitState } from './orbit-controller';\nimport LinearInterpolator from '../transitions/linear-interpolator';\n\nclass OrthographicState extends OrbitState {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"zoomAxis\", void 0);\n\n    this.zoomAxis = props.zoomAxis || 'all';\n  }\n\n  _calculateNewZoom({\n    scale,\n    startZoom\n  }) {\n    const {\n      maxZoom,\n      minZoom\n    } = this.getViewportProps();\n\n    if (startZoom === undefined) {\n      startZoom = this.getViewportProps().zoom;\n    }\n\n    let deltaZoom = Math.log2(scale);\n\n    if (Array.isArray(startZoom)) {\n      let [newZoomX, newZoomY] = startZoom;\n\n      switch (this.zoomAxis) {\n        case 'X':\n          newZoomX = clamp(newZoomX + deltaZoom, minZoom, maxZoom);\n          break;\n\n        case 'Y':\n          newZoomY = clamp(newZoomY + deltaZoom, minZoom, maxZoom);\n          break;\n\n        default:\n          let z = Math.min(newZoomX + deltaZoom, newZoomY + deltaZoom);\n\n          if (z < minZoom) {\n            deltaZoom += minZoom - z;\n          }\n\n          z = Math.max(newZoomX + deltaZoom, newZoomY + deltaZoom);\n\n          if (z > maxZoom) {\n            deltaZoom += maxZoom - z;\n          }\n\n          newZoomX += deltaZoom;\n          newZoomY += deltaZoom;\n      }\n\n      return [newZoomX, newZoomY];\n    }\n\n    return clamp(startZoom + deltaZoom, minZoom, maxZoom);\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\n\nexport default class OrthographicController extends Controller {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"ControllerState\", OrthographicState);\n\n    _defineProperty(this, \"transition\", {\n      transitionDuration: 300,\n      transitionInterpolator: new LinearInterpolator(['target', 'zoom'])\n    });\n\n    _defineProperty(this, \"dragMode\", 'pan');\n  }\n\n  _onPanRotate() {\n    return false;\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(OrthographicState, \"OrthographicState\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/core/dist/esm/controllers/orthographic-controller.js\");reactHotLoader.register(OrthographicController, \"OrthographicController\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/core/dist/esm/controllers/orthographic-controller.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["clamp","Controller","OrbitState","LinearInterpolator","OrthographicState","constructor","props","_defineProperty","zoomAxis","_calculateNewZoom","scale","startZoom","maxZoom","minZoom","getViewportProps","undefined","zoom","deltaZoom","Math","log2","Array","isArray","newZoomX","newZoomY","z","min","max","__reactstandin__regenerateByEval","key","code","eval","OrthographicController","args","transitionDuration","transitionInterpolator","_onPanRotate","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["../../../src/controllers/orthographic-controller.ts"],"sourcesContent":["import {clamp} from '@math.gl/core';\nimport Controller from './controller';\nimport {OrbitState} from './orbit-controller';\nimport LinearInterpolator from '../transitions/linear-interpolator';\n\nclass OrthographicState extends OrbitState {\n  zoomAxis: 'X' | 'Y' | 'all';\n\n  constructor(props) {\n    super(props);\n\n    this.zoomAxis = props.zoomAxis || 'all';\n  }\n\n  _calculateNewZoom({scale, startZoom}) {\n    const {maxZoom, minZoom} = this.getViewportProps();\n    if (startZoom === undefined) {\n      startZoom = this.getViewportProps().zoom;\n    }\n    let deltaZoom = Math.log2(scale);\n    if (Array.isArray(startZoom)) {\n      let [newZoomX, newZoomY] = startZoom;\n      switch (this.zoomAxis) {\n        case 'X':\n          // Scale x only\n          newZoomX = clamp(newZoomX + deltaZoom, minZoom, maxZoom);\n          break;\n        case 'Y':\n          // Scale y only\n          newZoomY = clamp(newZoomY + deltaZoom, minZoom, maxZoom);\n          break;\n        default:\n          // Lock aspect ratio\n          let z = Math.min(newZoomX + deltaZoom, newZoomY + deltaZoom);\n          if (z < minZoom) {\n            deltaZoom += minZoom - z;\n          }\n          z = Math.max(newZoomX + deltaZoom, newZoomY + deltaZoom);\n          if (z > maxZoom) {\n            deltaZoom += maxZoom - z;\n          }\n          newZoomX += deltaZoom;\n          newZoomY += deltaZoom;\n      }\n      return [newZoomX, newZoomY];\n    }\n    // Ignore `zoomAxis`\n    // `LinearTransitionInterpolator` does not support interpolation between a number and an array\n    // So if zoom is a number (legacy use case), new zoom still has to be a number\n    return clamp(startZoom + deltaZoom, minZoom, maxZoom);\n  }\n}\n\nexport default class OrthographicController extends Controller<OrbitState> {\n  ControllerState = OrthographicState;\n  transition = {\n    transitionDuration: 300,\n    transitionInterpolator: new LinearInterpolator(['target', 'zoom'])\n  };\n  dragMode: 'pan' | 'rotate' = 'pan';\n\n  _onPanRotate() {\n    // No rotation in orthographic view\n    return false;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}