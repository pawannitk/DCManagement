{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { GenericDataType, smartDateFormatter, t } from '@superset-ui/core';\nimport { D3_FORMAT_DOCS, D3_TIME_FORMAT_OPTIONS, getStandardizedControls } from '@superset-ui/chart-controls';\nimport { headerFontSize, subheaderFontSize } from '../sharedControls';const _default =\n{\n  controlPanelSections: [\n  {\n    label: t('Query'),\n    expanded: true,\n    controlSetRows: [['metric'], ['adhoc_filters']]\n  },\n  {\n    label: t('Display settings'),\n    expanded: true,\n    tabOverride: 'data',\n    controlSetRows: [\n    [\n    {\n      name: 'subheader',\n      config: {\n        type: 'TextControl',\n        label: t('Subheader'),\n        renderTrigger: true,\n        description: t('Description text that shows up below your Big Number')\n      }\n    }]]\n\n\n  },\n  {\n    label: t('Chart Options'),\n    expanded: true,\n    controlSetRows: [\n    [headerFontSize],\n    [subheaderFontSize],\n    ['y_axis_format'],\n    ['currency_format'],\n    [\n    {\n      name: 'time_format',\n      config: {\n        type: 'SelectControl',\n        freeForm: true,\n        label: t('Date format'),\n        renderTrigger: true,\n        choices: D3_TIME_FORMAT_OPTIONS,\n        description: D3_FORMAT_DOCS,\n        default: smartDateFormatter.id\n      }\n    }],\n\n    [\n    {\n      name: 'force_timestamp_formatting',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Force date format'),\n        renderTrigger: true,\n        default: false,\n        description: t('Use date formatting even when metric value is not a timestamp')\n      }\n    }],\n\n    [\n    {\n      name: 'conditional_formatting',\n      config: {\n        type: 'ConditionalFormattingControl',\n        renderTrigger: true,\n        label: t('Conditional Formatting'),\n        description: t('Apply conditional color formatting to metric'),\n        shouldMapStateToProps() {\n          return true;\n        },\n        mapStateToProps(explore, _, chart) {var _explore$datasource, _explore$datasource2, _explore$datasource$c, _explore$datasource3, _chart$queriesRespons, _chart$queriesRespons2;\n          const verboseMap = explore != null && (_explore$datasource = explore.datasource) != null && _explore$datasource.hasOwnProperty('verbose_map') ?\n          explore == null ? void 0 : (_explore$datasource2 = explore.datasource) == null ? void 0 : _explore$datasource2.verbose_map : (_explore$datasource$c =\n          explore == null ? void 0 : (_explore$datasource3 = explore.datasource) == null ? void 0 : _explore$datasource3.columns) != null ? _explore$datasource$c : {};\n          const { colnames, coltypes } = (_chart$queriesRespons = chart == null ? void 0 : (_chart$queriesRespons2 = chart.queriesResponse) == null ? void 0 : _chart$queriesRespons2[0]) != null ? _chart$queriesRespons : {};\n          const numericColumns = Array.isArray(colnames) && Array.isArray(coltypes) ?\n          colnames.\n          filter((colname, index) => coltypes[index] === GenericDataType.Numeric).\n          map((colname) => {var _verboseMap$colname;return {\n              value: colname,\n              label: (_verboseMap$colname = verboseMap[colname]) != null ? _verboseMap$colname : colname\n            };}) :\n          [];\n          return {\n            columnOptions: numericColumns,\n            verboseMap\n          };\n        }\n      }\n    }]]\n\n\n  }],\n\n  controlOverrides: {\n    y_axis_format: {\n      label: t('Number format')\n    }\n  },\n  formDataOverrides: (formData) => ({\n    ...formData,\n    metric: getStandardizedControls().shiftMetric()\n  })\n};export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(_default, \"default\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-echarts/src/BigNumber/BigNumberTotal/controlPanel.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["GenericDataType","smartDateFormatter","t","D3_FORMAT_DOCS","D3_TIME_FORMAT_OPTIONS","getStandardizedControls","headerFontSize","subheaderFontSize","_default","controlPanelSections","label","expanded","controlSetRows","tabOverride","name","config","type","renderTrigger","description","freeForm","choices","default","id","shouldMapStateToProps","mapStateToProps","explore","_","chart","_explore$datasource","_explore$datasource2","_explore$datasource$c","_explore$datasource3","_chart$queriesRespons","_chart$queriesRespons2","verboseMap","datasource","hasOwnProperty","verbose_map","columns","colnames","coltypes","queriesResponse","numericColumns","Array","isArray","filter","colname","index","Numeric","map","_verboseMap$colname","value","columnOptions","controlOverrides","y_axis_format","formDataOverrides","formData","metric","shiftMetric","reactHotLoader","reactHotLoaderGlobal","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-echarts/src/BigNumber/BigNumberTotal/controlPanel.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { GenericDataType, smartDateFormatter, t } from '@superset-ui/core';\nimport {\n  ControlPanelConfig,\n  D3_FORMAT_DOCS,\n  D3_TIME_FORMAT_OPTIONS,\n  Dataset,\n  getStandardizedControls,\n} from '@superset-ui/chart-controls';\nimport { headerFontSize, subheaderFontSize } from '../sharedControls';\n\nexport default {\n  controlPanelSections: [\n    {\n      label: t('Query'),\n      expanded: true,\n      controlSetRows: [['metric'], ['adhoc_filters']],\n    },\n    {\n      label: t('Display settings'),\n      expanded: true,\n      tabOverride: 'data',\n      controlSetRows: [\n        [\n          {\n            name: 'subheader',\n            config: {\n              type: 'TextControl',\n              label: t('Subheader'),\n              renderTrigger: true,\n              description: t(\n                'Description text that shows up below your Big Number',\n              ),\n            },\n          },\n        ],\n      ],\n    },\n    {\n      label: t('Chart Options'),\n      expanded: true,\n      controlSetRows: [\n        [headerFontSize],\n        [subheaderFontSize],\n        ['y_axis_format'],\n        ['currency_format'],\n        [\n          {\n            name: 'time_format',\n            config: {\n              type: 'SelectControl',\n              freeForm: true,\n              label: t('Date format'),\n              renderTrigger: true,\n              choices: D3_TIME_FORMAT_OPTIONS,\n              description: D3_FORMAT_DOCS,\n              default: smartDateFormatter.id,\n            },\n          },\n        ],\n        [\n          {\n            name: 'force_timestamp_formatting',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Force date format'),\n              renderTrigger: true,\n              default: false,\n              description: t(\n                'Use date formatting even when metric value is not a timestamp',\n              ),\n            },\n          },\n        ],\n        [\n          {\n            name: 'conditional_formatting',\n            config: {\n              type: 'ConditionalFormattingControl',\n              renderTrigger: true,\n              label: t('Conditional Formatting'),\n              description: t('Apply conditional color formatting to metric'),\n              shouldMapStateToProps() {\n                return true;\n              },\n              mapStateToProps(explore, _, chart) {\n                const verboseMap = explore?.datasource?.hasOwnProperty(\n                  'verbose_map',\n                )\n                  ? (explore?.datasource as Dataset)?.verbose_map\n                  : explore?.datasource?.columns ?? {};\n                const { colnames, coltypes } =\n                  chart?.queriesResponse?.[0] ?? {};\n                const numericColumns =\n                  Array.isArray(colnames) && Array.isArray(coltypes)\n                    ? colnames\n                        .filter(\n                          (colname: string, index: number) =>\n                            coltypes[index] === GenericDataType.Numeric,\n                        )\n                        .map(colname => ({\n                          value: colname,\n                          label: verboseMap[colname] ?? colname,\n                        }))\n                    : [];\n                return {\n                  columnOptions: numericColumns,\n                  verboseMap,\n                };\n              },\n            },\n          },\n        ],\n      ],\n    },\n  ],\n  controlOverrides: {\n    y_axis_format: {\n      label: t('Number format'),\n    },\n  },\n  formDataOverrides: formData => ({\n    ...formData,\n    metric: getStandardizedControls().shiftMetric(),\n  }),\n} as ControlPanelConfig;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}