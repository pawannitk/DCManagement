{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Framebuffer, Texture2D, isWebGL2, readPixelsToArray, cssToDeviceRatio, cssToDevicePixels } from '@luma.gl/core';\nimport PickLayersPass from '../passes/pick-layers-pass';\nimport { getClosestObject, getUniqueObjects } from './picking/query-object';\nimport { processPickInfo, getLayerPickingInfo, getEmptyPickingInfo } from './picking/pick-info';\nexport default class DeckPicker {\n  constructor(gl) {\n    _defineProperty(this, \"gl\", void 0);\n\n    _defineProperty(this, \"pickingFBO\", void 0);\n\n    _defineProperty(this, \"depthFBO\", void 0);\n\n    _defineProperty(this, \"pickLayersPass\", void 0);\n\n    _defineProperty(this, \"layerFilter\", void 0);\n\n    _defineProperty(this, \"lastPickedInfo\", void 0);\n\n    _defineProperty(this, \"_pickable\", true);\n\n    this.gl = gl;\n    this.pickLayersPass = new PickLayersPass(gl);\n    this.lastPickedInfo = {\n      index: -1,\n      layerId: null,\n      info: null\n    };\n  }\n\n  setProps(props) {\n    if ('layerFilter' in props) {\n      this.layerFilter = props.layerFilter;\n    }\n\n    if ('_pickable' in props) {\n      this._pickable = props._pickable;\n    }\n  }\n\n  finalize() {\n    if (this.pickingFBO) {\n      this.pickingFBO.delete();\n    }\n\n    if (this.depthFBO) {\n      this.depthFBO.color.delete();\n      this.depthFBO.delete();\n    }\n  }\n\n  pickObject(opts) {\n    return this._pickClosestObject(opts);\n  }\n\n  pickObjects(opts) {\n    return this._pickVisibleObjects(opts);\n  }\n\n  getLastPickedObject({\n    x,\n    y,\n    layers,\n    viewports\n  }, lastPickedInfo = this.lastPickedInfo.info) {\n    const lastPickedLayerId = lastPickedInfo && lastPickedInfo.layer && lastPickedInfo.layer.id;\n    const lastPickedViewportId = lastPickedInfo && lastPickedInfo.viewport && lastPickedInfo.viewport.id;\n    const layer = lastPickedLayerId ? layers.find((l) => l.id === lastPickedLayerId) : null;\n    const viewport = lastPickedViewportId && viewports.find((v) => v.id === lastPickedViewportId) || viewports[0];\n    const coordinate = viewport && viewport.unproject([x - viewport.x, y - viewport.y]);\n    const info = {\n      x,\n      y,\n      viewport,\n      coordinate,\n      layer\n    };\n    return { ...lastPickedInfo,\n      ...info\n    };\n  }\n\n  _resizeBuffer() {\n    var _this$pickingFBO, _this$depthFBO;\n\n    const {\n      gl\n    } = this;\n\n    if (!this.pickingFBO) {\n      this.pickingFBO = new Framebuffer(gl);\n\n      if (Framebuffer.isSupported(gl, {\n        colorBufferFloat: true\n      })) {\n        const depthFBO = new Framebuffer(gl);\n        depthFBO.attach({\n          [36064]: new Texture2D(gl, {\n            format: isWebGL2(gl) ? 34836 : 6408,\n            type: 5126\n          })\n        });\n        this.depthFBO = depthFBO;\n      }\n    }\n\n    (_this$pickingFBO = this.pickingFBO) === null || _this$pickingFBO === void 0 ? void 0 : _this$pickingFBO.resize({\n      width: gl.canvas.width,\n      height: gl.canvas.height\n    });\n    (_this$depthFBO = this.depthFBO) === null || _this$depthFBO === void 0 ? void 0 : _this$depthFBO.resize({\n      width: gl.canvas.width,\n      height: gl.canvas.height\n    });\n  }\n\n  _getPickable(layers) {\n    if (this._pickable === false) {\n      return null;\n    }\n\n    const pickableLayers = layers.filter((layer) => this.pickLayersPass.shouldDrawLayer(layer) && !layer.isComposite);\n    return pickableLayers.length ? pickableLayers : null;\n  }\n\n  _pickClosestObject({\n    layers,\n    views,\n    viewports,\n    x,\n    y,\n    radius = 0,\n    depth = 1,\n    mode = 'query',\n    unproject3D,\n    onViewportActive,\n    effects\n  }) {\n    const pickableLayers = this._getPickable(layers);\n\n    const pixelRatio = cssToDeviceRatio(this.gl);\n\n    if (!pickableLayers) {\n      return {\n        result: [],\n        emptyInfo: getEmptyPickingInfo({\n          viewports,\n          x,\n          y,\n          pixelRatio\n        })\n      };\n    }\n\n    this._resizeBuffer();\n\n    const devicePixelRange = cssToDevicePixels(this.gl, [x, y], true);\n    const devicePixel = [devicePixelRange.x + Math.floor(devicePixelRange.width / 2), devicePixelRange.y + Math.floor(devicePixelRange.height / 2)];\n    const deviceRadius = Math.round(radius * pixelRatio);\n    const {\n      width,\n      height\n    } = this.pickingFBO;\n\n    const deviceRect = this._getPickingRect({\n      deviceX: devicePixel[0],\n      deviceY: devicePixel[1],\n      deviceRadius,\n      deviceWidth: width,\n      deviceHeight: height\n    });\n\n    const cullRect = {\n      x: x - radius,\n      y: y - radius,\n      width: radius * 2 + 1,\n      height: radius * 2 + 1\n    };\n    let infos;\n    const result = [];\n    const affectedLayers = new Set();\n\n    for (let i = 0; i < depth; i++) {\n      let pickInfo;\n\n      if (deviceRect) {\n        const pickedResult = this._drawAndSample({\n          layers: pickableLayers,\n          views,\n          viewports,\n          onViewportActive,\n          deviceRect,\n          cullRect,\n          effects,\n          pass: \"picking:\".concat(mode)\n        });\n\n        pickInfo = getClosestObject({ ...pickedResult,\n          deviceX: devicePixel[0],\n          deviceY: devicePixel[1],\n          deviceRadius,\n          deviceRect\n        });\n      } else {\n        pickInfo = {\n          pickedColor: null,\n          pickedObjectIndex: -1\n        };\n      }\n\n      let z;\n\n      if (pickInfo.pickedLayer && unproject3D && this.depthFBO) {\n        const {\n          pickedColors: pickedColors2\n        } = this._drawAndSample({\n          layers: [pickInfo.pickedLayer],\n          views,\n          viewports,\n          onViewportActive,\n          deviceRect: {\n            x: pickInfo.pickedX,\n            y: pickInfo.pickedY,\n            width: 1,\n            height: 1\n          },\n          cullRect,\n          effects,\n          pass: \"picking:\".concat(mode, \":z\")\n        }, true);\n\n        if (pickedColors2[3]) {\n          z = pickedColors2[0];\n        }\n      }\n\n      if (pickInfo.pickedLayer && i + 1 < depth) {\n        affectedLayers.add(pickInfo.pickedLayer);\n        pickInfo.pickedLayer.disablePickingIndex(pickInfo.pickedObjectIndex);\n      }\n\n      infos = processPickInfo({\n        pickInfo,\n        lastPickedInfo: this.lastPickedInfo,\n        mode,\n        layers: pickableLayers,\n        viewports,\n        x,\n        y,\n        z,\n        pixelRatio\n      });\n\n      for (const info of infos.values()) {\n        if (info.layer) {\n          result.push(info);\n        }\n      }\n\n      if (!pickInfo.pickedColor) {\n        break;\n      }\n    }\n\n    for (const layer of affectedLayers) {\n      layer.restorePickingColors();\n    }\n\n    return {\n      result,\n      emptyInfo: infos.get(null)\n    };\n  }\n\n  _pickVisibleObjects({\n    layers,\n    views,\n    viewports,\n    x,\n    y,\n    width = 1,\n    height = 1,\n    mode = 'query',\n    maxObjects = null,\n    onViewportActive,\n    effects\n  }) {\n    const pickableLayers = this._getPickable(layers);\n\n    if (!pickableLayers) {\n      return [];\n    }\n\n    this._resizeBuffer();\n\n    const pixelRatio = cssToDeviceRatio(this.gl);\n    const leftTop = cssToDevicePixels(this.gl, [x, y], true);\n    const deviceLeft = leftTop.x;\n    const deviceTop = leftTop.y + leftTop.height;\n    const rightBottom = cssToDevicePixels(this.gl, [x + width, y + height], true);\n    const deviceRight = rightBottom.x + rightBottom.width;\n    const deviceBottom = rightBottom.y;\n    const deviceRect = {\n      x: deviceLeft,\n      y: deviceBottom,\n      width: deviceRight - deviceLeft,\n      height: deviceTop - deviceBottom\n    };\n\n    const pickedResult = this._drawAndSample({\n      layers: pickableLayers,\n      views,\n      viewports,\n      onViewportActive,\n      deviceRect,\n      cullRect: {\n        x,\n        y,\n        width,\n        height\n      },\n      effects,\n      pass: \"picking:\".concat(mode)\n    });\n\n    const pickInfos = getUniqueObjects(pickedResult);\n    const uniqueInfos = new Map();\n    const isMaxObjects = Number.isFinite(maxObjects);\n\n    for (let i = 0; i < pickInfos.length; i++) {\n      if (isMaxObjects && maxObjects && uniqueInfos.size >= maxObjects) {\n        break;\n      }\n\n      const pickInfo = pickInfos[i];\n      let info = {\n        color: pickInfo.pickedColor,\n        layer: null,\n        index: pickInfo.pickedObjectIndex,\n        picked: true,\n        x,\n        y,\n        pixelRatio\n      };\n      info = getLayerPickingInfo({\n        layer: pickInfo.pickedLayer,\n        info,\n        mode\n      });\n\n      if (!uniqueInfos.has(info.object)) {\n        uniqueInfos.set(info.object, info);\n      }\n    }\n\n    return Array.from(uniqueInfos.values());\n  }\n\n  _drawAndSample({\n    layers,\n    views,\n    viewports,\n    onViewportActive,\n    deviceRect,\n    cullRect,\n    effects,\n    pass\n  }, pickZ = false) {\n    const pickingFBO = pickZ ? this.depthFBO : this.pickingFBO;\n    const opts = {\n      layers,\n      layerFilter: this.layerFilter,\n      views,\n      viewports,\n      onViewportActive,\n      pickingFBO,\n      deviceRect,\n      cullRect,\n      effects,\n      pass,\n      pickZ,\n      preRenderStats: {}\n    };\n\n    for (const effect of effects) {\n      if (effect.useInPicking) {\n        opts.preRenderStats[effect.id] = effect.preRender(this.gl, opts);\n      }\n    }\n\n    const {\n      decodePickingColor\n    } = this.pickLayersPass.render(opts);\n    const {\n      x,\n      y,\n      width,\n      height\n    } = deviceRect;\n    const pickedColors = new (pickZ ? Float32Array : Uint8Array)(width * height * 4);\n    readPixelsToArray(pickingFBO, {\n      sourceX: x,\n      sourceY: y,\n      sourceWidth: width,\n      sourceHeight: height,\n      target: pickedColors\n    });\n    return {\n      pickedColors,\n      decodePickingColor\n    };\n  }\n\n  _getPickingRect({\n    deviceX,\n    deviceY,\n    deviceRadius,\n    deviceWidth,\n    deviceHeight\n  }) {\n    const x = Math.max(0, deviceX - deviceRadius);\n    const y = Math.max(0, deviceY - deviceRadius);\n    const width = Math.min(deviceWidth, deviceX + deviceRadius + 1) - x;\n    const height = Math.min(deviceHeight, deviceY + deviceRadius + 1) - y;\n\n    if (width <= 0 || height <= 0) {\n      return null;\n    }\n\n    return {\n      x,\n      y,\n      width,\n      height\n    };\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(DeckPicker, \"DeckPicker\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/core/dist/esm/lib/deck-picker.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["Framebuffer","Texture2D","isWebGL2","readPixelsToArray","cssToDeviceRatio","cssToDevicePixels","PickLayersPass","getClosestObject","getUniqueObjects","processPickInfo","getLayerPickingInfo","getEmptyPickingInfo","DeckPicker","constructor","gl","_defineProperty","pickLayersPass","lastPickedInfo","index","layerId","info","setProps","props","layerFilter","_pickable","finalize","pickingFBO","delete","depthFBO","color","pickObject","opts","_pickClosestObject","pickObjects","_pickVisibleObjects","getLastPickedObject","x","y","layers","viewports","lastPickedLayerId","layer","id","lastPickedViewportId","viewport","find","l","v","coordinate","unproject","_resizeBuffer","_this$pickingFBO","_this$depthFBO","isSupported","colorBufferFloat","attach","format","type","resize","width","canvas","height","_getPickable","pickableLayers","filter","shouldDrawLayer","isComposite","length","views","radius","depth","mode","unproject3D","onViewportActive","effects","pixelRatio","result","emptyInfo","devicePixelRange","devicePixel","Math","floor","deviceRadius","round","deviceRect","_getPickingRect","deviceX","deviceY","deviceWidth","deviceHeight","cullRect","infos","affectedLayers","Set","i","pickInfo","pickedResult","_drawAndSample","pass","concat","pickedColor","pickedObjectIndex","z","pickedLayer","pickedColors","pickedColors2","pickedX","pickedY","add","disablePickingIndex","values","push","restorePickingColors","get","maxObjects","leftTop","deviceLeft","deviceTop","rightBottom","deviceRight","deviceBottom","pickInfos","uniqueInfos","Map","isMaxObjects","Number","isFinite","size","picked","has","object","set","Array","from","pickZ","preRenderStats","effect","useInPicking","preRender","decodePickingColor","render","Float32Array","Uint8Array","sourceX","sourceY","sourceWidth","sourceHeight","target","max","min","__reactstandin__regenerateByEval","key","code","eval","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["../../../src/lib/deck-picker.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Framebuffer,\n  Texture2D,\n  isWebGL2,\n  readPixelsToArray,\n  cssToDeviceRatio,\n  cssToDevicePixels\n} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\nimport PickLayersPass, {PickingColorDecoder} from '../passes/pick-layers-pass';\nimport {getClosestObject, getUniqueObjects, PickedPixel} from './picking/query-object';\nimport {\n  processPickInfo,\n  getLayerPickingInfo,\n  getEmptyPickingInfo,\n  PickingInfo\n} from './picking/pick-info';\n\nimport type {Framebuffer as LumaFramebuffer} from '@luma.gl/webgl';\nimport type {FilterContext, Rect} from '../passes/layers-pass';\nimport type Layer from './layer';\nimport type {Effect} from './effect';\nimport type View from '../views/view';\nimport type Viewport from '../viewports/viewport';\n\nexport type PickByPointOptions = {\n  x: number;\n  y: number;\n  radius?: number;\n  depth?: number;\n  mode?: string;\n  unproject3D?: boolean;\n};\n\nexport type PickByRectOptions = {\n  x: number;\n  y: number;\n  width?: number;\n  height?: number;\n  mode?: string;\n  maxObjects?: number | null;\n};\n\ntype PickOperationContext = {\n  layers: Layer[];\n  views: Record<string, View>;\n  viewports: Viewport[];\n  onViewportActive: (viewport: Viewport) => void;\n  effects: Effect[];\n};\n\n/** Manages picking in a Deck context */\nexport default class DeckPicker {\n  gl: WebGLRenderingContext;\n  pickingFBO?: LumaFramebuffer;\n  depthFBO?: LumaFramebuffer;\n  pickLayersPass: PickLayersPass;\n  layerFilter?: (context: FilterContext) => boolean;\n\n  /** Identifiers of the previously picked object, for callback tracking and auto highlight */\n  lastPickedInfo: {\n    index: number;\n    layerId: string | null;\n    info: PickingInfo | null;\n  };\n\n  _pickable: boolean = true;\n\n  constructor(gl: WebGLRenderingContext) {\n    this.gl = gl;\n    this.pickLayersPass = new PickLayersPass(gl);\n    this.lastPickedInfo = {\n      index: -1,\n      layerId: null,\n      info: null\n    };\n  }\n\n  setProps(props: any): void {\n    if ('layerFilter' in props) {\n      this.layerFilter = props.layerFilter;\n    }\n\n    if ('_pickable' in props) {\n      this._pickable = props._pickable;\n    }\n  }\n\n  finalize() {\n    if (this.pickingFBO) {\n      this.pickingFBO.delete();\n    }\n    if (this.depthFBO) {\n      this.depthFBO.color.delete();\n      this.depthFBO.delete();\n    }\n  }\n\n  /** Pick the closest info at given coordinate */\n  pickObject(opts: PickByPointOptions & PickOperationContext) {\n    return this._pickClosestObject(opts);\n  }\n\n  /** Get all unique infos within a bounding box */\n  pickObjects(opts: PickByRectOptions & PickOperationContext) {\n    return this._pickVisibleObjects(opts);\n  }\n\n  // Returns a new picking info object by assuming the last picked object is still picked\n  getLastPickedObject({x, y, layers, viewports}, lastPickedInfo = this.lastPickedInfo.info) {\n    const lastPickedLayerId = lastPickedInfo && lastPickedInfo.layer && lastPickedInfo.layer.id;\n    const lastPickedViewportId =\n      lastPickedInfo && lastPickedInfo.viewport && lastPickedInfo.viewport.id;\n    const layer = lastPickedLayerId ? layers.find(l => l.id === lastPickedLayerId) : null;\n    const viewport =\n      (lastPickedViewportId && viewports.find(v => v.id === lastPickedViewportId)) || viewports[0];\n    const coordinate = viewport && viewport.unproject([x - viewport.x, y - viewport.y]);\n\n    const info = {\n      x,\n      y,\n      viewport,\n      coordinate,\n      layer\n    };\n\n    return {...lastPickedInfo, ...info};\n  }\n\n  // Private\n\n  /** Ensures that picking framebuffer exists and matches the canvas size */\n  _resizeBuffer() {\n    const {gl} = this;\n\n    // Create a frame buffer if not already available\n    if (!this.pickingFBO) {\n      this.pickingFBO = new Framebuffer(gl);\n\n      if (Framebuffer.isSupported(gl, {colorBufferFloat: true})) {\n        const depthFBO = new Framebuffer(gl);\n        depthFBO.attach({\n          [GL.COLOR_ATTACHMENT0]: new Texture2D(gl, {\n            format: isWebGL2(gl) ? GL.RGBA32F : GL.RGBA,\n            type: GL.FLOAT\n          })\n        });\n        this.depthFBO = depthFBO;\n      }\n    }\n    // Resize it to current canvas size (this is a noop if size hasn't changed)\n    this.pickingFBO?.resize({width: gl.canvas.width, height: gl.canvas.height});\n    this.depthFBO?.resize({width: gl.canvas.width, height: gl.canvas.height});\n  }\n\n  /** Preliminary filtering of the layers list. Skid picking pass if no layer is pickable. */\n  _getPickable(layers: Layer[]): Layer[] | null {\n    if (this._pickable === false) {\n      return null;\n    }\n    const pickableLayers = layers.filter(\n      layer => this.pickLayersPass.shouldDrawLayer(layer) && !layer.isComposite\n    );\n    return pickableLayers.length ? pickableLayers : null;\n  }\n\n  /** Pick the closest object at the given coordinate */\n  // eslint-disable-next-line max-statements,complexity\n  _pickClosestObject({\n    layers,\n    views,\n    viewports,\n    x,\n    y,\n    radius = 0,\n    depth = 1,\n    mode = 'query',\n    unproject3D,\n    onViewportActive,\n    effects\n  }: PickByPointOptions & PickOperationContext): {\n    result: PickingInfo[];\n    emptyInfo: PickingInfo;\n  } {\n    const pickableLayers = this._getPickable(layers);\n    const pixelRatio = cssToDeviceRatio(this.gl);\n\n    if (!pickableLayers) {\n      return {\n        result: [],\n        emptyInfo: getEmptyPickingInfo({viewports, x, y, pixelRatio})\n      };\n    }\n\n    this._resizeBuffer();\n\n    // Convert from canvas top-left to WebGL bottom-left coordinates\n    // Top-left coordinates [x, y] to bottom-left coordinates [deviceX, deviceY]\n    // And compensate for pixelRatio\n    const devicePixelRange = cssToDevicePixels(this.gl, [x, y], true);\n    const devicePixel = [\n      devicePixelRange.x + Math.floor(devicePixelRange.width / 2),\n      devicePixelRange.y + Math.floor(devicePixelRange.height / 2)\n    ];\n\n    const deviceRadius = Math.round(radius * pixelRatio);\n    const {width, height} = this.pickingFBO as LumaFramebuffer;\n    const deviceRect = this._getPickingRect({\n      deviceX: devicePixel[0],\n      deviceY: devicePixel[1],\n      deviceRadius,\n      deviceWidth: width,\n      deviceHeight: height\n    });\n\n    const cullRect: Rect = {\n      x: x - radius,\n      y: y - radius,\n      width: radius * 2 + 1,\n      height: radius * 2 + 1\n    };\n\n    let infos: Map<string | null, PickingInfo>;\n    const result: PickingInfo[] = [];\n    const affectedLayers = new Set<Layer>();\n\n    for (let i = 0; i < depth; i++) {\n      let pickInfo: PickedPixel;\n\n      if (deviceRect) {\n        const pickedResult = this._drawAndSample({\n          layers: pickableLayers,\n          views,\n          viewports,\n          onViewportActive,\n          deviceRect,\n          cullRect,\n          effects,\n          pass: `picking:${mode}`\n        });\n\n        pickInfo = getClosestObject({\n          ...pickedResult,\n          deviceX: devicePixel[0],\n          deviceY: devicePixel[1],\n          deviceRadius,\n          deviceRect\n        });\n      } else {\n        pickInfo = {\n          pickedColor: null,\n          pickedObjectIndex: -1\n        };\n      }\n\n      let z;\n      if (pickInfo.pickedLayer && unproject3D && this.depthFBO) {\n        const {pickedColors: pickedColors2} = this._drawAndSample(\n          {\n            layers: [pickInfo.pickedLayer],\n            views,\n            viewports,\n            onViewportActive,\n            deviceRect: {\n              x: pickInfo.pickedX as number,\n              y: pickInfo.pickedY as number,\n              width: 1,\n              height: 1\n            },\n            cullRect,\n            effects,\n            pass: `picking:${mode}:z`\n          },\n          true\n        );\n        // picked value is in common space (pixels) from the camera target (viewport.position)\n        // convert it to meters from the ground\n        if (pickedColors2[3]) {\n          z = pickedColors2[0];\n        }\n      }\n\n      // Only exclude if we need to run picking again.\n      // We need to run picking again if an object is detected AND\n      // we have not exhausted the requested depth.\n      if (pickInfo.pickedLayer && i + 1 < depth) {\n        affectedLayers.add(pickInfo.pickedLayer);\n        pickInfo.pickedLayer.disablePickingIndex(pickInfo.pickedObjectIndex);\n      }\n\n      // This logic needs to run even if no object is picked.\n      infos = processPickInfo({\n        pickInfo,\n        lastPickedInfo: this.lastPickedInfo,\n        mode,\n        layers: pickableLayers,\n        viewports,\n        x,\n        y,\n        z,\n        pixelRatio\n      });\n\n      for (const info of infos.values()) {\n        if (info.layer) {\n          result.push(info);\n        }\n      }\n\n      // If no object is picked stop.\n      if (!pickInfo.pickedColor) {\n        break;\n      }\n    }\n\n    // reset only affected buffers\n    for (const layer of affectedLayers) {\n      layer.restorePickingColors();\n    }\n\n    return {result, emptyInfo: infos!.get(null) as PickingInfo};\n  }\n\n  /** Pick all objects within the given bounding box */\n  _pickVisibleObjects({\n    layers,\n    views,\n    viewports,\n    x,\n    y,\n    width = 1,\n    height = 1,\n    mode = 'query',\n    maxObjects = null,\n    onViewportActive,\n    effects\n  }: PickByRectOptions & PickOperationContext): PickingInfo[] {\n    const pickableLayers = this._getPickable(layers);\n\n    if (!pickableLayers) {\n      return [];\n    }\n\n    this._resizeBuffer();\n    // Convert from canvas top-left to WebGL bottom-left coordinates\n    // And compensate for pixelRatio\n    const pixelRatio = cssToDeviceRatio(this.gl);\n    const leftTop = cssToDevicePixels(this.gl, [x, y], true);\n\n    // take left and top (y inverted in device pixels) from start location\n    const deviceLeft = leftTop.x;\n    const deviceTop = leftTop.y + leftTop.height;\n\n    // take right and bottom (y inverted in device pixels) from end location\n    const rightBottom = cssToDevicePixels(this.gl, [x + width, y + height], true);\n    const deviceRight = rightBottom.x + rightBottom.width;\n    const deviceBottom = rightBottom.y;\n\n    const deviceRect = {\n      x: deviceLeft,\n      y: deviceBottom,\n      // deviceTop and deviceRight represent the first pixel outside the desired rect\n      width: deviceRight - deviceLeft,\n      height: deviceTop - deviceBottom\n    };\n\n    const pickedResult = this._drawAndSample({\n      layers: pickableLayers,\n      views,\n      viewports,\n      onViewportActive,\n      deviceRect,\n      cullRect: {x, y, width, height},\n      effects,\n      pass: `picking:${mode}`\n    });\n\n    const pickInfos = getUniqueObjects(pickedResult);\n\n    // Only return unique infos, identified by info.object\n    const uniqueInfos = new Map();\n\n    const isMaxObjects = Number.isFinite(maxObjects);\n\n    for (let i = 0; i < pickInfos.length; i++) {\n      if (isMaxObjects && maxObjects && uniqueInfos.size >= maxObjects) {\n        break;\n      }\n      const pickInfo = pickInfos[i];\n      let info: PickingInfo = {\n        color: pickInfo.pickedColor,\n        layer: null,\n        index: pickInfo.pickedObjectIndex,\n        picked: true,\n        x,\n        y,\n        pixelRatio\n      };\n\n      info = getLayerPickingInfo({layer: pickInfo.pickedLayer as Layer, info, mode});\n      if (!uniqueInfos.has(info.object)) {\n        uniqueInfos.set(info.object, info);\n      }\n    }\n\n    return Array.from(uniqueInfos.values());\n  }\n\n  /** Renders layers into the picking buffer with picking colors and read the pixels. */\n  _drawAndSample(params: {\n    deviceRect: Rect;\n    pass: string;\n    layers: Layer[];\n    views: Record<string, View>;\n    viewports: Viewport[];\n    onViewportActive: (viewport: Viewport) => void;\n    cullRect?: Rect;\n    effects: Effect[];\n  }): {\n    pickedColors: Uint8Array;\n    decodePickingColor: PickingColorDecoder;\n  };\n\n  /** Renders layers into the picking buffer with encoded z values and read the pixels. */\n  _drawAndSample(\n    params: {\n      deviceRect: Rect;\n      pass: string;\n      layers: Layer[];\n      views: Record<string, View>;\n      viewports: Viewport[];\n      onViewportActive: (viewport: Viewport) => void;\n      cullRect?: Rect;\n      effects: Effect[];\n    },\n    pickZ: true\n  ): {\n    pickedColors: Float32Array;\n    decodePickingColor: null;\n  };\n\n  _drawAndSample(\n    {\n      layers,\n      views,\n      viewports,\n      onViewportActive,\n      deviceRect,\n      cullRect,\n      effects,\n      pass\n    }: {\n      deviceRect: Rect;\n      pass: string;\n      layers: Layer[];\n      views: Record<string, View>;\n      viewports: Viewport[];\n      onViewportActive: (viewport: Viewport) => void;\n      cullRect?: Rect;\n      effects: Effect[];\n    },\n    pickZ: boolean = false\n  ): {\n    pickedColors: Uint8Array | Float32Array;\n    decodePickingColor: PickingColorDecoder | null;\n  } {\n    const pickingFBO = pickZ ? this.depthFBO : this.pickingFBO;\n    const opts = {\n      layers,\n      layerFilter: this.layerFilter,\n      views,\n      viewports,\n      onViewportActive,\n      pickingFBO,\n      deviceRect,\n      cullRect,\n      effects,\n      pass,\n      pickZ,\n      preRenderStats: {}\n    };\n\n    for (const effect of effects) {\n      if (effect.useInPicking) {\n        opts.preRenderStats[effect.id] = effect.preRender(this.gl, opts);\n      }\n    }\n\n    const {decodePickingColor} = this.pickLayersPass.render(opts);\n\n    // Read from an already rendered picking buffer\n    // Returns an Uint8ClampedArray of picked pixels\n    const {x, y, width, height} = deviceRect;\n    const pickedColors = new (pickZ ? Float32Array : Uint8Array)(width * height * 4);\n    readPixelsToArray(pickingFBO, {\n      sourceX: x,\n      sourceY: y,\n      sourceWidth: width,\n      sourceHeight: height,\n      target: pickedColors\n    });\n\n    return {pickedColors, decodePickingColor};\n  }\n\n  // Calculate a picking rect centered on deviceX and deviceY and clipped to device\n  // Returns null if pixel is outside of device\n  _getPickingRect({\n    deviceX,\n    deviceY,\n    deviceRadius,\n    deviceWidth,\n    deviceHeight\n  }: {\n    deviceX: number;\n    deviceY: number;\n    deviceRadius: number;\n    deviceWidth: number;\n    deviceHeight: number;\n  }): Rect | null {\n    // Create a box of size `radius * 2 + 1` centered at [deviceX, deviceY]\n    const x = Math.max(0, deviceX - deviceRadius);\n    const y = Math.max(0, deviceY - deviceRadius);\n    const width = Math.min(deviceWidth, deviceX + deviceRadius + 1) - x;\n    const height = Math.min(deviceHeight, deviceY + deviceRadius + 1) - y;\n\n    // x, y out of bounds.\n    if (width <= 0 || height <= 0) {\n      return null;\n    }\n\n    return {x, y, width, height};\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}