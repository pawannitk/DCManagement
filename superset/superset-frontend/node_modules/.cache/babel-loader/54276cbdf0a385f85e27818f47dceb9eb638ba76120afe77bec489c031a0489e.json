{"ast":null,"code":"import _pick from \"lodash/pick\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect } from 'react';\n\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { getItem, LocalStorageKeys, setItem } from 'src/utils/localStorageHelpers';\nimport { getActiveFilters } from 'src/dashboard/util/activeDashboardFilters';\nconst EMPTY_OBJECT = {};\nexport const getDashboardContextLocalStorage = () => {\n  const dashboardsContexts = getItem(LocalStorageKeys.DashboardExploreContext, {});\n  // A new dashboard tab id is generated on each dashboard page opening.\n  // We mark ids as redundant when user leaves the dashboard, because they won't be reused.\n  // Then we remove redundant dashboard contexts from local storage in order not to clutter it\n  return Object.fromEntries(Object.entries(dashboardsContexts).filter(([, value]) => !value.isRedundant));\n};\nconst updateDashboardTabLocalStorage = (dashboardPageId, dashboardContext) => {\n  const dashboardsContexts = getDashboardContextLocalStorage();\n  setItem(LocalStorageKeys.DashboardExploreContext, {\n    ...dashboardsContexts,\n    [dashboardPageId]: dashboardContext\n  });\n};\nconst SyncDashboardState = ({ dashboardPageId }) => {\n  const dashboardContextForExplore = useSelector(({ dashboardInfo, dashboardState, nativeFilters, dataMask }) => {var _dashboardInfo$metada, _dashboardInfo$metada2, _dashboardInfo$metada3;return {\n      labelColors: ((_dashboardInfo$metada = dashboardInfo.metadata) == null ? void 0 : _dashboardInfo$metada.label_colors) || EMPTY_OBJECT,\n      sharedLabelColors: ((_dashboardInfo$metada2 = dashboardInfo.metadata) == null ? void 0 : _dashboardInfo$metada2.shared_label_colors) || EMPTY_OBJECT,\n      colorScheme: dashboardState == null ? void 0 : dashboardState.colorScheme,\n      chartConfiguration: ((_dashboardInfo$metada3 = dashboardInfo.metadata) == null ? void 0 : _dashboardInfo$metada3.chart_configuration) || EMPTY_OBJECT,\n      nativeFilters: Object.entries(nativeFilters.filters).reduce((acc, [key, filterValue]) => ({\n        ...acc,\n        [key]: _pick(filterValue, ['chartsInScope'])\n      }), {}),\n      dataMask,\n      dashboardId: dashboardInfo.id,\n      filterBoxFilters: getActiveFilters(),\n      dashboardPageId\n    };}, shallowEqual);\n  useEffect(() => {\n    updateDashboardTabLocalStorage(dashboardPageId, dashboardContextForExplore);\n    return () => {\n      // mark tab id as redundant when dashboard unmounts - case when user opens\n      // Explore in the same tab\n      updateDashboardTabLocalStorage(dashboardPageId, {\n        ...dashboardContextForExplore,\n        isRedundant: true\n      });\n    };\n  }, [dashboardContextForExplore, dashboardPageId]);\n  return null;\n};__signature__(SyncDashboardState, \"useSelector{dashboardContextForExplore}\\nuseEffect{}\", () => [useSelector]);const _default =\nSyncDashboardState;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(EMPTY_OBJECT, \"EMPTY_OBJECT\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/components/SyncDashboardState/index.tsx\");reactHotLoader.register(getDashboardContextLocalStorage, \"getDashboardContextLocalStorage\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/components/SyncDashboardState/index.tsx\");reactHotLoader.register(updateDashboardTabLocalStorage, \"updateDashboardTabLocalStorage\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/components/SyncDashboardState/index.tsx\");reactHotLoader.register(SyncDashboardState, \"SyncDashboardState\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/components/SyncDashboardState/index.tsx\");reactHotLoader.register(_default, \"default\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/components/SyncDashboardState/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["useEffect","shallowEqual","useSelector","getItem","LocalStorageKeys","setItem","getActiveFilters","EMPTY_OBJECT","getDashboardContextLocalStorage","dashboardsContexts","DashboardExploreContext","Object","fromEntries","entries","filter","value","isRedundant","updateDashboardTabLocalStorage","dashboardPageId","dashboardContext","SyncDashboardState","dashboardContextForExplore","dashboardInfo","dashboardState","nativeFilters","dataMask","_dashboardInfo$metada","_dashboardInfo$metada2","_dashboardInfo$metada3","labelColors","metadata","label_colors","sharedLabelColors","shared_label_colors","colorScheme","chartConfiguration","chart_configuration","filters","reduce","acc","key","filterValue","_pick","dashboardId","id","filterBoxFilters","__signature__","_default","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/components/SyncDashboardState/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect } from 'react';\nimport { pick } from 'lodash';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { DashboardContextForExplore } from 'src/types/DashboardContextForExplore';\nimport {\n  getItem,\n  LocalStorageKeys,\n  setItem,\n} from 'src/utils/localStorageHelpers';\nimport { RootState } from 'src/dashboard/types';\nimport { getActiveFilters } from 'src/dashboard/util/activeDashboardFilters';\n\ntype Props = { dashboardPageId: string };\n\nconst EMPTY_OBJECT = {};\n\nexport const getDashboardContextLocalStorage = () => {\n  const dashboardsContexts = getItem(\n    LocalStorageKeys.DashboardExploreContext,\n    {},\n  );\n  // A new dashboard tab id is generated on each dashboard page opening.\n  // We mark ids as redundant when user leaves the dashboard, because they won't be reused.\n  // Then we remove redundant dashboard contexts from local storage in order not to clutter it\n  return Object.fromEntries(\n    Object.entries(dashboardsContexts).filter(\n      ([, value]) => !value.isRedundant,\n    ),\n  );\n};\n\nconst updateDashboardTabLocalStorage = (\n  dashboardPageId: string,\n  dashboardContext: DashboardContextForExplore,\n) => {\n  const dashboardsContexts = getDashboardContextLocalStorage();\n  setItem(LocalStorageKeys.DashboardExploreContext, {\n    ...dashboardsContexts,\n    [dashboardPageId]: dashboardContext,\n  });\n};\n\nconst SyncDashboardState: React.FC<Props> = ({ dashboardPageId }) => {\n  const dashboardContextForExplore = useSelector<\n    RootState,\n    DashboardContextForExplore\n  >(\n    ({ dashboardInfo, dashboardState, nativeFilters, dataMask }) => ({\n      labelColors: dashboardInfo.metadata?.label_colors || EMPTY_OBJECT,\n      sharedLabelColors:\n        dashboardInfo.metadata?.shared_label_colors || EMPTY_OBJECT,\n      colorScheme: dashboardState?.colorScheme,\n      chartConfiguration:\n        dashboardInfo.metadata?.chart_configuration || EMPTY_OBJECT,\n      nativeFilters: Object.entries(nativeFilters.filters).reduce(\n        (acc, [key, filterValue]) => ({\n          ...acc,\n          [key]: pick(filterValue, ['chartsInScope']),\n        }),\n        {},\n      ),\n      dataMask,\n      dashboardId: dashboardInfo.id,\n      filterBoxFilters: getActiveFilters(),\n      dashboardPageId,\n    }),\n    shallowEqual,\n  );\n\n  useEffect(() => {\n    updateDashboardTabLocalStorage(dashboardPageId, dashboardContextForExplore);\n    return () => {\n      // mark tab id as redundant when dashboard unmounts - case when user opens\n      // Explore in the same tab\n      updateDashboardTabLocalStorage(dashboardPageId, {\n        ...dashboardContextForExplore,\n        isRedundant: true,\n      });\n    };\n  }, [dashboardContextForExplore, dashboardPageId]);\n\n  return null;\n};\n\nexport default SyncDashboardState;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}