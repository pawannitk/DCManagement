{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { getTimeFormatter, getColumnLabel, getNumberFormatter } from '@superset-ui/core';\nimport React, { useCallback } from 'react';\nimport Echart from '../components/Echart';\nimport { NULL_STRING } from '../constants';\nimport { extractTreePathInfo } from './constants';\nimport { formatSeriesName } from '../utils/series';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport default function EchartsTreemap({ echartOptions, emitCrossFilters, groupby, height, labelMap, onContextMenu, refs, setDataMask, selectedValues, width, formData, coltypeMapping }) {\n  const getCrossFilterDataMask = useCallback((data, treePathInfo) => {\n    if (data != null && data.children) {\n      return undefined;\n    }\n    const { treePath } = extractTreePathInfo(treePathInfo);\n    const name = treePath.join(',');\n    const selected = Object.values(selectedValues);\n    let values;\n    if (selected.includes(name)) {\n      values = selected.filter((v) => v !== name);\n    } else\n    {\n      values = [name];\n    }\n    const groupbyValues = values.map((value) => labelMap[value]);\n    return {\n      dataMask: {\n        extraFormData: {\n          filters: values.length === 0 ?\n          [] :\n          groupby.map((col, idx) => {\n            const val = groupbyValues.map((v) => v[idx]);\n            if (val === null || val === undefined)\n            return {\n              col,\n              op: 'IS NULL'\n            };\n            return {\n              col,\n              op: 'IN',\n              val: val\n            };\n          })\n        },\n        filterState: {\n          value: groupbyValues.length ? groupbyValues : null,\n          selectedValues: values.length ? values : null\n        }\n      },\n      isCurrentValueSelected: selected.includes(name)\n    };\n  }, [groupby, labelMap, selectedValues]);\n  const handleChange = useCallback((data, treePathInfo) => {var _getCrossFilterDataMa;\n    if (!emitCrossFilters) {\n      return;\n    }\n    const dataMask = (_getCrossFilterDataMa = getCrossFilterDataMask(data, treePathInfo)) == null ? void 0 : _getCrossFilterDataMa.dataMask;\n    if (dataMask) {\n      setDataMask(dataMask);\n    }\n  }, [emitCrossFilters, getCrossFilterDataMask, setDataMask]);\n  const eventHandlers = {\n    click: (props) => {\n      const { data, treePathInfo } = props;\n      handleChange(data, treePathInfo);\n    },\n    contextmenu: async (eventParams) => {\n      if (onContextMenu) {\n        eventParams.event.stop();\n        const { data, treePathInfo } = eventParams;\n        const { treePath } = extractTreePathInfo(treePathInfo);\n        if (treePath.length > 0) {\n          const pointerEvent = eventParams.event.event;\n          const drillToDetailFilters = [];\n          const drillByFilters = [];\n          treePath.forEach((path, i) => {\n            const val = path === 'null' ? NULL_STRING : path;\n            drillToDetailFilters.push({\n              col: groupby[i],\n              op: '==',\n              val,\n              formattedVal: path\n            });\n            drillByFilters.push({\n              col: groupby[i],\n              op: '==',\n              val,\n              formattedVal: formatSeriesName(val, {\n                timeFormatter: getTimeFormatter(formData.dateFormat),\n                numberFormatter: getNumberFormatter(formData.numberFormat),\n                coltype: coltypeMapping == null ? void 0 : coltypeMapping[getColumnLabel(groupby[i])]\n              })\n            });\n          });\n          onContextMenu(pointerEvent.clientX, pointerEvent.clientY, {\n            drillToDetail: drillToDetailFilters,\n            crossFilter: getCrossFilterDataMask(data, treePathInfo),\n            drillBy: { filters: drillByFilters, groupbyFieldName: 'groupby' }\n          });\n        }\n      }\n    }\n  };\n  return ___EmotionJSX(Echart, { refs: refs, height: height, width: width, echartOptions: echartOptions, eventHandlers: eventHandlers, selectedValues: selectedValues });\n}__signature__(EchartsTreemap, \"useCallback{getCrossFilterDataMask}\\nuseCallback{handleChange}\");;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(EchartsTreemap, \"EchartsTreemap\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-echarts/src/Treemap/EchartsTreemap.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["getTimeFormatter","getColumnLabel","getNumberFormatter","React","useCallback","Echart","NULL_STRING","extractTreePathInfo","formatSeriesName","jsx","___EmotionJSX","EchartsTreemap","echartOptions","emitCrossFilters","groupby","height","labelMap","onContextMenu","refs","setDataMask","selectedValues","width","formData","coltypeMapping","getCrossFilterDataMask","data","treePathInfo","children","undefined","treePath","name","join","selected","Object","values","includes","filter","v","groupbyValues","map","value","dataMask","extraFormData","filters","length","col","idx","val","op","filterState","isCurrentValueSelected","handleChange","_getCrossFilterDataMa","eventHandlers","click","props","contextmenu","eventParams","event","stop","pointerEvent","drillToDetailFilters","drillByFilters","forEach","path","i","push","formattedVal","timeFormatter","dateFormat","numberFormatter","numberFormat","coltype","clientX","clientY","drillToDetail","crossFilter","drillBy","groupbyFieldName","__signature__","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-echarts/src/Treemap/EchartsTreemap.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  DataRecordValue,\n  BinaryQueryObjectFilterClause,\n  getTimeFormatter,\n  getColumnLabel,\n  getNumberFormatter,\n} from '@superset-ui/core';\nimport React, { useCallback } from 'react';\nimport Echart from '../components/Echart';\nimport { NULL_STRING } from '../constants';\nimport { EventHandlers } from '../types';\nimport { extractTreePathInfo } from './constants';\nimport { TreemapTransformedProps } from './types';\nimport { formatSeriesName } from '../utils/series';\n\nexport default function EchartsTreemap({\n  echartOptions,\n  emitCrossFilters,\n  groupby,\n  height,\n  labelMap,\n  onContextMenu,\n  refs,\n  setDataMask,\n  selectedValues,\n  width,\n  formData,\n  coltypeMapping,\n}: TreemapTransformedProps) {\n  const getCrossFilterDataMask = useCallback(\n    (data, treePathInfo) => {\n      if (data?.children) {\n        return undefined;\n      }\n      const { treePath } = extractTreePathInfo(treePathInfo);\n      const name = treePath.join(',');\n      const selected = Object.values(selectedValues);\n      let values: string[];\n      if (selected.includes(name)) {\n        values = selected.filter(v => v !== name);\n      } else {\n        values = [name];\n      }\n\n      const groupbyValues = values.map(value => labelMap[value]);\n\n      return {\n        dataMask: {\n          extraFormData: {\n            filters:\n              values.length === 0\n                ? []\n                : groupby.map((col, idx) => {\n                    const val: DataRecordValue[] = groupbyValues.map(\n                      v => v[idx],\n                    );\n                    if (val === null || val === undefined)\n                      return {\n                        col,\n                        op: 'IS NULL' as const,\n                      };\n                    return {\n                      col,\n                      op: 'IN' as const,\n                      val: val as (string | number | boolean)[],\n                    };\n                  }),\n          },\n          filterState: {\n            value: groupbyValues.length ? groupbyValues : null,\n            selectedValues: values.length ? values : null,\n          },\n        },\n        isCurrentValueSelected: selected.includes(name),\n      };\n    },\n    [groupby, labelMap, selectedValues],\n  );\n\n  const handleChange = useCallback(\n    (data, treePathInfo) => {\n      if (!emitCrossFilters) {\n        return;\n      }\n\n      const dataMask = getCrossFilterDataMask(data, treePathInfo)?.dataMask;\n      if (dataMask) {\n        setDataMask(dataMask);\n      }\n    },\n    [emitCrossFilters, getCrossFilterDataMask, setDataMask],\n  );\n\n  const eventHandlers: EventHandlers = {\n    click: props => {\n      const { data, treePathInfo } = props;\n      handleChange(data, treePathInfo);\n    },\n    contextmenu: async eventParams => {\n      if (onContextMenu) {\n        eventParams.event.stop();\n        const { data, treePathInfo } = eventParams;\n        const { treePath } = extractTreePathInfo(treePathInfo);\n        if (treePath.length > 0) {\n          const pointerEvent = eventParams.event.event;\n          const drillToDetailFilters: BinaryQueryObjectFilterClause[] = [];\n          const drillByFilters: BinaryQueryObjectFilterClause[] = [];\n          treePath.forEach((path, i) => {\n            const val = path === 'null' ? NULL_STRING : path;\n            drillToDetailFilters.push({\n              col: groupby[i],\n              op: '==',\n              val,\n              formattedVal: path,\n            });\n            drillByFilters.push({\n              col: groupby[i],\n              op: '==',\n              val,\n              formattedVal: formatSeriesName(val, {\n                timeFormatter: getTimeFormatter(formData.dateFormat),\n                numberFormatter: getNumberFormatter(formData.numberFormat),\n                coltype: coltypeMapping?.[getColumnLabel(groupby[i])],\n              }),\n            });\n          });\n          onContextMenu(pointerEvent.clientX, pointerEvent.clientY, {\n            drillToDetail: drillToDetailFilters,\n            crossFilter: getCrossFilterDataMask(data, treePathInfo),\n            drillBy: { filters: drillByFilters, groupbyFieldName: 'groupby' },\n          });\n        }\n      }\n    },\n  };\n\n  return (\n    <Echart\n      refs={refs}\n      height={height}\n      width={width}\n      echartOptions={echartOptions}\n      eventHandlers={eventHandlers}\n      selectedValues={selectedValues}\n    />\n  );\n}\n"],"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAkBA,SAGEA,gBAAgB,EAChBC,cAAc,EACdC,kBAAkB,QACb,mBAAmB;AAC1B,OAAOC,KAAK,IAAIC,WAAW,QAAQ,OAAO;AAC1C,OAAOC,MAAM,MAAM,sBAAsB;AACzC,SAASC,WAAW,QAAQ,cAAc;AAE1C,SAASC,mBAAmB,QAAQ,aAAa;AAEjD,SAASC,gBAAgB,QAAQ,iBAAiB,CAAC,SAAAC,GAAA,IAAAC,aAAA;AAEnD,eAAc,SAAUC,cAAcA,CAAC,EACrCC,aAAa,EACbC,gBAAgB,EAChBC,OAAO,EACPC,MAAM,EACNC,QAAQ,EACRC,aAAa,EACbC,IAAI,EACJC,WAAW,EACXC,cAAc,EACdC,KAAK,EACLC,QAAQ,EACRC,cAAc,EACU;EACxB,MAAMC,sBAAsB,GAAGpB,WAAW,CACxC,CAACqB,IAAI,EAAEC,YAAY,KAAI;IACrB,IAAID,IAAI,YAAJA,IAAI,CAAEE,QAAQ,EAAE;MAClB,OAAOC,SAAS;;IAElB,MAAM,EAAEC,QAAQ,EAAE,GAAGtB,mBAAmB,CAACmB,YAAY,CAAC;IACtD,MAAMI,IAAI,GAAGD,QAAQ,CAACE,IAAI,CAAC,GAAG,CAAC;IAC/B,MAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAM,CAACd,cAAc,CAAC;IAC9C,IAAIc,MAAgB;IACpB,IAAIF,QAAQ,CAACG,QAAQ,CAACL,IAAI,CAAC,EAAE;MAC3BI,MAAM,GAAGF,QAAQ,CAACI,MAAM,CAAC,CAAAC,CAAC,KAAIA,CAAC,KAAKP,IAAI,CAAC;KAC1C;IAAM;MACLI,MAAM,GAAG,CAACJ,IAAI,CAAC;;IAGjB,MAAMQ,aAAa,GAAGJ,MAAM,CAACK,GAAG,CAAC,CAAAC,KAAK,KAAIxB,QAAQ,CAACwB,KAAK,CAAC,CAAC;IAE1D,OAAO;MACLC,QAAQ,EAAE;QACRC,aAAa,EAAE;UACbC,OAAO,EACLT,MAAM,CAACU,MAAM,KAAK,CAAC;UACf,EAAE;UACF9B,OAAO,CAACyB,GAAG,CAAC,CAACM,GAAG,EAAEC,GAAG,KAAI;YACvB,MAAMC,GAAG,GAAsBT,aAAa,CAACC,GAAG,CAC9C,CAAAF,CAAC,KAAIA,CAAC,CAACS,GAAG,CAAC,CACZ;YACD,IAAIC,GAAG,KAAK,IAAI,IAAIA,GAAG,KAAKnB,SAAS;YACnC,OAAO;cACLiB,GAAG;cACHG,EAAE,EAAE;aACL;YACH,OAAO;cACLH,GAAG;cACHG,EAAE,EAAE,IAAa;cACjBD,GAAG,EAAEA;aACN;UACH,CAAC;SACR;QACDE,WAAW,EAAE;UACXT,KAAK,EAAEF,aAAa,CAACM,MAAM,GAAGN,aAAa,GAAG,IAAI;UAClDlB,cAAc,EAAEc,MAAM,CAACU,MAAM,GAAGV,MAAM,GAAG;;OAE5C;MACDgB,sBAAsB,EAAElB,QAAQ,CAACG,QAAQ,CAACL,IAAI;KAC/C;EACH,CAAC,EACD,CAAChB,OAAO,EAAEE,QAAQ,EAAEI,cAAc,CAAC,CACpC;EAED,MAAM+B,YAAY,GAAG/C,WAAW,CAC9B,CAACqB,IAAI,EAAEC,YAAY,KAAI,KAAA0B,qBAAA;IACrB,IAAI,CAACvC,gBAAgB,EAAE;MACrB;;IAGF,MAAM4B,QAAQ,IAAAW,qBAAA,GAAG5B,sBAAsB,CAACC,IAAI,EAAEC,YAAY,CAAC,qBAA1C0B,qBAAA,CAA4CX,QAAQ;IACrE,IAAIA,QAAQ,EAAE;MACZtB,WAAW,CAACsB,QAAQ,CAAC;;EAEzB,CAAC,EACD,CAAC5B,gBAAgB,EAAEW,sBAAsB,EAAEL,WAAW,CAAC,CACxD;EAED,MAAMkC,aAAa,GAAkB;IACnCC,KAAK,EAAEA,CAAAC,KAAK,KAAG;MACb,MAAM,EAAE9B,IAAI,EAAEC,YAAY,EAAE,GAAG6B,KAAK;MACpCJ,YAAY,CAAC1B,IAAI,EAAEC,YAAY,CAAC;IAClC,CAAC;IACD8B,WAAW,EAAE,MAAAA,CAAMC,WAAW,KAAG;MAC/B,IAAIxC,aAAa,EAAE;QACjBwC,WAAW,CAACC,KAAK,CAACC,IAAI,EAAE;QACxB,MAAM,EAAElC,IAAI,EAAEC,YAAY,EAAE,GAAG+B,WAAW;QAC1C,MAAM,EAAE5B,QAAQ,EAAE,GAAGtB,mBAAmB,CAACmB,YAAY,CAAC;QACtD,IAAIG,QAAQ,CAACe,MAAM,GAAG,CAAC,EAAE;UACvB,MAAMgB,YAAY,GAAGH,WAAW,CAACC,KAAK,CAACA,KAAK;UAC5C,MAAMG,oBAAoB,GAAoC,EAAE;UAChE,MAAMC,cAAc,GAAoC,EAAE;UAC1DjC,QAAQ,CAACkC,OAAO,CAAC,CAACC,IAAI,EAAEC,CAAC,KAAI;YAC3B,MAAMlB,GAAG,GAAGiB,IAAI,KAAK,MAAM,GAAG1D,WAAW,GAAG0D,IAAI;YAChDH,oBAAoB,CAACK,IAAI,CAAC;cACxBrB,GAAG,EAAE/B,OAAO,CAACmD,CAAC,CAAC;cACfjB,EAAE,EAAE,IAAI;cACRD,GAAG;cACHoB,YAAY,EAAEH;aACf,CAAC;YACFF,cAAc,CAACI,IAAI,CAAC;cAClBrB,GAAG,EAAE/B,OAAO,CAACmD,CAAC,CAAC;cACfjB,EAAE,EAAE,IAAI;cACRD,GAAG;cACHoB,YAAY,EAAE3D,gBAAgB,CAACuC,GAAG,EAAE;gBAClCqB,aAAa,EAAEpE,gBAAgB,CAACsB,QAAQ,CAAC+C,UAAU,CAAC;gBACpDC,eAAe,EAAEpE,kBAAkB,CAACoB,QAAQ,CAACiD,YAAY,CAAC;gBAC1DC,OAAO,EAAEjD,cAAc,oBAAdA,cAAc,CAAGtB,cAAc,CAACa,OAAO,CAACmD,CAAC,CAAC,CAAC;eACrD;aACF,CAAC;UACJ,CAAC,CAAC;UACFhD,aAAa,CAAC2C,YAAY,CAACa,OAAO,EAAEb,YAAY,CAACc,OAAO,EAAE;YACxDC,aAAa,EAAEd,oBAAoB;YACnCe,WAAW,EAAEpD,sBAAsB,CAACC,IAAI,EAAEC,YAAY,CAAC;YACvDmD,OAAO,EAAE,EAAElC,OAAO,EAAEmB,cAAc,EAAEgB,gBAAgB,EAAE,SAAS;WAChE,CAAC;;;IAGR;GACD;EAED,OACEpE,aAAA,CAACL,MAAM,IACLa,IAAI,EAAEA,IAAK,EACXH,MAAM,EAAEA,MAAO,EACfM,KAAK,EAAEA,KAAM,EACbT,aAAa,EAAEA,aAAc,EAC7ByC,aAAa,EAAEA,aAAc,EAC7BjC,cAAc,EAAEA,cAAe,GAC/B;AAEN,CAAC2D,aAAA,CAnIuBpE,cAAc,uFAAAqE,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAC,OAAA,GAAAtD,SAAA,MAAAoD,cAAA,WAAAA,cAAA,CAAAG,QAAA,CAAdxE,cAAc,kKAAAyE,WAAA,UAAAH,oBAAA,mBAAAA,oBAAA,CAAAG,WAAA,GAAAxD,SAAA,CAAAwD,WAAA,IAAAA,WAAA,CAAAC,MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}