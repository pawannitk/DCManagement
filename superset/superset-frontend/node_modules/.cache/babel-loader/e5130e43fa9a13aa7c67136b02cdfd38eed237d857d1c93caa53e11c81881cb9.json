{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitationsxw\n * under the License.\n */\nimport { getXAxisLabel } from '@superset-ui/core';\n/* eslint-disable @typescript-eslint/no-unused-vars */\nexport const prophetOperator = (formData, queryObject) => {\n  const xAxisLabel = getXAxisLabel(formData);\n  if (formData.forecastEnabled && xAxisLabel) {\n    return {\n      operation: 'prophet',\n      options: {\n        time_grain: formData.time_grain_sqla,\n        periods: parseInt(formData.forecastPeriods, 10),\n        confidence_interval: parseFloat(formData.forecastInterval),\n        yearly_seasonality: formData.forecastSeasonalityYearly,\n        weekly_seasonality: formData.forecastSeasonalityWeekly,\n        daily_seasonality: formData.forecastSeasonalityDaily,\n        index: xAxisLabel\n      }\n    };\n  }\n  return undefined;\n};;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(prophetOperator, \"prophetOperator\", \"/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-chart-controls/src/operators/prophetOperator.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["getXAxisLabel","prophetOperator","formData","queryObject","xAxisLabel","forecastEnabled","operation","options","time_grain","time_grain_sqla","periods","parseInt","forecastPeriods","confidence_interval","parseFloat","forecastInterval","yearly_seasonality","forecastSeasonalityYearly","weekly_seasonality","forecastSeasonalityWeekly","daily_seasonality","forecastSeasonalityDaily","index","undefined","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-chart-controls/src/operators/prophetOperator.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitationsxw\n * under the License.\n */\nimport { PostProcessingProphet, getXAxisLabel } from '@superset-ui/core';\nimport { PostProcessingFactory } from './types';\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\nexport const prophetOperator: PostProcessingFactory<PostProcessingProphet> = (\n  formData,\n  queryObject,\n) => {\n  const xAxisLabel = getXAxisLabel(formData);\n  if (formData.forecastEnabled && xAxisLabel) {\n    return {\n      operation: 'prophet',\n      options: {\n        time_grain: formData.time_grain_sqla,\n        periods: parseInt(formData.forecastPeriods, 10),\n        confidence_interval: parseFloat(formData.forecastInterval),\n        yearly_seasonality: formData.forecastSeasonalityYearly,\n        weekly_seasonality: formData.forecastSeasonalityWeekly,\n        daily_seasonality: formData.forecastSeasonalityDaily,\n        index: xAxisLabel,\n      },\n    };\n  }\n  return undefined;\n};\n"],"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAkBA,SAAgCA,aAAa,QAAQ,mBAAmB;AAGxE;AACA,OAAO,MAAMC,eAAe,GAAiDA,CAC3EC,QAAQ,EACRC,WAAW,KACT;EACF,MAAMC,UAAU,GAAGJ,aAAa,CAACE,QAAQ,CAAC;EAC1C,IAAIA,QAAQ,CAACG,eAAe,IAAID,UAAU,EAAE;IAC1C,OAAO;MACLE,SAAS,EAAE,SAAS;MACpBC,OAAO,EAAE;QACPC,UAAU,EAAEN,QAAQ,CAACO,eAAe;QACpCC,OAAO,EAAEC,QAAQ,CAACT,QAAQ,CAACU,eAAe,EAAE,EAAE,CAAC;QAC/CC,mBAAmB,EAAEC,UAAU,CAACZ,QAAQ,CAACa,gBAAgB,CAAC;QAC1DC,kBAAkB,EAAEd,QAAQ,CAACe,yBAAyB;QACtDC,kBAAkB,EAAEhB,QAAQ,CAACiB,yBAAyB;QACtDC,iBAAiB,EAAElB,QAAQ,CAACmB,wBAAwB;QACpDC,KAAK,EAAElB;;KAEV;;EAEH,OAAOmB,SAAS;AAClB,CAAC,CAAC,mBAAAC,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAC,OAAA,GAAAH,SAAA,MAAAC,cAAA,WAAAA,cAAA,CAAAG,QAAA,CApBW1B,eAAe,4KAAA2B,WAAA,UAAAH,oBAAA,mBAAAA,oBAAA,CAAAG,WAAA,GAAAL,SAAA,CAAAK,WAAA,IAAAA,WAAA,CAAAC,MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}