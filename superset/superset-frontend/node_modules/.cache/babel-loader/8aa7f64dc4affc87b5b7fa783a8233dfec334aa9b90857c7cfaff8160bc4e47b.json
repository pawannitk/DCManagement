{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport memoizeOne from 'memoize-one';\nimport { isControlPanelSectionConfig } from '@superset-ui/chart-controls';\nimport { getChartControlPanelRegistry } from '@superset-ui/core';\nimport { controls } from '../explore/controls';\n\nconst memoizedControls = memoizeOne((vizType, controlPanel) => {\n  const controlsMap = {};\n  ((controlPanel == null ? void 0 : controlPanel.controlPanelSections) || []).\n  filter(isControlPanelSectionConfig).\n  forEach((section) => {\n    section.controlSetRows.forEach((row) => {\n      row.forEach((control) => {\n        if (!control) return;\n        if (typeof control === 'string') {\n          // For now, we have to look in controls.jsx to get the config for some controls.\n          // Once everything is migrated out, delete this if statement.\n          controlsMap[control] = controls[control];\n        } else if (control.name && control.config) {\n          // condition needed because there are elements, e.g. <hr /> in some control configs (I'm looking at you, FilterBox!)\n          controlsMap[control.name] = control.config;\n        }\n      });\n    });\n  });\n  return controlsMap;\n});\n\nconst getControlsForVizType = (vizType) => {\n  const controlPanel = getChartControlPanelRegistry().get(vizType);\n  return memoizedControls(vizType, controlPanel);\n};const _default =\n\ngetControlsForVizType;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(memoizedControls, \"memoizedControls\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/utils/getControlsForVizType.js\");reactHotLoader.register(getControlsForVizType, \"getControlsForVizType\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/utils/getControlsForVizType.js\");reactHotLoader.register(_default, \"default\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/utils/getControlsForVizType.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["memoizeOne","isControlPanelSectionConfig","getChartControlPanelRegistry","controls","memoizedControls","vizType","controlPanel","controlsMap","controlPanelSections","filter","forEach","section","controlSetRows","row","control","name","config","getControlsForVizType","get","_default","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/utils/getControlsForVizType.js"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport memoizeOne from 'memoize-one';\nimport { isControlPanelSectionConfig } from '@superset-ui/chart-controls';\nimport { getChartControlPanelRegistry } from '@superset-ui/core';\nimport { controls } from '../explore/controls';\n\nconst memoizedControls = memoizeOne((vizType, controlPanel) => {\n  const controlsMap = {};\n  (controlPanel?.controlPanelSections || [])\n    .filter(isControlPanelSectionConfig)\n    .forEach(section => {\n      section.controlSetRows.forEach(row => {\n        row.forEach(control => {\n          if (!control) return;\n          if (typeof control === 'string') {\n            // For now, we have to look in controls.jsx to get the config for some controls.\n            // Once everything is migrated out, delete this if statement.\n            controlsMap[control] = controls[control];\n          } else if (control.name && control.config) {\n            // condition needed because there are elements, e.g. <hr /> in some control configs (I'm looking at you, FilterBox!)\n            controlsMap[control.name] = control.config;\n          }\n        });\n      });\n    });\n  return controlsMap;\n});\n\nconst getControlsForVizType = vizType => {\n  const controlPanel = getChartControlPanelRegistry().get(vizType);\n  return memoizedControls(vizType, controlPanel);\n};\n\nexport default getControlsForVizType;\n"],"mappings":"wSAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,UAAU,MAAM,aAAa;AACpC,SAASC,2BAA2B,QAAQ,6BAA6B;AACzE,SAASC,4BAA4B,QAAQ,mBAAmB;AAChE,SAASC,QAAQ,QAAQ,qBAAqB;;AAE9C,MAAMC,gBAAgB,GAAGJ,UAAU,CAAC,CAACK,OAAO,EAAEC,YAAY,KAAK;EAC7D,MAAMC,WAAW,GAAG,CAAC,CAAC;EACtB,CAAC,CAAAD,YAAY,oBAAZA,YAAY,CAAEE,oBAAoB,KAAI,EAAE;EACtCC,MAAM,CAACR,2BAA2B,CAAC;EACnCS,OAAO,CAAC,CAAAC,OAAO,KAAI;IAClBA,OAAO,CAACC,cAAc,CAACF,OAAO,CAAC,CAAAG,GAAG,KAAI;MACpCA,GAAG,CAACH,OAAO,CAAC,CAAAI,OAAO,KAAI;QACrB,IAAI,CAACA,OAAO,EAAE;QACd,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;UAC/B;UACA;UACAP,WAAW,CAACO,OAAO,CAAC,GAAGX,QAAQ,CAACW,OAAO,CAAC;QAC1C,CAAC,MAAM,IAAIA,OAAO,CAACC,IAAI,IAAID,OAAO,CAACE,MAAM,EAAE;UACzC;UACAT,WAAW,CAACO,OAAO,CAACC,IAAI,CAAC,GAAGD,OAAO,CAACE,MAAM;QAC5C;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,CAAC;EACJ,OAAOT,WAAW;AACpB,CAAC,CAAC;;AAEF,MAAMU,qBAAqB,GAAGA,CAAAZ,OAAO,KAAI;EACvC,MAAMC,YAAY,GAAGJ,4BAA4B,CAAC,CAAC,CAACgB,GAAG,CAACb,OAAO,CAAC;EAChE,OAAOD,gBAAgB,CAACC,OAAO,EAAEC,YAAY,CAAC;AAChD,CAAC,CAAC,MAAAa,QAAA;;AAEaF,qBAAqB,CAApC,eAAAE,QAAA,CAAqC,mBAAAC,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAC,OAAA,GAAAC,SAAA,MAAAH,cAAA,WAAAA,cAAA,CAAAI,QAAA,CA3B/BpB,gBAAgB,mHAAAgB,cAAA,CAAAI,QAAA,CAsBhBP,qBAAqB,wHAAAG,cAAA,CAAAI,QAAA,CAAAL,QAAA,kIAAAM,WAAA,UAAAJ,oBAAA,mBAAAA,oBAAA,CAAAI,WAAA,GAAAF,SAAA,CAAAE,WAAA,IAAAA,WAAA,CAAAC,MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}