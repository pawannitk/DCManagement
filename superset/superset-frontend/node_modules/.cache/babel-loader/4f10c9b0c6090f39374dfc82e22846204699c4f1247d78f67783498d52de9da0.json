{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { CompositeLayer, AttributeManager, _compareProps as compareProps } from '@deck.gl/core';\nimport { cssToDeviceRatio } from '@luma.gl/core';\nimport { filterProps } from './utils/prop-utils';\nexport default class AggregationLayer extends CompositeLayer {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", void 0);\n  }\n\n  initializeAggregationLayer(dimensions) {\n    super.initializeState(this.context);\n    this.setState({\n      ignoreProps: filterProps(this.constructor._propTypes, dimensions.data.props),\n      dimensions\n    });\n  }\n\n  updateState(opts) {\n    super.updateState(opts);\n    const {\n      changeFlags\n    } = opts;\n\n    if (changeFlags.extensionsChanged) {\n      const shaders = this.getShaders({});\n\n      if (shaders && shaders.defines) {\n        shaders.defines.NON_INSTANCED_MODEL = 1;\n      }\n\n      this.updateShaders(shaders);\n    }\n\n    this._updateAttributes();\n  }\n\n  updateAttributes(changedAttributes) {\n    this.setState({\n      changedAttributes\n    });\n  }\n\n  getAttributes() {\n    return this.getAttributeManager().getShaderAttributes();\n  }\n\n  getModuleSettings() {\n    const {\n      viewport,\n      mousePosition,\n      gl\n    } = this.context;\n    const moduleSettings = Object.assign(Object.create(this.props), {\n      viewport,\n      mousePosition,\n      pickingActive: 0,\n      devicePixelRatio: cssToDeviceRatio(gl)\n    });\n    return moduleSettings;\n  }\n\n  updateShaders(shaders) {}\n\n  isAggregationDirty(updateOpts, params = {}) {\n    const {\n      props,\n      oldProps,\n      changeFlags\n    } = updateOpts;\n    const {\n      compareAll = false,\n      dimension\n    } = params;\n    const {\n      ignoreProps\n    } = this.state;\n    const {\n      props: dataProps,\n      accessors = []\n    } = dimension;\n    const {\n      updateTriggersChanged\n    } = changeFlags;\n\n    if (changeFlags.dataChanged) {\n      return true;\n    }\n\n    if (updateTriggersChanged) {\n      if (updateTriggersChanged.all) {\n        return true;\n      }\n\n      for (const accessor of accessors) {\n        if (updateTriggersChanged[accessor]) {\n          return true;\n        }\n      }\n    }\n\n    if (compareAll) {\n      if (changeFlags.extensionsChanged) {\n        return true;\n      }\n\n      return compareProps({\n        oldProps,\n        newProps: props,\n        ignoreProps,\n        propTypes: this.constructor._propTypes\n      });\n    }\n\n    for (const name of dataProps) {\n      if (props[name] !== oldProps[name]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  isAttributeChanged(name) {\n    const {\n      changedAttributes\n    } = this.state;\n\n    if (!name) {\n      return !isObjectEmpty(changedAttributes);\n    }\n\n    return changedAttributes && changedAttributes[name] !== undefined;\n  }\n\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats\n    });\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\n\n_defineProperty(AggregationLayer, \"layerName\", 'AggregationLayer');\n\nfunction isObjectEmpty(obj) {\n  let isEmpty = true;\n\n  for (const key in obj) {\n    isEmpty = false;\n    break;\n  }\n\n  return isEmpty;\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(AggregationLayer, \"AggregationLayer\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/aggregation-layers/dist/esm/aggregation-layer.js\");reactHotLoader.register(isObjectEmpty, \"isObjectEmpty\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/aggregation-layers/dist/esm/aggregation-layer.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["CompositeLayer","AttributeManager","_compareProps","compareProps","cssToDeviceRatio","filterProps","AggregationLayer","constructor","args","_defineProperty","initializeAggregationLayer","dimensions","initializeState","context","setState","ignoreProps","_propTypes","data","props","updateState","opts","changeFlags","extensionsChanged","shaders","getShaders","defines","NON_INSTANCED_MODEL","updateShaders","_updateAttributes","updateAttributes","changedAttributes","getAttributes","getAttributeManager","getShaderAttributes","getModuleSettings","viewport","mousePosition","gl","moduleSettings","Object","assign","create","pickingActive","devicePixelRatio","isAggregationDirty","updateOpts","params","oldProps","compareAll","dimension","state","dataProps","accessors","updateTriggersChanged","dataChanged","all","accessor","newProps","propTypes","name","isAttributeChanged","isObjectEmpty","undefined","_getAttributeManager","id","stats","__reactstandin__regenerateByEval","key","code","eval","obj","isEmpty","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["../../src/aggregation-layer.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  CompositeLayer,\n  AttributeManager,\n  LayerDataSource,\n  _compareProps as compareProps,\n  UpdateParameters,\n  CompositeLayerProps\n} from '@deck.gl/core';\nimport {cssToDeviceRatio} from '@luma.gl/core';\nimport {filterProps} from './utils/prop-utils';\n\nexport type AggregationLayerProps<DataT> = CompositeLayerProps & {\n  data: LayerDataSource<DataT>;\n};\n\nexport default abstract class AggregationLayer<\n  DataT,\n  ExtraPropsT extends {} = {}\n> extends CompositeLayer<Required<AggregationLayer<DataT>> & ExtraPropsT> {\n  static layerName = 'AggregationLayer';\n\n  state!: CompositeLayer['state'] & {\n    ignoreProps?: Record<string, any>;\n    dimensions?: any;\n  };\n\n  initializeAggregationLayer(dimensions: any) {\n    super.initializeState(this.context);\n\n    this.setState({\n      // Layer props , when changed doesn't require updating aggregation\n      ignoreProps: filterProps((this.constructor as any)._propTypes, dimensions.data.props),\n      dimensions\n    });\n  }\n\n  updateState(opts: UpdateParameters<this>) {\n    super.updateState(opts);\n    const {changeFlags} = opts;\n    if (changeFlags.extensionsChanged) {\n      const shaders = this.getShaders({});\n      if (shaders && shaders.defines) {\n        shaders.defines.NON_INSTANCED_MODEL = 1;\n      }\n      this.updateShaders(shaders);\n    }\n\n    // Explictly call to update attributes as 'CompositeLayer' doesn't call this\n    this._updateAttributes();\n  }\n\n  updateAttributes(changedAttributes) {\n    // Super classes, can refer to state.changedAttributes to determine what\n    // attributes changed\n    this.setState({changedAttributes});\n  }\n\n  getAttributes() {\n    return this.getAttributeManager()!.getShaderAttributes();\n  }\n\n  getModuleSettings() {\n    // For regular layer draw this happens during draw cycle (_drawLayersInViewport) not during update cycle\n    // For aggregation layers this is called during updateState to update aggregation data\n    // NOTE: it is similar to LayerPass._getModuleParameters() but doesn't inlcude `effects` it is not needed for aggregation\n    const {viewport, mousePosition, gl} = this.context;\n    const moduleSettings = Object.assign(Object.create(this.props), {\n      viewport,\n      mousePosition,\n      pickingActive: 0,\n      devicePixelRatio: cssToDeviceRatio(gl)\n    });\n    return moduleSettings;\n  }\n\n  updateShaders(shaders) {\n    // Default implemention is empty, subclasses can update their Model objects if needed\n  }\n\n  /**\n   * Checks if aggregation is dirty\n   * @param {Object} updateOpts - object {props, oldProps, changeFlags}\n   * @param {Object} params - object {dimension, compareAll}\n   * @param {Object} params.dimension - {props, accessors} array of props and/or accessors\n   * @param {Boolean} params.compareAll - when `true` it will include non layer props for comparision\n   * @returns {Boolean} - returns true if dimensions' prop or accessor is changed\n   **/\n  isAggregationDirty(\n    updateOpts,\n    params: {compareAll?: boolean; dimension?: any} = {}\n  ): string | boolean {\n    const {props, oldProps, changeFlags} = updateOpts;\n    const {compareAll = false, dimension} = params;\n    const {ignoreProps} = this.state;\n    const {props: dataProps, accessors = []} = dimension;\n    const {updateTriggersChanged} = changeFlags;\n    if (changeFlags.dataChanged) {\n      return true;\n    }\n    if (updateTriggersChanged) {\n      if (updateTriggersChanged.all) {\n        return true;\n      }\n      for (const accessor of accessors) {\n        if (updateTriggersChanged[accessor]) {\n          return true;\n        }\n      }\n    }\n    if (compareAll) {\n      if (changeFlags.extensionsChanged) {\n        return true;\n      }\n      // Compare non layer props too (like extension props)\n      // ignoreprops refers to all Layer props other than aggregation props that need to be comapred\n      return compareProps({\n        oldProps,\n        newProps: props,\n        ignoreProps,\n        propTypes: (this.constructor as any)._propTypes\n      });\n    }\n    // Compare props of the dimension\n    for (const name of dataProps) {\n      if (props[name] !== oldProps[name]) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Checks if an attribute is changed\n   * @param {String} name - name of the attribute\n   * @returns {Boolean} - `true` if attribute `name` is changed, `false` otherwise,\n   *                       If `name` is not passed or `undefiend`, `true` if any attribute is changed, `false` otherwise\n   **/\n  isAttributeChanged(name?: string) {\n    const {changedAttributes} = this.state;\n    if (!name) {\n      // if name not specified return true if any attribute is changed\n      return !isObjectEmpty(changedAttributes);\n    }\n    return changedAttributes && changedAttributes[name] !== undefined;\n  }\n\n  // Private\n\n  // override Composite layer private method to create AttributeManager instance\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats\n    });\n  }\n}\n\n// Helper methods\n\n// Returns true if given object is empty, false otherwise.\nfunction isObjectEmpty(obj) {\n  let isEmpty = true;\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  for (const key in obj) {\n    isEmpty = false;\n    break;\n  }\n  return isEmpty;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}