{"ast":null,"code":"import _isEqual from \"lodash/isEqual\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport cloudLayout from 'd3-cloud';\nimport { createEncoderFactory } from 'encodable';\nimport { withTheme, seed } from '@superset-ui/core';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst seedRandom = seed('superset-ui');\nexport const ROTATION = {\n  flat: () => 0,\n  // this calculates a random rotation between -90 and 90 degrees.\n  random: () => Math.floor(seedRandom() * 6 - 3) * 30,\n  square: () => Math.floor(seedRandom() * 2) * 90\n};\nconst defaultProps = {\n  encoding: {},\n  rotation: 'flat'\n};\nconst SCALE_FACTOR_STEP = 0.5;\nconst MAX_SCALE_FACTOR = 3;\n// Percentage of top results that will always be displayed.\n// Needed to avoid clutter when shrinking a chart with many records.\nconst TOP_RESULTS_PERCENTAGE = 0.1;\nclass WordCloud extends React.PureComponent {\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  constructor(props) {\n    super(props); // Cannot name it isMounted because of conflict\n    // with React's component function name\n    this.isComponentMounted = false;this.wordCloudEncoderFactory = createEncoderFactory({ channelTypes: { color: 'Color', fontFamily: 'Category', fontSize: 'Numeric', fontWeight: 'Category', text: 'Text' }, defaultEncoding: { color: { value: this.props.theme.colors.grayscale.dark2 }, fontFamily: { value: this.props.theme.typography.families.sansSerif }, fontSize: { value: 20 }, fontWeight: { value: 'bold' }, text: { value: '' } } });this.createEncoder = (encoding) => {const selector = this.wordCloudEncoderFactory.createSelector(); // @ts-ignore\n      return selector(encoding);};this.state = { words: [], scaleFactor: 1\n    };\n    this.setWords = this.setWords.bind(this);\n  }\n  componentDidMount() {\n    this.isComponentMounted = true;\n    this.update();\n  }\n  componentDidUpdate(prevProps) {\n    const { data, encoding, width, height, rotation } = this.props;\n    if (!_isEqual(prevProps.data, data) ||\n    !_isEqual(prevProps.encoding, encoding) ||\n    prevProps.width !== width ||\n    prevProps.height !== height ||\n    prevProps.rotation !== rotation) {\n      this.update();\n    }\n  }\n  componentWillUnmount() {\n    this.isComponentMounted = false;\n  }\n  setWords(words) {\n    if (this.isComponentMounted) {\n      this.setState({ words });\n    }\n  }\n  update() {\n    const { data, encoding } = this.props;\n    const encoder = this.createEncoder(encoding);\n    encoder.setDomainFromDataset(data);\n    const sortedData = [...data].sort((a, b) => encoder.channels.fontSize.encodeDatum(b, 0) -\n    encoder.channels.fontSize.encodeDatum(a, 0));\n    const topResultsCount = Math.max(sortedData.length * TOP_RESULTS_PERCENTAGE, 10);\n    const topResults = sortedData.slice(0, topResultsCount);\n    // Ensure top results are always included in the final word cloud by scaling chart down if needed\n    this.generateCloud(encoder, 1, (words) => topResults.every((d) => words.find(({ text }) => encoder.channels.text.getValueFromDatum(d) === text)));\n  }\n  generateCloud(encoder, scaleFactor, isValid) {\n    const { data, width, height, rotation } = this.props;\n    cloudLayout().\n    size([width * scaleFactor, height * scaleFactor])\n    // clone the data because cloudLayout mutates input\n    .words(data.map((d) => ({ ...d }))).\n    padding(5).\n    rotate(ROTATION[rotation] || ROTATION.flat).\n    text((d) => encoder.channels.text.getValueFromDatum(d)).\n    font((d) => encoder.channels.fontFamily.encodeDatum(d, this.props.theme.typography.families.sansSerif)).\n    fontWeight((d) => encoder.channels.fontWeight.encodeDatum(d, 'normal')).\n    fontSize((d) => encoder.channels.fontSize.encodeDatum(d, 0)).\n    on('end', (words) => {\n      if (isValid(words) || scaleFactor > MAX_SCALE_FACTOR) {\n        if (this.isComponentMounted) {\n          this.setState({ words, scaleFactor });\n        }\n      } else\n      {\n        this.generateCloud(encoder, scaleFactor + SCALE_FACTOR_STEP, isValid);\n      }\n    }).\n    start();\n  }\n  render() {\n    const { scaleFactor } = this.state;\n    const { width, height, encoding, sliceId } = this.props;\n    const { words } = this.state;\n    // @ts-ignore\n    const encoder = this.createEncoder(encoding);\n    encoder.channels.color.setDomainFromDataset(words);\n    const { getValueFromDatum } = encoder.channels.color;\n    const colorFn = encoder.channels.color.scale;\n    const viewBoxWidth = width * scaleFactor;\n    const viewBoxHeight = height * scaleFactor;\n    return ___EmotionJSX(\"svg\", { width: width, height: height, viewBox: `-${viewBoxWidth / 2} -${viewBoxHeight / 2} ${viewBoxWidth} ${viewBoxHeight}` },\n    ___EmotionJSX(\"g\", null,\n    words.map((w) => ___EmotionJSX(\"text\", { key: w.text, fontSize: `${w.size}px`, fontWeight: w.weight, fontFamily: w.font, fill: colorFn(getValueFromDatum(w), sliceId), textAnchor: \"middle\", transform: `translate(${w.x}, ${w.y}) rotate(${w.rotate})` },\n    w.text\n    ))\n    )\n    );\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}WordCloud.defaultProps = defaultProps;const _default = withTheme(WordCloud);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(seedRandom, \"seedRandom\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-word-cloud/src/chart/WordCloud.tsx\");reactHotLoader.register(ROTATION, \"ROTATION\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-word-cloud/src/chart/WordCloud.tsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-word-cloud/src/chart/WordCloud.tsx\");reactHotLoader.register(SCALE_FACTOR_STEP, \"SCALE_FACTOR_STEP\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-word-cloud/src/chart/WordCloud.tsx\");reactHotLoader.register(MAX_SCALE_FACTOR, \"MAX_SCALE_FACTOR\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-word-cloud/src/chart/WordCloud.tsx\");reactHotLoader.register(TOP_RESULTS_PERCENTAGE, \"TOP_RESULTS_PERCENTAGE\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-word-cloud/src/chart/WordCloud.tsx\");reactHotLoader.register(WordCloud, \"WordCloud\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-word-cloud/src/chart/WordCloud.tsx\");reactHotLoader.register(_default, \"default\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-word-cloud/src/chart/WordCloud.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["React","cloudLayout","createEncoderFactory","withTheme","seed","jsx","___EmotionJSX","seedRandom","ROTATION","flat","random","Math","floor","square","defaultProps","encoding","rotation","SCALE_FACTOR_STEP","MAX_SCALE_FACTOR","TOP_RESULTS_PERCENTAGE","WordCloud","PureComponent","constructor","props","isComponentMounted","wordCloudEncoderFactory","channelTypes","color","fontFamily","fontSize","fontWeight","text","defaultEncoding","value","theme","colors","grayscale","dark2","typography","families","sansSerif","createEncoder","selector","createSelector","state","words","scaleFactor","setWords","bind","componentDidMount","update","componentDidUpdate","prevProps","data","width","height","_isEqual","componentWillUnmount","setState","encoder","setDomainFromDataset","sortedData","sort","a","b","channels","encodeDatum","topResultsCount","max","length","topResults","slice","generateCloud","every","d","find","getValueFromDatum","isValid","size","map","padding","rotate","font","on","start","render","sliceId","colorFn","scale","viewBoxWidth","viewBoxHeight","viewBox","w","key","weight","fill","textAnchor","transform","x","y","__reactstandin__regenerateByEval","code","eval","_default","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-word-cloud/src/chart/WordCloud.tsx"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport cloudLayout, { Word } from 'd3-cloud';\nimport {\n  PlainObject,\n  createEncoderFactory,\n  DeriveEncoding,\n  Encoder,\n} from 'encodable';\nimport {\n  SupersetThemeProps,\n  withTheme,\n  seed,\n  CategoricalColorScale,\n} from '@superset-ui/core';\nimport { isEqual } from 'lodash';\n\nconst seedRandom = seed('superset-ui');\nexport const ROTATION = {\n  flat: () => 0,\n  // this calculates a random rotation between -90 and 90 degrees.\n  random: () => Math.floor(seedRandom() * 6 - 3) * 30,\n  square: () => Math.floor(seedRandom() * 2) * 90,\n};\n\nexport type RotationType = keyof typeof ROTATION;\n\nexport type WordCloudEncoding = DeriveEncoding<WordCloudEncodingConfig>;\n\ntype WordCloudEncodingConfig = {\n  color: ['Color', string];\n  fontFamily: ['Category', string];\n  fontSize: ['Numeric', number];\n  fontWeight: ['Category', string | number];\n  text: ['Text', string];\n};\n\n/**\n * These props should be stored when saving the chart.\n */\nexport interface WordCloudVisualProps {\n  encoding?: Partial<WordCloudEncoding>;\n  rotation?: RotationType;\n}\n\nexport interface WordCloudProps extends WordCloudVisualProps {\n  data: PlainObject[];\n  height: number;\n  width: number;\n  sliceId: number;\n}\n\nexport interface WordCloudState {\n  words: Word[];\n  scaleFactor: number;\n}\n\nconst defaultProps: Required<WordCloudVisualProps> = {\n  encoding: {},\n  rotation: 'flat',\n};\n\ntype FullWordCloudProps = WordCloudProps &\n  typeof defaultProps &\n  SupersetThemeProps;\n\nconst SCALE_FACTOR_STEP = 0.5;\nconst MAX_SCALE_FACTOR = 3;\n// Percentage of top results that will always be displayed.\n// Needed to avoid clutter when shrinking a chart with many records.\nconst TOP_RESULTS_PERCENTAGE = 0.1;\n\nclass WordCloud extends React.PureComponent<\n  FullWordCloudProps,\n  WordCloudState\n> {\n  static defaultProps = defaultProps;\n\n  // Cannot name it isMounted because of conflict\n  // with React's component function name\n  isComponentMounted = false;\n\n  wordCloudEncoderFactory = createEncoderFactory<WordCloudEncodingConfig>({\n    channelTypes: {\n      color: 'Color',\n      fontFamily: 'Category',\n      fontSize: 'Numeric',\n      fontWeight: 'Category',\n      text: 'Text',\n    },\n    defaultEncoding: {\n      color: { value: this.props.theme.colors.grayscale.dark2 },\n      fontFamily: { value: this.props.theme.typography.families.sansSerif },\n      fontSize: { value: 20 },\n      fontWeight: { value: 'bold' },\n      text: { value: '' },\n    },\n  });\n\n  createEncoder = (encoding?: Partial<WordCloudEncoding>) => {\n    const selector = this.wordCloudEncoderFactory.createSelector();\n\n    // @ts-ignore\n    return selector(encoding as any);\n  };\n\n  constructor(props: FullWordCloudProps) {\n    super(props);\n    this.state = {\n      words: [],\n      scaleFactor: 1,\n    };\n    this.setWords = this.setWords.bind(this);\n  }\n\n  componentDidMount() {\n    this.isComponentMounted = true;\n    this.update();\n  }\n\n  componentDidUpdate(prevProps: WordCloudProps) {\n    const { data, encoding, width, height, rotation } = this.props;\n\n    if (\n      !isEqual(prevProps.data, data) ||\n      !isEqual(prevProps.encoding, encoding) ||\n      prevProps.width !== width ||\n      prevProps.height !== height ||\n      prevProps.rotation !== rotation\n    ) {\n      this.update();\n    }\n  }\n\n  componentWillUnmount() {\n    this.isComponentMounted = false;\n  }\n\n  setWords(words: Word[]) {\n    if (this.isComponentMounted) {\n      this.setState({ words });\n    }\n  }\n\n  update() {\n    const { data, encoding } = this.props;\n\n    const encoder: Encoder<WordCloudEncodingConfig> =\n      this.createEncoder(encoding);\n    encoder.setDomainFromDataset(data);\n\n    const sortedData = [...data].sort(\n      (a, b) =>\n        encoder.channels.fontSize.encodeDatum(b, 0) -\n        encoder.channels.fontSize.encodeDatum(a, 0),\n    );\n    const topResultsCount = Math.max(\n      sortedData.length * TOP_RESULTS_PERCENTAGE,\n      10,\n    );\n    const topResults = sortedData.slice(0, topResultsCount);\n\n    // Ensure top results are always included in the final word cloud by scaling chart down if needed\n    this.generateCloud(encoder, 1, (words: Word[]) =>\n      topResults.every((d: PlainObject) =>\n        words.find(\n          ({ text }) => encoder.channels.text.getValueFromDatum(d) === text,\n        ),\n      ),\n    );\n  }\n\n  generateCloud(\n    encoder: Encoder<WordCloudEncodingConfig>,\n    scaleFactor: number,\n    isValid: (word: Word[]) => boolean,\n  ) {\n    const { data, width, height, rotation } = this.props;\n\n    cloudLayout()\n      .size([width * scaleFactor, height * scaleFactor])\n      // clone the data because cloudLayout mutates input\n      .words(data.map(d => ({ ...d })))\n      .padding(5)\n      .rotate(ROTATION[rotation] || ROTATION.flat)\n      .text(d => encoder.channels.text.getValueFromDatum(d))\n      .font(d =>\n        encoder.channels.fontFamily.encodeDatum(\n          d,\n          this.props.theme.typography.families.sansSerif,\n        ),\n      )\n      .fontWeight(d => encoder.channels.fontWeight.encodeDatum(d, 'normal'))\n      .fontSize(d => encoder.channels.fontSize.encodeDatum(d, 0))\n      .on('end', (words: Word[]) => {\n        if (isValid(words) || scaleFactor > MAX_SCALE_FACTOR) {\n          if (this.isComponentMounted) {\n            this.setState({ words, scaleFactor });\n          }\n        } else {\n          this.generateCloud(encoder, scaleFactor + SCALE_FACTOR_STEP, isValid);\n        }\n      })\n      .start();\n  }\n\n  render() {\n    const { scaleFactor } = this.state;\n    const { width, height, encoding, sliceId } = this.props;\n    const { words } = this.state;\n\n    // @ts-ignore\n    const encoder = this.createEncoder(encoding);\n    encoder.channels.color.setDomainFromDataset(words);\n\n    const { getValueFromDatum } = encoder.channels.color;\n    const colorFn = encoder.channels.color.scale as CategoricalColorScale;\n\n    const viewBoxWidth = width * scaleFactor;\n    const viewBoxHeight = height * scaleFactor;\n\n    return (\n      <svg\n        width={width}\n        height={height}\n        viewBox={`-${viewBoxWidth / 2} -${\n          viewBoxHeight / 2\n        } ${viewBoxWidth} ${viewBoxHeight}`}\n      >\n        <g>\n          {words.map(w => (\n            <text\n              key={w.text}\n              fontSize={`${w.size}px`}\n              fontWeight={w.weight}\n              fontFamily={w.font}\n              fill={colorFn(getValueFromDatum(w) as string, sliceId)}\n              textAnchor=\"middle\"\n              transform={`translate(${w.x}, ${w.y}) rotate(${w.rotate})`}\n            >\n              {w.text}\n            </text>\n          ))}\n        </g>\n      </svg>\n    );\n  }\n}\n\nexport default withTheme(WordCloud);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}