{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback } from 'react';\nimport { getColumnLabel, getNumberFormatter, getTimeFormatter } from '@superset-ui/core';\nimport Echart from '../components/Echart';\nimport { formatSeriesName } from '../utils/series';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport const extractTreePathInfo = (treePathInfo) => (treePathInfo != null ? treePathInfo : []).\nmap((pathInfo) => (pathInfo == null ? void 0 : pathInfo.name) || '').\nfilter((path) => path !== '');\nexport default function EchartsSunburst(props) {\n  const { height, width, echartOptions, setDataMask, labelMap, selectedValues, formData, onContextMenu, refs, emitCrossFilters, coltypeMapping } = props;\n  const { columns } = formData;\n  const getCrossFilterDataMask = useCallback((treePathInfo) => {\n    const treePath = extractTreePathInfo(treePathInfo);\n    const name = treePath.join(',');\n    const selected = Object.values(selectedValues);\n    let values;\n    if (selected.includes(name)) {\n      values = selected.filter((v) => v !== name);\n    } else\n    {\n      values = [name];\n    }\n    const labels = values.map((value) => labelMap[value]);\n    return {\n      dataMask: {\n        extraFormData: {\n          filters: values.length === 0 || !columns ?\n          [] :\n          columns.slice(0, treePath.length).map((col, idx) => {\n            const val = labels.map((v) => v[idx]);\n            if (val === null || val === undefined)\n            return {\n              col,\n              op: 'IS NULL'\n            };\n            return {\n              col,\n              op: 'IN',\n              val: val\n            };\n          })\n        },\n        filterState: {\n          value: labels.length ? labels : null,\n          selectedValues: values.length ? values : null\n        }\n      },\n      isCurrentValueSelected: selected.includes(name)\n    };\n  }, [columns, labelMap, selectedValues]);\n  const handleChange = useCallback((treePathInfo) => {\n    if (!emitCrossFilters) {\n      return;\n    }\n    setDataMask(getCrossFilterDataMask(treePathInfo).dataMask);\n  }, [emitCrossFilters, setDataMask, getCrossFilterDataMask]);\n  const eventHandlers = {\n    click: (props) => {\n      const { treePathInfo } = props;\n      handleChange(treePathInfo);\n    },\n    contextmenu: async (eventParams) => {\n      if (onContextMenu) {\n        eventParams.event.stop();\n        const { data, treePathInfo } = eventParams;\n        const { records } = data;\n        const treePath = extractTreePathInfo(eventParams.treePathInfo);\n        const pointerEvent = eventParams.event.event;\n        const drillToDetailFilters = [];\n        const drillByFilters = [];\n        if (columns != null && columns.length) {\n          treePath.forEach((path, i) => drillToDetailFilters.push({\n            col: columns[i],\n            op: '==',\n            val: records[i],\n            formattedVal: path\n          }));\n          const val = treePath[treePath.length - 1];\n          drillByFilters.push({\n            col: columns[treePath.length - 1],\n            op: '==',\n            val,\n            formattedVal: formatSeriesName(val, {\n              timeFormatter: getTimeFormatter(formData.dateFormat),\n              numberFormatter: getNumberFormatter(formData.numberFormat),\n              coltype: coltypeMapping == null ? void 0 : coltypeMapping[getColumnLabel(columns[treePath.length - 1])]\n            })\n          });\n        }\n        onContextMenu(pointerEvent.clientX, pointerEvent.clientY, {\n          drillToDetail: drillToDetailFilters,\n          crossFilter: getCrossFilterDataMask(treePathInfo),\n          drillBy: { filters: drillByFilters, groupbyFieldName: 'columns' }\n        });\n      }\n    }\n  };\n  return ___EmotionJSX(Echart, { refs: refs, height: height, width: width, echartOptions: echartOptions, eventHandlers: eventHandlers, selectedValues: selectedValues });\n}__signature__(EchartsSunburst, \"useCallback{getCrossFilterDataMask}\\nuseCallback{handleChange}\");;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(extractTreePathInfo, \"extractTreePathInfo\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-echarts/src/Sunburst/EchartsSunburst.tsx\");reactHotLoader.register(EchartsSunburst, \"EchartsSunburst\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-echarts/src/Sunburst/EchartsSunburst.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["React","useCallback","getColumnLabel","getNumberFormatter","getTimeFormatter","Echart","formatSeriesName","jsx","___EmotionJSX","extractTreePathInfo","treePathInfo","map","pathInfo","name","filter","path","EchartsSunburst","props","height","width","echartOptions","setDataMask","labelMap","selectedValues","formData","onContextMenu","refs","emitCrossFilters","coltypeMapping","columns","getCrossFilterDataMask","treePath","join","selected","Object","values","includes","v","labels","value","dataMask","extraFormData","filters","length","slice","col","idx","val","undefined","op","filterState","isCurrentValueSelected","handleChange","eventHandlers","click","contextmenu","eventParams","event","stop","data","records","pointerEvent","drillToDetailFilters","drillByFilters","forEach","i","push","formattedVal","timeFormatter","dateFormat","numberFormatter","numberFormat","coltype","clientX","clientY","drillToDetail","crossFilter","drillBy","groupbyFieldName","__signature__","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-echarts/src/Sunburst/EchartsSunburst.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback } from 'react';\nimport {\n  BinaryQueryObjectFilterClause,\n  getColumnLabel,\n  getNumberFormatter,\n  getTimeFormatter,\n} from '@superset-ui/core';\nimport { SunburstTransformedProps } from './types';\nimport Echart from '../components/Echart';\nimport { EventHandlers, TreePathInfo } from '../types';\nimport { formatSeriesName } from '../utils/series';\n\nexport const extractTreePathInfo = (treePathInfo: TreePathInfo[] | undefined) =>\n  (treePathInfo ?? [])\n    .map(pathInfo => pathInfo?.name || '')\n    .filter(path => path !== '');\n\nexport default function EchartsSunburst(props: SunburstTransformedProps) {\n  const {\n    height,\n    width,\n    echartOptions,\n    setDataMask,\n    labelMap,\n    selectedValues,\n    formData,\n    onContextMenu,\n    refs,\n    emitCrossFilters,\n    coltypeMapping,\n  } = props;\n  const { columns } = formData;\n\n  const getCrossFilterDataMask = useCallback(\n    (treePathInfo: TreePathInfo[]) => {\n      const treePath = extractTreePathInfo(treePathInfo);\n      const name = treePath.join(',');\n      const selected = Object.values(selectedValues);\n      let values: string[];\n      if (selected.includes(name)) {\n        values = selected.filter(v => v !== name);\n      } else {\n        values = [name];\n      }\n      const labels = values.map(value => labelMap[value]);\n\n      return {\n        dataMask: {\n          extraFormData: {\n            filters:\n              values.length === 0 || !columns\n                ? []\n                : columns.slice(0, treePath.length).map((col, idx) => {\n                    const val = labels.map(v => v[idx]);\n                    if (val === null || val === undefined)\n                      return {\n                        col,\n                        op: 'IS NULL' as const,\n                      };\n                    return {\n                      col,\n                      op: 'IN' as const,\n                      val: val as (string | number | boolean)[],\n                    };\n                  }),\n          },\n          filterState: {\n            value: labels.length ? labels : null,\n            selectedValues: values.length ? values : null,\n          },\n        },\n        isCurrentValueSelected: selected.includes(name),\n      };\n    },\n    [columns, labelMap, selectedValues],\n  );\n\n  const handleChange = useCallback(\n    (treePathInfo: TreePathInfo[]) => {\n      if (!emitCrossFilters) {\n        return;\n      }\n\n      setDataMask(getCrossFilterDataMask(treePathInfo).dataMask);\n    },\n    [emitCrossFilters, setDataMask, getCrossFilterDataMask],\n  );\n\n  const eventHandlers: EventHandlers = {\n    click: props => {\n      const { treePathInfo } = props;\n      handleChange(treePathInfo);\n    },\n    contextmenu: async eventParams => {\n      if (onContextMenu) {\n        eventParams.event.stop();\n        const { data, treePathInfo } = eventParams;\n        const { records } = data;\n        const treePath = extractTreePathInfo(eventParams.treePathInfo);\n        const pointerEvent = eventParams.event.event;\n        const drillToDetailFilters: BinaryQueryObjectFilterClause[] = [];\n        const drillByFilters: BinaryQueryObjectFilterClause[] = [];\n        if (columns?.length) {\n          treePath.forEach((path, i) =>\n            drillToDetailFilters.push({\n              col: columns[i],\n              op: '==',\n              val: records[i],\n              formattedVal: path,\n            }),\n          );\n          const val = treePath[treePath.length - 1];\n          drillByFilters.push({\n            col: columns[treePath.length - 1],\n            op: '==',\n            val,\n            formattedVal: formatSeriesName(val, {\n              timeFormatter: getTimeFormatter(formData.dateFormat),\n              numberFormatter: getNumberFormatter(formData.numberFormat),\n              coltype:\n                coltypeMapping?.[getColumnLabel(columns[treePath.length - 1])],\n            }),\n          });\n        }\n        onContextMenu(pointerEvent.clientX, pointerEvent.clientY, {\n          drillToDetail: drillToDetailFilters,\n          crossFilter: getCrossFilterDataMask(treePathInfo),\n          drillBy: { filters: drillByFilters, groupbyFieldName: 'columns' },\n        });\n      }\n    },\n  };\n\n  return (\n    <Echart\n      refs={refs}\n      height={height}\n      width={width}\n      echartOptions={echartOptions}\n      eventHandlers={eventHandlers}\n      selectedValues={selectedValues}\n    />\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}