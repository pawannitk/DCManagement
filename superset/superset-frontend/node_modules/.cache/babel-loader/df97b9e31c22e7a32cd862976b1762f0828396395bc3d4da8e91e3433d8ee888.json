{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable camelcase */\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { isAdhocColumn, t, styled, css, DatasourceType } from '@superset-ui/core';\nimport { isSavedExpression } from '@superset-ui/chart-controls';\nimport Tabs from 'src/components/Tabs';\nimport Button from 'src/components/Button';\nimport { Select } from 'src/components';\nimport { Form, FormItem } from 'src/components/Form';\nimport { SQLEditor } from 'src/components/AsyncAceEditor';\nimport { EmptyStateSmall } from 'src/components/EmptyState';\nimport { StyledColumnOption } from 'src/explore/components/optionRenderers';\nimport { POPOVER_INITIAL_HEIGHT, POPOVER_INITIAL_WIDTH } from 'src/explore/constants';\nimport useResizeButton from './useResizeButton';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst StyledSelect = styled(Select)`\n  .metric-option {\n    & > svg {\n      min-width: ${({ theme }) => `${theme.gridUnit * 4}px`};\n    }\n    & > .option-label {\n      overflow: hidden;\n      text-overflow: ellipsis;\n    }\n  }\n`;\nconst getInitialColumnValues = (editedColumn) => {\n  if (!editedColumn) {\n    return [undefined, undefined, undefined];\n  }\n  if (isAdhocColumn(editedColumn)) {\n    return [editedColumn, undefined, undefined];\n  }\n  if (isSavedExpression(editedColumn)) {\n    return [undefined, editedColumn, undefined];\n  }\n  return [undefined, undefined, editedColumn];\n};\nconst ColumnSelectPopover = ({ columns, editedColumn, getCurrentTab, hasCustomLabel, isTemporal, label, onChange, onClose, setDatasetModal, setLabel }) => {\n  const datasourceType = useSelector((state) => state.explore.datasource.type);\n  const [initialLabel] = useState(label);\n  const [initialAdhocColumn, initialCalculatedColumn, initialSimpleColumn] = getInitialColumnValues(editedColumn);\n  const [adhocColumn, setAdhocColumn] = useState(initialAdhocColumn);\n  const [selectedCalculatedColumn, setSelectedCalculatedColumn] = useState(initialCalculatedColumn);\n  const [selectedSimpleColumn, setSelectedSimpleColumn] = useState(initialSimpleColumn);\n  const [selectedTab, setSelectedTab] = useState(null);\n  const [resizeButton, width, height] = useResizeButton(POPOVER_INITIAL_WIDTH, POPOVER_INITIAL_HEIGHT);\n  const sqlEditorRef = useRef(null);\n  const [calculatedColumns, simpleColumns] = useMemo(() => columns == null ? void 0 : columns.reduce((acc, column) => {\n    if (column.expression) {\n      acc[0].push(column);\n    } else\n    {\n      acc[1].push(column);\n    }\n    return acc;\n  }, [[], []]), [columns]);\n  const onSqlExpressionChange = useCallback((sqlExpression) => {\n    setAdhocColumn({ label, sqlExpression, expressionType: 'SQL' });\n    setSelectedSimpleColumn(undefined);\n    setSelectedCalculatedColumn(undefined);\n  }, [label]);\n  const onCalculatedColumnChange = useCallback((selectedColumnName) => {\n    const selectedColumn = calculatedColumns.find((col) => col.column_name === selectedColumnName);\n    setSelectedCalculatedColumn(selectedColumn);\n    setSelectedSimpleColumn(undefined);\n    setAdhocColumn(undefined);\n    setLabel((selectedColumn == null ? void 0 : selectedColumn.verbose_name) || (selectedColumn == null ? void 0 : selectedColumn.column_name) || '');\n  }, [calculatedColumns, setLabel]);\n  const onSimpleColumnChange = useCallback((selectedColumnName) => {\n    const selectedColumn = simpleColumns.find((col) => col.column_name === selectedColumnName);\n    setSelectedCalculatedColumn(undefined);\n    setSelectedSimpleColumn(selectedColumn);\n    setAdhocColumn(undefined);\n    setLabel((selectedColumn == null ? void 0 : selectedColumn.verbose_name) || (selectedColumn == null ? void 0 : selectedColumn.column_name) || '');\n  }, [setLabel, simpleColumns]);\n  const defaultActiveTabKey = initialAdhocColumn ?\n  'sqlExpression' :\n  initialSimpleColumn || calculatedColumns.length === 0 ?\n  'simple' :\n  'saved';\n  useEffect(() => {\n    getCurrentTab(defaultActiveTabKey);\n    setSelectedTab(defaultActiveTabKey);\n  }, [defaultActiveTabKey, getCurrentTab, setSelectedTab]);\n  useEffect(() => {\n    /* if the adhoc column is not set (because it was never edited) but the\n     * tab is selected and the label has changed, then we need to set the\n     * adhoc column manually */\n    if (adhocColumn === undefined &&\n    selectedTab === 'sqlExpression' &&\n    hasCustomLabel) {\n      const sqlExpression = (selectedSimpleColumn == null ? void 0 : selectedSimpleColumn.column_name) || (\n      selectedCalculatedColumn == null ? void 0 : selectedCalculatedColumn.expression) ||\n      '';\n      setAdhocColumn({ label, sqlExpression, expressionType: 'SQL' });\n    }\n  }, [\n  adhocColumn,\n  defaultActiveTabKey,\n  hasCustomLabel,\n  getCurrentTab,\n  label,\n  selectedCalculatedColumn,\n  selectedSimpleColumn,\n  selectedTab]\n  );\n  const onSave = useCallback(() => {\n    if (adhocColumn && adhocColumn.label !== label) {\n      adhocColumn.label = label;\n    }\n    const selectedColumn = adhocColumn || selectedCalculatedColumn || selectedSimpleColumn;\n    if (!selectedColumn) {\n      return;\n    }\n    onChange(selectedColumn);\n    onClose();\n  }, [\n  adhocColumn,\n  label,\n  onChange,\n  onClose,\n  selectedCalculatedColumn,\n  selectedSimpleColumn]\n  );\n  const onResetStateAndClose = useCallback(() => {\n    setSelectedCalculatedColumn(initialCalculatedColumn);\n    setSelectedSimpleColumn(initialSimpleColumn);\n    setAdhocColumn(initialAdhocColumn);\n    onClose();\n  }, [\n  initialAdhocColumn,\n  initialCalculatedColumn,\n  initialSimpleColumn,\n  onClose]\n  );\n  const onTabChange = useCallback((tab) => {var _sqlEditorRef$current;\n    getCurrentTab(tab);\n    setSelectedTab(tab);\n    // @ts-ignore\n    (_sqlEditorRef$current = sqlEditorRef.current) == null ? void 0 : _sqlEditorRef$current.editor.focus();\n  }, [getCurrentTab]);\n  const onSqlEditorFocus = useCallback(() => {var _sqlEditorRef$current2;\n    // @ts-ignore\n    (_sqlEditorRef$current2 = sqlEditorRef.current) == null ? void 0 : _sqlEditorRef$current2.editor.resize();\n  }, []);\n  const setDatasetAndClose = () => {\n    if (setDatasetModal) {\n      setDatasetModal(true);\n    }\n    onClose();\n  };\n  const stateIsValid = adhocColumn || selectedCalculatedColumn || selectedSimpleColumn;\n  const hasUnsavedChanges = initialLabel !== label ||\n  (selectedCalculatedColumn == null ? void 0 : selectedCalculatedColumn.column_name) !== (\n  initialCalculatedColumn == null ? void 0 : initialCalculatedColumn.column_name) ||\n  (selectedSimpleColumn == null ? void 0 : selectedSimpleColumn.column_name) !== (initialSimpleColumn == null ? void 0 : initialSimpleColumn.column_name) ||\n  (adhocColumn == null ? void 0 : adhocColumn.sqlExpression) !== (initialAdhocColumn == null ? void 0 : initialAdhocColumn.sqlExpression);\n  const savedExpressionsLabel = t('Saved expressions');\n  const simpleColumnsLabel = t('Column');\n  return ___EmotionJSX(Form, { layout: \"vertical\", id: \"metrics-edit-popover\" },\n  ___EmotionJSX(Tabs, { id: \"adhoc-metric-edit-tabs\", defaultActiveKey: defaultActiveTabKey, onChange: onTabChange, className: \"adhoc-metric-edit-tabs\", allowOverflow: true, css: css`\n          height: ${height}px;\n          width: ${width}px;\n        ` },\n  ___EmotionJSX(Tabs.TabPane, { key: \"saved\", tab: t('Saved') },\n  calculatedColumns.length > 0 ? ___EmotionJSX(FormItem, { label: savedExpressionsLabel },\n  ___EmotionJSX(StyledSelect, { ariaLabel: savedExpressionsLabel, value: selectedCalculatedColumn == null ? void 0 : selectedCalculatedColumn.column_name, onChange: onCalculatedColumnChange, allowClear: true, autoFocus: !selectedCalculatedColumn, placeholder: t('%s column(s)', calculatedColumns.length), options: calculatedColumns.map((calculatedColumn) => ({\n      value: calculatedColumn.column_name,\n      label: calculatedColumn.verbose_name ||\n      calculatedColumn.column_name,\n      customLabel: ___EmotionJSX(StyledColumnOption, { column: calculatedColumn, showType: true }),\n      key: calculatedColumn.column_name\n    })) })\n  ) : datasourceType === DatasourceType.Table ? ___EmotionJSX(EmptyStateSmall, { image: \"empty.svg\", title: isTemporal ?\n    t('No temporal columns found') :\n    t('No saved expressions found'), description: isTemporal ?\n    t('Add calculated temporal columns to dataset in \"Edit datasource\" modal') :\n    t('Add calculated columns to dataset in \"Edit datasource\" modal') }) : ___EmotionJSX(EmptyStateSmall, { image: \"empty.svg\", title: isTemporal ?\n    t('No temporal columns found') :\n    t('No saved expressions found'), description: isTemporal ? ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, onClick: setDatasetAndClose },\n    t('Create a dataset')\n    ), ' ',\n    t(' to mark a column as a time column')\n    ) : ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, onClick: setDatasetAndClose },\n    t('Create a dataset')\n    ), ' ',\n    t(' to add calculated columns')\n    ) })\n  ),\n  ___EmotionJSX(Tabs.TabPane, { key: \"simple\", tab: t('Simple') },\n  isTemporal && simpleColumns.length === 0 ? ___EmotionJSX(EmptyStateSmall, { image: \"empty.svg\", title: t('No temporal columns found'), description: datasourceType === DatasourceType.Table ? t('Mark a column as temporal in \"Edit datasource\" modal') : ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, onClick: setDatasetAndClose },\n    t('Create a dataset')\n    ), ' ',\n    t(' to mark a column as a time column')\n    ) }) : ___EmotionJSX(FormItem, { label: simpleColumnsLabel },\n  ___EmotionJSX(Select, { ariaLabel: simpleColumnsLabel, value: selectedSimpleColumn == null ? void 0 : selectedSimpleColumn.column_name, onChange: onSimpleColumnChange, allowClear: true, autoFocus: !selectedSimpleColumn, placeholder: t('%s column(s)', simpleColumns.length), options: simpleColumns.map((simpleColumn) => ({\n      value: simpleColumn.column_name,\n      label: simpleColumn.verbose_name || simpleColumn.column_name,\n      customLabel: ___EmotionJSX(StyledColumnOption, { column: simpleColumn, showType: true }),\n      key: simpleColumn.column_name\n    })) })\n  )\n  ),\n\n  ___EmotionJSX(Tabs.TabPane, { key: \"sqlExpression\", tab: t('Custom SQL') },\n  ___EmotionJSX(SQLEditor, { value: (adhocColumn == null ? void 0 : adhocColumn.sqlExpression) || (\n    selectedSimpleColumn == null ? void 0 : selectedSimpleColumn.column_name) || (\n    selectedCalculatedColumn == null ? void 0 : selectedCalculatedColumn.expression), onFocus: onSqlEditorFocus, showLoadingForImport: true, onChange: onSqlExpressionChange, width: \"100%\", height: `${height - 80}px`, showGutter: false, editorProps: { $blockScrolling: true }, enableLiveAutocompletion: true, className: \"filter-sql-editor\", wrapEnabled: true, ref: sqlEditorRef })\n  )\n  ),\n  ___EmotionJSX(\"div\", null,\n  ___EmotionJSX(Button, { buttonSize: \"small\", onClick: onResetStateAndClose, cta: true },\n  t('Close')\n  ),\n  ___EmotionJSX(Button, { disabled: !stateIsValid || !hasUnsavedChanges, buttonStyle: \"primary\", buttonSize: \"small\", onClick: onSave, \"data-test\": \"ColumnEdit#save\", cta: true },\n  t('Save')\n  ),\n  resizeButton\n  )\n  );\n};__signature__(ColumnSelectPopover, \"useSelector{datasourceType}\\nuseState{[initialLabel](label)}\\nuseState{[adhocColumn, setAdhocColumn](initialAdhocColumn)}\\nuseState{[selectedCalculatedColumn, setSelectedCalculatedColumn](initialCalculatedColumn)}\\nuseState{[selectedSimpleColumn, setSelectedSimpleColumn](initialSimpleColumn)}\\nuseState{[selectedTab, setSelectedTab](null)}\\nuseResizeButton{[resizeButton, width, height]}\\nuseRef{sqlEditorRef}\\nuseMemo{[calculatedColumns, simpleColumns]}\\nuseCallback{onSqlExpressionChange}\\nuseCallback{onCalculatedColumnChange}\\nuseCallback{onSimpleColumnChange}\\nuseEffect{}\\nuseEffect{}\\nuseCallback{onSave}\\nuseCallback{onResetStateAndClose}\\nuseCallback{onTabChange}\\nuseCallback{onSqlEditorFocus}\", () => [useSelector, useResizeButton]);const _default =\nColumnSelectPopover;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(StyledSelect, \"StyledSelect\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/ColumnSelectPopover.tsx\");reactHotLoader.register(getInitialColumnValues, \"getInitialColumnValues\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/ColumnSelectPopover.tsx\");reactHotLoader.register(ColumnSelectPopover, \"ColumnSelectPopover\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/ColumnSelectPopover.tsx\");reactHotLoader.register(_default, \"default\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/ColumnSelectPopover.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["React","useCallback","useEffect","useMemo","useRef","useState","useSelector","isAdhocColumn","t","styled","css","DatasourceType","isSavedExpression","Tabs","Button","Select","Form","FormItem","SQLEditor","EmptyStateSmall","StyledColumnOption","POPOVER_INITIAL_HEIGHT","POPOVER_INITIAL_WIDTH","useResizeButton","jsx","___EmotionJSX","StyledSelect","theme","gridUnit","getInitialColumnValues","editedColumn","undefined","ColumnSelectPopover","columns","getCurrentTab","hasCustomLabel","isTemporal","label","onChange","onClose","setDatasetModal","setLabel","datasourceType","state","explore","datasource","type","initialLabel","initialAdhocColumn","initialCalculatedColumn","initialSimpleColumn","adhocColumn","setAdhocColumn","selectedCalculatedColumn","setSelectedCalculatedColumn","selectedSimpleColumn","setSelectedSimpleColumn","selectedTab","setSelectedTab","resizeButton","width","height","sqlEditorRef","calculatedColumns","simpleColumns","reduce","acc","column","expression","push","onSqlExpressionChange","sqlExpression","expressionType","onCalculatedColumnChange","selectedColumnName","selectedColumn","find","col","column_name","verbose_name","onSimpleColumnChange","defaultActiveTabKey","length","onSave","onResetStateAndClose","onTabChange","tab","_sqlEditorRef$current","current","editor","focus","onSqlEditorFocus","_sqlEditorRef$current2","resize","setDatasetAndClose","stateIsValid","hasUnsavedChanges","savedExpressionsLabel","simpleColumnsLabel","layout","id","defaultActiveKey","className","allowOverflow","TabPane","key","ariaLabel","value","allowClear","autoFocus","placeholder","options","map","calculatedColumn","customLabel","showType","Table","image","title","description","Fragment","role","tabIndex","onClick","simpleColumn","onFocus","showLoadingForImport","showGutter","editorProps","$blockScrolling","enableLiveAutocompletion","wrapEnabled","ref","buttonSize","cta","disabled","buttonStyle","__signature__","_default","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/ColumnSelectPopover.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable camelcase */\nimport React, {\n  Dispatch,\n  SetStateAction,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n  AdhocColumn,\n  isAdhocColumn,\n  t,\n  styled,\n  css,\n  DatasourceType,\n} from '@superset-ui/core';\nimport { ColumnMeta, isSavedExpression } from '@superset-ui/chart-controls';\nimport Tabs from 'src/components/Tabs';\nimport Button from 'src/components/Button';\nimport { Select } from 'src/components';\n\nimport { Form, FormItem } from 'src/components/Form';\nimport { SQLEditor } from 'src/components/AsyncAceEditor';\nimport { EmptyStateSmall } from 'src/components/EmptyState';\nimport { StyledColumnOption } from 'src/explore/components/optionRenderers';\nimport {\n  POPOVER_INITIAL_HEIGHT,\n  POPOVER_INITIAL_WIDTH,\n} from 'src/explore/constants';\nimport { ExplorePageState } from 'src/explore/types';\nimport useResizeButton from './useResizeButton';\n\nconst StyledSelect = styled(Select)`\n  .metric-option {\n    & > svg {\n      min-width: ${({ theme }) => `${theme.gridUnit * 4}px`};\n    }\n    & > .option-label {\n      overflow: hidden;\n      text-overflow: ellipsis;\n    }\n  }\n`;\n\ninterface ColumnSelectPopoverProps {\n  columns: ColumnMeta[];\n  editedColumn?: ColumnMeta | AdhocColumn;\n  onChange: (column: ColumnMeta | AdhocColumn) => void;\n  onClose: () => void;\n  hasCustomLabel: boolean;\n  setLabel: (title: string) => void;\n  getCurrentTab: (tab: string) => void;\n  label: string;\n  isTemporal?: boolean;\n  setDatasetModal?: Dispatch<SetStateAction<boolean>>;\n}\n\nconst getInitialColumnValues = (\n  editedColumn?: ColumnMeta | AdhocColumn,\n): [AdhocColumn?, ColumnMeta?, ColumnMeta?] => {\n  if (!editedColumn) {\n    return [undefined, undefined, undefined];\n  }\n  if (isAdhocColumn(editedColumn)) {\n    return [editedColumn, undefined, undefined];\n  }\n  if (isSavedExpression(editedColumn)) {\n    return [undefined, editedColumn, undefined];\n  }\n  return [undefined, undefined, editedColumn];\n};\n\nconst ColumnSelectPopover = ({\n  columns,\n  editedColumn,\n  getCurrentTab,\n  hasCustomLabel,\n  isTemporal,\n  label,\n  onChange,\n  onClose,\n  setDatasetModal,\n  setLabel,\n}: ColumnSelectPopoverProps) => {\n  const datasourceType = useSelector<ExplorePageState, string | undefined>(\n    state => state.explore.datasource.type,\n  );\n  const [initialLabel] = useState(label);\n  const [initialAdhocColumn, initialCalculatedColumn, initialSimpleColumn] =\n    getInitialColumnValues(editedColumn);\n\n  const [adhocColumn, setAdhocColumn] = useState<AdhocColumn | undefined>(\n    initialAdhocColumn,\n  );\n  const [selectedCalculatedColumn, setSelectedCalculatedColumn] = useState<\n    ColumnMeta | undefined\n  >(initialCalculatedColumn);\n  const [selectedSimpleColumn, setSelectedSimpleColumn] = useState<\n    ColumnMeta | undefined\n  >(initialSimpleColumn);\n  const [selectedTab, setSelectedTab] = useState<string | null>(null);\n\n  const [resizeButton, width, height] = useResizeButton(\n    POPOVER_INITIAL_WIDTH,\n    POPOVER_INITIAL_HEIGHT,\n  );\n\n  const sqlEditorRef = useRef(null);\n\n  const [calculatedColumns, simpleColumns] = useMemo(\n    () =>\n      columns?.reduce(\n        (acc: [ColumnMeta[], ColumnMeta[]], column: ColumnMeta) => {\n          if (column.expression) {\n            acc[0].push(column);\n          } else {\n            acc[1].push(column);\n          }\n          return acc;\n        },\n        [[], []],\n      ),\n    [columns],\n  );\n\n  const onSqlExpressionChange = useCallback(\n    sqlExpression => {\n      setAdhocColumn({ label, sqlExpression, expressionType: 'SQL' });\n      setSelectedSimpleColumn(undefined);\n      setSelectedCalculatedColumn(undefined);\n    },\n    [label],\n  );\n\n  const onCalculatedColumnChange = useCallback(\n    selectedColumnName => {\n      const selectedColumn = calculatedColumns.find(\n        col => col.column_name === selectedColumnName,\n      );\n      setSelectedCalculatedColumn(selectedColumn);\n      setSelectedSimpleColumn(undefined);\n      setAdhocColumn(undefined);\n      setLabel(\n        selectedColumn?.verbose_name || selectedColumn?.column_name || '',\n      );\n    },\n    [calculatedColumns, setLabel],\n  );\n\n  const onSimpleColumnChange = useCallback(\n    selectedColumnName => {\n      const selectedColumn = simpleColumns.find(\n        col => col.column_name === selectedColumnName,\n      );\n      setSelectedCalculatedColumn(undefined);\n      setSelectedSimpleColumn(selectedColumn);\n      setAdhocColumn(undefined);\n      setLabel(\n        selectedColumn?.verbose_name || selectedColumn?.column_name || '',\n      );\n    },\n    [setLabel, simpleColumns],\n  );\n\n  const defaultActiveTabKey = initialAdhocColumn\n    ? 'sqlExpression'\n    : initialSimpleColumn || calculatedColumns.length === 0\n      ? 'simple'\n      : 'saved';\n\n  useEffect(() => {\n    getCurrentTab(defaultActiveTabKey);\n    setSelectedTab(defaultActiveTabKey);\n  }, [defaultActiveTabKey, getCurrentTab, setSelectedTab]);\n\n  useEffect(() => {\n    /* if the adhoc column is not set (because it was never edited) but the\n     * tab is selected and the label has changed, then we need to set the\n     * adhoc column manually */\n    if (\n      adhocColumn === undefined &&\n      selectedTab === 'sqlExpression' &&\n      hasCustomLabel\n    ) {\n      const sqlExpression =\n        selectedSimpleColumn?.column_name ||\n        selectedCalculatedColumn?.expression ||\n        '';\n      setAdhocColumn({ label, sqlExpression, expressionType: 'SQL' });\n    }\n  }, [\n    adhocColumn,\n    defaultActiveTabKey,\n    hasCustomLabel,\n    getCurrentTab,\n    label,\n    selectedCalculatedColumn,\n    selectedSimpleColumn,\n    selectedTab,\n  ]);\n\n  const onSave = useCallback(() => {\n    if (adhocColumn && adhocColumn.label !== label) {\n      adhocColumn.label = label;\n    }\n    const selectedColumn =\n      adhocColumn || selectedCalculatedColumn || selectedSimpleColumn;\n    if (!selectedColumn) {\n      return;\n    }\n    onChange(selectedColumn);\n    onClose();\n  }, [\n    adhocColumn,\n    label,\n    onChange,\n    onClose,\n    selectedCalculatedColumn,\n    selectedSimpleColumn,\n  ]);\n\n  const onResetStateAndClose = useCallback(() => {\n    setSelectedCalculatedColumn(initialCalculatedColumn);\n    setSelectedSimpleColumn(initialSimpleColumn);\n    setAdhocColumn(initialAdhocColumn);\n    onClose();\n  }, [\n    initialAdhocColumn,\n    initialCalculatedColumn,\n    initialSimpleColumn,\n    onClose,\n  ]);\n\n  const onTabChange = useCallback(\n    tab => {\n      getCurrentTab(tab);\n      setSelectedTab(tab);\n      // @ts-ignore\n      sqlEditorRef.current?.editor.focus();\n    },\n    [getCurrentTab],\n  );\n\n  const onSqlEditorFocus = useCallback(() => {\n    // @ts-ignore\n    sqlEditorRef.current?.editor.resize();\n  }, []);\n\n  const setDatasetAndClose = () => {\n    if (setDatasetModal) {\n      setDatasetModal(true);\n    }\n    onClose();\n  };\n\n  const stateIsValid =\n    adhocColumn || selectedCalculatedColumn || selectedSimpleColumn;\n  const hasUnsavedChanges =\n    initialLabel !== label ||\n    selectedCalculatedColumn?.column_name !==\n      initialCalculatedColumn?.column_name ||\n    selectedSimpleColumn?.column_name !== initialSimpleColumn?.column_name ||\n    adhocColumn?.sqlExpression !== initialAdhocColumn?.sqlExpression;\n\n  const savedExpressionsLabel = t('Saved expressions');\n  const simpleColumnsLabel = t('Column');\n\n  return (\n    <Form layout=\"vertical\" id=\"metrics-edit-popover\">\n      <Tabs\n        id=\"adhoc-metric-edit-tabs\"\n        defaultActiveKey={defaultActiveTabKey}\n        onChange={onTabChange}\n        className=\"adhoc-metric-edit-tabs\"\n        allowOverflow\n        css={css`\n          height: ${height}px;\n          width: ${width}px;\n        `}\n      >\n        <Tabs.TabPane key=\"saved\" tab={t('Saved')}>\n          {calculatedColumns.length > 0 ? (\n            <FormItem label={savedExpressionsLabel}>\n              <StyledSelect\n                ariaLabel={savedExpressionsLabel}\n                value={selectedCalculatedColumn?.column_name}\n                onChange={onCalculatedColumnChange}\n                allowClear\n                autoFocus={!selectedCalculatedColumn}\n                placeholder={t('%s column(s)', calculatedColumns.length)}\n                options={calculatedColumns.map(calculatedColumn => ({\n                  value: calculatedColumn.column_name,\n                  label:\n                    calculatedColumn.verbose_name ||\n                    calculatedColumn.column_name,\n                  customLabel: (\n                    <StyledColumnOption column={calculatedColumn} showType />\n                  ),\n                  key: calculatedColumn.column_name,\n                }))}\n              />\n            </FormItem>\n          ) : datasourceType === DatasourceType.Table ? (\n            <EmptyStateSmall\n              image=\"empty.svg\"\n              title={\n                isTemporal\n                  ? t('No temporal columns found')\n                  : t('No saved expressions found')\n              }\n              description={\n                isTemporal\n                  ? t(\n                      'Add calculated temporal columns to dataset in \"Edit datasource\" modal',\n                    )\n                  : t(\n                      'Add calculated columns to dataset in \"Edit datasource\" modal',\n                    )\n              }\n            />\n          ) : (\n            <EmptyStateSmall\n              image=\"empty.svg\"\n              title={\n                isTemporal\n                  ? t('No temporal columns found')\n                  : t('No saved expressions found')\n              }\n              description={\n                isTemporal ? (\n                  <>\n                    <span\n                      role=\"button\"\n                      tabIndex={0}\n                      onClick={setDatasetAndClose}\n                    >\n                      {t('Create a dataset')}\n                    </span>{' '}\n                    {t(' to mark a column as a time column')}\n                  </>\n                ) : (\n                  <>\n                    <span\n                      role=\"button\"\n                      tabIndex={0}\n                      onClick={setDatasetAndClose}\n                    >\n                      {t('Create a dataset')}\n                    </span>{' '}\n                    {t(' to add calculated columns')}\n                  </>\n                )\n              }\n            />\n          )}\n        </Tabs.TabPane>\n        <Tabs.TabPane key=\"simple\" tab={t('Simple')}>\n          {isTemporal && simpleColumns.length === 0 ? (\n            <EmptyStateSmall\n              image=\"empty.svg\"\n              title={t('No temporal columns found')}\n              description={\n                datasourceType === DatasourceType.Table ? (\n                  t('Mark a column as temporal in \"Edit datasource\" modal')\n                ) : (\n                  <>\n                    <span\n                      role=\"button\"\n                      tabIndex={0}\n                      onClick={setDatasetAndClose}\n                    >\n                      {t('Create a dataset')}\n                    </span>{' '}\n                    {t(' to mark a column as a time column')}\n                  </>\n                )\n              }\n            />\n          ) : (\n            <FormItem label={simpleColumnsLabel}>\n              <Select\n                ariaLabel={simpleColumnsLabel}\n                value={selectedSimpleColumn?.column_name}\n                onChange={onSimpleColumnChange}\n                allowClear\n                autoFocus={!selectedSimpleColumn}\n                placeholder={t('%s column(s)', simpleColumns.length)}\n                options={simpleColumns.map(simpleColumn => ({\n                  value: simpleColumn.column_name,\n                  label: simpleColumn.verbose_name || simpleColumn.column_name,\n                  customLabel: (\n                    <StyledColumnOption column={simpleColumn} showType />\n                  ),\n                  key: simpleColumn.column_name,\n                }))}\n              />\n            </FormItem>\n          )}\n        </Tabs.TabPane>\n\n        <Tabs.TabPane key=\"sqlExpression\" tab={t('Custom SQL')}>\n          <SQLEditor\n            value={\n              adhocColumn?.sqlExpression ||\n              selectedSimpleColumn?.column_name ||\n              selectedCalculatedColumn?.expression\n            }\n            onFocus={onSqlEditorFocus}\n            showLoadingForImport\n            onChange={onSqlExpressionChange}\n            width=\"100%\"\n            height={`${height - 80}px`}\n            showGutter={false}\n            editorProps={{ $blockScrolling: true }}\n            enableLiveAutocompletion\n            className=\"filter-sql-editor\"\n            wrapEnabled\n            ref={sqlEditorRef}\n          />\n        </Tabs.TabPane>\n      </Tabs>\n      <div>\n        <Button buttonSize=\"small\" onClick={onResetStateAndClose} cta>\n          {t('Close')}\n        </Button>\n        <Button\n          disabled={!stateIsValid || !hasUnsavedChanges}\n          buttonStyle=\"primary\"\n          buttonSize=\"small\"\n          onClick={onSave}\n          data-test=\"ColumnEdit#save\"\n          cta\n        >\n          {t('Save')}\n        </Button>\n        {resizeButton}\n      </div>\n    </Form>\n  );\n};\n\nexport default ColumnSelectPopover;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}