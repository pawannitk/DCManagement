{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint no-undef: 'error' */\n/* eslint no-param-reassign: [\"error\", { \"props\": false }] */\nimport moment from 'moment';\nimport {\n  FeatureFlag,\n  isDefined,\n  SupersetClient,\n  t,\n  isFeatureEnabled,\n  getClientErrorObject } from\n'@superset-ui/core';\nimport { getControlsState } from 'src/explore/store';\nimport {\n  getAnnotationJsonUrl,\n  getExploreUrl,\n  getLegacyEndpointType,\n  buildV1ChartDataPayload,\n  getQuerySettings,\n  getChartDataUri } from\n'src/explore/exploreUtils';\nimport { addDangerToast } from 'src/components/MessageToasts/actions';\nimport { logEvent } from 'src/logger/actions';\nimport { Logger, LOG_ACTIONS_LOAD_CHART } from 'src/logger/LogUtils';\nimport { allowCrossDomain as domainShardingEnabled } from 'src/utils/hostNamesConfig';\nimport { updateDataMask } from 'src/dataMask/actions';\nimport { waitForAsyncData } from 'src/middleware/asyncEvent';\nimport { safeStringify } from 'src/utils/safeStringify';\n\nexport const CHART_UPDATE_STARTED = 'CHART_UPDATE_STARTED';\nexport function chartUpdateStarted(queryController, latestQueryFormData, key) {\n  return {\n    type: CHART_UPDATE_STARTED,\n    queryController,\n    latestQueryFormData,\n    key\n  };\n}\n\nexport const CHART_UPDATE_SUCCEEDED = 'CHART_UPDATE_SUCCEEDED';\nexport function chartUpdateSucceeded(queriesResponse, key) {\n  return { type: CHART_UPDATE_SUCCEEDED, queriesResponse, key };\n}\n\nexport const CHART_UPDATE_STOPPED = 'CHART_UPDATE_STOPPED';\nexport function chartUpdateStopped(key) {\n  return { type: CHART_UPDATE_STOPPED, key };\n}\n\nexport const CHART_UPDATE_FAILED = 'CHART_UPDATE_FAILED';\nexport function chartUpdateFailed(queriesResponse, key) {\n  return { type: CHART_UPDATE_FAILED, queriesResponse, key };\n}\n\nexport const CHART_RENDERING_FAILED = 'CHART_RENDERING_FAILED';\nexport function chartRenderingFailed(error, key, stackTrace) {\n  return { type: CHART_RENDERING_FAILED, error, key, stackTrace };\n}\n\nexport const CHART_RENDERING_SUCCEEDED = 'CHART_RENDERING_SUCCEEDED';\nexport function chartRenderingSucceeded(key) {\n  return { type: CHART_RENDERING_SUCCEEDED, key };\n}\n\nexport const REMOVE_CHART = 'REMOVE_CHART';\nexport function removeChart(key) {\n  return { type: REMOVE_CHART, key };\n}\n\nexport const ANNOTATION_QUERY_SUCCESS = 'ANNOTATION_QUERY_SUCCESS';\nexport function annotationQuerySuccess(annotation, queryResponse, key) {\n  return { type: ANNOTATION_QUERY_SUCCESS, annotation, queryResponse, key };\n}\n\nexport const ANNOTATION_QUERY_STARTED = 'ANNOTATION_QUERY_STARTED';\nexport function annotationQueryStarted(annotation, queryController, key) {\n  return { type: ANNOTATION_QUERY_STARTED, annotation, queryController, key };\n}\n\nexport const ANNOTATION_QUERY_FAILED = 'ANNOTATION_QUERY_FAILED';\nexport function annotationQueryFailed(annotation, queryResponse, key) {\n  return { type: ANNOTATION_QUERY_FAILED, annotation, queryResponse, key };\n}\n\nexport const DYNAMIC_PLUGIN_CONTROLS_READY = 'DYNAMIC_PLUGIN_CONTROLS_READY';\nexport const dynamicPluginControlsReady = () => (dispatch, getState) => {\n  const state = getState();\n  const controlsState = getControlsState(\n    state.explore,\n    state.explore.form_data\n  );\n  dispatch({\n    type: DYNAMIC_PLUGIN_CONTROLS_READY,\n    key: controlsState.slice_id.value,\n    controlsState\n  });\n};\n\nconst legacyChartDataRequest = async (\nformData,\nresultFormat,\nresultType,\nforce,\nmethod = 'POST',\nrequestParams = {},\nparseMethod) =>\n{\n  const endpointType = getLegacyEndpointType({ resultFormat, resultType });\n  const allowDomainSharding =\n  // eslint-disable-next-line camelcase\n  domainShardingEnabled && (requestParams == null ? void 0 : requestParams.dashboard_id);\n  const url = getExploreUrl({\n    formData,\n    endpointType,\n    force,\n    allowDomainSharding,\n    method,\n    requestParams: requestParams.dashboard_id ?\n    { dashboard_id: requestParams.dashboard_id } :\n    {}\n  });\n  const querySettings = {\n    ...requestParams,\n    url,\n    postPayload: { form_data: formData },\n    parseMethod\n  };\n\n  return SupersetClient.post(querySettings).then(({ json, response }) => (\n  // Make the legacy endpoint return a payload that corresponds to the\n  // V1 chart data endpoint response signature.\n  {\n    response,\n    json: { result: [json] }\n  })\n  );\n};\n\nconst v1ChartDataRequest = async (\nformData,\nresultFormat,\nresultType,\nforce,\nrequestParams,\nsetDataMask,\nownState,\nparseMethod) =>\n{\n  const payload = buildV1ChartDataPayload({\n    formData,\n    resultType,\n    resultFormat,\n    force,\n    setDataMask,\n    ownState\n  });\n\n  // The dashboard id is added to query params for tracking purposes\n  const { slice_id: sliceId } = formData;\n  const { dashboard_id: dashboardId } = requestParams;\n\n  const qs = {};\n  if (sliceId !== undefined) qs.form_data = `{\"slice_id\":${sliceId}}`;\n  if (dashboardId !== undefined) qs.dashboard_id = dashboardId;\n  if (force) qs.force = force;\n\n  const allowDomainSharding =\n  // eslint-disable-next-line camelcase\n  domainShardingEnabled && (requestParams == null ? void 0 : requestParams.dashboard_id);\n  const url = getChartDataUri({\n    path: '/api/v1/chart/data',\n    qs,\n    allowDomainSharding\n  }).toString();\n\n  const querySettings = {\n    ...requestParams,\n    url,\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(payload),\n    parseMethod\n  };\n\n  return SupersetClient.post(querySettings);\n};\n\nexport async function getChartDataRequest({\n  formData,\n  setDataMask = () => {},\n  resultFormat = 'json',\n  resultType = 'full',\n  force = false,\n  method = 'POST',\n  requestParams = {},\n  ownState = {}\n}) {\n  let querySettings = {\n    ...requestParams\n  };\n\n  if (domainShardingEnabled) {\n    querySettings = {\n      ...querySettings,\n      mode: 'cors',\n      credentials: 'include'\n    };\n  }\n  const [useLegacyApi, parseMethod] = getQuerySettings(formData);\n  if (useLegacyApi) {\n    return legacyChartDataRequest(\n      formData,\n      resultFormat,\n      resultType,\n      force,\n      method,\n      querySettings,\n      parseMethod\n    );\n  }\n  return v1ChartDataRequest(\n    formData,\n    resultFormat,\n    resultType,\n    force,\n    querySettings,\n    setDataMask,\n    ownState,\n    parseMethod\n  );\n}\n\nexport function runAnnotationQuery({\n  annotation,\n  timeout,\n  formData = null,\n  key,\n  isDashboardRequest = false,\n  force = false\n}) {\n  return function (dispatch, getState) {var _fd$annotation_layers;\n    const { charts, common } = getState();\n    const sliceKey = key || Object.keys(charts)[0];\n    const queryTimeout = timeout || common.conf.SUPERSET_WEBSERVER_TIMEOUT;\n\n    // make a copy of formData, not modifying original formData\n    const fd = {\n      ...(formData || charts[sliceKey].latestQueryFormData)\n    };\n\n    if (!annotation.sourceType) {\n      return Promise.resolve();\n    }\n\n    // In the original formData the `granularity` attribute represents the time grain (eg\n    // `P1D`), but in the request payload it corresponds to the name of the column where\n    // the time grain should be applied (eg, `Date`), so we need to move things around.\n    fd.time_grain_sqla = fd.time_grain_sqla || fd.granularity;\n    fd.granularity = fd.granularity_sqla;\n\n    const overridesKeys = Object.keys(annotation.overrides);\n    if (overridesKeys.includes('since') || overridesKeys.includes('until')) {\n      annotation.overrides = {\n        ...annotation.overrides,\n        time_range: null\n      };\n    }\n    const sliceFormData = Object.keys(annotation.overrides).reduce(\n      (d, k) => ({\n        ...d,\n        [k]: annotation.overrides[k] || fd[k]\n      }),\n      {}\n    );\n\n    if (!isDashboardRequest && fd) {\n      const hasExtraFilters = fd.extra_filters && fd.extra_filters.length > 0;\n      sliceFormData.extra_filters = hasExtraFilters ?\n      fd.extra_filters :\n      undefined;\n    }\n\n    const url = getAnnotationJsonUrl(annotation.value, force);\n    const controller = new AbortController();\n    const { signal } = controller;\n\n    dispatch(annotationQueryStarted(annotation, controller, sliceKey));\n\n    const annotationIndex = fd == null ? void 0 : (_fd$annotation_layers = fd.annotation_layers) == null ? void 0 : _fd$annotation_layers.findIndex(\n      (it) => it.name === annotation.name\n    );\n    if (annotationIndex >= 0) {\n      fd.annotation_layers[annotationIndex].overrides = sliceFormData;\n    }\n\n    return SupersetClient.post({\n      url,\n      signal,\n      timeout: queryTimeout * 1000,\n      headers: { 'Content-Type': 'application/json' },\n      jsonPayload: buildV1ChartDataPayload({\n        formData: fd,\n        force,\n        resultFormat: 'json',\n        resultType: 'full'\n      })\n    }).\n    then(({ json }) => {var _json$result, _json$result$, _json$result$$annotat;\n      const data = json == null ? void 0 : (_json$result = json.result) == null ? void 0 : (_json$result$ = _json$result[0]) == null ? void 0 : (_json$result$$annotat = _json$result$.annotation_data) == null ? void 0 : _json$result$$annotat[annotation.name];\n      return dispatch(annotationQuerySuccess(annotation, { data }, sliceKey));\n    }).\n    catch((response) =>\n    getClientErrorObject(response).then((err) => {\n      if (err.statusText === 'timeout') {\n        dispatch(\n          annotationQueryFailed(\n            annotation,\n            { error: 'Query timeout' },\n            sliceKey\n          )\n        );\n      } else if ((err.error || '').toLowerCase().includes('no data')) {\n        dispatch(annotationQuerySuccess(annotation, err, sliceKey));\n      } else if (err.statusText !== 'abort') {\n        dispatch(annotationQueryFailed(annotation, err, sliceKey));\n      }\n    })\n    );\n  };\n}\n\nexport const TRIGGER_QUERY = 'TRIGGER_QUERY';\nexport function triggerQuery(value = true, key) {\n  return { type: TRIGGER_QUERY, value, key };\n}\n\n// this action is used for forced re-render without fetch data\nexport const RENDER_TRIGGERED = 'RENDER_TRIGGERED';\nexport function renderTriggered(value, key) {\n  return { type: RENDER_TRIGGERED, value, key };\n}\n\nexport const UPDATE_QUERY_FORM_DATA = 'UPDATE_QUERY_FORM_DATA';\nexport function updateQueryFormData(value, key) {\n  return { type: UPDATE_QUERY_FORM_DATA, value, key };\n}\n\n// in the sql lab -> explore flow, user can inline edit chart title,\n// then the chart will be assigned a new slice_id\nexport const UPDATE_CHART_ID = 'UPDATE_CHART_ID';\nexport function updateChartId(newId, key = 0) {\n  return { type: UPDATE_CHART_ID, newId, key };\n}\n\nexport const ADD_CHART = 'ADD_CHART';\nexport function addChart(chart, key) {\n  return { type: ADD_CHART, chart, key };\n}\n\nexport function handleChartDataResponse(response, json, useLegacyApi) {\n  if (isFeatureEnabled(FeatureFlag.GlobalAsyncQueries)) {\n    // deal with getChartDataRequest transforming the response data\n    const result = 'result' in json ? json.result : json;\n    switch (response.status) {\n      case 200:\n        // Query results returned synchronously, meaning query was already cached.\n        return Promise.resolve(result);\n      case 202:\n        // Query is running asynchronously and we must await the results\n        if (useLegacyApi) {\n          return waitForAsyncData(result[0]);\n        }\n        return waitForAsyncData(result);\n      default:\n        throw new Error(\n          `Received unexpected response status (${response.status}) while fetching chart data`\n        );\n    }\n  }\n  return json.result;\n}\n\nexport function exploreJSON(\nformData,\nforce = false,\ntimeout,\nkey,\ndashboardId,\nownState)\n{\n  return async (dispatch, getState) => {\n    const logStart = Logger.getTimestamp();\n    const controller = new AbortController();\n    const queryTimeout =\n    timeout || getState().common.conf.SUPERSET_WEBSERVER_TIMEOUT;\n\n    const requestParams = {\n      signal: controller.signal,\n      timeout: queryTimeout * 1000\n    };\n    if (dashboardId) requestParams.dashboard_id = dashboardId;\n\n    const setDataMask = (dataMask) => {\n      dispatch(updateDataMask(formData.slice_id, dataMask));\n    };\n    const chartDataRequest = getChartDataRequest({\n      setDataMask,\n      formData,\n      resultFormat: 'json',\n      resultType: 'full',\n      force,\n      method: 'POST',\n      requestParams,\n      ownState\n    });\n\n    dispatch(chartUpdateStarted(controller, formData, key));\n\n    const [useLegacyApi] = getQuerySettings(formData);\n    const chartDataRequestCaught = chartDataRequest.\n    then(({ response, json }) =>\n    handleChartDataResponse(response, json, useLegacyApi)\n    ).\n    then((queriesResponse) => {\n      queriesResponse.forEach((resultItem) =>\n      dispatch(\n        logEvent(LOG_ACTIONS_LOAD_CHART, {\n          slice_id: key,\n          applied_filters: resultItem.applied_filters,\n          is_cached: resultItem.is_cached,\n          force_refresh: force,\n          row_count: resultItem.rowcount,\n          datasource: formData.datasource,\n          start_offset: logStart,\n          ts: new Date().getTime(),\n          duration: Logger.getTimestamp() - logStart,\n          has_extra_filters:\n          formData.extra_filters && formData.extra_filters.length > 0,\n          viz_type: formData.viz_type,\n          data_age: resultItem.is_cached ?\n          moment(new Date()).diff(moment.utc(resultItem.cached_dttm)) :\n          null\n        })\n      )\n      );\n      return dispatch(chartUpdateSucceeded(queriesResponse, key));\n    }).\n    catch((response) => {\n      if (isFeatureEnabled(FeatureFlag.GlobalAsyncQueries)) {\n        return dispatch(chartUpdateFailed([response], key));\n      }\n\n      const appendErrorLog = (errorDetails, isCached) => {\n        dispatch(\n          logEvent(LOG_ACTIONS_LOAD_CHART, {\n            slice_id: key,\n            has_err: true,\n            is_cached: isCached,\n            error_details: errorDetails,\n            datasource: formData.datasource,\n            start_offset: logStart,\n            ts: new Date().getTime(),\n            duration: Logger.getTimestamp() - logStart\n          })\n        );\n      };\n      if (response.name === 'AbortError') {\n        appendErrorLog('abort');\n        return dispatch(chartUpdateStopped(key));\n      }\n      return getClientErrorObject(response).then((parsedResponse) => {\n        if (response.statusText === 'timeout') {\n          appendErrorLog('timeout');\n        } else {\n          appendErrorLog(parsedResponse.error, parsedResponse.is_cached);\n        }\n        return dispatch(chartUpdateFailed([parsedResponse], key));\n      });\n    });\n\n    // only retrieve annotations when calling the legacy API\n    const annotationLayers = useLegacyApi ?\n    formData.annotation_layers || [] :\n    [];\n    const isDashboardRequest = dashboardId > 0;\n\n    return Promise.all([\n    chartDataRequestCaught,\n    dispatch(triggerQuery(false, key)),\n    dispatch(updateQueryFormData(formData, key)),\n    ...annotationLayers.map((annotation) =>\n    dispatch(\n      runAnnotationQuery({\n        annotation,\n        timeout,\n        formData,\n        key,\n        isDashboardRequest,\n        force\n      })\n    )\n    )]\n    );\n  };\n}\n\nexport const POST_CHART_FORM_DATA = 'POST_CHART_FORM_DATA';\nexport function postChartFormData(\nformData,\nforce = false,\ntimeout,\nkey,\ndashboardId,\nownState)\n{\n  return exploreJSON(formData, force, timeout, key, dashboardId, ownState);\n}\n\nexport function redirectSQLLab(formData, history) {\n  return (dispatch) => {\n    getChartDataRequest({ formData, resultFormat: 'json', resultType: 'query' }).\n    then(({ json }) => {\n      const redirectUrl = '/sqllab/';\n      const payload = {\n        datasourceKey: formData.datasource,\n        sql: json.result[0].query\n      };\n      if (history) {\n        history.push({\n          pathname: redirectUrl,\n          state: {\n            requestedQuery: payload\n          }\n        });\n      } else {\n        SupersetClient.postForm(redirectUrl, {\n          form_data: safeStringify(payload)\n        });\n      }\n    }).\n    catch(() =>\n    dispatch(addDangerToast(t('An error occurred while loading the SQL')))\n    );\n  };\n}\n\nexport function refreshChart(chartKey, force, dashboardId) {\n  return (dispatch, getState) => {var _getState$dataMask$ch;\n    const chart = (getState().charts || {})[chartKey];\n    const timeout =\n    getState().dashboardInfo.common.conf.SUPERSET_WEBSERVER_TIMEOUT;\n\n    if (\n    !chart.latestQueryFormData ||\n    Object.keys(chart.latestQueryFormData).length === 0)\n    {\n      return;\n    }\n    dispatch(\n      postChartFormData(\n        chart.latestQueryFormData,\n        force,\n        timeout,\n        chart.id,\n        dashboardId, (_getState$dataMask$ch =\n        getState().dataMask[chart.id]) == null ? void 0 : _getState$dataMask$ch.ownState\n      )\n    );\n  };\n}\n\nexport const getDatasourceSamples = async (\ndatasourceType,\ndatasourceId,\nforce,\njsonPayload,\nperPage,\npage) =>\n{\n  try {\n    const searchParams = {\n      force,\n      datasource_type: datasourceType,\n      datasource_id: datasourceId\n    };\n\n    if (isDefined(perPage) && isDefined(page)) {\n      searchParams.per_page = perPage;\n      searchParams.page = page;\n    }\n\n    const response = await SupersetClient.post({\n      endpoint: '/datasource/samples',\n      jsonPayload,\n      searchParams\n    });\n\n    return response.json.result;\n  } catch (err) {\n    const clientError = await getClientErrorObject(err);\n    throw new Error(\n      clientError.message || clientError.error || t('Sorry, an error occurred'),\n      { cause: err }\n    );\n  }\n};;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(CHART_UPDATE_STARTED, \"CHART_UPDATE_STARTED\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/chartAction.js\");reactHotLoader.register(chartUpdateStarted, \"chartUpdateStarted\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/chartAction.js\");reactHotLoader.register(CHART_UPDATE_SUCCEEDED, \"CHART_UPDATE_SUCCEEDED\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/chartAction.js\");reactHotLoader.register(chartUpdateSucceeded, \"chartUpdateSucceeded\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/chartAction.js\");reactHotLoader.register(CHART_UPDATE_STOPPED, \"CHART_UPDATE_STOPPED\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/chartAction.js\");reactHotLoader.register(chartUpdateStopped, \"chartUpdateStopped\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/chartAction.js\");reactHotLoader.register(CHART_UPDATE_FAILED, \"CHART_UPDATE_FAILED\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/chartAction.js\");reactHotLoader.register(chartUpdateFailed, \"chartUpdateFailed\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/chartAction.js\");reactHotLoader.register(CHART_RENDERING_FAILED, \"CHART_RENDERING_FAILED\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/chartAction.js\");reactHotLoader.register(chartRenderingFailed, \"chartRenderingFailed\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/chartAction.js\");reactHotLoader.register(CHART_RENDERING_SUCCEEDED, \"CHART_RENDERING_SUCCEEDED\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/chartAction.js\");reactHotLoader.register(chartRenderingSucceeded, \"chartRenderingSucceeded\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/chartAction.js\");reactHotLoader.register(REMOVE_CHART, \"REMOVE_CHART\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/chartAction.js\");reactHotLoader.register(removeChart, \"removeChart\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/chartAction.js\");reactHotLoader.register(ANNOTATION_QUERY_SUCCESS, \"ANNOTATION_QUERY_SUCCESS\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/chartAction.js\");reactHotLoader.register(annotationQuerySuccess, \"annotationQuerySuccess\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/chartAction.js\");reactHotLoader.register(ANNOTATION_QUERY_STARTED, \"ANNOTATION_QUERY_STARTED\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/chartAction.js\");reactHotLoader.register(annotationQueryStarted, \"annotationQueryStarted\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/chartAction.js\");reactHotLoader.register(ANNOTATION_QUERY_FAILED, \"ANNOTATION_QUERY_FAILED\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/chartAction.js\");reactHotLoader.register(annotationQueryFailed, \"annotationQueryFailed\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/chartAction.js\");reactHotLoader.register(DYNAMIC_PLUGIN_CONTROLS_READY, \"DYNAMIC_PLUGIN_CONTROLS_READY\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/chartAction.js\");reactHotLoader.register(dynamicPluginControlsReady, \"dynamicPluginControlsReady\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/chartAction.js\");reactHotLoader.register(legacyChartDataRequest, \"legacyChartDataRequest\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/chartAction.js\");reactHotLoader.register(v1ChartDataRequest, \"v1ChartDataRequest\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/chartAction.js\");reactHotLoader.register(getChartDataRequest, \"getChartDataRequest\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/chartAction.js\");reactHotLoader.register(runAnnotationQuery, \"runAnnotationQuery\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/chartAction.js\");reactHotLoader.register(TRIGGER_QUERY, \"TRIGGER_QUERY\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/chartAction.js\");reactHotLoader.register(triggerQuery, \"triggerQuery\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/chartAction.js\");reactHotLoader.register(RENDER_TRIGGERED, \"RENDER_TRIGGERED\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/chartAction.js\");reactHotLoader.register(renderTriggered, \"renderTriggered\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/chartAction.js\");reactHotLoader.register(UPDATE_QUERY_FORM_DATA, \"UPDATE_QUERY_FORM_DATA\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/chartAction.js\");reactHotLoader.register(updateQueryFormData, \"updateQueryFormData\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/chartAction.js\");reactHotLoader.register(UPDATE_CHART_ID, \"UPDATE_CHART_ID\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/chartAction.js\");reactHotLoader.register(updateChartId, \"updateChartId\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/chartAction.js\");reactHotLoader.register(ADD_CHART, \"ADD_CHART\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/chartAction.js\");reactHotLoader.register(addChart, \"addChart\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/chartAction.js\");reactHotLoader.register(handleChartDataResponse, \"handleChartDataResponse\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/chartAction.js\");reactHotLoader.register(exploreJSON, \"exploreJSON\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/chartAction.js\");reactHotLoader.register(POST_CHART_FORM_DATA, \"POST_CHART_FORM_DATA\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/chartAction.js\");reactHotLoader.register(postChartFormData, \"postChartFormData\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/chartAction.js\");reactHotLoader.register(redirectSQLLab, \"redirectSQLLab\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/chartAction.js\");reactHotLoader.register(refreshChart, \"refreshChart\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/chartAction.js\");reactHotLoader.register(getDatasourceSamples, \"getDatasourceSamples\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/chartAction.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["moment","FeatureFlag","isDefined","SupersetClient","t","isFeatureEnabled","getClientErrorObject","getControlsState","getAnnotationJsonUrl","getExploreUrl","getLegacyEndpointType","buildV1ChartDataPayload","getQuerySettings","getChartDataUri","addDangerToast","logEvent","Logger","LOG_ACTIONS_LOAD_CHART","allowCrossDomain","domainShardingEnabled","updateDataMask","waitForAsyncData","safeStringify","CHART_UPDATE_STARTED","chartUpdateStarted","queryController","latestQueryFormData","key","type","CHART_UPDATE_SUCCEEDED","chartUpdateSucceeded","queriesResponse","CHART_UPDATE_STOPPED","chartUpdateStopped","CHART_UPDATE_FAILED","chartUpdateFailed","CHART_RENDERING_FAILED","chartRenderingFailed","error","stackTrace","CHART_RENDERING_SUCCEEDED","chartRenderingSucceeded","REMOVE_CHART","removeChart","ANNOTATION_QUERY_SUCCESS","annotationQuerySuccess","annotation","queryResponse","ANNOTATION_QUERY_STARTED","annotationQueryStarted","ANNOTATION_QUERY_FAILED","annotationQueryFailed","DYNAMIC_PLUGIN_CONTROLS_READY","dynamicPluginControlsReady","dispatch","getState","state","controlsState","explore","form_data","slice_id","value","legacyChartDataRequest","formData","resultFormat","resultType","force","method","requestParams","parseMethod","endpointType","allowDomainSharding","dashboard_id","url","querySettings","postPayload","post","then","json","response","result","v1ChartDataRequest","setDataMask","ownState","payload","sliceId","dashboardId","qs","undefined","path","toString","headers","body","JSON","stringify","getChartDataRequest","mode","credentials","useLegacyApi","runAnnotationQuery","timeout","isDashboardRequest","_fd$annotation_layers","charts","common","sliceKey","Object","keys","queryTimeout","conf","SUPERSET_WEBSERVER_TIMEOUT","fd","sourceType","Promise","resolve","time_grain_sqla","granularity","granularity_sqla","overridesKeys","overrides","includes","time_range","sliceFormData","reduce","d","k","hasExtraFilters","extra_filters","length","controller","AbortController","signal","annotationIndex","annotation_layers","findIndex","it","name","jsonPayload","_json$result","_json$result$","_json$result$$annotat","data","annotation_data","catch","err","statusText","toLowerCase","TRIGGER_QUERY","triggerQuery","RENDER_TRIGGERED","renderTriggered","UPDATE_QUERY_FORM_DATA","updateQueryFormData","UPDATE_CHART_ID","updateChartId","newId","ADD_CHART","addChart","chart","handleChartDataResponse","GlobalAsyncQueries","status","Error","exploreJSON","logStart","getTimestamp","dataMask","chartDataRequest","chartDataRequestCaught","forEach","resultItem","applied_filters","is_cached","force_refresh","row_count","rowcount","datasource","start_offset","ts","Date","getTime","duration","has_extra_filters","viz_type","data_age","diff","utc","cached_dttm","appendErrorLog","errorDetails","isCached","has_err","error_details","parsedResponse","annotationLayers","all","map","POST_CHART_FORM_DATA","postChartFormData","redirectSQLLab","history","redirectUrl","datasourceKey","sql","query","push","pathname","requestedQuery","postForm","refreshChart","chartKey","_getState$dataMask$ch","dashboardInfo","id","getDatasourceSamples","datasourceType","datasourceId","perPage","page","searchParams","datasource_type","datasource_id","per_page","endpoint","clientError","message","cause","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/chartAction.js"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint no-undef: 'error' */\n/* eslint no-param-reassign: [\"error\", { \"props\": false }] */\nimport moment from 'moment';\nimport {\n  FeatureFlag,\n  isDefined,\n  SupersetClient,\n  t,\n  isFeatureEnabled,\n  getClientErrorObject,\n} from '@superset-ui/core';\nimport { getControlsState } from 'src/explore/store';\nimport {\n  getAnnotationJsonUrl,\n  getExploreUrl,\n  getLegacyEndpointType,\n  buildV1ChartDataPayload,\n  getQuerySettings,\n  getChartDataUri,\n} from 'src/explore/exploreUtils';\nimport { addDangerToast } from 'src/components/MessageToasts/actions';\nimport { logEvent } from 'src/logger/actions';\nimport { Logger, LOG_ACTIONS_LOAD_CHART } from 'src/logger/LogUtils';\nimport { allowCrossDomain as domainShardingEnabled } from 'src/utils/hostNamesConfig';\nimport { updateDataMask } from 'src/dataMask/actions';\nimport { waitForAsyncData } from 'src/middleware/asyncEvent';\nimport { safeStringify } from 'src/utils/safeStringify';\n\nexport const CHART_UPDATE_STARTED = 'CHART_UPDATE_STARTED';\nexport function chartUpdateStarted(queryController, latestQueryFormData, key) {\n  return {\n    type: CHART_UPDATE_STARTED,\n    queryController,\n    latestQueryFormData,\n    key,\n  };\n}\n\nexport const CHART_UPDATE_SUCCEEDED = 'CHART_UPDATE_SUCCEEDED';\nexport function chartUpdateSucceeded(queriesResponse, key) {\n  return { type: CHART_UPDATE_SUCCEEDED, queriesResponse, key };\n}\n\nexport const CHART_UPDATE_STOPPED = 'CHART_UPDATE_STOPPED';\nexport function chartUpdateStopped(key) {\n  return { type: CHART_UPDATE_STOPPED, key };\n}\n\nexport const CHART_UPDATE_FAILED = 'CHART_UPDATE_FAILED';\nexport function chartUpdateFailed(queriesResponse, key) {\n  return { type: CHART_UPDATE_FAILED, queriesResponse, key };\n}\n\nexport const CHART_RENDERING_FAILED = 'CHART_RENDERING_FAILED';\nexport function chartRenderingFailed(error, key, stackTrace) {\n  return { type: CHART_RENDERING_FAILED, error, key, stackTrace };\n}\n\nexport const CHART_RENDERING_SUCCEEDED = 'CHART_RENDERING_SUCCEEDED';\nexport function chartRenderingSucceeded(key) {\n  return { type: CHART_RENDERING_SUCCEEDED, key };\n}\n\nexport const REMOVE_CHART = 'REMOVE_CHART';\nexport function removeChart(key) {\n  return { type: REMOVE_CHART, key };\n}\n\nexport const ANNOTATION_QUERY_SUCCESS = 'ANNOTATION_QUERY_SUCCESS';\nexport function annotationQuerySuccess(annotation, queryResponse, key) {\n  return { type: ANNOTATION_QUERY_SUCCESS, annotation, queryResponse, key };\n}\n\nexport const ANNOTATION_QUERY_STARTED = 'ANNOTATION_QUERY_STARTED';\nexport function annotationQueryStarted(annotation, queryController, key) {\n  return { type: ANNOTATION_QUERY_STARTED, annotation, queryController, key };\n}\n\nexport const ANNOTATION_QUERY_FAILED = 'ANNOTATION_QUERY_FAILED';\nexport function annotationQueryFailed(annotation, queryResponse, key) {\n  return { type: ANNOTATION_QUERY_FAILED, annotation, queryResponse, key };\n}\n\nexport const DYNAMIC_PLUGIN_CONTROLS_READY = 'DYNAMIC_PLUGIN_CONTROLS_READY';\nexport const dynamicPluginControlsReady = () => (dispatch, getState) => {\n  const state = getState();\n  const controlsState = getControlsState(\n    state.explore,\n    state.explore.form_data,\n  );\n  dispatch({\n    type: DYNAMIC_PLUGIN_CONTROLS_READY,\n    key: controlsState.slice_id.value,\n    controlsState,\n  });\n};\n\nconst legacyChartDataRequest = async (\n  formData,\n  resultFormat,\n  resultType,\n  force,\n  method = 'POST',\n  requestParams = {},\n  parseMethod,\n) => {\n  const endpointType = getLegacyEndpointType({ resultFormat, resultType });\n  const allowDomainSharding =\n    // eslint-disable-next-line camelcase\n    domainShardingEnabled && requestParams?.dashboard_id;\n  const url = getExploreUrl({\n    formData,\n    endpointType,\n    force,\n    allowDomainSharding,\n    method,\n    requestParams: requestParams.dashboard_id\n      ? { dashboard_id: requestParams.dashboard_id }\n      : {},\n  });\n  const querySettings = {\n    ...requestParams,\n    url,\n    postPayload: { form_data: formData },\n    parseMethod,\n  };\n\n  return SupersetClient.post(querySettings).then(({ json, response }) =>\n    // Make the legacy endpoint return a payload that corresponds to the\n    // V1 chart data endpoint response signature.\n    ({\n      response,\n      json: { result: [json] },\n    }),\n  );\n};\n\nconst v1ChartDataRequest = async (\n  formData,\n  resultFormat,\n  resultType,\n  force,\n  requestParams,\n  setDataMask,\n  ownState,\n  parseMethod,\n) => {\n  const payload = buildV1ChartDataPayload({\n    formData,\n    resultType,\n    resultFormat,\n    force,\n    setDataMask,\n    ownState,\n  });\n\n  // The dashboard id is added to query params for tracking purposes\n  const { slice_id: sliceId } = formData;\n  const { dashboard_id: dashboardId } = requestParams;\n\n  const qs = {};\n  if (sliceId !== undefined) qs.form_data = `{\"slice_id\":${sliceId}}`;\n  if (dashboardId !== undefined) qs.dashboard_id = dashboardId;\n  if (force) qs.force = force;\n\n  const allowDomainSharding =\n    // eslint-disable-next-line camelcase\n    domainShardingEnabled && requestParams?.dashboard_id;\n  const url = getChartDataUri({\n    path: '/api/v1/chart/data',\n    qs,\n    allowDomainSharding,\n  }).toString();\n\n  const querySettings = {\n    ...requestParams,\n    url,\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(payload),\n    parseMethod,\n  };\n\n  return SupersetClient.post(querySettings);\n};\n\nexport async function getChartDataRequest({\n  formData,\n  setDataMask = () => {},\n  resultFormat = 'json',\n  resultType = 'full',\n  force = false,\n  method = 'POST',\n  requestParams = {},\n  ownState = {},\n}) {\n  let querySettings = {\n    ...requestParams,\n  };\n\n  if (domainShardingEnabled) {\n    querySettings = {\n      ...querySettings,\n      mode: 'cors',\n      credentials: 'include',\n    };\n  }\n  const [useLegacyApi, parseMethod] = getQuerySettings(formData);\n  if (useLegacyApi) {\n    return legacyChartDataRequest(\n      formData,\n      resultFormat,\n      resultType,\n      force,\n      method,\n      querySettings,\n      parseMethod,\n    );\n  }\n  return v1ChartDataRequest(\n    formData,\n    resultFormat,\n    resultType,\n    force,\n    querySettings,\n    setDataMask,\n    ownState,\n    parseMethod,\n  );\n}\n\nexport function runAnnotationQuery({\n  annotation,\n  timeout,\n  formData = null,\n  key,\n  isDashboardRequest = false,\n  force = false,\n}) {\n  return function (dispatch, getState) {\n    const { charts, common } = getState();\n    const sliceKey = key || Object.keys(charts)[0];\n    const queryTimeout = timeout || common.conf.SUPERSET_WEBSERVER_TIMEOUT;\n\n    // make a copy of formData, not modifying original formData\n    const fd = {\n      ...(formData || charts[sliceKey].latestQueryFormData),\n    };\n\n    if (!annotation.sourceType) {\n      return Promise.resolve();\n    }\n\n    // In the original formData the `granularity` attribute represents the time grain (eg\n    // `P1D`), but in the request payload it corresponds to the name of the column where\n    // the time grain should be applied (eg, `Date`), so we need to move things around.\n    fd.time_grain_sqla = fd.time_grain_sqla || fd.granularity;\n    fd.granularity = fd.granularity_sqla;\n\n    const overridesKeys = Object.keys(annotation.overrides);\n    if (overridesKeys.includes('since') || overridesKeys.includes('until')) {\n      annotation.overrides = {\n        ...annotation.overrides,\n        time_range: null,\n      };\n    }\n    const sliceFormData = Object.keys(annotation.overrides).reduce(\n      (d, k) => ({\n        ...d,\n        [k]: annotation.overrides[k] || fd[k],\n      }),\n      {},\n    );\n\n    if (!isDashboardRequest && fd) {\n      const hasExtraFilters = fd.extra_filters && fd.extra_filters.length > 0;\n      sliceFormData.extra_filters = hasExtraFilters\n        ? fd.extra_filters\n        : undefined;\n    }\n\n    const url = getAnnotationJsonUrl(annotation.value, force);\n    const controller = new AbortController();\n    const { signal } = controller;\n\n    dispatch(annotationQueryStarted(annotation, controller, sliceKey));\n\n    const annotationIndex = fd?.annotation_layers?.findIndex(\n      it => it.name === annotation.name,\n    );\n    if (annotationIndex >= 0) {\n      fd.annotation_layers[annotationIndex].overrides = sliceFormData;\n    }\n\n    return SupersetClient.post({\n      url,\n      signal,\n      timeout: queryTimeout * 1000,\n      headers: { 'Content-Type': 'application/json' },\n      jsonPayload: buildV1ChartDataPayload({\n        formData: fd,\n        force,\n        resultFormat: 'json',\n        resultType: 'full',\n      }),\n    })\n      .then(({ json }) => {\n        const data = json?.result?.[0]?.annotation_data?.[annotation.name];\n        return dispatch(annotationQuerySuccess(annotation, { data }, sliceKey));\n      })\n      .catch(response =>\n        getClientErrorObject(response).then(err => {\n          if (err.statusText === 'timeout') {\n            dispatch(\n              annotationQueryFailed(\n                annotation,\n                { error: 'Query timeout' },\n                sliceKey,\n              ),\n            );\n          } else if ((err.error || '').toLowerCase().includes('no data')) {\n            dispatch(annotationQuerySuccess(annotation, err, sliceKey));\n          } else if (err.statusText !== 'abort') {\n            dispatch(annotationQueryFailed(annotation, err, sliceKey));\n          }\n        }),\n      );\n  };\n}\n\nexport const TRIGGER_QUERY = 'TRIGGER_QUERY';\nexport function triggerQuery(value = true, key) {\n  return { type: TRIGGER_QUERY, value, key };\n}\n\n// this action is used for forced re-render without fetch data\nexport const RENDER_TRIGGERED = 'RENDER_TRIGGERED';\nexport function renderTriggered(value, key) {\n  return { type: RENDER_TRIGGERED, value, key };\n}\n\nexport const UPDATE_QUERY_FORM_DATA = 'UPDATE_QUERY_FORM_DATA';\nexport function updateQueryFormData(value, key) {\n  return { type: UPDATE_QUERY_FORM_DATA, value, key };\n}\n\n// in the sql lab -> explore flow, user can inline edit chart title,\n// then the chart will be assigned a new slice_id\nexport const UPDATE_CHART_ID = 'UPDATE_CHART_ID';\nexport function updateChartId(newId, key = 0) {\n  return { type: UPDATE_CHART_ID, newId, key };\n}\n\nexport const ADD_CHART = 'ADD_CHART';\nexport function addChart(chart, key) {\n  return { type: ADD_CHART, chart, key };\n}\n\nexport function handleChartDataResponse(response, json, useLegacyApi) {\n  if (isFeatureEnabled(FeatureFlag.GlobalAsyncQueries)) {\n    // deal with getChartDataRequest transforming the response data\n    const result = 'result' in json ? json.result : json;\n    switch (response.status) {\n      case 200:\n        // Query results returned synchronously, meaning query was already cached.\n        return Promise.resolve(result);\n      case 202:\n        // Query is running asynchronously and we must await the results\n        if (useLegacyApi) {\n          return waitForAsyncData(result[0]);\n        }\n        return waitForAsyncData(result);\n      default:\n        throw new Error(\n          `Received unexpected response status (${response.status}) while fetching chart data`,\n        );\n    }\n  }\n  return json.result;\n}\n\nexport function exploreJSON(\n  formData,\n  force = false,\n  timeout,\n  key,\n  dashboardId,\n  ownState,\n) {\n  return async (dispatch, getState) => {\n    const logStart = Logger.getTimestamp();\n    const controller = new AbortController();\n    const queryTimeout =\n      timeout || getState().common.conf.SUPERSET_WEBSERVER_TIMEOUT;\n\n    const requestParams = {\n      signal: controller.signal,\n      timeout: queryTimeout * 1000,\n    };\n    if (dashboardId) requestParams.dashboard_id = dashboardId;\n\n    const setDataMask = dataMask => {\n      dispatch(updateDataMask(formData.slice_id, dataMask));\n    };\n    const chartDataRequest = getChartDataRequest({\n      setDataMask,\n      formData,\n      resultFormat: 'json',\n      resultType: 'full',\n      force,\n      method: 'POST',\n      requestParams,\n      ownState,\n    });\n\n    dispatch(chartUpdateStarted(controller, formData, key));\n\n    const [useLegacyApi] = getQuerySettings(formData);\n    const chartDataRequestCaught = chartDataRequest\n      .then(({ response, json }) =>\n        handleChartDataResponse(response, json, useLegacyApi),\n      )\n      .then(queriesResponse => {\n        queriesResponse.forEach(resultItem =>\n          dispatch(\n            logEvent(LOG_ACTIONS_LOAD_CHART, {\n              slice_id: key,\n              applied_filters: resultItem.applied_filters,\n              is_cached: resultItem.is_cached,\n              force_refresh: force,\n              row_count: resultItem.rowcount,\n              datasource: formData.datasource,\n              start_offset: logStart,\n              ts: new Date().getTime(),\n              duration: Logger.getTimestamp() - logStart,\n              has_extra_filters:\n                formData.extra_filters && formData.extra_filters.length > 0,\n              viz_type: formData.viz_type,\n              data_age: resultItem.is_cached\n                ? moment(new Date()).diff(moment.utc(resultItem.cached_dttm))\n                : null,\n            }),\n          ),\n        );\n        return dispatch(chartUpdateSucceeded(queriesResponse, key));\n      })\n      .catch(response => {\n        if (isFeatureEnabled(FeatureFlag.GlobalAsyncQueries)) {\n          return dispatch(chartUpdateFailed([response], key));\n        }\n\n        const appendErrorLog = (errorDetails, isCached) => {\n          dispatch(\n            logEvent(LOG_ACTIONS_LOAD_CHART, {\n              slice_id: key,\n              has_err: true,\n              is_cached: isCached,\n              error_details: errorDetails,\n              datasource: formData.datasource,\n              start_offset: logStart,\n              ts: new Date().getTime(),\n              duration: Logger.getTimestamp() - logStart,\n            }),\n          );\n        };\n        if (response.name === 'AbortError') {\n          appendErrorLog('abort');\n          return dispatch(chartUpdateStopped(key));\n        }\n        return getClientErrorObject(response).then(parsedResponse => {\n          if (response.statusText === 'timeout') {\n            appendErrorLog('timeout');\n          } else {\n            appendErrorLog(parsedResponse.error, parsedResponse.is_cached);\n          }\n          return dispatch(chartUpdateFailed([parsedResponse], key));\n        });\n      });\n\n    // only retrieve annotations when calling the legacy API\n    const annotationLayers = useLegacyApi\n      ? formData.annotation_layers || []\n      : [];\n    const isDashboardRequest = dashboardId > 0;\n\n    return Promise.all([\n      chartDataRequestCaught,\n      dispatch(triggerQuery(false, key)),\n      dispatch(updateQueryFormData(formData, key)),\n      ...annotationLayers.map(annotation =>\n        dispatch(\n          runAnnotationQuery({\n            annotation,\n            timeout,\n            formData,\n            key,\n            isDashboardRequest,\n            force,\n          }),\n        ),\n      ),\n    ]);\n  };\n}\n\nexport const POST_CHART_FORM_DATA = 'POST_CHART_FORM_DATA';\nexport function postChartFormData(\n  formData,\n  force = false,\n  timeout,\n  key,\n  dashboardId,\n  ownState,\n) {\n  return exploreJSON(formData, force, timeout, key, dashboardId, ownState);\n}\n\nexport function redirectSQLLab(formData, history) {\n  return dispatch => {\n    getChartDataRequest({ formData, resultFormat: 'json', resultType: 'query' })\n      .then(({ json }) => {\n        const redirectUrl = '/sqllab/';\n        const payload = {\n          datasourceKey: formData.datasource,\n          sql: json.result[0].query,\n        };\n        if (history) {\n          history.push({\n            pathname: redirectUrl,\n            state: {\n              requestedQuery: payload,\n            },\n          });\n        } else {\n          SupersetClient.postForm(redirectUrl, {\n            form_data: safeStringify(payload),\n          });\n        }\n      })\n      .catch(() =>\n        dispatch(addDangerToast(t('An error occurred while loading the SQL'))),\n      );\n  };\n}\n\nexport function refreshChart(chartKey, force, dashboardId) {\n  return (dispatch, getState) => {\n    const chart = (getState().charts || {})[chartKey];\n    const timeout =\n      getState().dashboardInfo.common.conf.SUPERSET_WEBSERVER_TIMEOUT;\n\n    if (\n      !chart.latestQueryFormData ||\n      Object.keys(chart.latestQueryFormData).length === 0\n    ) {\n      return;\n    }\n    dispatch(\n      postChartFormData(\n        chart.latestQueryFormData,\n        force,\n        timeout,\n        chart.id,\n        dashboardId,\n        getState().dataMask[chart.id]?.ownState,\n      ),\n    );\n  };\n}\n\nexport const getDatasourceSamples = async (\n  datasourceType,\n  datasourceId,\n  force,\n  jsonPayload,\n  perPage,\n  page,\n) => {\n  try {\n    const searchParams = {\n      force,\n      datasource_type: datasourceType,\n      datasource_id: datasourceId,\n    };\n\n    if (isDefined(perPage) && isDefined(page)) {\n      searchParams.per_page = perPage;\n      searchParams.page = page;\n    }\n\n    const response = await SupersetClient.post({\n      endpoint: '/datasource/samples',\n      jsonPayload,\n      searchParams,\n    });\n\n    return response.json.result;\n  } catch (err) {\n    const clientError = await getClientErrorObject(err);\n    throw new Error(\n      clientError.message || clientError.error || t('Sorry, an error occurred'),\n      { cause: err },\n    );\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}