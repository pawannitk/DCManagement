{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport memoizeOne from 'memoize-one';\nimport { CurrencyFormatter, extractTimegrain, GenericDataType, getMetricLabel, getNumberFormatter, getTimeFormatter, getTimeFormatterForGranularity, NumberFormats, QueryMode, smartDateFormatter, TimeFormats } from '@superset-ui/core';\nimport { getColorFormatters } from '@superset-ui/chart-controls';\nimport isEqualColumns from './utils/isEqualColumns';\nimport DateWithFormatter from './utils/DateWithFormatter';\nconst { PERCENT_3_POINT } = NumberFormats;\nconst { DATABASE_DATETIME } = TimeFormats;\nfunction isNumeric(key, data = []) {\n  return data.every((x) => x[key] === null || x[key] === undefined || typeof x[key] === 'number');\n}\nconst processDataRecords = memoizeOne(function processDataRecords(data, columns) {\n  if (!(data != null && data[0])) {\n    return data || [];\n  }\n  const timeColumns = columns.filter((column) => column.dataType === GenericDataType.Temporal);\n  if (timeColumns.length > 0) {\n    return data.map((x) => {\n      const datum = { ...x };\n      timeColumns.forEach(({ key, formatter }) => {\n        // Convert datetime with a custom date class so we can use `String(...)`\n        // formatted value for global search, and `date.getTime()` for sorting.\n        datum[key] = new DateWithFormatter(x[key], {\n          formatter: formatter\n        });\n      });\n      return datum;\n    });\n  }\n  return data;\n});\nconst processColumns = memoizeOne(function processColumns(props) {\n  const { datasource: { columnFormats, currencyFormats, verboseMap }, rawFormData: { table_timestamp_format: tableTimestampFormat, metrics: metrics_, percent_metrics: percentMetrics_, column_config: columnConfig = {} }, queriesData } = props;\n  const granularity = extractTimegrain(props.rawFormData);\n  const { data: records, colnames, coltypes } = queriesData[0] || {};\n  // convert `metrics` and `percentMetrics` to the key names in `data.records`\n  const metrics = (metrics_ != null ? metrics_ : []).map(getMetricLabel);\n  const rawPercentMetrics = (percentMetrics_ != null ? percentMetrics_ : []).map(getMetricLabel);\n  // column names for percent metrics always starts with a '%' sign.\n  const percentMetrics = rawPercentMetrics.map((x) => `%${x}`);\n  const metricsSet = new Set(metrics);\n  const percentMetricsSet = new Set(percentMetrics);\n  const rawPercentMetricsSet = new Set(rawPercentMetrics);\n  const columns = (colnames || []).\n  filter((key) =>\n  // if a metric was only added to percent_metrics, they should not show up in the table.\n  !(rawPercentMetricsSet.has(key) && !metricsSet.has(key))).\n  map((key, i) => {var _config$currencyForma;\n    const dataType = coltypes[i];\n    const config = columnConfig[key] || {};\n    // for the purpose of presentation, only numeric values are treated as metrics\n    // because users can also add things like `MAX(str_col)` as a metric.\n    const isMetric = metricsSet.has(key) && isNumeric(key, records);\n    const isPercentMetric = percentMetricsSet.has(key);\n    const label = isPercentMetric && verboseMap != null && verboseMap.hasOwnProperty(key.replace('%', '')) ?\n    `%${verboseMap[key.replace('%', '')]}` :\n    (verboseMap == null ? void 0 : verboseMap[key]) || key;\n    const isTime = dataType === GenericDataType.Temporal;\n    const isNumber = dataType === GenericDataType.Numeric;\n    const savedFormat = columnFormats == null ? void 0 : columnFormats[key];\n    const savedCurrency = currencyFormats == null ? void 0 : currencyFormats[key];\n    const numberFormat = config.d3NumberFormat || savedFormat;\n    const currency = (_config$currencyForma = config.currencyFormat) != null && _config$currencyForma.symbol ?\n    config.currencyFormat :\n    savedCurrency;\n    let formatter;\n    if (isTime || config.d3TimeFormat) {\n      // string types may also apply d3-time format\n      // pick adhoc format first, fallback to column level formats defined in\n      // datasource\n      const customFormat = config.d3TimeFormat || savedFormat;\n      const timeFormat = customFormat || tableTimestampFormat;\n      // When format is \"Adaptive Formatting\" (smart_date)\n      if (timeFormat === smartDateFormatter.id) {\n        if (granularity) {\n          // time column use formats based on granularity\n          formatter = getTimeFormatterForGranularity(granularity);\n        } else\n        if (customFormat) {\n          // other columns respect the column-specific format\n          formatter = getTimeFormatter(customFormat);\n        } else\n        if (isNumeric(key, records)) {\n          // if column is numeric values, it is considered a timestamp64\n          formatter = getTimeFormatter(DATABASE_DATETIME);\n        } else\n        {\n          // if no column-specific format, print cell as is\n          formatter = String;\n        }\n      } else\n      if (timeFormat) {\n        formatter = getTimeFormatter(timeFormat);\n      }\n    } else\n    if (isPercentMetric) {\n      // percent metrics have a default format\n      formatter = getNumberFormatter(numberFormat || PERCENT_3_POINT);\n    } else\n    if (isMetric || isNumber && (numberFormat || currency)) {\n      formatter = currency ?\n      new CurrencyFormatter({\n        d3Format: numberFormat,\n        currency\n      }) :\n      getNumberFormatter(numberFormat);\n    }\n    return {\n      key,\n      label,\n      dataType,\n      isNumeric: dataType === GenericDataType.Numeric,\n      isMetric,\n      isPercentMetric,\n      formatter,\n      config\n    };\n  });\n  return [metrics, percentMetrics, columns];\n}, isEqualColumns);\n/**\n * Automatically set page size based on number of cells.\n */\nconst getPageSize = (pageSize, numRecords, numColumns) => {\n  if (typeof pageSize === 'number') {\n    // NaN is also has typeof === 'number'\n    return pageSize || 0;\n  }\n  if (typeof pageSize === 'string') {\n    return Number(pageSize) || 0;\n  }\n  // when pageSize not set, automatically add pagination if too many records\n  return numRecords * numColumns > 5000 ? 200 : 0;\n};\nconst defaultServerPaginationData = {};\nconst defaultColorFormatters = [];\nconst transformProps = (chartProps) => {var _baseQuery2, _totalQuery, _getColorFormatters;\n  const { height, width, rawFormData: formData, queriesData = [], filterState, ownState: serverPaginationData, hooks: { onAddFilter: onChangeFilter, setDataMask = () => {}, onContextMenu }, emitCrossFilters } = chartProps;\n  const { align_pn: alignPositiveNegative = true, color_pn: colorPositiveNegative = true, show_cell_bars: showCellBars = true, include_search: includeSearch = false, page_length: pageLength, server_pagination: serverPagination = false, server_page_length: serverPageLength = 10, order_desc: sortDesc = false, query_mode: queryMode, show_totals: showTotals, conditional_formatting: conditionalFormatting, allow_rearrange_columns: allowRearrangeColumns, allow_render_html: allowRenderHtml } = formData;\n  const timeGrain = extractTimegrain(formData);\n  const [metrics, percentMetrics, columns] = processColumns(chartProps);\n  let baseQuery;\n  let countQuery;\n  let totalQuery;\n  let rowCount;\n  if (serverPagination) {var _countQuery$data$0$ro, _countQuery, _countQuery$data, _countQuery$data$;\n    [baseQuery, countQuery, totalQuery] = queriesData;\n    rowCount = (_countQuery$data$0$ro = (_countQuery = countQuery) == null ? void 0 : (_countQuery$data = _countQuery.data) == null ? void 0 : (_countQuery$data$ = _countQuery$data[0]) == null ? void 0 : _countQuery$data$.rowcount) != null ? _countQuery$data$0$ro : 0;\n  } else\n  {var _baseQuery$rowcount, _baseQuery;\n    [baseQuery, totalQuery] = queriesData;\n    rowCount = (_baseQuery$rowcount = (_baseQuery = baseQuery) == null ? void 0 : _baseQuery.rowcount) != null ? _baseQuery$rowcount : 0;\n  }\n  const data = processDataRecords((_baseQuery2 = baseQuery) == null ? void 0 : _baseQuery2.data, columns);\n  const totals = showTotals && queryMode === QueryMode.Aggregate ? (_totalQuery =\n  totalQuery) == null ? void 0 : _totalQuery.data[0] :\n  undefined;\n  const columnColorFormatters = (_getColorFormatters = getColorFormatters(conditionalFormatting, data)) != null ? _getColorFormatters : defaultColorFormatters;\n  return {\n    height,\n    width,\n    isRawRecords: queryMode === QueryMode.Raw,\n    data,\n    totals,\n    columns,\n    serverPagination,\n    metrics,\n    percentMetrics,\n    serverPaginationData: serverPagination ?\n    serverPaginationData :\n    defaultServerPaginationData,\n    setDataMask,\n    alignPositiveNegative,\n    colorPositiveNegative,\n    showCellBars,\n    sortDesc,\n    includeSearch,\n    rowCount,\n    pageSize: serverPagination ?\n    serverPageLength :\n    getPageSize(pageLength, data.length, columns.length),\n    filters: filterState.filters,\n    emitCrossFilters,\n    onChangeFilter,\n    columnColorFormatters,\n    timeGrain,\n    allowRearrangeColumns,\n    allowRenderHtml,\n    onContextMenu\n  };\n};const _default =\ntransformProps;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(PERCENT_3_POINT, \"PERCENT_3_POINT\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-table/src/transformProps.ts\");reactHotLoader.register(DATABASE_DATETIME, \"DATABASE_DATETIME\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-table/src/transformProps.ts\");reactHotLoader.register(isNumeric, \"isNumeric\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-table/src/transformProps.ts\");reactHotLoader.register(processDataRecords, \"processDataRecords\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-table/src/transformProps.ts\");reactHotLoader.register(processColumns, \"processColumns\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-table/src/transformProps.ts\");reactHotLoader.register(getPageSize, \"getPageSize\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-table/src/transformProps.ts\");reactHotLoader.register(defaultServerPaginationData, \"defaultServerPaginationData\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-table/src/transformProps.ts\");reactHotLoader.register(defaultColorFormatters, \"defaultColorFormatters\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-table/src/transformProps.ts\");reactHotLoader.register(transformProps, \"transformProps\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-table/src/transformProps.ts\");reactHotLoader.register(_default, \"default\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-table/src/transformProps.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["memoizeOne","CurrencyFormatter","extractTimegrain","GenericDataType","getMetricLabel","getNumberFormatter","getTimeFormatter","getTimeFormatterForGranularity","NumberFormats","QueryMode","smartDateFormatter","TimeFormats","getColorFormatters","isEqualColumns","DateWithFormatter","PERCENT_3_POINT","DATABASE_DATETIME","isNumeric","key","data","every","x","undefined","processDataRecords","columns","timeColumns","filter","column","dataType","Temporal","length","map","datum","forEach","formatter","processColumns","props","datasource","columnFormats","currencyFormats","verboseMap","rawFormData","table_timestamp_format","tableTimestampFormat","metrics","metrics_","percent_metrics","percentMetrics_","column_config","columnConfig","queriesData","granularity","records","colnames","coltypes","rawPercentMetrics","percentMetrics","metricsSet","Set","percentMetricsSet","rawPercentMetricsSet","has","i","_config$currencyForma","config","isMetric","isPercentMetric","label","hasOwnProperty","replace","isTime","isNumber","Numeric","savedFormat","savedCurrency","numberFormat","d3NumberFormat","currency","currencyFormat","symbol","d3TimeFormat","customFormat","timeFormat","id","String","d3Format","getPageSize","pageSize","numRecords","numColumns","Number","defaultServerPaginationData","defaultColorFormatters","transformProps","chartProps","_baseQuery2","_totalQuery","_getColorFormatters","height","width","formData","filterState","ownState","serverPaginationData","hooks","onAddFilter","onChangeFilter","setDataMask","onContextMenu","emitCrossFilters","align_pn","alignPositiveNegative","color_pn","colorPositiveNegative","show_cell_bars","showCellBars","include_search","includeSearch","page_length","pageLength","server_pagination","serverPagination","server_page_length","serverPageLength","order_desc","sortDesc","query_mode","queryMode","show_totals","showTotals","conditional_formatting","conditionalFormatting","allow_rearrange_columns","allowRearrangeColumns","allow_render_html","allowRenderHtml","timeGrain","baseQuery","countQuery","totalQuery","rowCount","_countQuery$data$0$ro","_countQuery","_countQuery$data","_countQuery$data$","rowcount","_baseQuery$rowcount","_baseQuery","totals","Aggregate","columnColorFormatters","isRawRecords","Raw","filters","_default","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-table/src/transformProps.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport memoizeOne from 'memoize-one';\nimport {\n  CurrencyFormatter,\n  DataRecord,\n  extractTimegrain,\n  GenericDataType,\n  getMetricLabel,\n  getNumberFormatter,\n  getTimeFormatter,\n  getTimeFormatterForGranularity,\n  NumberFormats,\n  QueryMode,\n  smartDateFormatter,\n  TimeFormats,\n  TimeFormatter,\n} from '@superset-ui/core';\nimport {\n  ColorFormatters,\n  getColorFormatters,\n} from '@superset-ui/chart-controls';\n\nimport isEqualColumns from './utils/isEqualColumns';\nimport DateWithFormatter from './utils/DateWithFormatter';\nimport {\n  DataColumnMeta,\n  TableChartProps,\n  TableChartTransformedProps,\n} from './types';\n\nconst { PERCENT_3_POINT } = NumberFormats;\nconst { DATABASE_DATETIME } = TimeFormats;\n\nfunction isNumeric(key: string, data: DataRecord[] = []) {\n  return data.every(\n    x => x[key] === null || x[key] === undefined || typeof x[key] === 'number',\n  );\n}\n\nconst processDataRecords = memoizeOne(function processDataRecords(\n  data: DataRecord[] | undefined,\n  columns: DataColumnMeta[],\n) {\n  if (!data?.[0]) {\n    return data || [];\n  }\n  const timeColumns = columns.filter(\n    column => column.dataType === GenericDataType.Temporal,\n  );\n\n  if (timeColumns.length > 0) {\n    return data.map(x => {\n      const datum = { ...x };\n      timeColumns.forEach(({ key, formatter }) => {\n        // Convert datetime with a custom date class so we can use `String(...)`\n        // formatted value for global search, and `date.getTime()` for sorting.\n        datum[key] = new DateWithFormatter(x[key], {\n          formatter: formatter as TimeFormatter,\n        });\n      });\n      return datum;\n    });\n  }\n  return data;\n});\n\nconst processColumns = memoizeOne(function processColumns(\n  props: TableChartProps,\n) {\n  const {\n    datasource: { columnFormats, currencyFormats, verboseMap },\n    rawFormData: {\n      table_timestamp_format: tableTimestampFormat,\n      metrics: metrics_,\n      percent_metrics: percentMetrics_,\n      column_config: columnConfig = {},\n    },\n    queriesData,\n  } = props;\n  const granularity = extractTimegrain(props.rawFormData);\n  const { data: records, colnames, coltypes } = queriesData[0] || {};\n  // convert `metrics` and `percentMetrics` to the key names in `data.records`\n  const metrics = (metrics_ ?? []).map(getMetricLabel);\n  const rawPercentMetrics = (percentMetrics_ ?? []).map(getMetricLabel);\n  // column names for percent metrics always starts with a '%' sign.\n  const percentMetrics = rawPercentMetrics.map((x: string) => `%${x}`);\n  const metricsSet = new Set(metrics);\n  const percentMetricsSet = new Set(percentMetrics);\n  const rawPercentMetricsSet = new Set(rawPercentMetrics);\n\n  const columns: DataColumnMeta[] = (colnames || [])\n    .filter(\n      key =>\n        // if a metric was only added to percent_metrics, they should not show up in the table.\n        !(rawPercentMetricsSet.has(key) && !metricsSet.has(key)),\n    )\n    .map((key: string, i) => {\n      const dataType = coltypes[i];\n      const config = columnConfig[key] || {};\n      // for the purpose of presentation, only numeric values are treated as metrics\n      // because users can also add things like `MAX(str_col)` as a metric.\n      const isMetric = metricsSet.has(key) && isNumeric(key, records);\n      const isPercentMetric = percentMetricsSet.has(key);\n      const label =\n        isPercentMetric && verboseMap?.hasOwnProperty(key.replace('%', ''))\n          ? `%${verboseMap[key.replace('%', '')]}`\n          : verboseMap?.[key] || key;\n      const isTime = dataType === GenericDataType.Temporal;\n      const isNumber = dataType === GenericDataType.Numeric;\n      const savedFormat = columnFormats?.[key];\n      const savedCurrency = currencyFormats?.[key];\n      const numberFormat = config.d3NumberFormat || savedFormat;\n      const currency = config.currencyFormat?.symbol\n        ? config.currencyFormat\n        : savedCurrency;\n\n      let formatter;\n\n      if (isTime || config.d3TimeFormat) {\n        // string types may also apply d3-time format\n        // pick adhoc format first, fallback to column level formats defined in\n        // datasource\n        const customFormat = config.d3TimeFormat || savedFormat;\n        const timeFormat = customFormat || tableTimestampFormat;\n        // When format is \"Adaptive Formatting\" (smart_date)\n        if (timeFormat === smartDateFormatter.id) {\n          if (granularity) {\n            // time column use formats based on granularity\n            formatter = getTimeFormatterForGranularity(granularity);\n          } else if (customFormat) {\n            // other columns respect the column-specific format\n            formatter = getTimeFormatter(customFormat);\n          } else if (isNumeric(key, records)) {\n            // if column is numeric values, it is considered a timestamp64\n            formatter = getTimeFormatter(DATABASE_DATETIME);\n          } else {\n            // if no column-specific format, print cell as is\n            formatter = String;\n          }\n        } else if (timeFormat) {\n          formatter = getTimeFormatter(timeFormat);\n        }\n      } else if (isPercentMetric) {\n        // percent metrics have a default format\n        formatter = getNumberFormatter(numberFormat || PERCENT_3_POINT);\n      } else if (isMetric || (isNumber && (numberFormat || currency))) {\n        formatter = currency\n          ? new CurrencyFormatter({\n              d3Format: numberFormat,\n              currency,\n            })\n          : getNumberFormatter(numberFormat);\n      }\n      return {\n        key,\n        label,\n        dataType,\n        isNumeric: dataType === GenericDataType.Numeric,\n        isMetric,\n        isPercentMetric,\n        formatter,\n        config,\n      };\n    });\n  return [metrics, percentMetrics, columns] as [\n    typeof metrics,\n    typeof percentMetrics,\n    typeof columns,\n  ];\n}, isEqualColumns);\n\n/**\n * Automatically set page size based on number of cells.\n */\nconst getPageSize = (\n  pageSize: number | string | null | undefined,\n  numRecords: number,\n  numColumns: number,\n) => {\n  if (typeof pageSize === 'number') {\n    // NaN is also has typeof === 'number'\n    return pageSize || 0;\n  }\n  if (typeof pageSize === 'string') {\n    return Number(pageSize) || 0;\n  }\n  // when pageSize not set, automatically add pagination if too many records\n  return numRecords * numColumns > 5000 ? 200 : 0;\n};\n\nconst defaultServerPaginationData = {};\nconst defaultColorFormatters = [] as ColorFormatters;\nconst transformProps = (\n  chartProps: TableChartProps,\n): TableChartTransformedProps => {\n  const {\n    height,\n    width,\n    rawFormData: formData,\n    queriesData = [],\n    filterState,\n    ownState: serverPaginationData,\n    hooks: {\n      onAddFilter: onChangeFilter,\n      setDataMask = () => {},\n      onContextMenu,\n    },\n    emitCrossFilters,\n  } = chartProps;\n\n  const {\n    align_pn: alignPositiveNegative = true,\n    color_pn: colorPositiveNegative = true,\n    show_cell_bars: showCellBars = true,\n    include_search: includeSearch = false,\n    page_length: pageLength,\n    server_pagination: serverPagination = false,\n    server_page_length: serverPageLength = 10,\n    order_desc: sortDesc = false,\n    query_mode: queryMode,\n    show_totals: showTotals,\n    conditional_formatting: conditionalFormatting,\n    allow_rearrange_columns: allowRearrangeColumns,\n    allow_render_html: allowRenderHtml,\n  } = formData;\n  const timeGrain = extractTimegrain(formData);\n\n  const [metrics, percentMetrics, columns] = processColumns(chartProps);\n\n  let baseQuery;\n  let countQuery;\n  let totalQuery;\n  let rowCount;\n  if (serverPagination) {\n    [baseQuery, countQuery, totalQuery] = queriesData;\n    rowCount = (countQuery?.data?.[0]?.rowcount as number) ?? 0;\n  } else {\n    [baseQuery, totalQuery] = queriesData;\n    rowCount = baseQuery?.rowcount ?? 0;\n  }\n  const data = processDataRecords(baseQuery?.data, columns);\n  const totals =\n    showTotals && queryMode === QueryMode.Aggregate\n      ? totalQuery?.data[0]\n      : undefined;\n  const columnColorFormatters =\n    getColorFormatters(conditionalFormatting, data) ?? defaultColorFormatters;\n\n  return {\n    height,\n    width,\n    isRawRecords: queryMode === QueryMode.Raw,\n    data,\n    totals,\n    columns,\n    serverPagination,\n    metrics,\n    percentMetrics,\n    serverPaginationData: serverPagination\n      ? serverPaginationData\n      : defaultServerPaginationData,\n    setDataMask,\n    alignPositiveNegative,\n    colorPositiveNegative,\n    showCellBars,\n    sortDesc,\n    includeSearch,\n    rowCount,\n    pageSize: serverPagination\n      ? serverPageLength\n      : getPageSize(pageLength, data.length, columns.length),\n    filters: filterState.filters,\n    emitCrossFilters,\n    onChangeFilter,\n    columnColorFormatters,\n    timeGrain,\n    allowRearrangeColumns,\n    allowRenderHtml,\n    onContextMenu,\n  };\n};\n\nexport default transformProps;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}