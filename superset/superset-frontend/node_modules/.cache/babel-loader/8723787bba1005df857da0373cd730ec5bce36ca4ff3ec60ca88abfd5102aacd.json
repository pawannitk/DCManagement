{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useRef } from 'react';\n/*\n * Functional components and setTimeout with useState do not play well\n * and the setTimeout callback typically has stale state from a closure\n * The useInterval function solves this issue.\n * more info: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n */\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef(callback);\n  // Remember the latest function.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback == null ? void 0 : savedCallback.current == null ? void 0 : savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n    return () => {};\n  }, [delay]);\n}__signature__(useInterval, \"useRef{savedCallback}\\nuseEffect{}\\nuseEffect{}\");const _default =\nuseInterval;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(useInterval, \"useInterval\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/utils/useInterval.ts\");reactHotLoader.register(_default, \"default\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/utils/useInterval.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["useEffect","useRef","useInterval","callback","delay","savedCallback","current","tick","id","setInterval","clearInterval","__signature__","_default","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/utils/useInterval.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useRef } from 'react';\n\n/*\n * Functional components and setTimeout with useState do not play well\n * and the setTimeout callback typically has stale state from a closure\n * The useInterval function solves this issue.\n * more info: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n */\nfunction useInterval(callback: Function, delay: number | null): void {\n  const savedCallback = useRef<Function>(callback);\n  // Remember the latest function.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback?.current?.();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n    return () => {};\n  }, [delay]);\n}\n\nexport default useInterval;\n"],"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAkBA,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAEzC;;;;;;AAMA,SAASC,WAAWA,CAACC,QAAkB,EAAEC,KAAoB;EAC3D,MAAMC,aAAa,GAAGJ,MAAM,CAAWE,QAAQ,CAAC;EAChD;EACAH,SAAS,CAAC,MAAK;IACbK,aAAa,CAACC,OAAO,GAAGH,QAAQ;EAClC,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;EAEd;EACAH,SAAS,CAAC,MAAK;IACb,SAASO,IAAIA,CAAA;MACXF,aAAa,oBAAbA,aAAa,CAAEC,OAAO,oBAAtBD,aAAa,CAAEC,OAAO,CAAE,CAAE;IAC5B;IACA,IAAIF,KAAK,KAAK,IAAI,EAAE;MAClB,MAAMI,EAAE,GAAGC,WAAW,CAACF,IAAI,EAAEH,KAAK,CAAC;MACnC,OAAO,MAAMM,aAAa,CAACF,EAAE,CAAC;;IAEhC,OAAO,MAAK,CAAE,CAAC;EACjB,CAAC,EAAE,CAACJ,KAAK,CAAC,CAAC;AACb,CAACO,aAAA,CAlBQT,WAAW,2DAAAU,QAAA;AAoBLV,WAAW,CAA1B,eAAAU,QAAA,CAA2B,mBAAAC,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAC,OAAA,GAAAC,SAAA,MAAAH,cAAA,WAAAA,cAAA,CAAAI,QAAA,CApBlBf,WAAW,2GAAAW,cAAA,CAAAI,QAAA,CAAAL,QAAA,+HAAAM,WAAA,UAAAJ,oBAAA,mBAAAA,oBAAA,CAAAI,WAAA,GAAAF,SAAA,CAAAE,WAAA,IAAAA,WAAA,CAAAC,MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}