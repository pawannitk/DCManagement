{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * A Registry which serves as a typed key:value store for Superset and for Plugins.\n *\n * Differences from the older Registry class:\n *\n * 1. The keys and values stored in this class are individually typed by TYPEMAP parameter.\n *    In the old Registry, all values are of the same type and keys are not enumerated.\n *    Though you can also use indexed or mapped types in a TYPEMAP.\n *\n * 2. This class does not have a separate async get and set methods or use loaders.\n *    Instead, TYPEMAP should specify async values and loaders explicitly when needed.\n *    The value can be anything! A string, a class, a function, an async function... anything!\n *\n * 3. This class does not implement Policies, that is a separate concern to be handled elsewhere.\n *\n *\n * Removing or altering types in a type map could be a potential breaking change, be careful!\n *\n * Listener methods have not been added because there isn't a use case yet.\n */\nclass TypedRegistry {\n\n\n  constructor(initialRecords) {this.name = 'TypedRegistry';this.records = void 0;\n    this.records = initialRecords;\n  }\n  get(key) {\n    // The type construction above means that when you call this function,\n    // you get a really specific type back.\n    return this.records[key];\n  }\n  set(key, value) {\n    this.records[key] = value;\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}const _default = TypedRegistry;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(TypedRegistry, \"TypedRegistry\", \"/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/models/TypedRegistry.ts\");reactHotLoader.register(_default, \"default\", \"/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/models/TypedRegistry.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["TypedRegistry","constructor","initialRecords","name","records","get","key","set","value","__reactstandin__regenerateByEval","code","eval","_default","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/models/TypedRegistry.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/**\n * A Registry which serves as a typed key:value store for Superset and for Plugins.\n *\n * Differences from the older Registry class:\n *\n * 1. The keys and values stored in this class are individually typed by TYPEMAP parameter.\n *    In the old Registry, all values are of the same type and keys are not enumerated.\n *    Though you can also use indexed or mapped types in a TYPEMAP.\n *\n * 2. This class does not have a separate async get and set methods or use loaders.\n *    Instead, TYPEMAP should specify async values and loaders explicitly when needed.\n *    The value can be anything! A string, a class, a function, an async function... anything!\n *\n * 3. This class does not implement Policies, that is a separate concern to be handled elsewhere.\n *\n *\n * Removing or altering types in a type map could be a potential breaking change, be careful!\n *\n * Listener methods have not been added because there isn't a use case yet.\n */\nclass TypedRegistry<TYPEMAP extends {}> {\n  name = 'TypedRegistry';\n\n  private records: TYPEMAP;\n\n  constructor(initialRecords: TYPEMAP) {\n    this.records = initialRecords;\n  }\n\n  get<K extends keyof TYPEMAP>(key: K): TYPEMAP[K] {\n    // The type construction above means that when you call this function,\n    // you get a really specific type back.\n    return this.records[key];\n  }\n\n  set<K extends keyof TYPEMAP>(key: K, value: TYPEMAP[K]) {\n    this.records[key] = value;\n  }\n}\n\nexport default TypedRegistry;\n"],"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;;;;;;;;AAoBA,MAAMA,aAAa;;;EAKjBC,YAAYC,cAAuB,QAJnCC,IAAI,GAAG,eAAe,MAEdC,OAAO;IAGb,IAAI,CAACA,OAAO,GAAGF,cAAc;EAC/B;EAEAG,GAAGA,CAA0BC,GAAM;IACjC;IACA;IACA,OAAO,IAAI,CAACF,OAAO,CAACE,GAAG,CAAC;EAC1B;EAEAC,GAAGA,CAA0BD,GAAM,EAAEE,KAAiB;IACpD,IAAI,CAACJ,OAAO,CAACE,GAAG,CAAC,GAAGE,KAAK;EAC3B,CAAC;EAAAC,iCAAAH,GAAA,EAAAI,IAAA;IAAA,KAAAJ,GAAA,IAAAK,IAAA,CAAAD,IAAA,G,CACF,MAAAE,QAAA,GAEcZ,aAAa,CAA5B,eAAAY,QAAA,CAA6B,mBAAAC,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAC,OAAA,GAAAC,SAAA,MAAAH,cAAA,WAAAA,cAAA,CAAAI,QAAA,CApBvBjB,aAAa,mIAAAa,cAAA,CAAAI,QAAA,CAAAL,QAAA,qJAAAM,WAAA,UAAAJ,oBAAA,mBAAAA,oBAAA,CAAAI,WAAA,GAAAF,SAAA,CAAAE,WAAA,IAAAA,WAAA,CAAAC,MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}