{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport memoizeOne from 'memoize-one';\nimport { DatasourceType, getChartControlPanelRegistry } from '@superset-ui/core';\nimport { expandControlConfig, isControlPanelSectionConfig } from '@superset-ui/chart-controls';\nimport * as SECTIONS from 'src/explore/controlPanels/sections';\nconst getMemoizedSectionsToRender = memoizeOne((datasourceType, controlPanelConfig) => {\n  const { sectionOverrides = {}, controlOverrides, controlPanelSections = [] } = controlPanelConfig;\n  // default control panel sections\n  const sections = { ...SECTIONS };\n  // apply section overrides\n  Object.entries(sectionOverrides).forEach(([section, overrides]) => {\n    if (typeof overrides === 'object' && overrides.constructor === Object) {\n      sections[section] = {\n        ...sections[section],\n        ...overrides\n      };\n    } else\n    {\n      sections[section] = overrides;\n    }\n  });\n  const { datasourceAndVizType } = sections;\n  // list of datasource-specific controls that should be removed if the datasource is a specific type\n  const filterControlsForTypes = [DatasourceType.Query, DatasourceType.Table];\n  const invalidControls = filterControlsForTypes.includes(datasourceType) ?\n  ['granularity'] :\n  ['granularity_sqla', 'time_grain_sqla'];\n  return [datasourceAndVizType].\n  concat(controlPanelSections.filter(isControlPanelSectionConfig)).\n  map((section) => {\n    const { controlSetRows } = section;\n    return {\n      ...section,\n      controlSetRows: (controlSetRows == null ? void 0 : controlSetRows.map((row) => row.\n      filter((control) => typeof control !== 'string' ||\n      !invalidControls.includes(control)).\n      map((item) => expandControlConfig(item, controlOverrides)))) || []\n    };\n  });\n});\n/**\n * Get the clean and processed control panel sections\n */\nexport function getSectionsToRender(vizType, datasourceType) {\n  const controlPanelConfig =\n  // TODO: update `chartControlPanelRegistry` type to use ControlPanelConfig\n  getChartControlPanelRegistry().get(vizType) || {};\n  return getMemoizedSectionsToRender(datasourceType, controlPanelConfig);\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(getMemoizedSectionsToRender, \"getMemoizedSectionsToRender\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/controlUtils/getSectionsToRender.ts\");reactHotLoader.register(getSectionsToRender, \"getSectionsToRender\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/controlUtils/getSectionsToRender.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["memoizeOne","DatasourceType","getChartControlPanelRegistry","expandControlConfig","isControlPanelSectionConfig","SECTIONS","getMemoizedSectionsToRender","datasourceType","controlPanelConfig","sectionOverrides","controlOverrides","controlPanelSections","sections","Object","entries","forEach","section","overrides","constructor","datasourceAndVizType","filterControlsForTypes","Query","Table","invalidControls","includes","concat","filter","map","controlSetRows","row","control","item","getSectionsToRender","vizType","get","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/controlUtils/getSectionsToRender.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport memoizeOne from 'memoize-one';\nimport {\n  DatasourceType,\n  getChartControlPanelRegistry,\n} from '@superset-ui/core';\nimport {\n  ControlPanelConfig,\n  expandControlConfig,\n  isControlPanelSectionConfig,\n} from '@superset-ui/chart-controls';\n\nimport * as SECTIONS from 'src/explore/controlPanels/sections';\n\nconst getMemoizedSectionsToRender = memoizeOne(\n  (datasourceType: DatasourceType, controlPanelConfig: ControlPanelConfig) => {\n    const {\n      sectionOverrides = {},\n      controlOverrides,\n      controlPanelSections = [],\n    } = controlPanelConfig;\n\n    // default control panel sections\n    const sections = { ...SECTIONS };\n\n    // apply section overrides\n    Object.entries(sectionOverrides).forEach(([section, overrides]) => {\n      if (typeof overrides === 'object' && overrides.constructor === Object) {\n        sections[section] = {\n          ...sections[section],\n          ...overrides,\n        };\n      } else {\n        sections[section] = overrides;\n      }\n    });\n\n    const { datasourceAndVizType } = sections;\n\n    // list of datasource-specific controls that should be removed if the datasource is a specific type\n    const filterControlsForTypes = [DatasourceType.Query, DatasourceType.Table];\n    const invalidControls = filterControlsForTypes.includes(datasourceType)\n      ? ['granularity']\n      : ['granularity_sqla', 'time_grain_sqla'];\n\n    return [datasourceAndVizType]\n      .concat(controlPanelSections.filter(isControlPanelSectionConfig))\n      .map(section => {\n        const { controlSetRows } = section;\n        return {\n          ...section,\n          controlSetRows:\n            controlSetRows?.map(row =>\n              row\n                .filter(\n                  control =>\n                    typeof control !== 'string' ||\n                    !invalidControls.includes(control),\n                )\n                .map(item => expandControlConfig(item, controlOverrides)),\n            ) || [],\n        };\n      });\n  },\n);\n\n/**\n * Get the clean and processed control panel sections\n */\nexport function getSectionsToRender(\n  vizType: string,\n  datasourceType: DatasourceType,\n) {\n  const controlPanelConfig =\n    // TODO: update `chartControlPanelRegistry` type to use ControlPanelConfig\n    (getChartControlPanelRegistry().get(vizType) as ControlPanelConfig) || {};\n  return getMemoizedSectionsToRender(datasourceType, controlPanelConfig);\n}\n"],"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,UAAU,MAAM,aAAa;AACpC,SACEC,cAAc,EACdC,4BAA4B,QACvB,mBAAmB;AAC1B,SAEEC,mBAAmB,EACnBC,2BAA2B,QACtB,6BAA6B;AAEpC,OAAO,KAAKC,QAAQ,MAAM,oCAAoC;AAE9D,MAAMC,2BAA2B,GAAGN,UAAU,CAC5C,CAACO,cAA8B,EAAEC,kBAAsC,KAAI;EACzE,MAAM,EACJC,gBAAgB,GAAG,EAAE,EACrBC,gBAAgB,EAChBC,oBAAoB,GAAG,EAAE,EAC1B,GAAGH,kBAAkB;EAEtB;EACA,MAAMI,QAAQ,GAAG,EAAE,GAAGP,QAAQ,EAAE;EAEhC;EACAQ,MAAM,CAACC,OAAO,CAACL,gBAAgB,CAAC,CAACM,OAAO,CAAC,CAAC,CAACC,OAAO,EAAEC,SAAS,CAAC,KAAI;IAChE,IAAI,OAAOA,SAAS,KAAK,QAAQ,IAAIA,SAAS,CAACC,WAAW,KAAKL,MAAM,EAAE;MACrED,QAAQ,CAACI,OAAO,CAAC,GAAG;QAClB,GAAGJ,QAAQ,CAACI,OAAO,CAAC;QACpB,GAAGC;OACJ;KACF;IAAM;MACLL,QAAQ,CAACI,OAAO,CAAC,GAAGC,SAAS;;EAEjC,CAAC,CAAC;EAEF,MAAM,EAAEE,oBAAoB,EAAE,GAAGP,QAAQ;EAEzC;EACA,MAAMQ,sBAAsB,GAAG,CAACnB,cAAc,CAACoB,KAAK,EAAEpB,cAAc,CAACqB,KAAK,CAAC;EAC3E,MAAMC,eAAe,GAAGH,sBAAsB,CAACI,QAAQ,CAACjB,cAAc,CAAC;EACnE,CAAC,aAAa,CAAC;EACf,CAAC,kBAAkB,EAAE,iBAAiB,CAAC;EAE3C,OAAO,CAACY,oBAAoB,CAAC;EAC1BM,MAAM,CAACd,oBAAoB,CAACe,MAAM,CAACtB,2BAA2B,CAAC,CAAC;EAChEuB,GAAG,CAAC,CAAAX,OAAO,KAAG;IACb,MAAM,EAAEY,cAAc,EAAE,GAAGZ,OAAO;IAClC,OAAO;MACL,GAAGA,OAAO;MACVY,cAAc,EACZ,CAAAA,cAAc,oBAAdA,cAAc,CAAED,GAAG,CAAC,CAAAE,GAAG,KACrBA,GAAG;MACAH,MAAM,CACL,CAAAI,OAAO,KACL,OAAOA,OAAO,KAAK,QAAQ;MAC3B,CAACP,eAAe,CAACC,QAAQ,CAACM,OAAO,CAAC,CACrC;MACAH,GAAG,CAAC,CAAAI,IAAI,KAAI5B,mBAAmB,CAAC4B,IAAI,EAAErB,gBAAgB,CAAC,CAAC,CAC5D,KAAI;KACR;EACH,CAAC,CAAC;AACN,CAAC,CACF;AAED;;;AAGA,OAAM,SAAUsB,mBAAmBA,CACjCC,OAAe,EACf1B,cAA8B;EAE9B,MAAMC,kBAAkB;EACtB;EACCN,4BAA4B,EAAE,CAACgC,GAAG,CAACD,OAAO,CAAwB,IAAI,EAAE;EAC3E,OAAO3B,2BAA2B,CAACC,cAAc,EAAEC,kBAAkB,CAAC;AACxE,CAAC,mBAAA2B,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAC,OAAA,GAAAC,SAAA,MAAAH,cAAA,WAAAA,cAAA,CAAAI,QAAA,CA/DKjC,2BAA2B,2IAAA6B,cAAA,CAAAI,QAAA,CAuDjBP,mBAAmB,2JAAAQ,WAAA,UAAAJ,oBAAA,mBAAAA,oBAAA,CAAAI,WAAA,GAAAF,SAAA,CAAAE,WAAA,IAAAA,WAAA,CAAAC,MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}