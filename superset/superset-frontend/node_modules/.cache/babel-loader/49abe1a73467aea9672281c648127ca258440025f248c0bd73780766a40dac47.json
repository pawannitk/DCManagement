{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Tooltip } from 'src/components/Tooltip';\nimport {\n  CategoricalColorNamespace,\n  css,\n  logging,\n  SupersetClient,\n  t,\n  tn } from\n'@superset-ui/core';\nimport { chartPropShape } from 'src/dashboard/util/propShapes';\nimport AlteredSliceTag from 'src/components/AlteredSliceTag';\nimport Button from 'src/components/Button';\nimport Icons from 'src/components/Icons';\nimport PropertiesModal from 'src/explore/components/PropertiesModal';\nimport { sliceUpdated } from 'src/explore/actions/exploreActions';\nimport { PageHeaderWithActions } from 'src/components/PageHeaderWithActions';\nimport MetadataBar, { MetadataType } from 'src/components/MetadataBar';\nimport { setSaveChartModalVisibility } from 'src/explore/actions/saveModalActions';\nimport { useExploreAdditionalActionsMenu } from '../useExploreAdditionalActionsMenu';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  actions: PropTypes.object.isRequired,\n  canOverwrite: PropTypes.bool.isRequired,\n  canDownload: PropTypes.bool.isRequired,\n  dashboardId: PropTypes.number,\n  isStarred: PropTypes.bool.isRequired,\n  slice: PropTypes.object,\n  sliceName: PropTypes.string,\n  table_name: PropTypes.string,\n  formData: PropTypes.object,\n  ownState: PropTypes.object,\n  timeout: PropTypes.number,\n  chart: chartPropShape,\n  saveDisabled: PropTypes.bool\n};\n\nconst saveButtonStyles = (theme) => css`\n  color: ${theme.colors.primary.dark2};\n  & > span[role='img'] {\n    margin-right: 0;\n  }\n`;\n\nconst additionalItemsStyles = (theme) => css`\n  display: flex;\n  align-items: center;\n  margin-left: ${theme.gridUnit}px;\n  & > span {\n    margin-right: ${theme.gridUnit * 3}px;\n  }\n`;\n\nexport const ExploreChartHeader = ({\n  dashboardId,\n  slice,\n  actions,\n  formData,\n  ownState,\n  chart,\n  user,\n  canOverwrite,\n  canDownload,\n  isStarred,\n  sliceName,\n  saveDisabled,\n  metadata\n}) => {\n  const dispatch = useDispatch();\n  const { latestQueryFormData, sliceFormData } = chart;\n  const [isPropertiesModalOpen, setIsPropertiesModalOpen] = useState(false);\n\n  const updateCategoricalNamespace = async () => {\n    const { dashboards } = metadata || {};\n    const dashboard =\n    dashboardId && dashboards && dashboards.find((d) => d.id === dashboardId);\n\n    if (dashboard) {\n      try {var _response$json;\n        // Dashboards from metadata don't contain the json_metadata field\n        // to avoid unnecessary payload. Here we query for the dashboard json_metadata.\n        const response = await SupersetClient.get({\n          endpoint: `/api/v1/dashboard/${dashboard.id}`\n        });\n        const result = response == null ? void 0 : (_response$json = response.json) == null ? void 0 : _response$json.result;\n\n        // setting the chart to use the dashboard custom label colors if any\n        const metadata = JSON.parse(result.json_metadata);\n        const sharedLabelColors = metadata.shared_label_colors || {};\n        const customLabelColors = metadata.label_colors || {};\n        const mergedLabelColors = {\n          ...sharedLabelColors,\n          ...customLabelColors\n        };\n\n        const categoricalNamespace = CategoricalColorNamespace.getNamespace();\n\n        Object.keys(mergedLabelColors).forEach((label) => {\n          categoricalNamespace.setColor(\n            label,\n            mergedLabelColors[label],\n            metadata.color_scheme\n          );\n        });\n      } catch (error) {\n        logging.info(t('Unable to retrieve dashboard colors'));\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (dashboardId) updateCategoricalNamespace();\n  }, []);\n\n  const openPropertiesModal = () => {\n    setIsPropertiesModalOpen(true);\n  };\n\n  const closePropertiesModal = () => {\n    setIsPropertiesModalOpen(false);\n  };\n\n  const showModal = useCallback(() => {\n    dispatch(setSaveChartModalVisibility(true));\n  }, [dispatch]);\n\n  const updateSlice = useCallback(\n    (slice) => {\n      dispatch(sliceUpdated(slice));\n    },\n    [dispatch]\n  );\n\n  const history = useHistory();\n  const { redirectSQLLab } = actions;\n\n  const redirectToSQLLab = useCallback(\n    (formData, openNewWindow = false) => {\n      redirectSQLLab(formData, !openNewWindow && history);\n    },\n    [redirectSQLLab, history]\n  );\n\n  const [menu, isDropdownVisible, setIsDropdownVisible] =\n  useExploreAdditionalActionsMenu(\n    latestQueryFormData,\n    canDownload,\n    slice,\n    redirectToSQLLab,\n    openPropertiesModal,\n    ownState,\n    metadata == null ? void 0 : metadata.dashboards\n  );\n\n  const metadataBar = useMemo(() => {\n    if (!metadata) {\n      return null;\n    }\n    const items = [];\n    items.push({\n      type: MetadataType.Dashboards,\n      title:\n      metadata.dashboards.length > 0 ?\n      tn(\n        'Added to 1 dashboard',\n        'Added to %s dashboards',\n        metadata.dashboards.length,\n        metadata.dashboards.length\n      ) :\n      t('Not added to any dashboard'),\n      description:\n      metadata.dashboards.length > 0 ?\n      t(\n        'You can preview the list of dashboards in the chart settings dropdown.'\n      ) :\n      undefined\n    });\n    items.push({\n      type: MetadataType.LastModified,\n      value: metadata.changed_on_humanized,\n      modifiedBy: metadata.changed_by || t('Not available')\n    });\n    items.push({\n      type: MetadataType.Owner,\n      createdBy: metadata.created_by || t('Not available'),\n      owners: metadata.owners.length > 0 ? metadata.owners : t('None'),\n      createdOn: metadata.created_on_humanized\n    });\n    if (slice != null && slice.description) {\n      items.push({\n        type: MetadataType.Description,\n        value: slice == null ? void 0 : slice.description\n      });\n    }\n    return ___EmotionJSX(MetadataBar, { items: items, tooltipPlacement: \"bottom\" });\n  }, [metadata, slice == null ? void 0 : slice.description]);\n\n  const oldSliceName = slice == null ? void 0 : slice.slice_name;\n  return (\n    ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(PageHeaderWithActions, {\n      editableTitleProps: {\n        title: sliceName,\n        canEdit:\n        !slice ||\n        canOverwrite ||\n        ((slice == null ? void 0 : slice.owners) || []).includes(user == null ? void 0 : user.userId),\n        onSave: actions.updateChartTitle,\n        placeholder: t('Add the name of the chart'),\n        label: t('Chart title')\n      },\n      showTitlePanelItems: !!slice,\n      certificatiedBadgeProps: {\n        certifiedBy: slice == null ? void 0 : slice.certified_by,\n        details: slice == null ? void 0 : slice.certification_details\n      },\n      showFaveStar: !!(user != null && user.userId),\n      faveStarProps: {\n        itemId: slice == null ? void 0 : slice.slice_id,\n        fetchFaveStar: actions.fetchFaveStar,\n        saveFaveStar: actions.saveFaveStar,\n        isStarred,\n        showTooltip: true\n      },\n      titlePanelAdditionalItems:\n      ___EmotionJSX(\"div\", { css: additionalItemsStyles },\n      sliceFormData ?\n      ___EmotionJSX(AlteredSliceTag, {\n        className: \"altered\",\n        origFormData: {\n          ...sliceFormData,\n          chartTitle: oldSliceName\n        },\n        currentFormData: { ...formData, chartTitle: sliceName } }\n      ) :\n      null,\n      metadataBar\n      ),\n\n      rightPanelAdditionalItems:\n      ___EmotionJSX(Tooltip, {\n        title:\n        saveDisabled ?\n        t('Add required control values to save chart') :\n        null },\n\n\n\n      ___EmotionJSX(\"div\", null,\n      ___EmotionJSX(Button, {\n        buttonStyle: \"secondary\",\n        onClick: showModal,\n        disabled: saveDisabled,\n        \"data-test\": \"query-save-button\",\n        css: saveButtonStyles },\n\n      ___EmotionJSX(Icons.SaveOutlined, { iconSize: \"l\" }),\n      t('Save')\n      )\n      )\n      ),\n\n      additionalActionsMenu: menu,\n      menuDropdownProps: {\n        visible: isDropdownVisible,\n        onVisibleChange: setIsDropdownVisible\n      } }\n    ),\n    isPropertiesModalOpen &&\n    ___EmotionJSX(PropertiesModal, {\n      show: isPropertiesModalOpen,\n      onHide: closePropertiesModal,\n      onSave: updateSlice,\n      slice: slice }\n    )\n\n    ));\n\n};__signature__(ExploreChartHeader, \"useDispatch{dispatch}\\nuseState{[isPropertiesModalOpen, setIsPropertiesModalOpen](false)}\\nuseEffect{}\\nuseCallback{showModal}\\nuseCallback{updateSlice}\\nuseHistory{history}\\nuseCallback{redirectToSQLLab}\\nuseExploreAdditionalActionsMenu{[menu, isDropdownVisible, setIsDropdownVisible]}\\nuseMemo{metadataBar}\", () => [useDispatch, useHistory, useExploreAdditionalActionsMenu]);\n\nExploreChartHeader.propTypes = propTypes;const _default =\n\nExploreChartHeader;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(propTypes, \"propTypes\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/components/ExploreChartHeader/index.jsx\");reactHotLoader.register(saveButtonStyles, \"saveButtonStyles\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/components/ExploreChartHeader/index.jsx\");reactHotLoader.register(additionalItemsStyles, \"additionalItemsStyles\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/components/ExploreChartHeader/index.jsx\");reactHotLoader.register(ExploreChartHeader, \"ExploreChartHeader\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/components/ExploreChartHeader/index.jsx\");reactHotLoader.register(_default, \"default\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/components/ExploreChartHeader/index.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["React","useCallback","useEffect","useMemo","useState","useHistory","useDispatch","PropTypes","Tooltip","CategoricalColorNamespace","css","logging","SupersetClient","t","tn","chartPropShape","AlteredSliceTag","Button","Icons","PropertiesModal","sliceUpdated","PageHeaderWithActions","MetadataBar","MetadataType","setSaveChartModalVisibility","useExploreAdditionalActionsMenu","jsx","___EmotionJSX","propTypes","actions","object","isRequired","canOverwrite","bool","canDownload","dashboardId","number","isStarred","slice","sliceName","string","table_name","formData","ownState","timeout","chart","saveDisabled","saveButtonStyles","theme","colors","primary","dark2","additionalItemsStyles","gridUnit","ExploreChartHeader","user","metadata","dispatch","latestQueryFormData","sliceFormData","isPropertiesModalOpen","setIsPropertiesModalOpen","updateCategoricalNamespace","dashboards","dashboard","find","d","id","_response$json","response","get","endpoint","result","json","JSON","parse","json_metadata","sharedLabelColors","shared_label_colors","customLabelColors","label_colors","mergedLabelColors","categoricalNamespace","getNamespace","Object","keys","forEach","label","setColor","color_scheme","error","info","openPropertiesModal","closePropertiesModal","showModal","updateSlice","history","redirectSQLLab","redirectToSQLLab","openNewWindow","menu","isDropdownVisible","setIsDropdownVisible","metadataBar","items","push","type","Dashboards","title","length","description","undefined","LastModified","value","changed_on_humanized","modifiedBy","changed_by","Owner","createdBy","created_by","owners","createdOn","created_on_humanized","Description","tooltipPlacement","oldSliceName","slice_name","Fragment","editableTitleProps","canEdit","includes","userId","onSave","updateChartTitle","placeholder","showTitlePanelItems","certificatiedBadgeProps","certifiedBy","certified_by","details","certification_details","showFaveStar","faveStarProps","itemId","slice_id","fetchFaveStar","saveFaveStar","showTooltip","titlePanelAdditionalItems","className","origFormData","chartTitle","currentFormData","rightPanelAdditionalItems","buttonStyle","onClick","disabled","SaveOutlined","iconSize","additionalActionsMenu","menuDropdownProps","visible","onVisibleChange","show","onHide","__signature__","_default","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/components/ExploreChartHeader/index.jsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Tooltip } from 'src/components/Tooltip';\nimport {\n  CategoricalColorNamespace,\n  css,\n  logging,\n  SupersetClient,\n  t,\n  tn,\n} from '@superset-ui/core';\nimport { chartPropShape } from 'src/dashboard/util/propShapes';\nimport AlteredSliceTag from 'src/components/AlteredSliceTag';\nimport Button from 'src/components/Button';\nimport Icons from 'src/components/Icons';\nimport PropertiesModal from 'src/explore/components/PropertiesModal';\nimport { sliceUpdated } from 'src/explore/actions/exploreActions';\nimport { PageHeaderWithActions } from 'src/components/PageHeaderWithActions';\nimport MetadataBar, { MetadataType } from 'src/components/MetadataBar';\nimport { setSaveChartModalVisibility } from 'src/explore/actions/saveModalActions';\nimport { useExploreAdditionalActionsMenu } from '../useExploreAdditionalActionsMenu';\n\nconst propTypes = {\n  actions: PropTypes.object.isRequired,\n  canOverwrite: PropTypes.bool.isRequired,\n  canDownload: PropTypes.bool.isRequired,\n  dashboardId: PropTypes.number,\n  isStarred: PropTypes.bool.isRequired,\n  slice: PropTypes.object,\n  sliceName: PropTypes.string,\n  table_name: PropTypes.string,\n  formData: PropTypes.object,\n  ownState: PropTypes.object,\n  timeout: PropTypes.number,\n  chart: chartPropShape,\n  saveDisabled: PropTypes.bool,\n};\n\nconst saveButtonStyles = theme => css`\n  color: ${theme.colors.primary.dark2};\n  & > span[role='img'] {\n    margin-right: 0;\n  }\n`;\n\nconst additionalItemsStyles = theme => css`\n  display: flex;\n  align-items: center;\n  margin-left: ${theme.gridUnit}px;\n  & > span {\n    margin-right: ${theme.gridUnit * 3}px;\n  }\n`;\n\nexport const ExploreChartHeader = ({\n  dashboardId,\n  slice,\n  actions,\n  formData,\n  ownState,\n  chart,\n  user,\n  canOverwrite,\n  canDownload,\n  isStarred,\n  sliceName,\n  saveDisabled,\n  metadata,\n}) => {\n  const dispatch = useDispatch();\n  const { latestQueryFormData, sliceFormData } = chart;\n  const [isPropertiesModalOpen, setIsPropertiesModalOpen] = useState(false);\n\n  const updateCategoricalNamespace = async () => {\n    const { dashboards } = metadata || {};\n    const dashboard =\n      dashboardId && dashboards && dashboards.find(d => d.id === dashboardId);\n\n    if (dashboard) {\n      try {\n        // Dashboards from metadata don't contain the json_metadata field\n        // to avoid unnecessary payload. Here we query for the dashboard json_metadata.\n        const response = await SupersetClient.get({\n          endpoint: `/api/v1/dashboard/${dashboard.id}`,\n        });\n        const result = response?.json?.result;\n\n        // setting the chart to use the dashboard custom label colors if any\n        const metadata = JSON.parse(result.json_metadata);\n        const sharedLabelColors = metadata.shared_label_colors || {};\n        const customLabelColors = metadata.label_colors || {};\n        const mergedLabelColors = {\n          ...sharedLabelColors,\n          ...customLabelColors,\n        };\n\n        const categoricalNamespace = CategoricalColorNamespace.getNamespace();\n\n        Object.keys(mergedLabelColors).forEach(label => {\n          categoricalNamespace.setColor(\n            label,\n            mergedLabelColors[label],\n            metadata.color_scheme,\n          );\n        });\n      } catch (error) {\n        logging.info(t('Unable to retrieve dashboard colors'));\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (dashboardId) updateCategoricalNamespace();\n  }, []);\n\n  const openPropertiesModal = () => {\n    setIsPropertiesModalOpen(true);\n  };\n\n  const closePropertiesModal = () => {\n    setIsPropertiesModalOpen(false);\n  };\n\n  const showModal = useCallback(() => {\n    dispatch(setSaveChartModalVisibility(true));\n  }, [dispatch]);\n\n  const updateSlice = useCallback(\n    slice => {\n      dispatch(sliceUpdated(slice));\n    },\n    [dispatch],\n  );\n\n  const history = useHistory();\n  const { redirectSQLLab } = actions;\n\n  const redirectToSQLLab = useCallback(\n    (formData, openNewWindow = false) => {\n      redirectSQLLab(formData, !openNewWindow && history);\n    },\n    [redirectSQLLab, history],\n  );\n\n  const [menu, isDropdownVisible, setIsDropdownVisible] =\n    useExploreAdditionalActionsMenu(\n      latestQueryFormData,\n      canDownload,\n      slice,\n      redirectToSQLLab,\n      openPropertiesModal,\n      ownState,\n      metadata?.dashboards,\n    );\n\n  const metadataBar = useMemo(() => {\n    if (!metadata) {\n      return null;\n    }\n    const items = [];\n    items.push({\n      type: MetadataType.Dashboards,\n      title:\n        metadata.dashboards.length > 0\n          ? tn(\n              'Added to 1 dashboard',\n              'Added to %s dashboards',\n              metadata.dashboards.length,\n              metadata.dashboards.length,\n            )\n          : t('Not added to any dashboard'),\n      description:\n        metadata.dashboards.length > 0\n          ? t(\n              'You can preview the list of dashboards in the chart settings dropdown.',\n            )\n          : undefined,\n    });\n    items.push({\n      type: MetadataType.LastModified,\n      value: metadata.changed_on_humanized,\n      modifiedBy: metadata.changed_by || t('Not available'),\n    });\n    items.push({\n      type: MetadataType.Owner,\n      createdBy: metadata.created_by || t('Not available'),\n      owners: metadata.owners.length > 0 ? metadata.owners : t('None'),\n      createdOn: metadata.created_on_humanized,\n    });\n    if (slice?.description) {\n      items.push({\n        type: MetadataType.Description,\n        value: slice?.description,\n      });\n    }\n    return <MetadataBar items={items} tooltipPlacement=\"bottom\" />;\n  }, [metadata, slice?.description]);\n\n  const oldSliceName = slice?.slice_name;\n  return (\n    <>\n      <PageHeaderWithActions\n        editableTitleProps={{\n          title: sliceName,\n          canEdit:\n            !slice ||\n            canOverwrite ||\n            (slice?.owners || []).includes(user?.userId),\n          onSave: actions.updateChartTitle,\n          placeholder: t('Add the name of the chart'),\n          label: t('Chart title'),\n        }}\n        showTitlePanelItems={!!slice}\n        certificatiedBadgeProps={{\n          certifiedBy: slice?.certified_by,\n          details: slice?.certification_details,\n        }}\n        showFaveStar={!!user?.userId}\n        faveStarProps={{\n          itemId: slice?.slice_id,\n          fetchFaveStar: actions.fetchFaveStar,\n          saveFaveStar: actions.saveFaveStar,\n          isStarred,\n          showTooltip: true,\n        }}\n        titlePanelAdditionalItems={\n          <div css={additionalItemsStyles}>\n            {sliceFormData ? (\n              <AlteredSliceTag\n                className=\"altered\"\n                origFormData={{\n                  ...sliceFormData,\n                  chartTitle: oldSliceName,\n                }}\n                currentFormData={{ ...formData, chartTitle: sliceName }}\n              />\n            ) : null}\n            {metadataBar}\n          </div>\n        }\n        rightPanelAdditionalItems={\n          <Tooltip\n            title={\n              saveDisabled\n                ? t('Add required control values to save chart')\n                : null\n            }\n          >\n            {/* needed to wrap button in a div - antd tooltip doesn't work with disabled button */}\n            <div>\n              <Button\n                buttonStyle=\"secondary\"\n                onClick={showModal}\n                disabled={saveDisabled}\n                data-test=\"query-save-button\"\n                css={saveButtonStyles}\n              >\n                <Icons.SaveOutlined iconSize=\"l\" />\n                {t('Save')}\n              </Button>\n            </div>\n          </Tooltip>\n        }\n        additionalActionsMenu={menu}\n        menuDropdownProps={{\n          visible: isDropdownVisible,\n          onVisibleChange: setIsDropdownVisible,\n        }}\n      />\n      {isPropertiesModalOpen && (\n        <PropertiesModal\n          show={isPropertiesModalOpen}\n          onHide={closePropertiesModal}\n          onSave={updateSlice}\n          slice={slice}\n        />\n      )}\n    </>\n  );\n};\n\nExploreChartHeader.propTypes = propTypes;\n\nexport default ExploreChartHeader;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}