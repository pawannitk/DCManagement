{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { normalizeTimestamp } from '@superset-ui/core';\n/**\n * Extended Date object with a custom formatter, and retains the original input\n * when the formatter is simple `String(..)`.\n */\nexport default class DateWithFormatter extends Date {\n\n\n  constructor(input, { formatter = String } = {}) {\n    let value = input;\n    // assuming timestamps without a timezone is in UTC time\n    if (typeof value === 'string') {\n      value = normalizeTimestamp(value);\n    }\n    super(value);this.formatter = void 0;this.input = void 0;\n    this.input = input;\n    this.formatter = formatter;\n    this.toString = () => {\n      if (this.formatter === String) {\n        return String(this.input);\n      }\n      return this.formatter ? this.formatter(this) : Date.toString.call(this);\n    };\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(DateWithFormatter, \"DateWithFormatter\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-table/src/utils/DateWithFormatter.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["normalizeTimestamp","DateWithFormatter","Date","constructor","input","formatter","String","value","toString","call","__reactstandin__regenerateByEval","key","code","eval","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-table/src/utils/DateWithFormatter.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  DataRecordValue,\n  normalizeTimestamp,\n  TimeFormatFunction,\n} from '@superset-ui/core';\n\n/**\n * Extended Date object with a custom formatter, and retains the original input\n * when the formatter is simple `String(..)`.\n */\nexport default class DateWithFormatter extends Date {\n  formatter: TimeFormatFunction;\n\n  input: DataRecordValue;\n\n  constructor(\n    input: DataRecordValue,\n    { formatter = String }: { formatter?: TimeFormatFunction } = {},\n  ) {\n    let value = input;\n    // assuming timestamps without a timezone is in UTC time\n    if (typeof value === 'string') {\n      value = normalizeTimestamp(value);\n    }\n\n    super(value as string);\n\n    this.input = input;\n    this.formatter = formatter;\n    this.toString = (): string => {\n      if (this.formatter === String) {\n        return String(this.input);\n      }\n      return this.formatter ? this.formatter(this) : Date.toString.call(this);\n    };\n  }\n}\n"],"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAkBA,SAEEA,kBAAkB,QAEb,mBAAmB;AAE1B;;;;AAIA,eAAc,MAAOC,iBAAkB,SAAQC,IAAI;;;EAKjDC,YACEC,KAAsB,EACtB,EAAEC,SAAS,GAAGC,MAAM,KAAyC,EAAE;IAE/D,IAAIC,KAAK,GAAGH,KAAK;IACjB;IACA,IAAI,OAAOG,KAAK,KAAK,QAAQ,EAAE;MAC7BA,KAAK,GAAGP,kBAAkB,CAACO,KAAK,CAAC;;IAGnC,KAAK,CAACA,KAAe,CAAC,CAAC,KAdzBF,SAAS,eAETD,KAAK;IAcH,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACG,QAAQ,GAAG,MAAa;MAC3B,IAAI,IAAI,CAACH,SAAS,KAAKC,MAAM,EAAE;QAC7B,OAAOA,MAAM,CAAC,IAAI,CAACF,KAAK,CAAC;;MAE3B,OAAO,IAAI,CAACC,SAAS,GAAG,IAAI,CAACA,SAAS,CAAC,IAAI,CAAC,GAAGH,IAAI,CAACM,QAAQ,CAACC,IAAI,CAAC,IAAI,CAAC;IACzE,CAAC;EACH,CAAC;EAAAC,iCAAAC,GAAA,EAAAC,IAAA;IAAA,KAAAD,GAAA,IAAAE,IAAA,CAAAD,IAAA,G,CACF,mBAAAE,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAC,OAAA,GAAAC,SAAA,MAAAH,cAAA,WAAAA,cAAA,CAAAI,QAAA,CA1BoBjB,iBAAkB,mKAAAkB,WAAA,UAAAJ,oBAAA,mBAAAA,oBAAA,CAAAI,WAAA,GAAAF,SAAA,CAAAE,WAAA,IAAAA,WAAA,CAAAC,MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}