{"ast":null,"code":"import _keyBy from \"lodash/fp/keyBy\";import _flow from \"lodash/fp/flow\";import _mapValues from \"lodash/fp/mapValues\";import _isEmpty from \"lodash/isEmpty\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};\n\n\nimport {\n  getChartIdAndColumnFromFilterKey,\n  getDashboardFilterKey } from\n'./getDashboardFilterKey';\nimport { CHART_TYPE } from './componentTypes';\nimport { DASHBOARD_FILTER_SCOPE_GLOBAL } from '../reducers/dashboardFilters';\n\nlet activeFilters = {};\nlet appliedFilterValuesByChart = {};\nlet allComponents = {};\n\n// output: { [id_column]: { values, scope } }\nexport function getActiveFilters() {\n  return activeFilters;\n}\n\n// this function is to find all filter values applied to a chart,\n// it goes through all active filters and their scopes.\n// return: { [column]: array of selected values }\nexport function getAppliedFilterValues(chartId, filters) {\n  // use cached data if possible\n  if (!(chartId in appliedFilterValuesByChart)) {\n    const applicableFilters = Object.entries(filters || activeFilters).filter(\n      ([, { scope: chartIds }]) => chartIds.includes(chartId)\n    );\n    appliedFilterValuesByChart[chartId] = _flow(\n      _keyBy(\n        ([filterKey]) => getChartIdAndColumnFromFilterKey(filterKey).column\n      ),\n      _mapValues(([, { values }]) => values)\n    )(applicableFilters);\n  }\n  return appliedFilterValuesByChart[chartId];\n}\n\n/**\n * @deprecated Please use src/dashboard/util/getChartIdsInFilterScope instead\n */\nexport function getChartIdsInFilterScope({ filterScope }) {\n  function traverse(chartIds = [], component = {}, immuneChartIds = []) {\n    if (!component) {\n      return;\n    }\n\n    if (\n    component.type === CHART_TYPE &&\n    component.meta &&\n    component.meta.chartId &&\n    !immuneChartIds.includes(component.meta.chartId))\n    {\n      chartIds.push(component.meta.chartId);\n    } else if (component.children) {\n      component.children.forEach((child) =>\n      traverse(chartIds, allComponents[child], immuneChartIds)\n      );\n    }\n  }\n\n  const chartIds = [];\n  const { scope: scopeComponentIds, immune: immuneChartIds } =\n  filterScope || DASHBOARD_FILTER_SCOPE_GLOBAL;\n  scopeComponentIds.forEach((componentId) =>\n  traverse(chartIds, allComponents[componentId], immuneChartIds)\n  );\n\n  return chartIds;\n}\n\n// non-empty filter fields in dashboardFilters,\n// activeFilters map contains selected values and filter scope.\n// values: array of selected values\n// scope: array of chartIds that applicable to the filter field.\nexport function buildActiveFilters({ dashboardFilters = {}, components = {} }) {\n  // clear cache\n  if (!_isEmpty(components)) {\n    allComponents = components;\n  }\n  appliedFilterValuesByChart = {};\n  activeFilters = Object.values(dashboardFilters).reduce((result, filter) => {\n    const { chartId, columns, scopes } = filter;\n    const nonEmptyFilters = {};\n\n    Object.keys(columns).forEach((column) => {\n      if (\n      Array.isArray(columns[column]) ?\n      columns[column].length :\n      columns[column] !== undefined)\n      {\n        // remove filter itself\n        const scope = getChartIdsInFilterScope({\n          filterScope: scopes[column]\n        }).filter((id) => chartId !== id);\n\n        nonEmptyFilters[getDashboardFilterKey({ chartId, column })] = {\n          values: columns[column],\n          scope\n        };\n      }\n    });\n\n    return {\n      ...result,\n      ...nonEmptyFilters\n    };\n  }, {});\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(activeFilters, \"activeFilters\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/util/activeDashboardFilters.js\");reactHotLoader.register(appliedFilterValuesByChart, \"appliedFilterValuesByChart\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/util/activeDashboardFilters.js\");reactHotLoader.register(allComponents, \"allComponents\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/util/activeDashboardFilters.js\");reactHotLoader.register(getActiveFilters, \"getActiveFilters\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/util/activeDashboardFilters.js\");reactHotLoader.register(getAppliedFilterValues, \"getAppliedFilterValues\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/util/activeDashboardFilters.js\");reactHotLoader.register(getChartIdsInFilterScope, \"getChartIdsInFilterScope\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/util/activeDashboardFilters.js\");reactHotLoader.register(buildActiveFilters, \"buildActiveFilters\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/util/activeDashboardFilters.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["enterModule","reactHotLoaderGlobal","undefined","module","__signature__","default","signature","a","getChartIdAndColumnFromFilterKey","getDashboardFilterKey","CHART_TYPE","DASHBOARD_FILTER_SCOPE_GLOBAL","activeFilters","appliedFilterValuesByChart","allComponents","getActiveFilters","getAppliedFilterValues","chartId","filters","applicableFilters","Object","entries","filter","scope","chartIds","includes","_flow","_keyBy","filterKey","column","_mapValues","values","getChartIdsInFilterScope","filterScope","traverse","component","immuneChartIds","type","meta","push","children","forEach","child","scopeComponentIds","immune","componentId","buildActiveFilters","dashboardFilters","components","_isEmpty","reduce","result","columns","scopes","nonEmptyFilters","keys","Array","isArray","length","id","reactHotLoader","register","leaveModule"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/util/activeDashboardFilters.js"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { isEmpty } from 'lodash';\nimport { mapValues, flow, keyBy } from 'lodash/fp';\nimport {\n  getChartIdAndColumnFromFilterKey,\n  getDashboardFilterKey,\n} from './getDashboardFilterKey';\nimport { CHART_TYPE } from './componentTypes';\nimport { DASHBOARD_FILTER_SCOPE_GLOBAL } from '../reducers/dashboardFilters';\n\nlet activeFilters = {};\nlet appliedFilterValuesByChart = {};\nlet allComponents = {};\n\n// output: { [id_column]: { values, scope } }\nexport function getActiveFilters() {\n  return activeFilters;\n}\n\n// this function is to find all filter values applied to a chart,\n// it goes through all active filters and their scopes.\n// return: { [column]: array of selected values }\nexport function getAppliedFilterValues(chartId, filters) {\n  // use cached data if possible\n  if (!(chartId in appliedFilterValuesByChart)) {\n    const applicableFilters = Object.entries(filters || activeFilters).filter(\n      ([, { scope: chartIds }]) => chartIds.includes(chartId),\n    );\n    appliedFilterValuesByChart[chartId] = flow(\n      keyBy(\n        ([filterKey]) => getChartIdAndColumnFromFilterKey(filterKey).column,\n      ),\n      mapValues(([, { values }]) => values),\n    )(applicableFilters);\n  }\n  return appliedFilterValuesByChart[chartId];\n}\n\n/**\n * @deprecated Please use src/dashboard/util/getChartIdsInFilterScope instead\n */\nexport function getChartIdsInFilterScope({ filterScope }) {\n  function traverse(chartIds = [], component = {}, immuneChartIds = []) {\n    if (!component) {\n      return;\n    }\n\n    if (\n      component.type === CHART_TYPE &&\n      component.meta &&\n      component.meta.chartId &&\n      !immuneChartIds.includes(component.meta.chartId)\n    ) {\n      chartIds.push(component.meta.chartId);\n    } else if (component.children) {\n      component.children.forEach(child =>\n        traverse(chartIds, allComponents[child], immuneChartIds),\n      );\n    }\n  }\n\n  const chartIds = [];\n  const { scope: scopeComponentIds, immune: immuneChartIds } =\n    filterScope || DASHBOARD_FILTER_SCOPE_GLOBAL;\n  scopeComponentIds.forEach(componentId =>\n    traverse(chartIds, allComponents[componentId], immuneChartIds),\n  );\n\n  return chartIds;\n}\n\n// non-empty filter fields in dashboardFilters,\n// activeFilters map contains selected values and filter scope.\n// values: array of selected values\n// scope: array of chartIds that applicable to the filter field.\nexport function buildActiveFilters({ dashboardFilters = {}, components = {} }) {\n  // clear cache\n  if (!isEmpty(components)) {\n    allComponents = components;\n  }\n  appliedFilterValuesByChart = {};\n  activeFilters = Object.values(dashboardFilters).reduce((result, filter) => {\n    const { chartId, columns, scopes } = filter;\n    const nonEmptyFilters = {};\n\n    Object.keys(columns).forEach(column => {\n      if (\n        Array.isArray(columns[column])\n          ? columns[column].length\n          : columns[column] !== undefined\n      ) {\n        // remove filter itself\n        const scope = getChartIdsInFilterScope({\n          filterScope: scopes[column],\n        }).filter(id => chartId !== id);\n\n        nonEmptyFilters[getDashboardFilterKey({ chartId, column })] = {\n          values: columns[column],\n          scope,\n        };\n      }\n    });\n\n    return {\n      ...result,\n      ...nonEmptyFilters,\n    };\n  }, {});\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}