{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { configureStore } from '@reduxjs/toolkit';\nimport thunk from 'redux-thunk';\nimport { api } from 'src/hooks/apiResources/queryApi';\nimport messageToastReducer from 'src/components/MessageToasts/reducers';\nimport charts from 'src/components/Chart/chartReducer';\nimport dataMask from 'src/dataMask/reducer';\nimport reports from 'src/features/reports/ReportModal/reducer';\nimport dashboardInfo from 'src/dashboard/reducers/dashboardInfo';\nimport dashboardState from 'src/dashboard/reducers/dashboardState';\nimport dashboardFilters from 'src/dashboard/reducers/dashboardFilters';\nimport nativeFilters from 'src/dashboard/reducers/nativeFilters';\nimport dashboardDatasources from 'src/dashboard/reducers/datasources';\nimport sliceEntities from 'src/dashboard/reducers/sliceEntities';\nimport dashboardLayout from 'src/dashboard/reducers/undoableDashboardLayout';\nimport logger from 'src/middleware/loggerMiddleware';\nimport saveModal from 'src/explore/reducers/saveModalReducer';\nimport explore from 'src/explore/reducers/exploreReducer';\nimport exploreDatasources from 'src/explore/reducers/datasourcesReducer';\nimport { persistSqlLabStateEnhancer } from 'src/SqlLab/middlewares/persistSqlLabStateEnhancer';\nimport sqlLabReducer from 'src/SqlLab/reducers/sqlLab';\nimport getInitialState from 'src/SqlLab/reducers/getInitialState';\nimport { DatasourcesAction } from 'src/dashboard/actions/datasources';\nimport shortid from 'shortid';\nimport getBootstrapData from 'src/utils/getBootstrapData';\n// Some reducers don't do anything, and redux is just used to reference the initial \"state\".\n// This may change later, as the client application takes on more responsibilities.\nconst noopReducer = (initialState) => (state = initialState) => state;\nconst bootstrapData = getBootstrapData();\nexport const USER_LOADED = 'USER_LOADED';\nexport const userReducer = (user = bootstrapData.user || {}, action) => {\n  if (action.type === USER_LOADED) {\n    return action.user;\n  }\n  return user;\n};\nconst getMiddleware = (getDefaultMiddleware) => process.env.REDUX_DEFAULT_MIDDLEWARE ?\ngetDefaultMiddleware({\n  immutableCheck: {\n    warnAfter: 200\n  },\n  serializableCheck: {\n    // Ignores AbortController instances\n    ignoredActionPaths: [/queryController/g],\n    ignoredPaths: [/queryController/g],\n    warnAfter: 200\n  }\n}).concat(logger, api.middleware) :\n[thunk, logger, api.middleware];\n// TODO: This reducer is a combination of the Dashboard and Explore reducers.\n// The correct way of handling this is to unify the actions and reducers from both\n// modules in shared files. This involves a big refactor to unify the parameter types\n// and move files around. We should tackle this in a specific PR.\nconst CombinedDatasourceReducers = (datasources, action) => {\n  if (action.type === DatasourcesAction.SetDatasources) {\n    return dashboardDatasources(datasources, action);\n  }\n  return exploreDatasources(datasources, action);\n};\nconst reducers = {\n  sqlLab: sqlLabReducer,\n  localStorageUsageInKilobytes: noopReducer(0),\n  messageToasts: messageToastReducer,\n  common: noopReducer(bootstrapData.common),\n  user: userReducer,\n  impressionId: noopReducer(shortid.generate()),\n  charts,\n  datasources: CombinedDatasourceReducers,\n  dashboardInfo,\n  dashboardFilters,\n  dataMask,\n  nativeFilters,\n  dashboardState,\n  dashboardLayout,\n  sliceEntities,\n  reports,\n  saveModal,\n  explore\n};\n/* In some cases the jinja template injects two seperate React apps into basic.html\n * One for the top navigation Menu and one for the application below the Menu\n * The first app to connect to the Redux debugger wins which is the menu blocking\n * the application from being able to connect to the redux debugger.\n * setupStore with disableDebugger true enables the menu.tsx component to avoid connecting\n * to redux debugger so the application can connect to redux debugger\n */\nexport function setupStore({ disableDebugger = false, initialState = getInitialState(bootstrapData), rootReducers = reducers, ...overrides } = {}) {\n  return configureStore({\n    preloadedState: initialState,\n    reducer: {\n      [api.reducerPath]: api.reducer,\n      ...rootReducers\n    },\n    middleware: getMiddleware,\n    devTools: process.env.WEBPACK_MODE === 'development' && !disableDebugger,\n    enhancers: [persistSqlLabStateEnhancer],\n    ...overrides\n  });\n}\nexport const store = setupStore();;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(noopReducer, \"noopReducer\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/views/store.ts\");reactHotLoader.register(bootstrapData, \"bootstrapData\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/views/store.ts\");reactHotLoader.register(USER_LOADED, \"USER_LOADED\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/views/store.ts\");reactHotLoader.register(userReducer, \"userReducer\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/views/store.ts\");reactHotLoader.register(getMiddleware, \"getMiddleware\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/views/store.ts\");reactHotLoader.register(CombinedDatasourceReducers, \"CombinedDatasourceReducers\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/views/store.ts\");reactHotLoader.register(reducers, \"reducers\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/views/store.ts\");reactHotLoader.register(setupStore, \"setupStore\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/views/store.ts\");reactHotLoader.register(store, \"store\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/views/store.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["configureStore","thunk","api","messageToastReducer","charts","dataMask","reports","dashboardInfo","dashboardState","dashboardFilters","nativeFilters","dashboardDatasources","sliceEntities","dashboardLayout","logger","saveModal","explore","exploreDatasources","persistSqlLabStateEnhancer","sqlLabReducer","getInitialState","DatasourcesAction","shortid","getBootstrapData","noopReducer","initialState","state","bootstrapData","USER_LOADED","userReducer","user","action","type","getMiddleware","getDefaultMiddleware","process","env","REDUX_DEFAULT_MIDDLEWARE","immutableCheck","warnAfter","serializableCheck","ignoredActionPaths","ignoredPaths","concat","middleware","CombinedDatasourceReducers","datasources","SetDatasources","reducers","sqlLab","localStorageUsageInKilobytes","messageToasts","common","impressionId","generate","setupStore","disableDebugger","rootReducers","overrides","preloadedState","reducer","reducerPath","devTools","WEBPACK_MODE","enhancers","store","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/views/store.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  configureStore,\n  ConfigureStoreOptions,\n  StoreEnhancer,\n} from '@reduxjs/toolkit';\nimport thunk from 'redux-thunk';\nimport { api } from 'src/hooks/apiResources/queryApi';\nimport messageToastReducer from 'src/components/MessageToasts/reducers';\nimport charts from 'src/components/Chart/chartReducer';\nimport dataMask from 'src/dataMask/reducer';\nimport reports from 'src/features/reports/ReportModal/reducer';\nimport dashboardInfo from 'src/dashboard/reducers/dashboardInfo';\nimport dashboardState from 'src/dashboard/reducers/dashboardState';\nimport dashboardFilters from 'src/dashboard/reducers/dashboardFilters';\nimport nativeFilters from 'src/dashboard/reducers/nativeFilters';\nimport dashboardDatasources from 'src/dashboard/reducers/datasources';\nimport sliceEntities from 'src/dashboard/reducers/sliceEntities';\nimport dashboardLayout from 'src/dashboard/reducers/undoableDashboardLayout';\nimport logger from 'src/middleware/loggerMiddleware';\nimport saveModal from 'src/explore/reducers/saveModalReducer';\nimport explore from 'src/explore/reducers/exploreReducer';\nimport exploreDatasources from 'src/explore/reducers/datasourcesReducer';\n\nimport { persistSqlLabStateEnhancer } from 'src/SqlLab/middlewares/persistSqlLabStateEnhancer';\nimport sqlLabReducer from 'src/SqlLab/reducers/sqlLab';\nimport getInitialState from 'src/SqlLab/reducers/getInitialState';\nimport { DatasourcesState } from 'src/dashboard/types';\nimport {\n  DatasourcesActionPayload,\n  DatasourcesAction,\n} from 'src/dashboard/actions/datasources';\nimport shortid from 'shortid';\nimport {\n  BootstrapUser,\n  UndefinedUser,\n  UserWithPermissionsAndRoles,\n} from 'src/types/bootstrapTypes';\nimport { AnyDatasourcesAction } from 'src/explore/actions/datasourcesActions';\nimport { HydrateExplore } from 'src/explore/actions/hydrateExplore';\nimport getBootstrapData from 'src/utils/getBootstrapData';\nimport { Dataset } from '@superset-ui/chart-controls';\n\n// Some reducers don't do anything, and redux is just used to reference the initial \"state\".\n// This may change later, as the client application takes on more responsibilities.\nconst noopReducer =\n  <STATE = unknown>(initialState: STATE) =>\n  (state: STATE = initialState) =>\n    state;\n\nconst bootstrapData = getBootstrapData();\n\nexport const USER_LOADED = 'USER_LOADED';\n\nexport type UserLoadedAction = {\n  type: typeof USER_LOADED;\n  user: UserWithPermissionsAndRoles;\n};\n\nexport const userReducer = (\n  user = bootstrapData.user || {},\n  action: UserLoadedAction,\n): BootstrapUser | UndefinedUser => {\n  if (action.type === USER_LOADED) {\n    return action.user;\n  }\n  return user;\n};\n\nconst getMiddleware: ConfigureStoreOptions['middleware'] =\n  getDefaultMiddleware =>\n    process.env.REDUX_DEFAULT_MIDDLEWARE\n      ? getDefaultMiddleware({\n          immutableCheck: {\n            warnAfter: 200,\n          },\n          serializableCheck: {\n            // Ignores AbortController instances\n            ignoredActionPaths: [/queryController/g],\n            ignoredPaths: [/queryController/g],\n            warnAfter: 200,\n          },\n        }).concat(logger, api.middleware)\n      : [thunk, logger, api.middleware];\n\n// TODO: This reducer is a combination of the Dashboard and Explore reducers.\n// The correct way of handling this is to unify the actions and reducers from both\n// modules in shared files. This involves a big refactor to unify the parameter types\n// and move files around. We should tackle this in a specific PR.\nconst CombinedDatasourceReducers = (\n  datasources: DatasourcesState | undefined | { [key: string]: Dataset },\n  action: DatasourcesActionPayload | AnyDatasourcesAction | HydrateExplore,\n) => {\n  if (action.type === DatasourcesAction.SetDatasources) {\n    return dashboardDatasources(\n      datasources as DatasourcesState | undefined,\n      action as DatasourcesActionPayload,\n    );\n  }\n  return exploreDatasources(\n    datasources as { [key: string]: Dataset },\n    action as AnyDatasourcesAction | HydrateExplore,\n  );\n};\n\nconst reducers = {\n  sqlLab: sqlLabReducer,\n  localStorageUsageInKilobytes: noopReducer(0),\n  messageToasts: messageToastReducer,\n  common: noopReducer(bootstrapData.common),\n  user: userReducer,\n  impressionId: noopReducer(shortid.generate()),\n  charts,\n  datasources: CombinedDatasourceReducers,\n  dashboardInfo,\n  dashboardFilters,\n  dataMask,\n  nativeFilters,\n  dashboardState,\n  dashboardLayout,\n  sliceEntities,\n  reports,\n  saveModal,\n  explore,\n};\n\n/* In some cases the jinja template injects two seperate React apps into basic.html\n * One for the top navigation Menu and one for the application below the Menu\n * The first app to connect to the Redux debugger wins which is the menu blocking\n * the application from being able to connect to the redux debugger.\n * setupStore with disableDebugger true enables the menu.tsx component to avoid connecting\n * to redux debugger so the application can connect to redux debugger\n */\nexport function setupStore({\n  disableDebugger = false,\n  initialState = getInitialState(bootstrapData),\n  rootReducers = reducers,\n  ...overrides\n}: {\n  disableDebugger?: boolean;\n  initialState?: ConfigureStoreOptions['preloadedState'];\n  rootReducers?: ConfigureStoreOptions['reducer'];\n} & Partial<ConfigureStoreOptions> = {}) {\n  return configureStore({\n    preloadedState: initialState,\n    reducer: {\n      [api.reducerPath]: api.reducer,\n      ...rootReducers,\n    },\n    middleware: getMiddleware,\n    devTools: process.env.WEBPACK_MODE === 'development' && !disableDebugger,\n    enhancers: [persistSqlLabStateEnhancer as StoreEnhancer],\n    ...overrides,\n  });\n}\n\nexport const store = setupStore();\nexport type RootState = ReturnType<typeof store.getState>;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}