{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useMemo, useRef } from 'react';\nimport { useSelector, useDispatch, shallowEqual, useStore } from 'react-redux';\nimport { getExtensionsRegistry, t } from '@superset-ui/core';\nimport sqlKeywords from 'src/SqlLab/utils/sqlKeywords';\nimport { addTable, addDangerToast } from 'src/SqlLab/actions/sqlLab';\nimport { SCHEMA_AUTOCOMPLETE_SCORE, TABLE_AUTOCOMPLETE_SCORE, COLUMN_AUTOCOMPLETE_SCORE, SQL_FUNCTIONS_AUTOCOMPLETE_SCORE } from 'src/SqlLab/constants';\nimport { schemaEndpoints, tableEndpoints, skipToken } from 'src/hooks/apiResources';\nimport { api } from 'src/hooks/apiResources/queryApi';\nimport { useDatabaseFunctionsQuery } from 'src/hooks/apiResources/databaseFunctions';\nimport useEffectEvent from 'src/hooks/useEffectEvent';\nconst EMPTY_LIST = [];\nconst { useQueryState: useSchemasQueryState } = schemaEndpoints.schemas;\nconst { useQueryState: useTablesQueryState } = tableEndpoints.tables;\nconst getHelperText = (value) => value.length > 30 && {\n  docText: value\n};\nconst extensionsRegistry = getExtensionsRegistry();\nexport function useKeywords({ queryEditorId, dbId, catalog, schema }, skip = false) {\n  const useCustomKeywords = extensionsRegistry.get('sqleditor.extension.customAutocomplete');\n  const customKeywords = useCustomKeywords == null ? void 0 : useCustomKeywords({\n    queryEditorId: String(queryEditorId),\n    dbId,\n    catalog,\n    schema\n  });\n  const dispatch = useDispatch();\n  const hasFetchedKeywords = useRef(false);\n  // skipFetch is used to prevent re-evaluating memoized keywords\n  // due to updated api results by skip flag\n  const skipFetch = hasFetchedKeywords && skip;\n  const { data: schemaOptions } = useSchemasQueryState({\n    dbId,\n    catalog: catalog || undefined,\n    forceRefresh: false\n  }, { skip: skipFetch || !dbId });\n  const { data: tableData } = useTablesQueryState({\n    dbId,\n    catalog,\n    schema,\n    forceRefresh: false\n  }, { skip: skipFetch || !dbId || !schema });\n  const { data: functionNames, isError } = useDatabaseFunctionsQuery({ dbId }, { skip: skipFetch || !dbId });\n  useEffect(() => {\n    if (isError) {\n      dispatch(addDangerToast(t('An error occurred while fetching function names.')));\n    }\n  }, [dispatch, isError]);\n  const tablesForColumnMetadata = useSelector(({ sqlLab }) => {var _sqlLab$tables;return skip ?\n    [] :\n    ((_sqlLab$tables = sqlLab == null ? void 0 : sqlLab.tables) != null ? _sqlLab$tables : []).\n    filter((table) => table.queryEditorId === queryEditorId).\n    map((table) => table.name);}, shallowEqual);\n  const store = useStore();\n  const apiState = store.getState()[api.reducerPath];\n  const allColumns = useMemo(() => {\n    const columns = new Set();\n    tablesForColumnMetadata.forEach((table) => {var _tableEndpoints$table, _tableEndpoints$table2;\n      (_tableEndpoints$table = tableEndpoints.tableMetadata.\n      select(dbId && schema ?\n      {\n        dbId,\n        catalog,\n        schema,\n        table\n      } :\n      skipToken)({\n        [api.reducerPath]: apiState\n      }).\n      data) == null ? void 0 : (_tableEndpoints$table2 = _tableEndpoints$table.columns) == null ? void 0 : _tableEndpoints$table2.forEach(({ name }) => {\n        columns.add(name);\n      });\n    });\n    return [...columns];\n  }, [dbId, catalog, schema, apiState, tablesForColumnMetadata]);\n  const insertMatch = useEffectEvent((editor, data) => {\n    if (data.meta === 'table') {\n      dispatch(addTable({ id: queryEditorId, dbId }, data.value, catalog, schema));\n    }\n    let { caption } = data;\n    if (data.meta === 'table' && caption.includes(' ')) {\n      caption = `\"${caption}\"`;\n    }\n    // executing https://github.com/thlorenz/brace/blob/3a00c5d59777f9d826841178e1eb36694177f5e6/ext/language_tools.js#L1448\n    editor.completer.insertMatch(`${caption}${['function', 'schema'].includes(data.meta) ? '' : ' '}`);\n  });\n  const schemaKeywords = useMemo(() => (schemaOptions != null ? schemaOptions : []).map((s) => ({\n    name: s.label,\n    value: s.value,\n    score: SCHEMA_AUTOCOMPLETE_SCORE,\n    meta: 'schema',\n    completer: {\n      insertMatch\n    },\n    ...getHelperText(s.value)\n  })), [schemaOptions, insertMatch]);\n  const tableKeywords = useMemo(() => {var _tableData$options;return ((_tableData$options = tableData == null ? void 0 : tableData.options) != null ? _tableData$options : []).map(({ value, label }) => ({\n      name: label,\n      value,\n      score: TABLE_AUTOCOMPLETE_SCORE,\n      meta: 'table',\n      completer: {\n        insertMatch\n      },\n      ...getHelperText(value)\n    }));}, [tableData == null ? void 0 : tableData.options, insertMatch]);\n  const columnKeywords = useMemo(() => allColumns.map((col) => ({\n    name: col,\n    value: col,\n    score: COLUMN_AUTOCOMPLETE_SCORE,\n    meta: 'column',\n    ...getHelperText(col)\n  })), [allColumns]);\n  const functionKeywords = useMemo(() => (functionNames != null ? functionNames : []).map((func) => ({\n    name: func,\n    value: func,\n    score: SQL_FUNCTIONS_AUTOCOMPLETE_SCORE,\n    meta: 'function',\n    completer: {\n      insertMatch\n    },\n    ...getHelperText(func)\n  })), [functionNames, insertMatch]);\n  const keywords = useMemo(() => columnKeywords.\n  concat(schemaKeywords).\n  concat(tableKeywords).\n  concat(functionKeywords).\n  concat(sqlKeywords).\n  concat(customKeywords != null ? customKeywords : []), [\n  schemaKeywords,\n  tableKeywords,\n  columnKeywords,\n  functionKeywords,\n  customKeywords]\n  );\n  hasFetchedKeywords.current = !skip;\n  return skip ? EMPTY_LIST : keywords;\n}__signature__(useKeywords, \"useDispatch{dispatch}\\nuseRef{hasFetchedKeywords}\\nuseSchemasQueryState{{ data: schemaOptions }}\\nuseTablesQueryState{{ data: tableData }}\\nuseDatabaseFunctionsQuery{{ data: functionNames, isError }}\\nuseEffect{}\\nuseSelector{tablesForColumnMetadata}\\nuseStore{store}\\nuseMemo{allColumns}\\nuseEffectEvent{insertMatch}\\nuseMemo{schemaKeywords}\\nuseMemo{tableKeywords}\\nuseMemo{columnKeywords}\\nuseMemo{functionKeywords}\\nuseMemo{keywords}\", () => [useDispatch, useSchemasQueryState, useTablesQueryState, useDatabaseFunctionsQuery, useSelector, useStore, useEffectEvent]);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(EMPTY_LIST, \"EMPTY_LIST\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/AceEditorWrapper/useKeywords.ts\");reactHotLoader.register(useSchemasQueryState, \"useSchemasQueryState\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/AceEditorWrapper/useKeywords.ts\");reactHotLoader.register(useTablesQueryState, \"useTablesQueryState\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/AceEditorWrapper/useKeywords.ts\");reactHotLoader.register(getHelperText, \"getHelperText\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/AceEditorWrapper/useKeywords.ts\");reactHotLoader.register(extensionsRegistry, \"extensionsRegistry\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/AceEditorWrapper/useKeywords.ts\");reactHotLoader.register(useKeywords, \"useKeywords\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/AceEditorWrapper/useKeywords.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["useEffect","useMemo","useRef","useSelector","useDispatch","shallowEqual","useStore","getExtensionsRegistry","t","sqlKeywords","addTable","addDangerToast","SCHEMA_AUTOCOMPLETE_SCORE","TABLE_AUTOCOMPLETE_SCORE","COLUMN_AUTOCOMPLETE_SCORE","SQL_FUNCTIONS_AUTOCOMPLETE_SCORE","schemaEndpoints","tableEndpoints","skipToken","api","useDatabaseFunctionsQuery","useEffectEvent","EMPTY_LIST","useQueryState","useSchemasQueryState","schemas","useTablesQueryState","tables","getHelperText","value","length","docText","extensionsRegistry","useKeywords","queryEditorId","dbId","catalog","schema","skip","useCustomKeywords","get","customKeywords","String","dispatch","hasFetchedKeywords","skipFetch","data","schemaOptions","undefined","forceRefresh","tableData","functionNames","isError","tablesForColumnMetadata","sqlLab","_sqlLab$tables","filter","table","map","name","store","apiState","getState","reducerPath","allColumns","columns","Set","forEach","_tableEndpoints$table","_tableEndpoints$table2","tableMetadata","select","add","insertMatch","editor","meta","id","caption","includes","completer","schemaKeywords","s","label","score","tableKeywords","_tableData$options","options","columnKeywords","col","functionKeywords","func","keywords","concat","current","__signature__","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/AceEditorWrapper/useKeywords.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useMemo, useRef } from 'react';\nimport { useSelector, useDispatch, shallowEqual, useStore } from 'react-redux';\nimport { getExtensionsRegistry, t } from '@superset-ui/core';\n\nimport { Editor } from 'src/components/AsyncAceEditor';\nimport sqlKeywords from 'src/SqlLab/utils/sqlKeywords';\nimport { addTable, addDangerToast } from 'src/SqlLab/actions/sqlLab';\nimport {\n  SCHEMA_AUTOCOMPLETE_SCORE,\n  TABLE_AUTOCOMPLETE_SCORE,\n  COLUMN_AUTOCOMPLETE_SCORE,\n  SQL_FUNCTIONS_AUTOCOMPLETE_SCORE,\n} from 'src/SqlLab/constants';\nimport {\n  schemaEndpoints,\n  tableEndpoints,\n  skipToken,\n} from 'src/hooks/apiResources';\nimport { api } from 'src/hooks/apiResources/queryApi';\nimport { useDatabaseFunctionsQuery } from 'src/hooks/apiResources/databaseFunctions';\nimport useEffectEvent from 'src/hooks/useEffectEvent';\nimport { SqlLabRootState } from 'src/SqlLab/types';\n\ntype Params = {\n  queryEditorId: string | number;\n  dbId?: string | number;\n  catalog?: string | null;\n  schema?: string;\n};\n\nconst EMPTY_LIST = [] as typeof sqlKeywords;\n\nconst { useQueryState: useSchemasQueryState } = schemaEndpoints.schemas;\nconst { useQueryState: useTablesQueryState } = tableEndpoints.tables;\n\nconst getHelperText = (value: string) =>\n  value.length > 30 && {\n    docText: value,\n  };\n\nconst extensionsRegistry = getExtensionsRegistry();\n\nexport function useKeywords(\n  { queryEditorId, dbId, catalog, schema }: Params,\n  skip = false,\n) {\n  const useCustomKeywords = extensionsRegistry.get(\n    'sqleditor.extension.customAutocomplete',\n  );\n\n  const customKeywords = useCustomKeywords?.({\n    queryEditorId: String(queryEditorId),\n    dbId,\n    catalog,\n    schema,\n  });\n  const dispatch = useDispatch();\n  const hasFetchedKeywords = useRef(false);\n  // skipFetch is used to prevent re-evaluating memoized keywords\n  // due to updated api results by skip flag\n  const skipFetch = hasFetchedKeywords && skip;\n  const { data: schemaOptions } = useSchemasQueryState(\n    {\n      dbId,\n      catalog: catalog || undefined,\n      forceRefresh: false,\n    },\n    { skip: skipFetch || !dbId },\n  );\n  const { data: tableData } = useTablesQueryState(\n    {\n      dbId,\n      catalog,\n      schema,\n      forceRefresh: false,\n    },\n    { skip: skipFetch || !dbId || !schema },\n  );\n\n  const { data: functionNames, isError } = useDatabaseFunctionsQuery(\n    { dbId },\n    { skip: skipFetch || !dbId },\n  );\n\n  useEffect(() => {\n    if (isError) {\n      dispatch(\n        addDangerToast(t('An error occurred while fetching function names.')),\n      );\n    }\n  }, [dispatch, isError]);\n\n  const tablesForColumnMetadata = useSelector<SqlLabRootState, string[]>(\n    ({ sqlLab }) =>\n      skip\n        ? []\n        : (sqlLab?.tables ?? [])\n            .filter(table => table.queryEditorId === queryEditorId)\n            .map(table => table.name),\n    shallowEqual,\n  );\n\n  const store = useStore();\n  const apiState = store.getState()[api.reducerPath];\n\n  const allColumns = useMemo(() => {\n    const columns = new Set<string>();\n    tablesForColumnMetadata.forEach(table => {\n      tableEndpoints.tableMetadata\n        .select(\n          dbId && schema\n            ? {\n                dbId,\n                catalog,\n                schema,\n                table,\n              }\n            : skipToken,\n        )({\n          [api.reducerPath]: apiState,\n        })\n        .data?.columns?.forEach(({ name }) => {\n          columns.add(name);\n        });\n    });\n    return [...columns];\n  }, [dbId, catalog, schema, apiState, tablesForColumnMetadata]);\n\n  const insertMatch = useEffectEvent((editor: Editor, data: any) => {\n    if (data.meta === 'table') {\n      dispatch(\n        addTable({ id: queryEditorId, dbId }, data.value, catalog, schema),\n      );\n    }\n\n    let { caption } = data;\n    if (data.meta === 'table' && caption.includes(' ')) {\n      caption = `\"${caption}\"`;\n    }\n\n    // executing https://github.com/thlorenz/brace/blob/3a00c5d59777f9d826841178e1eb36694177f5e6/ext/language_tools.js#L1448\n    editor.completer.insertMatch(\n      `${caption}${['function', 'schema'].includes(data.meta) ? '' : ' '}`,\n    );\n  });\n\n  const schemaKeywords = useMemo(\n    () =>\n      (schemaOptions ?? []).map(s => ({\n        name: s.label,\n        value: s.value,\n        score: SCHEMA_AUTOCOMPLETE_SCORE,\n        meta: 'schema',\n        completer: {\n          insertMatch,\n        },\n        ...getHelperText(s.value),\n      })),\n    [schemaOptions, insertMatch],\n  );\n\n  const tableKeywords = useMemo(\n    () =>\n      (tableData?.options ?? []).map(({ value, label }) => ({\n        name: label,\n        value,\n        score: TABLE_AUTOCOMPLETE_SCORE,\n        meta: 'table',\n        completer: {\n          insertMatch,\n        },\n        ...getHelperText(value),\n      })),\n    [tableData?.options, insertMatch],\n  );\n\n  const columnKeywords = useMemo(\n    () =>\n      allColumns.map(col => ({\n        name: col,\n        value: col,\n        score: COLUMN_AUTOCOMPLETE_SCORE,\n        meta: 'column',\n        ...getHelperText(col),\n      })),\n    [allColumns],\n  );\n\n  const functionKeywords = useMemo(\n    () =>\n      (functionNames ?? []).map(func => ({\n        name: func,\n        value: func,\n        score: SQL_FUNCTIONS_AUTOCOMPLETE_SCORE,\n        meta: 'function',\n        completer: {\n          insertMatch,\n        },\n        ...getHelperText(func),\n      })),\n    [functionNames, insertMatch],\n  );\n\n  const keywords = useMemo(\n    () =>\n      columnKeywords\n        .concat(schemaKeywords)\n        .concat(tableKeywords)\n        .concat(functionKeywords)\n        .concat(sqlKeywords)\n        .concat(customKeywords ?? []),\n    [\n      schemaKeywords,\n      tableKeywords,\n      columnKeywords,\n      functionKeywords,\n      customKeywords,\n    ],\n  );\n\n  hasFetchedKeywords.current = !skip;\n\n  return skip ? EMPTY_LIST : keywords;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}