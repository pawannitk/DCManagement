{"ast":null,"code":"import _isEqualWith from \"lodash/isEqualWith\";import _isEqual from \"lodash/isEqual\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { Behavior, isFeatureEnabled, FeatureFlag, getChartMetadataRegistry, styled, SuperChart, t, getClientErrorObject } from '@superset-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { getChartDataRequest } from 'src/components/Chart/chartAction';\nimport Loading from 'src/components/Loading';\nimport BasicErrorAlert from 'src/components/ErrorMessage/BasicErrorAlert';\nimport ErrorMessageWithStackTrace from 'src/components/ErrorMessage/ErrorMessageWithStackTrace';\nimport { waitForAsyncData } from 'src/middleware/asyncEvent';\nimport { FilterBarOrientation } from 'src/dashboard/types';\nimport { onFiltersRefreshSuccess, setDirectPathToChild } from 'src/dashboard/actions/dashboardState';\nimport { RESPONSIVE_WIDTH } from 'src/filters/components/common';\nimport { FAST_DEBOUNCE } from 'src/constants';\nimport { dispatchHoverAction, dispatchFocusAction } from './utils';\nimport { getFormData } from '../../utils';\nimport { useFilterDependencies } from './state';\nimport { useFilterOutlined } from '../useFilterOutlined';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst HEIGHT = 32;\n// Overrides superset-ui height with min-height\nconst StyledDiv = styled.div`\n  & > div {\n    height: auto !important;\n    min-height: ${HEIGHT}px;\n  }\n`;\nconst queriesDataPlaceholder = [{ data: [{}] }];\nconst behaviors = [Behavior.NativeFilter];\nconst useShouldFilterRefresh = () => {\n  const isDashboardRefreshing = useSelector((state) => state.dashboardState.isRefreshing);\n  const isFilterRefreshing = useSelector((state) => state.dashboardState.isFiltersRefreshing);\n  // trigger filter requests only after charts requests were triggered\n  return !isDashboardRefreshing && isFilterRefreshing;\n};__signature__(useShouldFilterRefresh, \"useSelector{isDashboardRefreshing}\\nuseSelector{isFilterRefreshing}\", () => [useSelector, useSelector]);\nconst FilterValue = ({ dataMaskSelected, filter, onFilterSelectionChange, inView = true, showOverflow, parentRef, setFilterActive, orientation = FilterBarOrientation.Vertical, overflow = false, validateStatus }) => {var _filter$dataMask3, _filter$dataMask4;\n  const { id, targets, filterType, adhoc_filters, time_range } = filter;\n  const metadata = getChartMetadataRegistry().get(filterType);\n  const dependencies = useFilterDependencies(id, dataMaskSelected);\n  const shouldRefresh = useShouldFilterRefresh();\n  const [state, setState] = useState([]);\n  const dashboardId = useSelector((state) => state.dashboardInfo.id);\n  const [error, setError] = useState();\n  const [formData, setFormData] = useState({\n    inView: false\n  });\n  const [ownState, setOwnState] = useState({});\n  const [inViewFirstTime, setInViewFirstTime] = useState(inView);\n  const inputRef = useRef(null);\n  const [target] = targets;\n  const { datasetId, column = {} } = target;\n  const { name: groupby } = column;\n  const hasDataSource = !!datasetId;\n  const [isLoading, setIsLoading] = useState(hasDataSource);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const dispatch = useDispatch();\n  const { outlinedFilterId, lastUpdated } = useFilterOutlined();\n  const handleFilterLoadFinish = useCallback(() => {\n    setIsRefreshing(false);\n    setIsLoading(false);\n    if (shouldRefresh) {\n      dispatch(onFiltersRefreshSuccess());\n    }\n  }, [dispatch, shouldRefresh]);\n  useEffect(() => {\n    if (!inViewFirstTime && inView) {\n      setInViewFirstTime(true);\n    }\n  }, [inView, inViewFirstTime, setInViewFirstTime]);\n  useEffect(() => {var _filter$dataMask;\n    if (!inViewFirstTime) {\n      return;\n    }\n    const newFormData = getFormData({\n      ...filter,\n      datasetId,\n      dependencies,\n      groupby,\n      adhoc_filters,\n      time_range,\n      dashboardId\n    });\n    const filterOwnState = ((_filter$dataMask = filter.dataMask) == null ? void 0 : _filter$dataMask.ownState) || {};\n    // TODO: We should try to improve our useEffect hooks to depend more on\n    // granular information instead of big objects that require deep comparison.\n    const customizer = (objValue, othValue, key) => key === 'url_params' ? true : undefined;\n    if (!isRefreshing && (\n    !_isEqualWith(formData, newFormData, customizer) ||\n    !_isEqual(ownState, filterOwnState) ||\n    shouldRefresh)) {\n      setFormData(newFormData);\n      setOwnState(filterOwnState);\n      if (!hasDataSource) {\n        return;\n      }\n      setIsRefreshing(true);\n      getChartDataRequest({\n        formData: newFormData,\n        force: false,\n        ownState: filterOwnState\n      }).\n      then(({ response, json }) => {\n        if (isFeatureEnabled(FeatureFlag.GlobalAsyncQueries)) {\n          // deal with getChartDataRequest transforming the response data\n          const result = 'result' in json ? json.result[0] : json;\n          if (response.status === 200) {\n            setState([result]);\n            handleFilterLoadFinish();\n          } else\n          if (response.status === 202) {\n            waitForAsyncData(result).\n            then((asyncResult) => {\n              setState(asyncResult);\n              handleFilterLoadFinish();\n            }).\n            catch((error) => {\n              getClientErrorObject(error).then((clientErrorObject) => {\n                setError(clientErrorObject);\n                handleFilterLoadFinish();\n              });\n            });\n          } else\n          {\n            throw new Error(`Received unexpected response status (${response.status}) while fetching chart data`);\n          }\n        } else\n        {\n          setState(json.result);\n          setError(undefined);\n          handleFilterLoadFinish();\n        }\n      }).\n      catch((error) => {\n        getClientErrorObject(error).then((clientErrorObject) => {\n          setError(clientErrorObject);\n          handleFilterLoadFinish();\n        });\n      });\n    }\n  }, [\n  inViewFirstTime,\n  dependencies,\n  datasetId,\n  groupby,\n  handleFilterLoadFinish,\n  JSON.stringify(filter),\n  hasDataSource,\n  isRefreshing,\n  shouldRefresh]\n  );\n  useEffect(() => {\n    if (outlinedFilterId && outlinedFilterId === filter.id) {\n      setTimeout(() => {var _inputRef$current;\n        inputRef == null ? void 0 : (_inputRef$current = inputRef.current) == null ? void 0 : _inputRef$current.focus();\n      }, overflow ? FAST_DEBOUNCE : 0);\n    }\n  }, [inputRef, outlinedFilterId, lastUpdated, filter.id, overflow]);\n  const setDataMask = useCallback((dataMask) => onFilterSelectionChange(filter, dataMask), [filter, onFilterSelectionChange]);\n  const setFocusedFilter = useCallback(() => {\n    // don't highlight charts in scope if filter was focused programmatically\n    if (outlinedFilterId !== id) {\n      dispatchFocusAction(dispatch, id);\n    }\n  }, [dispatch, id, outlinedFilterId]);\n  const unsetFocusedFilter = useCallback(() => {\n    dispatchFocusAction(dispatch);\n    if (outlinedFilterId === id) {\n      dispatch(setDirectPathToChild([]));\n    }\n  }, [dispatch, id, outlinedFilterId]);\n  const setHoveredFilter = useCallback(() => dispatchHoverAction(dispatch, id), [dispatch, id]);\n  const unsetHoveredFilter = useCallback(() => dispatchHoverAction(dispatch), [dispatch]);\n  const hooks = useMemo(() => ({\n    setDataMask,\n    setHoveredFilter,\n    unsetHoveredFilter,\n    setFocusedFilter,\n    unsetFocusedFilter,\n    setFilterActive\n  }), [\n  setDataMask,\n  setFilterActive,\n  setHoveredFilter,\n  unsetHoveredFilter,\n  setFocusedFilter,\n  unsetFocusedFilter]\n  );\n  const filterState = useMemo(() => {var _filter$dataMask2;return {\n      ...((_filter$dataMask2 = filter.dataMask) == null ? void 0 : _filter$dataMask2.filterState),\n      validateStatus\n    };}, [(_filter$dataMask3 = filter.dataMask) == null ? void 0 : _filter$dataMask3.filterState, validateStatus]);\n  const displaySettings = useMemo(() => ({\n    filterBarOrientation: orientation,\n    isOverflowingFilterBar: overflow\n  }), [orientation, overflow]);\n  if (error) {var _error$errors;\n    return ___EmotionJSX(ErrorMessageWithStackTrace, { error: (_error$errors = error.errors) == null ? void 0 : _error$errors[0], fallback: ___EmotionJSX(BasicErrorAlert, { title: t('Cannot load filter'), body: error.error, level: \"error\" }) });\n  }\n  return ___EmotionJSX(StyledDiv, { \"data-test\": \"form-item-value\" },\n  isLoading ? ___EmotionJSX(Loading, { position: \"inline-centered\" }) : ___EmotionJSX(SuperChart, { height: HEIGHT, width: RESPONSIVE_WIDTH, showOverflow: showOverflow, formData: formData, displaySettings: displaySettings, parentRef: parentRef, inputRef: inputRef\n    // For charts that don't have datasource we need workaround for empty placeholder\n    , queriesData: hasDataSource ? state : queriesDataPlaceholder, chartType: filterType, behaviors: behaviors, filterState: filterState, ownState: (_filter$dataMask4 = filter.dataMask) == null ? void 0 : _filter$dataMask4.ownState, enableNoResults: metadata == null ? void 0 : metadata.enableNoResults, isRefreshing: isRefreshing, hooks: hooks })\n  );\n};__signature__(FilterValue, \"useFilterDependencies{dependencies}\\nuseShouldFilterRefresh{shouldRefresh}\\nuseState{[state, setState]([])}\\nuseSelector{dashboardId}\\nuseState{[error, setError]}\\nuseState{[formData, setFormData]({\\n        inView: false,\\n    })}\\nuseState{[ownState, setOwnState]({})}\\nuseState{[inViewFirstTime, setInViewFirstTime](inView)}\\nuseRef{inputRef}\\nuseState{[isLoading, setIsLoading](hasDataSource)}\\nuseState{[isRefreshing, setIsRefreshing](false)}\\nuseDispatch{dispatch}\\nuseFilterOutlined{{ outlinedFilterId, lastUpdated }}\\nuseCallback{handleFilterLoadFinish}\\nuseEffect{}\\nuseEffect{}\\nuseEffect{}\\nuseCallback{setDataMask}\\nuseCallback{setFocusedFilter}\\nuseCallback{unsetFocusedFilter}\\nuseCallback{setHoveredFilter}\\nuseCallback{unsetHoveredFilter}\\nuseMemo{hooks}\\nuseMemo{filterState}\\nuseMemo{displaySettings}\", () => [useFilterDependencies, useShouldFilterRefresh, useSelector, useDispatch, useFilterOutlined]);const _default = /*#__PURE__*/\nReact.memo(FilterValue);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(HEIGHT, \"HEIGHT\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/components/nativeFilters/FilterBar/FilterControls/FilterValue.tsx\");reactHotLoader.register(StyledDiv, \"StyledDiv\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/components/nativeFilters/FilterBar/FilterControls/FilterValue.tsx\");reactHotLoader.register(queriesDataPlaceholder, \"queriesDataPlaceholder\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/components/nativeFilters/FilterBar/FilterControls/FilterValue.tsx\");reactHotLoader.register(behaviors, \"behaviors\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/components/nativeFilters/FilterBar/FilterControls/FilterValue.tsx\");reactHotLoader.register(useShouldFilterRefresh, \"useShouldFilterRefresh\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/components/nativeFilters/FilterBar/FilterControls/FilterValue.tsx\");reactHotLoader.register(FilterValue, \"FilterValue\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/components/nativeFilters/FilterBar/FilterControls/FilterValue.tsx\");reactHotLoader.register(_default, \"default\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/components/nativeFilters/FilterBar/FilterControls/FilterValue.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["React","useCallback","useEffect","useMemo","useRef","useState","Behavior","isFeatureEnabled","FeatureFlag","getChartMetadataRegistry","styled","SuperChart","t","getClientErrorObject","useDispatch","useSelector","getChartDataRequest","Loading","BasicErrorAlert","ErrorMessageWithStackTrace","waitForAsyncData","FilterBarOrientation","onFiltersRefreshSuccess","setDirectPathToChild","RESPONSIVE_WIDTH","FAST_DEBOUNCE","dispatchHoverAction","dispatchFocusAction","getFormData","useFilterDependencies","useFilterOutlined","jsx","___EmotionJSX","HEIGHT","StyledDiv","div","queriesDataPlaceholder","data","behaviors","NativeFilter","useShouldFilterRefresh","isDashboardRefreshing","state","dashboardState","isRefreshing","isFilterRefreshing","isFiltersRefreshing","__signature__","FilterValue","dataMaskSelected","filter","onFilterSelectionChange","inView","showOverflow","parentRef","setFilterActive","orientation","Vertical","overflow","validateStatus","_filter$dataMask3","_filter$dataMask4","id","targets","filterType","adhoc_filters","time_range","metadata","get","dependencies","shouldRefresh","setState","dashboardId","dashboardInfo","error","setError","formData","setFormData","ownState","setOwnState","inViewFirstTime","setInViewFirstTime","inputRef","target","datasetId","column","name","groupby","hasDataSource","isLoading","setIsLoading","setIsRefreshing","dispatch","outlinedFilterId","lastUpdated","handleFilterLoadFinish","_filter$dataMask","newFormData","filterOwnState","dataMask","customizer","objValue","othValue","key","undefined","_isEqualWith","_isEqual","force","then","response","json","GlobalAsyncQueries","result","status","asyncResult","catch","clientErrorObject","Error","JSON","stringify","setTimeout","_inputRef$current","current","focus","setDataMask","setFocusedFilter","unsetFocusedFilter","setHoveredFilter","unsetHoveredFilter","hooks","filterState","_filter$dataMask2","displaySettings","filterBarOrientation","isOverflowingFilterBar","_error$errors","errors","fallback","title","body","level","position","height","width","queriesData","chartType","enableNoResults","_default","memo","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/components/nativeFilters/FilterBar/FilterControls/FilterValue.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport {\n  ChartDataResponseResult,\n  Behavior,\n  DataMask,\n  isFeatureEnabled,\n  FeatureFlag,\n  getChartMetadataRegistry,\n  JsonObject,\n  QueryFormData,\n  styled,\n  SuperChart,\n  t,\n  ClientErrorObject,\n  getClientErrorObject,\n} from '@superset-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { isEqual, isEqualWith } from 'lodash';\nimport { getChartDataRequest } from 'src/components/Chart/chartAction';\nimport Loading from 'src/components/Loading';\nimport BasicErrorAlert from 'src/components/ErrorMessage/BasicErrorAlert';\nimport ErrorMessageWithStackTrace from 'src/components/ErrorMessage/ErrorMessageWithStackTrace';\nimport { waitForAsyncData } from 'src/middleware/asyncEvent';\nimport { FilterBarOrientation, RootState } from 'src/dashboard/types';\nimport {\n  onFiltersRefreshSuccess,\n  setDirectPathToChild,\n} from 'src/dashboard/actions/dashboardState';\nimport { RESPONSIVE_WIDTH } from 'src/filters/components/common';\nimport { FAST_DEBOUNCE } from 'src/constants';\nimport { dispatchHoverAction, dispatchFocusAction } from './utils';\nimport { FilterControlProps } from './types';\nimport { getFormData } from '../../utils';\nimport { useFilterDependencies } from './state';\nimport { useFilterOutlined } from '../useFilterOutlined';\n\nconst HEIGHT = 32;\n\n// Overrides superset-ui height with min-height\nconst StyledDiv = styled.div`\n  & > div {\n    height: auto !important;\n    min-height: ${HEIGHT}px;\n  }\n`;\n\nconst queriesDataPlaceholder = [{ data: [{}] }];\nconst behaviors = [Behavior.NativeFilter];\n\nconst useShouldFilterRefresh = () => {\n  const isDashboardRefreshing = useSelector<RootState, boolean>(\n    state => state.dashboardState.isRefreshing,\n  );\n  const isFilterRefreshing = useSelector<RootState, boolean>(\n    state => state.dashboardState.isFiltersRefreshing,\n  );\n\n  // trigger filter requests only after charts requests were triggered\n  return !isDashboardRefreshing && isFilterRefreshing;\n};\n\nconst FilterValue: React.FC<FilterControlProps> = ({\n  dataMaskSelected,\n  filter,\n  onFilterSelectionChange,\n  inView = true,\n  showOverflow,\n  parentRef,\n  setFilterActive,\n  orientation = FilterBarOrientation.Vertical,\n  overflow = false,\n  validateStatus,\n}) => {\n  const { id, targets, filterType, adhoc_filters, time_range } = filter;\n  const metadata = getChartMetadataRegistry().get(filterType);\n  const dependencies = useFilterDependencies(id, dataMaskSelected);\n  const shouldRefresh = useShouldFilterRefresh();\n  const [state, setState] = useState<ChartDataResponseResult[]>([]);\n  const dashboardId = useSelector<RootState, number>(\n    state => state.dashboardInfo.id,\n  );\n  const [error, setError] = useState<ClientErrorObject>();\n  const [formData, setFormData] = useState<Partial<QueryFormData>>({\n    inView: false,\n  });\n  const [ownState, setOwnState] = useState<JsonObject>({});\n  const [inViewFirstTime, setInViewFirstTime] = useState(inView);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [target] = targets;\n  const {\n    datasetId,\n    column = {},\n  }: Partial<{ datasetId: number; column: { name?: string } }> = target;\n  const { name: groupby } = column;\n  const hasDataSource = !!datasetId;\n  const [isLoading, setIsLoading] = useState<boolean>(hasDataSource);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const dispatch = useDispatch();\n\n  const { outlinedFilterId, lastUpdated } = useFilterOutlined();\n\n  const handleFilterLoadFinish = useCallback(() => {\n    setIsRefreshing(false);\n    setIsLoading(false);\n    if (shouldRefresh) {\n      dispatch(onFiltersRefreshSuccess());\n    }\n  }, [dispatch, shouldRefresh]);\n\n  useEffect(() => {\n    if (!inViewFirstTime && inView) {\n      setInViewFirstTime(true);\n    }\n  }, [inView, inViewFirstTime, setInViewFirstTime]);\n\n  useEffect(() => {\n    if (!inViewFirstTime) {\n      return;\n    }\n    const newFormData = getFormData({\n      ...filter,\n      datasetId,\n      dependencies,\n      groupby,\n      adhoc_filters,\n      time_range,\n      dashboardId,\n    });\n    const filterOwnState = filter.dataMask?.ownState || {};\n    // TODO: We should try to improve our useEffect hooks to depend more on\n    // granular information instead of big objects that require deep comparison.\n    const customizer = (\n      objValue: Partial<QueryFormData>,\n      othValue: Partial<QueryFormData>,\n      key: string,\n    ) => (key === 'url_params' ? true : undefined);\n    if (\n      !isRefreshing &&\n      (!isEqualWith(formData, newFormData, customizer) ||\n        !isEqual(ownState, filterOwnState) ||\n        shouldRefresh)\n    ) {\n      setFormData(newFormData);\n      setOwnState(filterOwnState);\n      if (!hasDataSource) {\n        return;\n      }\n      setIsRefreshing(true);\n      getChartDataRequest({\n        formData: newFormData,\n        force: false,\n        ownState: filterOwnState,\n      })\n        .then(({ response, json }) => {\n          if (isFeatureEnabled(FeatureFlag.GlobalAsyncQueries)) {\n            // deal with getChartDataRequest transforming the response data\n            const result = 'result' in json ? json.result[0] : json;\n\n            if (response.status === 200) {\n              setState([result]);\n              handleFilterLoadFinish();\n            } else if (response.status === 202) {\n              waitForAsyncData(result)\n                .then((asyncResult: ChartDataResponseResult[]) => {\n                  setState(asyncResult);\n                  handleFilterLoadFinish();\n                })\n                .catch((error: Response) => {\n                  getClientErrorObject(error).then(clientErrorObject => {\n                    setError(clientErrorObject);\n                    handleFilterLoadFinish();\n                  });\n                });\n            } else {\n              throw new Error(\n                `Received unexpected response status (${response.status}) while fetching chart data`,\n              );\n            }\n          } else {\n            setState(json.result);\n            setError(undefined);\n            handleFilterLoadFinish();\n          }\n        })\n        .catch((error: Response) => {\n          getClientErrorObject(error).then(clientErrorObject => {\n            setError(clientErrorObject);\n            handleFilterLoadFinish();\n          });\n        });\n    }\n  }, [\n    inViewFirstTime,\n    dependencies,\n    datasetId,\n    groupby,\n    handleFilterLoadFinish,\n    JSON.stringify(filter),\n    hasDataSource,\n    isRefreshing,\n    shouldRefresh,\n  ]);\n\n  useEffect(() => {\n    if (outlinedFilterId && outlinedFilterId === filter.id) {\n      setTimeout(\n        () => {\n          inputRef?.current?.focus();\n        },\n        overflow ? FAST_DEBOUNCE : 0,\n      );\n    }\n  }, [inputRef, outlinedFilterId, lastUpdated, filter.id, overflow]);\n\n  const setDataMask = useCallback(\n    (dataMask: DataMask) => onFilterSelectionChange(filter, dataMask),\n    [filter, onFilterSelectionChange],\n  );\n\n  const setFocusedFilter = useCallback(() => {\n    // don't highlight charts in scope if filter was focused programmatically\n    if (outlinedFilterId !== id) {\n      dispatchFocusAction(dispatch, id);\n    }\n  }, [dispatch, id, outlinedFilterId]);\n\n  const unsetFocusedFilter = useCallback(() => {\n    dispatchFocusAction(dispatch);\n    if (outlinedFilterId === id) {\n      dispatch(setDirectPathToChild([]));\n    }\n  }, [dispatch, id, outlinedFilterId]);\n\n  const setHoveredFilter = useCallback(\n    () => dispatchHoverAction(dispatch, id),\n    [dispatch, id],\n  );\n  const unsetHoveredFilter = useCallback(\n    () => dispatchHoverAction(dispatch),\n    [dispatch],\n  );\n\n  const hooks = useMemo(\n    () => ({\n      setDataMask,\n      setHoveredFilter,\n      unsetHoveredFilter,\n      setFocusedFilter,\n      unsetFocusedFilter,\n      setFilterActive,\n    }),\n    [\n      setDataMask,\n      setFilterActive,\n      setHoveredFilter,\n      unsetHoveredFilter,\n      setFocusedFilter,\n      unsetFocusedFilter,\n    ],\n  );\n\n  const filterState = useMemo(\n    () => ({\n      ...filter.dataMask?.filterState,\n      validateStatus,\n    }),\n    [filter.dataMask?.filterState, validateStatus],\n  );\n\n  const displaySettings = useMemo(\n    () => ({\n      filterBarOrientation: orientation,\n      isOverflowingFilterBar: overflow,\n    }),\n    [orientation, overflow],\n  );\n\n  if (error) {\n    return (\n      <ErrorMessageWithStackTrace\n        error={error.errors?.[0]}\n        fallback={\n          <BasicErrorAlert\n            title={t('Cannot load filter')}\n            body={error.error}\n            level=\"error\"\n          />\n        }\n      />\n    );\n  }\n\n  return (\n    <StyledDiv data-test=\"form-item-value\">\n      {isLoading ? (\n        <Loading position=\"inline-centered\" />\n      ) : (\n        <SuperChart\n          height={HEIGHT}\n          width={RESPONSIVE_WIDTH}\n          showOverflow={showOverflow}\n          formData={formData}\n          displaySettings={displaySettings}\n          parentRef={parentRef}\n          inputRef={inputRef}\n          // For charts that don't have datasource we need workaround for empty placeholder\n          queriesData={hasDataSource ? state : queriesDataPlaceholder}\n          chartType={filterType}\n          behaviors={behaviors}\n          filterState={filterState}\n          ownState={filter.dataMask?.ownState}\n          enableNoResults={metadata?.enableNoResults}\n          isRefreshing={isRefreshing}\n          hooks={hooks}\n        />\n      )}\n    </StyledDiv>\n  );\n};\nexport default React.memo(FilterValue);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}