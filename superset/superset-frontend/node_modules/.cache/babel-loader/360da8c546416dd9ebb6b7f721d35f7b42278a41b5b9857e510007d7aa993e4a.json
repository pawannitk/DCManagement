{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n// mapping { url_param: v1_explore_request_param }\nconst EXPLORE_URL_SEARCH_PARAMS = {\n  form_data: {\n    name: 'form_data',\n    parser: (formData) => {\n      const formDataObject = JSON.parse(formData);\n      if (formDataObject.datasource) {\n        const [datasource_id, datasource_type] = formDataObject.datasource.split('__');\n        formDataObject.datasource_id = datasource_id;\n        formDataObject.datasource_type = datasource_type;\n        delete formDataObject.datasource;\n      }\n      return formDataObject;\n    }\n  },\n  slice_id: {\n    name: 'slice_id'\n  },\n  datasource_id: {\n    name: 'datasource_id'\n  },\n  datasource_type: {\n    name: 'datasource_type'\n  },\n  datasource: {\n    name: 'datasource',\n    parser: (datasource) => {\n      const [datasource_id, datasource_type] = datasource.split('__');\n      return { datasource_id, datasource_type };\n    }\n  },\n  form_data_key: {\n    name: 'form_data_key'\n  },\n  permalink_key: {\n    name: 'permalink_key'\n  },\n  viz_type: {\n    name: 'viz_type'\n  },\n  dashboard_id: {\n    name: 'dashboard_id'\n  }\n};\nconst EXPLORE_URL_PATH_PARAMS = {\n  p: 'permalink_key',\n  table: 'datasource_id'\n};\n// search params can be placed in form_data object\n// we need to \"flatten\" the search params to use them with /v1/explore endpoint\nconst getParsedExploreURLSearchParams = (search) => {\n  const urlSearchParams = new URLSearchParams(search);\n  return Array.from(urlSearchParams.keys()).reduce((acc, currentParam) => {var _EXPLORE_URL_SEARCH_P4;\n    const paramValue = urlSearchParams.get(currentParam);\n    if (paramValue === null) {\n      return acc;\n    }\n    let parsedParamValue;\n    try {var _EXPLORE_URL_SEARCH_P, _EXPLORE_URL_SEARCH_P2, _EXPLORE_URL_SEARCH_P3;\n      parsedParamValue = (_EXPLORE_URL_SEARCH_P = (_EXPLORE_URL_SEARCH_P2 =\n      (_EXPLORE_URL_SEARCH_P3 = EXPLORE_URL_SEARCH_PARAMS[currentParam]).parser) == null ? void 0 : _EXPLORE_URL_SEARCH_P2.call(_EXPLORE_URL_SEARCH_P3, paramValue)) != null ? _EXPLORE_URL_SEARCH_P :\n      paramValue;\n    }\n    catch {\n      parsedParamValue = paramValue;\n    }\n    if (typeof parsedParamValue === 'object') {\n      return { ...acc, ...parsedParamValue };\n    }\n    const key = ((_EXPLORE_URL_SEARCH_P4 = EXPLORE_URL_SEARCH_PARAMS[currentParam]) == null ? void 0 : _EXPLORE_URL_SEARCH_P4.name) || currentParam;\n    return {\n      ...acc,\n      [key]: parsedParamValue\n    };\n  }, {});\n};\n// path params need to be transformed to search params to use them with /v1/explore endpoint\nconst getParsedExploreURLPathParams = (pathname) => Object.keys(EXPLORE_URL_PATH_PARAMS).reduce((acc, currentParam) => {\n  const re = new RegExp(`/(${currentParam})/(\\\\w+)`);\n  const pathGroups = pathname.match(re);\n  if (pathGroups != null && pathGroups[2]) {\n    return { ...acc, [EXPLORE_URL_PATH_PARAMS[currentParam]]: pathGroups[2] };\n  }\n  return acc;\n}, {});\nexport const getParsedExploreURLParams = (location = window.location) => new URLSearchParams(Object.entries({\n  ...getParsedExploreURLSearchParams(location.search),\n  ...getParsedExploreURLPathParams(location.pathname)\n}).\nmap((entry) => entry.join('=')).\njoin('&'));;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(EXPLORE_URL_SEARCH_PARAMS, \"EXPLORE_URL_SEARCH_PARAMS\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/exploreUtils/getParsedExploreURLParams.ts\");reactHotLoader.register(EXPLORE_URL_PATH_PARAMS, \"EXPLORE_URL_PATH_PARAMS\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/exploreUtils/getParsedExploreURLParams.ts\");reactHotLoader.register(getParsedExploreURLSearchParams, \"getParsedExploreURLSearchParams\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/exploreUtils/getParsedExploreURLParams.ts\");reactHotLoader.register(getParsedExploreURLPathParams, \"getParsedExploreURLPathParams\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/exploreUtils/getParsedExploreURLParams.ts\");reactHotLoader.register(getParsedExploreURLParams, \"getParsedExploreURLParams\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/exploreUtils/getParsedExploreURLParams.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["EXPLORE_URL_SEARCH_PARAMS","form_data","name","parser","formData","formDataObject","JSON","parse","datasource","datasource_id","datasource_type","split","slice_id","form_data_key","permalink_key","viz_type","dashboard_id","EXPLORE_URL_PATH_PARAMS","p","table","getParsedExploreURLSearchParams","search","urlSearchParams","URLSearchParams","Array","from","keys","reduce","acc","currentParam","_EXPLORE_URL_SEARCH_P4","paramValue","get","parsedParamValue","_EXPLORE_URL_SEARCH_P","_EXPLORE_URL_SEARCH_P2","_EXPLORE_URL_SEARCH_P3","call","key","getParsedExploreURLPathParams","pathname","Object","re","RegExp","pathGroups","match","getParsedExploreURLParams","location","window","entries","map","entry","join","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/exploreUtils/getParsedExploreURLParams.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nexport interface Location {\n  search: string;\n  pathname: string;\n}\n\n// mapping { url_param: v1_explore_request_param }\nconst EXPLORE_URL_SEARCH_PARAMS = {\n  form_data: {\n    name: 'form_data',\n    parser: (formData: string) => {\n      const formDataObject = JSON.parse(formData);\n      if (formDataObject.datasource) {\n        const [datasource_id, datasource_type] =\n          formDataObject.datasource.split('__');\n        formDataObject.datasource_id = datasource_id;\n        formDataObject.datasource_type = datasource_type;\n        delete formDataObject.datasource;\n      }\n      return formDataObject;\n    },\n  },\n  slice_id: {\n    name: 'slice_id',\n  },\n  datasource_id: {\n    name: 'datasource_id',\n  },\n  datasource_type: {\n    name: 'datasource_type',\n  },\n  datasource: {\n    name: 'datasource',\n    parser: (datasource: string) => {\n      const [datasource_id, datasource_type] = datasource.split('__');\n      return { datasource_id, datasource_type };\n    },\n  },\n  form_data_key: {\n    name: 'form_data_key',\n  },\n  permalink_key: {\n    name: 'permalink_key',\n  },\n  viz_type: {\n    name: 'viz_type',\n  },\n  dashboard_id: {\n    name: 'dashboard_id',\n  },\n};\n\nconst EXPLORE_URL_PATH_PARAMS = {\n  p: 'permalink_key', // permalink\n  table: 'datasource_id',\n};\n\n// search params can be placed in form_data object\n// we need to \"flatten\" the search params to use them with /v1/explore endpoint\nconst getParsedExploreURLSearchParams = (search: string) => {\n  const urlSearchParams = new URLSearchParams(search);\n  return Array.from(urlSearchParams.keys()).reduce((acc, currentParam) => {\n    const paramValue = urlSearchParams.get(currentParam);\n    if (paramValue === null) {\n      return acc;\n    }\n    let parsedParamValue;\n    try {\n      parsedParamValue =\n        EXPLORE_URL_SEARCH_PARAMS[currentParam].parser?.(paramValue) ??\n        paramValue;\n    } catch {\n      parsedParamValue = paramValue;\n    }\n    if (typeof parsedParamValue === 'object') {\n      return { ...acc, ...parsedParamValue };\n    }\n    const key = EXPLORE_URL_SEARCH_PARAMS[currentParam]?.name || currentParam;\n    return {\n      ...acc,\n      [key]: parsedParamValue,\n    };\n  }, {});\n};\n\n// path params need to be transformed to search params to use them with /v1/explore endpoint\nconst getParsedExploreURLPathParams = (pathname: string) =>\n  Object.keys(EXPLORE_URL_PATH_PARAMS).reduce((acc, currentParam) => {\n    const re = new RegExp(`/(${currentParam})/(\\\\w+)`);\n    const pathGroups = pathname.match(re);\n    if (pathGroups?.[2]) {\n      return { ...acc, [EXPLORE_URL_PATH_PARAMS[currentParam]]: pathGroups[2] };\n    }\n    return acc;\n  }, {});\n\nexport const getParsedExploreURLParams = (\n  location: Location = window.location,\n) =>\n  new URLSearchParams(\n    Object.entries({\n      ...getParsedExploreURLSearchParams(location.search),\n      ...getParsedExploreURLPathParams(location.pathname),\n    })\n      .map(entry => entry.join('='))\n      .join('&'),\n  );\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}