{"ast":null,"code":"import _cloneDeepWith from \"lodash/cloneDeepWith\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport _JSONbig from 'json-bigint';\n\nconst JSONbig = _JSONbig({\n  constructorAction: 'preserve'\n});\nexport default async function parseResponse(apiPromise, parseMethod) {\n  const response = await apiPromise;\n  // reject failed HTTP requests with the raw response\n  if (!response.ok) {\n    return Promise.reject(response);\n  }\n  if (parseMethod === null || parseMethod === 'raw') {\n    return response;\n  }\n  if (parseMethod === 'text') {\n    const text = await response.text();\n    const result = {\n      response,\n      text\n    };\n    return result;\n  }\n  if (parseMethod === 'json-bigint') {\n    const rawData = await response.text();\n    const json = JSONbig.parse(rawData);\n    const result = {\n      response,\n      // `json-bigint` could not handle floats well, see sidorares/json-bigint#62\n      // TODO: clean up after json-bigint>1.0.1 is released\n      json: _cloneDeepWith(json, (value) => (value == null ? void 0 : value.isInteger == null ? void 0 : value.isInteger()) === false ? Number(value) : undefined)\n    };\n    return result;\n  }\n  // by default treat this as json\n  if (parseMethod === undefined || parseMethod === 'json') {\n    const json = await response.json();\n    const result = {\n      json,\n      response\n    };\n    return result;\n  }\n  throw new Error(`Expected parseResponse=json|json-bigint|text|raw|null, got '${parseMethod}'.`);\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(JSONbig, \"JSONbig\", \"/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/connection/callApi/parseResponse.ts\");reactHotLoader.register(parseResponse, \"parseResponse\", \"/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/connection/callApi/parseResponse.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["_JSONbig","JSONbig","constructorAction","parseResponse","apiPromise","parseMethod","response","ok","Promise","reject","text","result","rawData","json","parse","_cloneDeepWith","value","isInteger","Number","undefined","Error","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/connection/callApi/parseResponse.ts"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport _JSONbig from 'json-bigint';\nimport { cloneDeepWith } from 'lodash';\n\nimport { ParseMethod, TextResponse, JsonResponse } from '../types';\n\nconst JSONbig = _JSONbig({\n  constructorAction: 'preserve',\n});\n\nexport default async function parseResponse<T extends ParseMethod = 'json'>(\n  apiPromise: Promise<Response>,\n  parseMethod?: T,\n) {\n  type ReturnType = T extends 'raw' | null\n    ? Response\n    : T extends 'json' | 'json-bigint' | undefined\n      ? JsonResponse\n      : T extends 'text'\n        ? TextResponse\n        : never;\n  const response = await apiPromise;\n  // reject failed HTTP requests with the raw response\n  if (!response.ok) {\n    return Promise.reject(response);\n  }\n  if (parseMethod === null || parseMethod === 'raw') {\n    return response as ReturnType;\n  }\n  if (parseMethod === 'text') {\n    const text = await response.text();\n    const result: TextResponse = {\n      response,\n      text,\n    };\n    return result as ReturnType;\n  }\n  if (parseMethod === 'json-bigint') {\n    const rawData = await response.text();\n    const json = JSONbig.parse(rawData);\n    const result: JsonResponse = {\n      response,\n      // `json-bigint` could not handle floats well, see sidorares/json-bigint#62\n      // TODO: clean up after json-bigint>1.0.1 is released\n      json: cloneDeepWith(json, (value: any) =>\n        value?.isInteger?.() === false ? Number(value) : undefined,\n      ),\n    };\n    return result as ReturnType;\n  }\n  // by default treat this as json\n  if (parseMethod === undefined || parseMethod === 'json') {\n    const json = await response.json();\n    const result: JsonResponse = {\n      json,\n      response,\n    };\n    return result as ReturnType;\n  }\n  throw new Error(\n    `Expected parseResponse=json|json-bigint|text|raw|null, got '${parseMethod}'.`,\n  );\n}\n"],"mappings":"0VAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,QAAQ,MAAM,aAAa;;AAKlC,MAAMC,OAAO,GAAGD,QAAQ,CAAC;EACvBE,iBAAiB,EAAE;CACpB,CAAC;AAEF,eAAe,eAAeC,aAAaA,CACzCC,UAA6B,EAC7BC,WAAe;EASf,MAAMC,QAAQ,GAAG,MAAMF,UAAU;EACjC;EACA,IAAI,CAACE,QAAQ,CAACC,EAAE,EAAE;IAChB,OAAOC,OAAO,CAACC,MAAM,CAACH,QAAQ,CAAC;;EAEjC,IAAID,WAAW,KAAK,IAAI,IAAIA,WAAW,KAAK,KAAK,EAAE;IACjD,OAAOC,QAAsB;;EAE/B,IAAID,WAAW,KAAK,MAAM,EAAE;IAC1B,MAAMK,IAAI,GAAG,MAAMJ,QAAQ,CAACI,IAAI,EAAE;IAClC,MAAMC,MAAM,GAAiB;MAC3BL,QAAQ;MACRI;KACD;IACD,OAAOC,MAAoB;;EAE7B,IAAIN,WAAW,KAAK,aAAa,EAAE;IACjC,MAAMO,OAAO,GAAG,MAAMN,QAAQ,CAACI,IAAI,EAAE;IACrC,MAAMG,IAAI,GAAGZ,OAAO,CAACa,KAAK,CAACF,OAAO,CAAC;IACnC,MAAMD,MAAM,GAAiB;MAC3BL,QAAQ;MACR;MACA;MACAO,IAAI,EAAEE,cAAA,CAAcF,IAAI,EAAE,CAACG,KAAU,KACnC,CAAAA,KAAK,oBAALA,KAAK,CAAEC,SAAS,oBAAhBD,KAAK,CAAEC,SAAS,CAAE,CAAE,MAAK,KAAK,GAAGC,MAAM,CAACF,KAAK,CAAC,GAAGG,SAAS;KAE7D;IACD,OAAOR,MAAoB;;EAE7B;EACA,IAAIN,WAAW,KAAKc,SAAS,IAAId,WAAW,KAAK,MAAM,EAAE;IACvD,MAAMQ,IAAI,GAAG,MAAMP,QAAQ,CAACO,IAAI,EAAE;IAClC,MAAMF,MAAM,GAAiB;MAC3BE,IAAI;MACJP;KACD;IACD,OAAOK,MAAoB;;EAE7B,MAAM,IAAIS,KAAK,CACb,+DAA+Df,WAAW,IAAI,CAC/E;AACH,CAAC,mBAAAgB,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAC,OAAA,GAAAJ,SAAA,MAAAE,cAAA,WAAAA,cAAA,CAAAG,QAAA,CAxDKvB,OAAO,yIAAAoB,cAAA,CAAAG,QAAA,CAIiBrB,aAAa,uKAAAsB,WAAA,UAAAH,oBAAA,mBAAAA,oBAAA,CAAAG,WAAA,GAAAN,SAAA,CAAAM,WAAA,IAAAA,WAAA,CAAAC,MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}