{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useContext, useEffect, useMemo, useState } from 'react';\nimport { css, ensureIsArray, isDefined, t, useTheme } from '@superset-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport Modal from 'src/components/Modal';\nimport Loading from 'src/components/Loading';\nimport Button from 'src/components/Button';\nimport { DashboardPageIdContext } from 'src/dashboard/containers/DashboardPage';\nimport { postFormData } from 'src/explore/exploreUtils/formData';\nimport { simpleFilterToAdhoc } from 'src/utils/simpleFilterToAdhoc';\nimport { useDatasetMetadataBar } from 'src/features/datasets/metadataBar/useDatasetMetadataBar';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\nimport Alert from 'src/components/Alert';\nimport { logEvent } from 'src/logger/actions';\nimport { LOG_ACTIONS_DRILL_BY_BREADCRUMB_CLICKED, LOG_ACTIONS_DRILL_BY_EDIT_CHART, LOG_ACTIONS_DRILL_BY_MODAL_OPENED, LOG_ACTIONS_FURTHER_DRILL_BY } from 'src/logger/LogUtils';\nimport { findPermission } from 'src/utils/findPermission';\nimport { getQuerySettings } from 'src/explore/exploreUtils';\nimport { DrillByType } from '../types';\nimport DrillByChart from './DrillByChart';\nimport { ContextMenuItem } from '../ChartContextMenu/ChartContextMenu';\nimport { useContextMenu } from '../ChartContextMenu/useContextMenu';\nimport { getChartDataRequest, handleChartDataResponse } from '../chartAction';\nimport { useDisplayModeToggle } from './useDisplayModeToggle';\nimport { useDrillByBreadcrumbs } from './useDrillByBreadcrumbs';\nimport { useResultsTableView } from './useResultsTableView';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst DEFAULT_ADHOC_FILTER_FIELD_NAME = 'adhoc_filters';\nconst ModalFooter = ({ formData, closeModal }) => {\n  const dispatch = useDispatch();\n  const { addDangerToast } = useToasts();\n  const theme = useTheme();\n  const [url, setUrl] = useState('');\n  const dashboardPageId = useContext(DashboardPageIdContext);\n  const onEditChartClick = useCallback(() => {\n    dispatch(logEvent(LOG_ACTIONS_DRILL_BY_EDIT_CHART, {\n      slice_id: formData.slice_id\n    }));\n  }, [dispatch, formData.slice_id]);\n  const canExplore = useSelector((state) => {var _state$user;return findPermission('can_explore', 'Superset', (_state$user = state.user) == null ? void 0 : _state$user.roles);});\n  const [datasource_id, datasource_type] = formData.datasource.split('__');\n  useEffect(() => {\n    postFormData(Number(datasource_id), datasource_type, formData, 0).\n    then((key) => {\n      setUrl(`/explore/?form_data_key=${key}&dashboard_page_id=${dashboardPageId}`);\n    }).\n    catch(() => {\n      addDangerToast(t('Failed to generate chart edit URL'));\n    });\n  }, [\n  addDangerToast,\n  dashboardPageId,\n  datasource_id,\n  datasource_type,\n  formData]\n  );\n  const isEditDisabled = !url || !canExplore;\n  return ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(Button, { buttonStyle: \"secondary\", buttonSize: \"small\", onClick: onEditChartClick, disabled: isEditDisabled, tooltip: isEditDisabled ?\n    t('You do not have sufficient permissions to edit the chart') :\n    undefined },\n  ___EmotionJSX(Link, { css: css`\n            &:hover {\n              text-decoration: none;\n            }\n          `, to: url },\n  t('Edit chart')\n  )\n  ),\n\n  ___EmotionJSX(Button, { buttonStyle: \"primary\", buttonSize: \"small\", onClick: closeModal, \"data-test\": \"close-drill-by-modal\", css: css`\n          margin-left: ${theme.gridUnit * 2}px;\n        ` },\n  t('Close')\n  )\n  );\n};__signature__(ModalFooter, \"useDispatch{dispatch}\\nuseToasts{{ addDangerToast }}\\nuseTheme{theme}\\nuseState{[url, setUrl]('')}\\nuseContext{dashboardPageId}\\nuseCallback{onEditChartClick}\\nuseSelector{canExplore}\\nuseEffect{}\", () => [useDispatch, useToasts, useTheme, useSelector]);\nexport default function DrillByModal({ column, dataset, drillByConfig, formData, onHideModal }) {\n  const dispatch = useDispatch();\n  const theme = useTheme();\n  const { addDangerToast } = useToasts();\n  const [isChartDataLoading, setIsChartDataLoading] = useState(true);\n  const [drillByConfigs, setDrillByConfigs] = useState([\n  { ...drillByConfig, column }]\n  );\n  useEffect(() => {\n    dispatch(logEvent(LOG_ACTIONS_DRILL_BY_MODAL_OPENED, {\n      slice_id: formData.slice_id\n    }));\n  }, [dispatch, formData.slice_id]);\n  const { column: currentColumn, groupbyFieldName = drillByConfig.groupbyFieldName } = drillByConfigs[drillByConfigs.length - 1] || {};\n  const initialGroupbyColumns = useMemo(() => ensureIsArray(formData[groupbyFieldName]).\n  map((colName) => {var _dataset$columns;return (_dataset$columns = dataset.columns) == null ? void 0 : _dataset$columns.find((col) => col.column_name === colName);}).\n  filter(isDefined), [dataset.columns, formData, groupbyFieldName]);\n  const { displayModeToggle, drillByDisplayMode } = useDisplayModeToggle();\n  const [chartDataResult, setChartDataResult] = useState();\n  const resultsTable = useResultsTableView(chartDataResult, formData.datasource);\n  const [currentFormData, setCurrentFormData] = useState(formData);\n  const [usedGroupbyColumns, setUsedGroupbyColumns] = useState([...initialGroupbyColumns, column].filter(isDefined));\n  const [breadcrumbsData, setBreadcrumbsData] = useState([\n  { groupby: initialGroupbyColumns, filters: drillByConfig.filters },\n  { groupby: column || [] }]\n  );\n  const getNewGroupby = useCallback((groupbyCol, fieldName = groupbyFieldName) => Array.isArray(formData[fieldName]) ?\n  [groupbyCol.column_name] :\n  groupbyCol.column_name, [formData, groupbyFieldName]);\n  const getFormDataChangesFromConfigs = useCallback((configs) => configs.reduce((acc, config) => {\n    if (config != null && config.groupbyFieldName && config.column) {\n      acc.formData[config.groupbyFieldName] = getNewGroupby(config.column, config.groupbyFieldName);\n      acc.overridenGroupbyFields.add(config.groupbyFieldName);\n    }\n    const adhocFilterFieldName = (config == null ? void 0 : config.adhocFilterFieldName) || DEFAULT_ADHOC_FILTER_FIELD_NAME;\n    acc.formData[adhocFilterFieldName] = [\n    ...ensureIsArray(acc[adhocFilterFieldName]),\n    ...ensureIsArray(config.filters).map((filter) => simpleFilterToAdhoc(filter))];\n\n    acc.overridenAdhocFilterFields.add(adhocFilterFieldName);\n    return acc;\n  }, {\n    formData: {},\n    overridenGroupbyFields: new Set(),\n    overridenAdhocFilterFields: new Set()\n  }), [getNewGroupby]);\n  const getFiltersFromConfigsByFieldName = useCallback(() => drillByConfigs.reduce((acc, config) => {\n    const adhocFilterFieldName = config.adhocFilterFieldName || DEFAULT_ADHOC_FILTER_FIELD_NAME;\n    acc[adhocFilterFieldName] = [\n    ...(acc[adhocFilterFieldName] || []),\n    ...config.filters.map((filter) => simpleFilterToAdhoc(filter))];\n\n    return acc;\n  }, {}), [drillByConfigs]);\n  const onBreadcrumbClick = useCallback((breadcrumb, index) => {\n    dispatch(logEvent(LOG_ACTIONS_DRILL_BY_BREADCRUMB_CLICKED, {\n      slice_id: formData.slice_id\n    }));\n    setDrillByConfigs((prevConfigs) => prevConfigs.slice(0, index));\n    setBreadcrumbsData((prevBreadcrumbs) => {\n      const newBreadcrumbs = prevBreadcrumbs.slice(0, index + 1);\n      delete newBreadcrumbs[newBreadcrumbs.length - 1].filters;\n      return newBreadcrumbs;\n    });\n    setUsedGroupbyColumns((prevUsedGroupbyColumns) => prevUsedGroupbyColumns.slice(0, index));\n    setCurrentFormData(() => {\n      if (index === 0) {\n        return formData;\n      }\n      const { formData: overrideFormData, overridenAdhocFilterFields } = getFormDataChangesFromConfigs(drillByConfigs.slice(0, index));\n      const newFormData = {\n        ...formData,\n        ...overrideFormData\n      };\n      overridenAdhocFilterFields.forEach((adhocFilterField) => ({\n        ...newFormData,\n        [adhocFilterField]: [\n        ...formData[adhocFilterField],\n        ...overrideFormData[adhocFilterField]]\n\n      }));\n      return newFormData;\n    });\n  }, [dispatch, drillByConfigs, formData, getFormDataChangesFromConfigs]);\n  const breadcrumbs = useDrillByBreadcrumbs(breadcrumbsData, onBreadcrumbClick);\n  const drilledFormData = useMemo(() => {\n    let updatedFormData = { ...currentFormData };\n    if (currentColumn && groupbyFieldName) {\n      updatedFormData[groupbyFieldName] = getNewGroupby(currentColumn);\n    }\n    const adhocFilters = getFiltersFromConfigsByFieldName();\n    Object.keys(adhocFilters).forEach((adhocFilterFieldName) => {\n      updatedFormData = {\n        ...updatedFormData,\n        [adhocFilterFieldName]: [\n        ...ensureIsArray(formData[adhocFilterFieldName]),\n        ...adhocFilters[adhocFilterFieldName]]\n\n      };\n    });\n    updatedFormData.slice_id = 0;\n    delete updatedFormData.slice_name;\n    delete updatedFormData.dashboards;\n    return updatedFormData;\n  }, [\n  currentFormData,\n  currentColumn,\n  groupbyFieldName,\n  getFiltersFromConfigsByFieldName,\n  getNewGroupby,\n  formData]\n  );\n  useEffect(() => {\n    setUsedGroupbyColumns((usedCols) => !currentColumn ||\n    usedCols.some((usedCol) => usedCol.column_name === currentColumn.column_name) ?\n    usedCols :\n    [...usedCols, currentColumn]);\n  }, [currentColumn]);\n  const onSelection = useCallback((newColumn, drillByConfig) => {\n    dispatch(logEvent(LOG_ACTIONS_FURTHER_DRILL_BY, {\n      drill_depth: drillByConfigs.length + 1,\n      slice_id: formData.slice_id\n    }));\n    setCurrentFormData(drilledFormData);\n    setDrillByConfigs((prevConfigs) => [\n    ...prevConfigs,\n    { ...drillByConfig, column: newColumn }]\n    );\n    setBreadcrumbsData((prevBreadcrumbs) => {\n      const newBreadcrumbs = [...prevBreadcrumbs, { groupby: newColumn }];\n      newBreadcrumbs[newBreadcrumbs.length - 2].filters =\n      drillByConfig.filters;\n      return newBreadcrumbs;\n    });\n  }, [dispatch, drillByConfigs.length, drilledFormData, formData.slice_id]);\n  const additionalConfig = useMemo(() => ({\n    drillBy: { excludedColumns: usedGroupbyColumns, openNewModal: false }\n  }), [usedGroupbyColumns]);\n  const { contextMenu, inContextMenu, onContextMenu } = useContextMenu(0, currentFormData, onSelection, ContextMenuItem.DrillBy, additionalConfig);\n  const chartName = useSelector((state) => {\n    const chartLayoutItem = Object.values(state.dashboardLayout.present).find((layoutItem) => {var _layoutItem$meta;return ((_layoutItem$meta = layoutItem.meta) == null ? void 0 : _layoutItem$meta.chartId) === formData.slice_id;});\n    return (chartLayoutItem == null ? void 0 : chartLayoutItem.meta.sliceNameOverride) || (chartLayoutItem == null ? void 0 : chartLayoutItem.meta.sliceName);\n  });\n  useEffect(() => {\n    if (drilledFormData) {\n      const [useLegacyApi] = getQuerySettings(drilledFormData);\n      setIsChartDataLoading(true);\n      setChartDataResult(undefined);\n      getChartDataRequest({\n        formData: drilledFormData\n      }).\n      then(({ response, json }) => handleChartDataResponse(response, json, useLegacyApi)).\n      then((queriesResponse) => {\n        setChartDataResult(queriesResponse);\n      }).\n      catch(() => {\n        addDangerToast(t('Failed to load chart data.'));\n      }).\n      finally(() => {\n        setIsChartDataLoading(false);\n      });\n    }\n  }, [addDangerToast, drilledFormData]);\n  const { metadataBar } = useDatasetMetadataBar({ dataset });\n  return ___EmotionJSX(Modal, { css: css`\n        .ant-modal-footer {\n          border-top: none;\n        }\n      `, show: true, onHide: onHideModal != null ? onHideModal : () => null, title: t('Drill by: %s', chartName), footer: ___EmotionJSX(ModalFooter, { formData: drilledFormData }), responsive: true, resizable: true, resizableConfig: {\n      minHeight: theme.gridUnit * 128,\n      minWidth: theme.gridUnit * 128,\n      defaultSize: {\n        width: 'auto',\n        height: '80vh'\n      }\n    }, draggable: true, destroyOnClose: true, maskClosable: false },\n  ___EmotionJSX(\"div\", { css: css`\n          display: flex;\n          flex-direction: column;\n          height: 100%;\n        ` },\n  metadataBar,\n  breadcrumbs,\n  displayModeToggle,\n  isChartDataLoading && ___EmotionJSX(Loading, null),\n  !isChartDataLoading && !chartDataResult && ___EmotionJSX(Alert, { type: \"error\", message: t('There was an error loading the chart data') }),\n  drillByDisplayMode === DrillByType.Chart && chartDataResult && ___EmotionJSX(DrillByChart, { dataset: dataset, formData: drilledFormData, result: chartDataResult, onContextMenu: onContextMenu, inContextMenu: inContextMenu }),\n  drillByDisplayMode === DrillByType.Table &&\n  chartDataResult &&\n  resultsTable,\n  contextMenu\n  )\n  );\n}__signature__(DrillByModal, \"useDispatch{dispatch}\\nuseTheme{theme}\\nuseToasts{{ addDangerToast }}\\nuseState{[isChartDataLoading, setIsChartDataLoading](true)}\\nuseState{[drillByConfigs, setDrillByConfigs]([\\n        { ...drillByConfig, column },\\n    ])}\\nuseEffect{}\\nuseMemo{initialGroupbyColumns}\\nuseDisplayModeToggle{{ displayModeToggle, drillByDisplayMode }}\\nuseState{[chartDataResult, setChartDataResult]}\\nuseResultsTableView{resultsTable}\\nuseState{[currentFormData, setCurrentFormData](formData)}\\nuseState{[usedGroupbyColumns, setUsedGroupbyColumns]([...initialGroupbyColumns, column].filter(isDefined))}\\nuseState{[breadcrumbsData, setBreadcrumbsData]([\\n        { groupby: initialGroupbyColumns, filters: drillByConfig.filters },\\n        { groupby: column || [] },\\n    ])}\\nuseCallback{getNewGroupby}\\nuseCallback{getFormDataChangesFromConfigs}\\nuseCallback{getFiltersFromConfigsByFieldName}\\nuseCallback{onBreadcrumbClick}\\nuseDrillByBreadcrumbs{breadcrumbs}\\nuseMemo{drilledFormData}\\nuseEffect{}\\nuseCallback{onSelection}\\nuseMemo{additionalConfig}\\nuseContextMenu{{ contextMenu, inContextMenu, onContextMenu }}\\nuseSelector{chartName}\\nuseEffect{}\\nuseDatasetMetadataBar{{ metadataBar }}\", () => [useDispatch, useTheme, useToasts, useDisplayModeToggle, useResultsTableView, useDrillByBreadcrumbs, useContextMenu, useSelector, useDatasetMetadataBar]);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(DEFAULT_ADHOC_FILTER_FIELD_NAME, \"DEFAULT_ADHOC_FILTER_FIELD_NAME\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/DrillBy/DrillByModal.tsx\");reactHotLoader.register(ModalFooter, \"ModalFooter\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/DrillBy/DrillByModal.tsx\");reactHotLoader.register(DrillByModal, \"DrillByModal\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/DrillBy/DrillByModal.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["React","useCallback","useContext","useEffect","useMemo","useState","css","ensureIsArray","isDefined","t","useTheme","useDispatch","useSelector","Link","Modal","Loading","Button","DashboardPageIdContext","postFormData","simpleFilterToAdhoc","useDatasetMetadataBar","useToasts","Alert","logEvent","LOG_ACTIONS_DRILL_BY_BREADCRUMB_CLICKED","LOG_ACTIONS_DRILL_BY_EDIT_CHART","LOG_ACTIONS_DRILL_BY_MODAL_OPENED","LOG_ACTIONS_FURTHER_DRILL_BY","findPermission","getQuerySettings","DrillByType","DrillByChart","ContextMenuItem","useContextMenu","getChartDataRequest","handleChartDataResponse","useDisplayModeToggle","useDrillByBreadcrumbs","useResultsTableView","jsx","___EmotionJSX","DEFAULT_ADHOC_FILTER_FIELD_NAME","ModalFooter","formData","closeModal","dispatch","addDangerToast","theme","url","setUrl","dashboardPageId","onEditChartClick","slice_id","canExplore","state","_state$user","user","roles","datasource_id","datasource_type","datasource","split","Number","then","key","catch","isEditDisabled","Fragment","buttonStyle","buttonSize","onClick","disabled","tooltip","undefined","to","gridUnit","__signature__","DrillByModal","column","dataset","drillByConfig","onHideModal","isChartDataLoading","setIsChartDataLoading","drillByConfigs","setDrillByConfigs","currentColumn","groupbyFieldName","length","initialGroupbyColumns","map","colName","_dataset$columns","columns","find","col","column_name","filter","displayModeToggle","drillByDisplayMode","chartDataResult","setChartDataResult","resultsTable","currentFormData","setCurrentFormData","usedGroupbyColumns","setUsedGroupbyColumns","breadcrumbsData","setBreadcrumbsData","groupby","filters","getNewGroupby","groupbyCol","fieldName","Array","isArray","getFormDataChangesFromConfigs","configs","reduce","acc","config","overridenGroupbyFields","add","adhocFilterFieldName","overridenAdhocFilterFields","Set","getFiltersFromConfigsByFieldName","onBreadcrumbClick","breadcrumb","index","prevConfigs","slice","prevBreadcrumbs","newBreadcrumbs","prevUsedGroupbyColumns","overrideFormData","newFormData","forEach","adhocFilterField","breadcrumbs","drilledFormData","updatedFormData","adhocFilters","Object","keys","slice_name","dashboards","usedCols","some","usedCol","onSelection","newColumn","drill_depth","additionalConfig","drillBy","excludedColumns","openNewModal","contextMenu","inContextMenu","onContextMenu","DrillBy","chartName","chartLayoutItem","values","dashboardLayout","present","layoutItem","_layoutItem$meta","meta","chartId","sliceNameOverride","sliceName","useLegacyApi","response","json","queriesResponse","finally","metadataBar","show","onHide","title","footer","responsive","resizable","resizableConfig","minHeight","minWidth","defaultSize","width","height","draggable","destroyOnClose","maskClosable","type","message","Chart","result","Table","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Chart/DrillBy/DrillByModal.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport {\n  BaseFormData,\n  Column,\n  QueryData,\n  css,\n  ensureIsArray,\n  isDefined,\n  t,\n  useTheme,\n  ContextMenuFilters,\n} from '@superset-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport Modal from 'src/components/Modal';\nimport Loading from 'src/components/Loading';\nimport Button from 'src/components/Button';\nimport { RootState } from 'src/dashboard/types';\nimport { DashboardPageIdContext } from 'src/dashboard/containers/DashboardPage';\nimport { postFormData } from 'src/explore/exploreUtils/formData';\nimport { simpleFilterToAdhoc } from 'src/utils/simpleFilterToAdhoc';\nimport { useDatasetMetadataBar } from 'src/features/datasets/metadataBar/useDatasetMetadataBar';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\nimport Alert from 'src/components/Alert';\nimport { logEvent } from 'src/logger/actions';\nimport {\n  LOG_ACTIONS_DRILL_BY_BREADCRUMB_CLICKED,\n  LOG_ACTIONS_DRILL_BY_EDIT_CHART,\n  LOG_ACTIONS_DRILL_BY_MODAL_OPENED,\n  LOG_ACTIONS_FURTHER_DRILL_BY,\n} from 'src/logger/LogUtils';\nimport { findPermission } from 'src/utils/findPermission';\nimport { getQuerySettings } from 'src/explore/exploreUtils';\nimport { Dataset, DrillByType } from '../types';\nimport DrillByChart from './DrillByChart';\nimport { ContextMenuItem } from '../ChartContextMenu/ChartContextMenu';\nimport { useContextMenu } from '../ChartContextMenu/useContextMenu';\nimport { getChartDataRequest, handleChartDataResponse } from '../chartAction';\nimport { useDisplayModeToggle } from './useDisplayModeToggle';\nimport {\n  DrillByBreadcrumb,\n  useDrillByBreadcrumbs,\n} from './useDrillByBreadcrumbs';\nimport { useResultsTableView } from './useResultsTableView';\n\nconst DEFAULT_ADHOC_FILTER_FIELD_NAME = 'adhoc_filters';\ninterface ModalFooterProps {\n  closeModal?: () => void;\n  formData: BaseFormData;\n}\n\nconst ModalFooter = ({ formData, closeModal }: ModalFooterProps) => {\n  const dispatch = useDispatch();\n  const { addDangerToast } = useToasts();\n  const theme = useTheme();\n  const [url, setUrl] = useState('');\n  const dashboardPageId = useContext(DashboardPageIdContext);\n  const onEditChartClick = useCallback(() => {\n    dispatch(\n      logEvent(LOG_ACTIONS_DRILL_BY_EDIT_CHART, {\n        slice_id: formData.slice_id,\n      }),\n    );\n  }, [dispatch, formData.slice_id]);\n  const canExplore = useSelector((state: RootState) =>\n    findPermission('can_explore', 'Superset', state.user?.roles),\n  );\n\n  const [datasource_id, datasource_type] = formData.datasource.split('__');\n  useEffect(() => {\n    postFormData(Number(datasource_id), datasource_type, formData, 0)\n      .then(key => {\n        setUrl(\n          `/explore/?form_data_key=${key}&dashboard_page_id=${dashboardPageId}`,\n        );\n      })\n      .catch(() => {\n        addDangerToast(t('Failed to generate chart edit URL'));\n      });\n  }, [\n    addDangerToast,\n    dashboardPageId,\n    datasource_id,\n    datasource_type,\n    formData,\n  ]);\n  const isEditDisabled = !url || !canExplore;\n\n  return (\n    <>\n      <Button\n        buttonStyle=\"secondary\"\n        buttonSize=\"small\"\n        onClick={onEditChartClick}\n        disabled={isEditDisabled}\n        tooltip={\n          isEditDisabled\n            ? t('You do not have sufficient permissions to edit the chart')\n            : undefined\n        }\n      >\n        <Link\n          css={css`\n            &:hover {\n              text-decoration: none;\n            }\n          `}\n          to={url}\n        >\n          {t('Edit chart')}\n        </Link>\n      </Button>\n\n      <Button\n        buttonStyle=\"primary\"\n        buttonSize=\"small\"\n        onClick={closeModal}\n        data-test=\"close-drill-by-modal\"\n        css={css`\n          margin-left: ${theme.gridUnit * 2}px;\n        `}\n      >\n        {t('Close')}\n      </Button>\n    </>\n  );\n};\n\nexport interface DrillByModalProps {\n  column?: Column;\n  dataset: Dataset;\n  drillByConfig: Required<ContextMenuFilters>['drillBy'];\n  formData: BaseFormData & { [key: string]: any };\n  onHideModal: () => void;\n}\n\ntype DrillByConfigs = (ContextMenuFilters['drillBy'] & { column?: Column })[];\n\nexport default function DrillByModal({\n  column,\n  dataset,\n  drillByConfig,\n  formData,\n  onHideModal,\n}: DrillByModalProps) {\n  const dispatch = useDispatch();\n  const theme = useTheme();\n  const { addDangerToast } = useToasts();\n  const [isChartDataLoading, setIsChartDataLoading] = useState(true);\n\n  const [drillByConfigs, setDrillByConfigs] = useState<DrillByConfigs>([\n    { ...drillByConfig, column },\n  ]);\n\n  useEffect(() => {\n    dispatch(\n      logEvent(LOG_ACTIONS_DRILL_BY_MODAL_OPENED, {\n        slice_id: formData.slice_id,\n      }),\n    );\n  }, [dispatch, formData.slice_id]);\n\n  const {\n    column: currentColumn,\n    groupbyFieldName = drillByConfig.groupbyFieldName,\n  } = drillByConfigs[drillByConfigs.length - 1] || {};\n\n  const initialGroupbyColumns = useMemo(\n    () =>\n      ensureIsArray(formData[groupbyFieldName])\n        .map(\n          colName => dataset.columns?.find(col => col.column_name === colName),\n        )\n        .filter(isDefined),\n    [dataset.columns, formData, groupbyFieldName],\n  );\n\n  const { displayModeToggle, drillByDisplayMode } = useDisplayModeToggle();\n  const [chartDataResult, setChartDataResult] = useState<QueryData[]>();\n\n  const resultsTable = useResultsTableView(\n    chartDataResult,\n    formData.datasource,\n  );\n\n  const [currentFormData, setCurrentFormData] = useState(formData);\n  const [usedGroupbyColumns, setUsedGroupbyColumns] = useState<Column[]>(\n    [...initialGroupbyColumns, column].filter(isDefined),\n  );\n  const [breadcrumbsData, setBreadcrumbsData] = useState<DrillByBreadcrumb[]>([\n    { groupby: initialGroupbyColumns, filters: drillByConfig.filters },\n    { groupby: column || [] },\n  ]);\n\n  const getNewGroupby = useCallback(\n    (groupbyCol: Column, fieldName = groupbyFieldName) =>\n      Array.isArray(formData[fieldName])\n        ? [groupbyCol.column_name]\n        : groupbyCol.column_name,\n    [formData, groupbyFieldName],\n  );\n\n  const getFormDataChangesFromConfigs = useCallback(\n    (configs: DrillByConfigs) =>\n      configs.reduce(\n        (acc, config) => {\n          if (config?.groupbyFieldName && config.column) {\n            acc.formData[config.groupbyFieldName] = getNewGroupby(\n              config.column,\n              config.groupbyFieldName,\n            );\n            acc.overridenGroupbyFields.add(config.groupbyFieldName);\n          }\n          const adhocFilterFieldName =\n            config?.adhocFilterFieldName || DEFAULT_ADHOC_FILTER_FIELD_NAME;\n          acc.formData[adhocFilterFieldName] = [\n            ...ensureIsArray(acc[adhocFilterFieldName]),\n            ...ensureIsArray(config.filters).map(filter =>\n              simpleFilterToAdhoc(filter),\n            ),\n          ];\n          acc.overridenAdhocFilterFields.add(adhocFilterFieldName);\n\n          return acc;\n        },\n        {\n          formData: {},\n          overridenGroupbyFields: new Set<string>(),\n          overridenAdhocFilterFields: new Set<string>(),\n        },\n      ),\n    [getNewGroupby],\n  );\n\n  const getFiltersFromConfigsByFieldName = useCallback(\n    () =>\n      drillByConfigs.reduce((acc, config) => {\n        const adhocFilterFieldName =\n          config.adhocFilterFieldName || DEFAULT_ADHOC_FILTER_FIELD_NAME;\n        acc[adhocFilterFieldName] = [\n          ...(acc[adhocFilterFieldName] || []),\n          ...config.filters.map(filter => simpleFilterToAdhoc(filter)),\n        ];\n        return acc;\n      }, {}),\n    [drillByConfigs],\n  );\n\n  const onBreadcrumbClick = useCallback(\n    (breadcrumb: DrillByBreadcrumb, index: number) => {\n      dispatch(\n        logEvent(LOG_ACTIONS_DRILL_BY_BREADCRUMB_CLICKED, {\n          slice_id: formData.slice_id,\n        }),\n      );\n      setDrillByConfigs(prevConfigs => prevConfigs.slice(0, index));\n      setBreadcrumbsData(prevBreadcrumbs => {\n        const newBreadcrumbs = prevBreadcrumbs.slice(0, index + 1);\n        delete newBreadcrumbs[newBreadcrumbs.length - 1].filters;\n        return newBreadcrumbs;\n      });\n      setUsedGroupbyColumns(prevUsedGroupbyColumns =>\n        prevUsedGroupbyColumns.slice(0, index),\n      );\n      setCurrentFormData(() => {\n        if (index === 0) {\n          return formData;\n        }\n        const { formData: overrideFormData, overridenAdhocFilterFields } =\n          getFormDataChangesFromConfigs(drillByConfigs.slice(0, index));\n\n        const newFormData = {\n          ...formData,\n          ...overrideFormData,\n        };\n        overridenAdhocFilterFields.forEach(adhocFilterField => ({\n          ...newFormData,\n          [adhocFilterField]: [\n            ...formData[adhocFilterField],\n            ...overrideFormData[adhocFilterField],\n          ],\n        }));\n        return newFormData;\n      });\n    },\n    [dispatch, drillByConfigs, formData, getFormDataChangesFromConfigs],\n  );\n\n  const breadcrumbs = useDrillByBreadcrumbs(breadcrumbsData, onBreadcrumbClick);\n\n  const drilledFormData = useMemo(() => {\n    let updatedFormData = { ...currentFormData };\n    if (currentColumn && groupbyFieldName) {\n      updatedFormData[groupbyFieldName] = getNewGroupby(currentColumn);\n    }\n\n    const adhocFilters = getFiltersFromConfigsByFieldName();\n    Object.keys(adhocFilters).forEach(adhocFilterFieldName => {\n      updatedFormData = {\n        ...updatedFormData,\n        [adhocFilterFieldName]: [\n          ...ensureIsArray(formData[adhocFilterFieldName]),\n          ...adhocFilters[adhocFilterFieldName],\n        ],\n      };\n    });\n\n    updatedFormData.slice_id = 0;\n    delete updatedFormData.slice_name;\n    delete updatedFormData.dashboards;\n    return updatedFormData;\n  }, [\n    currentFormData,\n    currentColumn,\n    groupbyFieldName,\n    getFiltersFromConfigsByFieldName,\n    getNewGroupby,\n    formData,\n  ]);\n\n  useEffect(() => {\n    setUsedGroupbyColumns(usedCols =>\n      !currentColumn ||\n      usedCols.some(\n        usedCol => usedCol.column_name === currentColumn.column_name,\n      )\n        ? usedCols\n        : [...usedCols, currentColumn],\n    );\n  }, [currentColumn]);\n\n  const onSelection = useCallback(\n    (\n      newColumn: Column,\n      drillByConfig: Required<ContextMenuFilters>['drillBy'],\n    ) => {\n      dispatch(\n        logEvent(LOG_ACTIONS_FURTHER_DRILL_BY, {\n          drill_depth: drillByConfigs.length + 1,\n          slice_id: formData.slice_id,\n        }),\n      );\n      setCurrentFormData(drilledFormData);\n      setDrillByConfigs(prevConfigs => [\n        ...prevConfigs,\n        { ...drillByConfig, column: newColumn },\n      ]);\n      setBreadcrumbsData(prevBreadcrumbs => {\n        const newBreadcrumbs = [...prevBreadcrumbs, { groupby: newColumn }];\n        newBreadcrumbs[newBreadcrumbs.length - 2].filters =\n          drillByConfig.filters;\n        return newBreadcrumbs;\n      });\n    },\n    [dispatch, drillByConfigs.length, drilledFormData, formData.slice_id],\n  );\n\n  const additionalConfig = useMemo(\n    () => ({\n      drillBy: { excludedColumns: usedGroupbyColumns, openNewModal: false },\n    }),\n    [usedGroupbyColumns],\n  );\n\n  const { contextMenu, inContextMenu, onContextMenu } = useContextMenu(\n    0,\n    currentFormData,\n    onSelection,\n    ContextMenuItem.DrillBy,\n    additionalConfig,\n  );\n\n  const chartName = useSelector<RootState, string | undefined>(state => {\n    const chartLayoutItem = Object.values(state.dashboardLayout.present).find(\n      layoutItem => layoutItem.meta?.chartId === formData.slice_id,\n    );\n    return (\n      chartLayoutItem?.meta.sliceNameOverride || chartLayoutItem?.meta.sliceName\n    );\n  });\n\n  useEffect(() => {\n    if (drilledFormData) {\n      const [useLegacyApi] = getQuerySettings(drilledFormData);\n      setIsChartDataLoading(true);\n      setChartDataResult(undefined);\n      getChartDataRequest({\n        formData: drilledFormData,\n      })\n        .then(({ response, json }) =>\n          handleChartDataResponse(response, json, useLegacyApi),\n        )\n        .then(queriesResponse => {\n          setChartDataResult(queriesResponse);\n        })\n        .catch(() => {\n          addDangerToast(t('Failed to load chart data.'));\n        })\n        .finally(() => {\n          setIsChartDataLoading(false);\n        });\n    }\n  }, [addDangerToast, drilledFormData]);\n  const { metadataBar } = useDatasetMetadataBar({ dataset });\n\n  return (\n    <Modal\n      css={css`\n        .ant-modal-footer {\n          border-top: none;\n        }\n      `}\n      show\n      onHide={onHideModal ?? (() => null)}\n      title={t('Drill by: %s', chartName)}\n      footer={<ModalFooter formData={drilledFormData} />}\n      responsive\n      resizable\n      resizableConfig={{\n        minHeight: theme.gridUnit * 128,\n        minWidth: theme.gridUnit * 128,\n        defaultSize: {\n          width: 'auto',\n          height: '80vh',\n        },\n      }}\n      draggable\n      destroyOnClose\n      maskClosable={false}\n    >\n      <div\n        css={css`\n          display: flex;\n          flex-direction: column;\n          height: 100%;\n        `}\n      >\n        {metadataBar}\n        {breadcrumbs}\n        {displayModeToggle}\n        {isChartDataLoading && <Loading />}\n        {!isChartDataLoading && !chartDataResult && (\n          <Alert\n            type=\"error\"\n            message={t('There was an error loading the chart data')}\n          />\n        )}\n        {drillByDisplayMode === DrillByType.Chart && chartDataResult && (\n          <DrillByChart\n            dataset={dataset}\n            formData={drilledFormData}\n            result={chartDataResult}\n            onContextMenu={onContextMenu}\n            inContextMenu={inContextMenu}\n          />\n        )}\n        {drillByDisplayMode === DrillByType.Table &&\n          chartDataResult &&\n          resultsTable}\n        {contextMenu}\n      </div>\n    </Modal>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}