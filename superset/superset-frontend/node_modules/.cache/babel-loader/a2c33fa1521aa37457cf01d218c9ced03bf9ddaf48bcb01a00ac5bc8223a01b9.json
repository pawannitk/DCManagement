{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport PropTypes from 'prop-types';\nimport { t } from '@superset-ui/core';\n\nconst addSeparators = function (nStr, thousandsSep, decimalSep) {\n  const x = String(nStr).split('.');\n  let x1 = x[0];\n  const x2 = x.length > 1 ? decimalSep + x[1] : '';\n  const rgx = /(\\d+)(\\d{3})/;\n  while (rgx.test(x1)) {\n    x1 = x1.replace(rgx, `$1${thousandsSep}$2`);\n  }\n  return x1 + x2;\n};\n\nconst numberFormat = function (optsIn) {\n  const defaults = {\n    digitsAfterDecimal: 2,\n    scaler: 1,\n    thousandsSep: ',',\n    decimalSep: '.',\n    prefix: '',\n    suffix: ''\n  };\n  const opts = { ...defaults, ...optsIn };\n  return function (x) {\n    if (Number.isNaN(x) || !Number.isFinite(x)) {\n      return '';\n    }\n    const result = addSeparators(\n      (opts.scaler * x).toFixed(opts.digitsAfterDecimal),\n      opts.thousandsSep,\n      opts.decimalSep\n    );\n    return `${opts.prefix}${result}${opts.suffix}`;\n  };\n};\n\nconst rx = /(\\d+)|(\\D+)/g;\nconst rd = /\\d/;\nconst rz = /^0/;\nconst naturalSort = (as, bs) => {\n  // nulls first\n  if (bs !== null && as === null) {\n    return -1;\n  }\n  if (as !== null && bs === null) {\n    return 1;\n  }\n\n  // then raw NaNs\n  if (typeof as === 'number' && Number.isNaN(as)) {\n    return -1;\n  }\n  if (typeof bs === 'number' && Number.isNaN(bs)) {\n    return 1;\n  }\n\n  // numbers and numbery strings group together\n  const nas = Number(as);\n  const nbs = Number(bs);\n  if (nas < nbs) {\n    return -1;\n  }\n  if (nas > nbs) {\n    return 1;\n  }\n\n  // within that, true numbers before numbery strings\n  if (typeof as === 'number' && typeof bs !== 'number') {\n    return -1;\n  }\n  if (typeof bs === 'number' && typeof as !== 'number') {\n    return 1;\n  }\n  if (typeof as === 'number' && typeof bs === 'number') {\n    return 0;\n  }\n\n  // 'Infinity' is a textual number, so less than 'A'\n  if (Number.isNaN(nbs) && !Number.isNaN(nas)) {\n    return -1;\n  }\n  if (Number.isNaN(nas) && !Number.isNaN(nbs)) {\n    return 1;\n  }\n\n  // finally, \"smart\" string sorting per http://stackoverflow.com/a/4373421/112871\n  let a = String(as);\n  let b = String(bs);\n  if (a === b) {\n    return 0;\n  }\n  if (!rd.test(a) || !rd.test(b)) {\n    return a > b ? 1 : -1;\n  }\n\n  // special treatment for strings containing digits\n  a = a.match(rx);\n  b = b.match(rx);\n  while (a.length && b.length) {\n    const a1 = a.shift();\n    const b1 = b.shift();\n    if (a1 !== b1) {\n      if (rd.test(a1) && rd.test(b1)) {\n        return a1.replace(rz, '.0') - b1.replace(rz, '.0');\n      }\n      return a1 > b1 ? 1 : -1;\n    }\n  }\n  return a.length - b.length;\n};\n\nconst sortAs = function (order) {\n  const mapping = {};\n\n  // sort lowercased keys similarly\n  const lMapping = {};\n  order.forEach((element, i) => {\n    mapping[element] = i;\n    if (typeof element === 'string') {\n      lMapping[element.toLowerCase()] = i;\n    }\n  });\n  return function (a, b) {\n    if (a in mapping && b in mapping) {\n      return mapping[a] - mapping[b];\n    }\n    if (a in mapping) {\n      return -1;\n    }\n    if (b in mapping) {\n      return 1;\n    }\n    if (a in lMapping && b in lMapping) {\n      return lMapping[a] - lMapping[b];\n    }\n    if (a in lMapping) {\n      return -1;\n    }\n    if (b in lMapping) {\n      return 1;\n    }\n    return naturalSort(a, b);\n  };\n};\n\nconst getSort = function (sorters, attr) {\n  if (sorters) {\n    if (typeof sorters === 'function') {\n      const sort = sorters(attr);\n      if (typeof sort === 'function') {\n        return sort;\n      }\n    } else if (attr in sorters) {\n      return sorters[attr];\n    }\n  }\n  return naturalSort;\n};\n\n// aggregator templates default to US number formatting but this is overridable\nconst usFmt = numberFormat();\nconst usFmtInt = numberFormat({ digitsAfterDecimal: 0 });\nconst usFmtPct = numberFormat({\n  digitsAfterDecimal: 1,\n  scaler: 100,\n  suffix: '%'\n});\n\nconst fmtNonString = (formatter) => (x) =>\ntypeof x === 'string' ? x : formatter(x);\n\nconst baseAggregatorTemplates = {\n  count(formatter = usFmtInt) {\n    return () =>\n    function () {\n      return {\n        count: 0,\n        push() {\n          this.count += 1;\n        },\n        value() {\n          return this.count;\n        },\n        format: formatter\n      };\n    };\n  },\n\n  uniques(fn, formatter = usFmtInt) {\n    return function ([attr]) {\n      return function () {\n        return {\n          uniq: [],\n          push(record) {\n            if (!Array.from(this.uniq).includes(record[attr])) {\n              this.uniq.push(record[attr]);\n            }\n          },\n          value() {\n            return fn(this.uniq);\n          },\n          format: fmtNonString(formatter),\n          numInputs: typeof attr !== 'undefined' ? 0 : 1\n        };\n      };\n    };\n  },\n\n  sum(formatter = usFmt) {\n    return function ([attr]) {\n      return function () {\n        return {\n          sum: 0,\n          push(record) {\n            if (Number.isNaN(Number(record[attr]))) {\n              this.sum = record[attr];\n            } else {\n              this.sum += parseFloat(record[attr]);\n            }\n          },\n          value() {\n            return this.sum;\n          },\n          format: fmtNonString(formatter),\n          numInputs: typeof attr !== 'undefined' ? 0 : 1\n        };\n      };\n    };\n  },\n\n  extremes(mode, formatter = usFmt) {\n    return function ([attr]) {\n      return function (data) {\n        return {\n          val: null,\n          sorter: getSort(\n            typeof data !== 'undefined' ? data.sorters : null,\n            attr\n          ),\n          push(record) {\n            const x = record[attr];\n            if (['min', 'max'].includes(mode)) {\n              const coercedValue = Number(x);\n              if (Number.isNaN(coercedValue)) {\n                this.val =\n                !this.val ||\n                mode === 'min' && x < this.val ||\n                mode === 'max' && x > this.val ?\n                x :\n                this.val;\n              } else {\n                this.val = Math[mode](\n                  coercedValue,\n                  this.val !== null ? this.val : coercedValue\n                );\n              }\n            } else if (\n            mode === 'first' &&\n            this.sorter(x, this.val !== null ? this.val : x) <= 0)\n            {\n              this.val = x;\n            } else if (\n            mode === 'last' &&\n            this.sorter(x, this.val !== null ? this.val : x) >= 0)\n            {\n              this.val = x;\n            }\n          },\n          value() {\n            return this.val;\n          },\n          format(x) {\n            if (typeof x === 'number') {\n              return formatter(x);\n            }\n            return x;\n          },\n          numInputs: typeof attr !== 'undefined' ? 0 : 1\n        };\n      };\n    };\n  },\n\n  quantile(q, formatter = usFmt) {\n    return function ([attr]) {\n      return function () {\n        return {\n          vals: [],\n          strMap: {},\n          push(record) {\n            const val = record[attr];\n            const x = Number(val);\n\n            if (Number.isNaN(x)) {\n              this.strMap[val] = (this.strMap[val] || 0) + 1;\n            } else {\n              this.vals.push(x);\n            }\n          },\n          value() {\n            if (\n            this.vals.length === 0 &&\n            Object.keys(this.strMap).length === 0)\n            {\n              return null;\n            }\n\n            if (Object.keys(this.strMap).length) {\n              const values = Object.values(this.strMap).sort((a, b) => a - b);\n              const middle = Math.floor(values.length / 2);\n\n              const keys = Object.keys(this.strMap);\n              return keys.length % 2 !== 0 ?\n              keys[middle] :\n              (keys[middle - 1] + keys[middle]) / 2;\n            }\n\n            this.vals.sort((a, b) => a - b);\n            const i = (this.vals.length - 1) * q;\n            return (this.vals[Math.floor(i)] + this.vals[Math.ceil(i)]) / 2.0;\n          },\n          format: fmtNonString(formatter),\n          numInputs: typeof attr !== 'undefined' ? 0 : 1\n        };\n      };\n    };\n  },\n\n  runningStat(mode = 'mean', ddof = 1, formatter = usFmt) {\n    return function ([attr]) {\n      return function () {\n        return {\n          n: 0.0,\n          m: 0.0,\n          s: 0.0,\n          strValue: null,\n          push(record) {\n            const x = Number(record[attr]);\n            if (Number.isNaN(x)) {\n              this.strValue =\n              typeof record[attr] === 'string' ? record[attr] : this.strValue;\n              return;\n            }\n            this.n += 1.0;\n            if (this.n === 1.0) {\n              this.m = x;\n            }\n            const mNew = this.m + (x - this.m) / this.n;\n            this.s += (x - this.m) * (x - mNew);\n            this.m = mNew;\n          },\n          value() {\n            if (this.strValue) {\n              return this.strValue;\n            }\n\n            if (mode === 'mean') {\n              if (this.n === 0) {\n                return 0 / 0;\n              }\n              return this.m;\n            }\n            if (this.n <= ddof) {\n              return 0;\n            }\n            switch (mode) {\n              case 'var':\n                return this.s / (this.n - ddof);\n              case 'stdev':\n                return Math.sqrt(this.s / (this.n - ddof));\n              default:\n                throw new Error('unknown mode for runningStat');\n            }\n          },\n          format: fmtNonString(formatter),\n          numInputs: typeof attr !== 'undefined' ? 0 : 1\n        };\n      };\n    };\n  },\n\n  sumOverSum(formatter = usFmt) {\n    return function ([num, denom]) {\n      return function () {\n        return {\n          sumNum: 0,\n          sumDenom: 0,\n          push(record) {\n            if (!Number.isNaN(Number(record[num]))) {\n              this.sumNum += parseFloat(record[num]);\n            }\n            if (!Number.isNaN(Number(record[denom]))) {\n              this.sumDenom += parseFloat(record[denom]);\n            }\n          },\n          value() {\n            return this.sumNum / this.sumDenom;\n          },\n          format: formatter,\n          numInputs:\n          typeof num !== 'undefined' && typeof denom !== 'undefined' ? 0 : 2\n        };\n      };\n    };\n  },\n\n  fractionOf(wrapped, type = 'total', formatter = usFmtPct) {\n    return (...x) =>\n    function (data, rowKey, colKey) {\n      return {\n        selector: { total: [[], []], row: [rowKey, []], col: [[], colKey] }[\n        type],\n\n        inner: wrapped(...Array.from(x || []))(data, rowKey, colKey),\n        push(record) {\n          this.inner.push(record);\n        },\n        format: fmtNonString(formatter),\n        value() {\n          const acc = data.\n          getAggregator(...Array.from(this.selector || [])).\n          inner.value();\n\n          if (typeof acc === 'string') {\n            return acc;\n          }\n\n          return this.inner.value() / acc;\n        },\n        numInputs: wrapped(...Array.from(x || []))().numInputs\n      };\n    };\n  }\n};\n\nconst extendedAggregatorTemplates = {\n  countUnique(f) {\n    return baseAggregatorTemplates.uniques((x) => x.length, f);\n  },\n  listUnique(s, f) {\n    return baseAggregatorTemplates.uniques((x) => x.join(s), f || ((x) => x));\n  },\n  max(f) {\n    return baseAggregatorTemplates.extremes('max', f);\n  },\n  min(f) {\n    return baseAggregatorTemplates.extremes('min', f);\n  },\n  first(f) {\n    return baseAggregatorTemplates.extremes('first', f);\n  },\n  last(f) {\n    return baseAggregatorTemplates.extremes('last', f);\n  },\n  median(f) {\n    return baseAggregatorTemplates.quantile(0.5, f);\n  },\n  average(f) {\n    return baseAggregatorTemplates.runningStat('mean', 1, f);\n  },\n  var(ddof, f) {\n    return baseAggregatorTemplates.runningStat('var', ddof, f);\n  },\n  stdev(ddof, f) {\n    return baseAggregatorTemplates.runningStat('stdev', ddof, f);\n  }\n};\n\nconst aggregatorTemplates = {\n  ...baseAggregatorTemplates,\n  ...extendedAggregatorTemplates\n};\n\n// default aggregators & renderers use US naming and number formatting\nconst aggregators = ((tpl) => ({\n  Count: tpl.count(usFmtInt),\n  'Count Unique Values': tpl.countUnique(usFmtInt),\n  'List Unique Values': tpl.listUnique(', '),\n  Sum: tpl.sum(usFmt),\n  'Integer Sum': tpl.sum(usFmtInt),\n  Average: tpl.average(usFmt),\n  Median: tpl.median(usFmt),\n  'Sample Variance': tpl.var(1, usFmt),\n  'Sample Standard Deviation': tpl.stdev(1, usFmt),\n  Minimum: tpl.min(usFmt),\n  Maximum: tpl.max(usFmt),\n  First: tpl.first(usFmt),\n  Last: tpl.last(usFmt),\n  'Sum over Sum': tpl.sumOverSum(usFmt),\n  'Sum as Fraction of Total': tpl.fractionOf(tpl.sum(), 'total', usFmtPct),\n  'Sum as Fraction of Rows': tpl.fractionOf(tpl.sum(), 'row', usFmtPct),\n  'Sum as Fraction of Columns': tpl.fractionOf(tpl.sum(), 'col', usFmtPct),\n  'Count as Fraction of Total': tpl.fractionOf(tpl.count(), 'total', usFmtPct),\n  'Count as Fraction of Rows': tpl.fractionOf(tpl.count(), 'row', usFmtPct),\n  'Count as Fraction of Columns': tpl.fractionOf(tpl.count(), 'col', usFmtPct)\n}))(aggregatorTemplates);\n\nconst locales = {\n  en: {\n    aggregators,\n    localeStrings: {\n      renderError: 'An error occurred rendering the PivotTable results.',\n      computeError: 'An error occurred computing the PivotTable results.',\n      uiRenderError: 'An error occurred rendering the PivotTable UI.',\n      selectAll: 'Select All',\n      selectNone: 'Select None',\n      tooMany: '(too many to list)',\n      filterResults: 'Filter values',\n      apply: 'Apply',\n      cancel: 'Cancel',\n      totals: 'Totals',\n      vs: 'vs',\n      by: 'by'\n    }\n  }\n};\n\n// dateFormat deriver l10n requires month and day names to be passed in directly\nconst mthNamesEn = [\n'Jan',\n'Feb',\n'Mar',\n'Apr',\n'May',\n'Jun',\n'Jul',\n'Aug',\n'Sep',\n'Oct',\n'Nov',\n'Dec'];\n\nconst dayNamesEn = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\nconst zeroPad = (number) => `0${number}`.substr(-2, 2); // eslint-disable-line no-magic-numbers\n\nconst derivers = {\n  bin(col, binWidth) {\n    return (record) => record[col] - record[col] % binWidth;\n  },\n  dateFormat(\n  col,\n  formatString,\n  utcOutput = false,\n  mthNames = mthNamesEn,\n  dayNames = dayNamesEn)\n  {\n    const utc = utcOutput ? 'UTC' : '';\n    return function (record) {\n      const date = new Date(Date.parse(record[col]));\n      if (Number.isNaN(date)) {\n        return '';\n      }\n      return formatString.replace(/%(.)/g, function (m, p) {\n        switch (p) {\n          case 'y':\n            return date[`get${utc}FullYear`]();\n          case 'm':\n            return zeroPad(date[`get${utc}Month`]() + 1);\n          case 'n':\n            return mthNames[date[`get${utc}Month`]()];\n          case 'd':\n            return zeroPad(date[`get${utc}Date`]());\n          case 'w':\n            return dayNames[date[`get${utc}Day`]()];\n          case 'x':\n            return date[`get${utc}Day`]();\n          case 'H':\n            return zeroPad(date[`get${utc}Hours`]());\n          case 'M':\n            return zeroPad(date[`get${utc}Minutes`]());\n          case 'S':\n            return zeroPad(date[`get${utc}Seconds`]());\n          default:\n            return `%${p}`;\n        }\n      });\n    };\n  }\n};\n\n// Given an array of attribute values, convert to a key that\n// can be used in objects.\nconst flatKey = (attrVals) => attrVals.join(String.fromCharCode(0));\n\n/*\nData Model class\n*/\n\nclass PivotData {\n  constructor(inputProps = {}, subtotals = {}) {\n    this.props = { ...PivotData.defaultProps, ...inputProps };\n    this.processRecord = this.processRecord.bind(this);\n    PropTypes.checkPropTypes(\n      PivotData.propTypes,\n      this.props,\n      'prop',\n      'PivotData'\n    );\n\n    this.aggregator = this.props.\n    aggregatorsFactory(this.props.defaultFormatter)[\n    this.props.aggregatorName](this.props.vals);\n    this.formattedAggregators =\n    this.props.customFormatters &&\n    Object.entries(this.props.customFormatters).reduce(\n      (acc, [key, columnFormatter]) => {\n        acc[key] = {};\n        Object.entries(columnFormatter).forEach(([column, formatter]) => {\n          acc[key][column] = this.props.\n          aggregatorsFactory(formatter)[\n          this.props.aggregatorName](this.props.vals);\n        });\n        return acc;\n      },\n      {}\n    );\n    this.tree = {};\n    this.rowKeys = [];\n    this.colKeys = [];\n    this.rowTotals = {};\n    this.colTotals = {};\n    this.allTotal = this.aggregator(this, [], []);\n    this.subtotals = subtotals;\n    this.sorted = false;\n\n    // iterate through input, accumulating data for cells\n    PivotData.forEachRecord(this.props.data, this.processRecord);\n  }\n\n  getFormattedAggregator(record, totalsKeys) {\n    if (!this.formattedAggregators) {\n      return this.aggregator;\n    }\n    const [groupName, groupValue] =\n    Object.entries(record).find(\n      ([name, value]) =>\n      this.formattedAggregators[name] &&\n      this.formattedAggregators[name][value]\n    ) || [];\n    if (\n    !groupName ||\n    !groupValue ||\n    totalsKeys && !totalsKeys.includes(groupValue))\n    {\n      return this.aggregator;\n    }\n    return this.formattedAggregators[groupName][groupValue] || this.aggregator;\n  }\n\n  arrSort(attrs, partialOnTop, reverse = false) {\n    const sortersArr = attrs.map((a) => getSort(this.props.sorters, a));\n    return function (a, b) {\n      const limit = Math.min(a.length, b.length);\n      for (let i = 0; i < limit; i += 1) {\n        const sorter = sortersArr[i];\n        const comparison = reverse ? sorter(b[i], a[i]) : sorter(a[i], b[i]);\n        if (comparison !== 0) {\n          return comparison;\n        }\n      }\n      return partialOnTop ? a.length - b.length : b.length - a.length;\n    };\n  }\n\n  sortKeys() {\n    if (!this.sorted) {\n      this.sorted = true;\n      const v = (r, c) => this.getAggregator(r, c).value();\n      switch (this.props.rowOrder) {\n        case 'key_z_to_a':\n          this.rowKeys.sort(\n            this.arrSort(this.props.rows, this.subtotals.rowPartialOnTop, true)\n          );\n          break;\n        case 'value_a_to_z':\n          this.rowKeys.sort((a, b) => naturalSort(v(a, []), v(b, [])));\n          break;\n        case 'value_z_to_a':\n          this.rowKeys.sort((a, b) => -naturalSort(v(a, []), v(b, [])));\n          break;\n        default:\n          this.rowKeys.sort(\n            this.arrSort(this.props.rows, this.subtotals.rowPartialOnTop)\n          );\n      }\n      switch (this.props.colOrder) {\n        case 'key_z_to_a':\n          this.colKeys.sort(\n            this.arrSort(this.props.cols, this.subtotals.colPartialOnTop, true)\n          );\n          break;\n        case 'value_a_to_z':\n          this.colKeys.sort((a, b) => naturalSort(v([], a), v([], b)));\n          break;\n        case 'value_z_to_a':\n          this.colKeys.sort((a, b) => -naturalSort(v([], a), v([], b)));\n          break;\n        default:\n          this.colKeys.sort(\n            this.arrSort(this.props.cols, this.subtotals.colPartialOnTop)\n          );\n      }\n    }\n  }\n\n  getColKeys() {\n    this.sortKeys();\n    return this.colKeys;\n  }\n\n  getRowKeys() {\n    this.sortKeys();\n    return this.rowKeys;\n  }\n\n  processRecord(record) {\n    // this code is called in a tight loop\n    const colKey = [];\n    const rowKey = [];\n    this.props.cols.forEach((col) => {\n      colKey.push(col in record ? record[col] : 'null');\n    });\n    this.props.rows.forEach((row) => {\n      rowKey.push(row in record ? record[row] : 'null');\n    });\n\n    this.allTotal.push(record);\n\n    const rowStart = this.subtotals.rowEnabled ? 1 : Math.max(1, rowKey.length);\n    const colStart = this.subtotals.colEnabled ? 1 : Math.max(1, colKey.length);\n\n    let isRowSubtotal;\n    let isColSubtotal;\n    for (let ri = rowStart; ri <= rowKey.length; ri += 1) {\n      isRowSubtotal = ri < rowKey.length;\n      const fRowKey = rowKey.slice(0, ri);\n      const flatRowKey = flatKey(fRowKey);\n      if (!this.rowTotals[flatRowKey]) {\n        this.rowKeys.push(fRowKey);\n        this.rowTotals[flatRowKey] = this.getFormattedAggregator(\n          record,\n          rowKey\n        )(this, fRowKey, []);\n      }\n      this.rowTotals[flatRowKey].push(record);\n      this.rowTotals[flatRowKey].isSubtotal = isRowSubtotal;\n    }\n\n    for (let ci = colStart; ci <= colKey.length; ci += 1) {\n      isColSubtotal = ci < colKey.length;\n      const fColKey = colKey.slice(0, ci);\n      const flatColKey = flatKey(fColKey);\n      if (!this.colTotals[flatColKey]) {\n        this.colKeys.push(fColKey);\n        this.colTotals[flatColKey] = this.getFormattedAggregator(\n          record,\n          colKey\n        )(this, [], fColKey);\n      }\n      this.colTotals[flatColKey].push(record);\n      this.colTotals[flatColKey].isSubtotal = isColSubtotal;\n    }\n\n    // And now fill in for all the sub-cells.\n    for (let ri = rowStart; ri <= rowKey.length; ri += 1) {\n      isRowSubtotal = ri < rowKey.length;\n      const fRowKey = rowKey.slice(0, ri);\n      const flatRowKey = flatKey(fRowKey);\n      if (!this.tree[flatRowKey]) {\n        this.tree[flatRowKey] = {};\n      }\n      for (let ci = colStart; ci <= colKey.length; ci += 1) {\n        isColSubtotal = ci < colKey.length;\n        const fColKey = colKey.slice(0, ci);\n        const flatColKey = flatKey(fColKey);\n        if (!this.tree[flatRowKey][flatColKey]) {\n          this.tree[flatRowKey][flatColKey] = this.getFormattedAggregator(\n            record\n          )(this, fRowKey, fColKey);\n        }\n        this.tree[flatRowKey][flatColKey].push(record);\n\n        this.tree[flatRowKey][flatColKey].isRowSubtotal = isRowSubtotal;\n        this.tree[flatRowKey][flatColKey].isColSubtotal = isColSubtotal;\n        this.tree[flatRowKey][flatColKey].isSubtotal =\n        isRowSubtotal || isColSubtotal;\n      }\n    }\n  }\n\n  getAggregator(rowKey, colKey) {\n    let agg;\n    const flatRowKey = flatKey(rowKey);\n    const flatColKey = flatKey(colKey);\n    if (rowKey.length === 0 && colKey.length === 0) {\n      agg = this.allTotal;\n    } else if (rowKey.length === 0) {\n      agg = this.colTotals[flatColKey];\n    } else if (colKey.length === 0) {\n      agg = this.rowTotals[flatRowKey];\n    } else {\n      agg = this.tree[flatRowKey][flatColKey];\n    }\n    return (\n      agg || {\n        value() {\n          return null;\n        },\n        format() {\n          return '';\n        }\n      });\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\n// can handle arrays or jQuery selections of tables\nPivotData.forEachRecord = function (input, processRecord) {\n  if (Array.isArray(input)) {\n    // array of objects\n    return input.map((record) => processRecord(record));\n  }\n  throw new Error(t('Unknown input format'));\n};\n\nPivotData.defaultProps = {\n  aggregators,\n  cols: [],\n  rows: [],\n  vals: [],\n  aggregatorName: 'Count',\n  sorters: {},\n  rowOrder: 'key_a_to_z',\n  colOrder: 'key_a_to_z'\n};\n\nPivotData.propTypes = {\n  data: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.func]).\n  isRequired,\n  aggregatorName: PropTypes.string,\n  cols: PropTypes.arrayOf(PropTypes.string),\n  rows: PropTypes.arrayOf(PropTypes.string),\n  vals: PropTypes.arrayOf(PropTypes.string),\n  valueFilter: PropTypes.objectOf(PropTypes.objectOf(PropTypes.bool)),\n  sorters: PropTypes.oneOfType([\n  PropTypes.func,\n  PropTypes.objectOf(PropTypes.func)]\n  ),\n  derivedAttributes: PropTypes.objectOf(PropTypes.func),\n  rowOrder: PropTypes.oneOf([\n  'key_a_to_z',\n  'key_z_to_a',\n  'value_a_to_z',\n  'value_z_to_a']\n  ),\n  colOrder: PropTypes.oneOf([\n  'key_a_to_z',\n  'key_z_to_a',\n  'value_a_to_z',\n  'value_z_to_a']\n  )\n};\n\nexport {\n  aggregatorTemplates,\n  aggregators,\n  derivers,\n  locales,\n  naturalSort,\n  numberFormat,\n  getSort,\n  sortAs,\n  flatKey,\n  PivotData };;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(addSeparators, \"addSeparators\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/utilities.js\");reactHotLoader.register(numberFormat, \"numberFormat\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/utilities.js\");reactHotLoader.register(rx, \"rx\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/utilities.js\");reactHotLoader.register(rd, \"rd\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/utilities.js\");reactHotLoader.register(rz, \"rz\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/utilities.js\");reactHotLoader.register(naturalSort, \"naturalSort\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/utilities.js\");reactHotLoader.register(sortAs, \"sortAs\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/utilities.js\");reactHotLoader.register(getSort, \"getSort\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/utilities.js\");reactHotLoader.register(usFmt, \"usFmt\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/utilities.js\");reactHotLoader.register(usFmtInt, \"usFmtInt\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/utilities.js\");reactHotLoader.register(usFmtPct, \"usFmtPct\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/utilities.js\");reactHotLoader.register(fmtNonString, \"fmtNonString\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/utilities.js\");reactHotLoader.register(baseAggregatorTemplates, \"baseAggregatorTemplates\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/utilities.js\");reactHotLoader.register(extendedAggregatorTemplates, \"extendedAggregatorTemplates\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/utilities.js\");reactHotLoader.register(aggregatorTemplates, \"aggregatorTemplates\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/utilities.js\");reactHotLoader.register(aggregators, \"aggregators\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/utilities.js\");reactHotLoader.register(locales, \"locales\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/utilities.js\");reactHotLoader.register(mthNamesEn, \"mthNamesEn\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/utilities.js\");reactHotLoader.register(dayNamesEn, \"dayNamesEn\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/utilities.js\");reactHotLoader.register(zeroPad, \"zeroPad\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/utilities.js\");reactHotLoader.register(derivers, \"derivers\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/utilities.js\");reactHotLoader.register(flatKey, \"flatKey\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/utilities.js\");reactHotLoader.register(PivotData, \"PivotData\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/utilities.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["PropTypes","t","addSeparators","nStr","thousandsSep","decimalSep","x","String","split","x1","x2","length","rgx","test","replace","numberFormat","optsIn","defaults","digitsAfterDecimal","scaler","prefix","suffix","opts","Number","isNaN","isFinite","result","toFixed","rx","rd","rz","naturalSort","as","bs","nas","nbs","a","b","match","a1","shift","b1","sortAs","order","mapping","lMapping","forEach","element","i","toLowerCase","getSort","sorters","attr","sort","usFmt","usFmtInt","usFmtPct","fmtNonString","formatter","baseAggregatorTemplates","count","push","value","format","uniques","fn","uniq","record","Array","from","includes","numInputs","sum","parseFloat","extremes","mode","data","val","sorter","coercedValue","Math","quantile","q","vals","strMap","Object","keys","values","middle","floor","ceil","runningStat","ddof","n","m","s","strValue","mNew","sqrt","Error","sumOverSum","num","denom","sumNum","sumDenom","fractionOf","wrapped","type","rowKey","colKey","selector","total","row","col","inner","acc","getAggregator","extendedAggregatorTemplates","countUnique","f","listUnique","join","max","min","first","last","median","average","var","stdev","aggregatorTemplates","aggregators","tpl","Count","Sum","Average","Median","Minimum","Maximum","First","Last","locales","en","localeStrings","renderError","computeError","uiRenderError","selectAll","selectNone","tooMany","filterResults","apply","cancel","totals","vs","by","mthNamesEn","dayNamesEn","zeroPad","number","substr","derivers","bin","binWidth","dateFormat","formatString","utcOutput","mthNames","dayNames","utc","date","Date","parse","p","flatKey","attrVals","fromCharCode","PivotData","constructor","inputProps","subtotals","props","defaultProps","processRecord","bind","checkPropTypes","propTypes","aggregator","aggregatorsFactory","defaultFormatter","aggregatorName","formattedAggregators","customFormatters","entries","reduce","key","columnFormatter","column","tree","rowKeys","colKeys","rowTotals","colTotals","allTotal","sorted","forEachRecord","getFormattedAggregator","totalsKeys","groupName","groupValue","find","name","arrSort","attrs","partialOnTop","reverse","sortersArr","map","limit","comparison","sortKeys","v","r","c","rowOrder","rows","rowPartialOnTop","colOrder","cols","colPartialOnTop","getColKeys","getRowKeys","rowStart","rowEnabled","colStart","colEnabled","isRowSubtotal","isColSubtotal","ri","fRowKey","slice","flatRowKey","isSubtotal","ci","fColKey","flatColKey","agg","__reactstandin__regenerateByEval","code","eval","input","isArray","oneOfType","array","object","func","isRequired","string","arrayOf","valueFilter","objectOf","bool","derivedAttributes","oneOf","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/utilities.js"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport PropTypes from 'prop-types';\nimport { t } from '@superset-ui/core';\n\nconst addSeparators = function (nStr, thousandsSep, decimalSep) {\n  const x = String(nStr).split('.');\n  let x1 = x[0];\n  const x2 = x.length > 1 ? decimalSep + x[1] : '';\n  const rgx = /(\\d+)(\\d{3})/;\n  while (rgx.test(x1)) {\n    x1 = x1.replace(rgx, `$1${thousandsSep}$2`);\n  }\n  return x1 + x2;\n};\n\nconst numberFormat = function (optsIn) {\n  const defaults = {\n    digitsAfterDecimal: 2,\n    scaler: 1,\n    thousandsSep: ',',\n    decimalSep: '.',\n    prefix: '',\n    suffix: '',\n  };\n  const opts = { ...defaults, ...optsIn };\n  return function (x) {\n    if (Number.isNaN(x) || !Number.isFinite(x)) {\n      return '';\n    }\n    const result = addSeparators(\n      (opts.scaler * x).toFixed(opts.digitsAfterDecimal),\n      opts.thousandsSep,\n      opts.decimalSep,\n    );\n    return `${opts.prefix}${result}${opts.suffix}`;\n  };\n};\n\nconst rx = /(\\d+)|(\\D+)/g;\nconst rd = /\\d/;\nconst rz = /^0/;\nconst naturalSort = (as, bs) => {\n  // nulls first\n  if (bs !== null && as === null) {\n    return -1;\n  }\n  if (as !== null && bs === null) {\n    return 1;\n  }\n\n  // then raw NaNs\n  if (typeof as === 'number' && Number.isNaN(as)) {\n    return -1;\n  }\n  if (typeof bs === 'number' && Number.isNaN(bs)) {\n    return 1;\n  }\n\n  // numbers and numbery strings group together\n  const nas = Number(as);\n  const nbs = Number(bs);\n  if (nas < nbs) {\n    return -1;\n  }\n  if (nas > nbs) {\n    return 1;\n  }\n\n  // within that, true numbers before numbery strings\n  if (typeof as === 'number' && typeof bs !== 'number') {\n    return -1;\n  }\n  if (typeof bs === 'number' && typeof as !== 'number') {\n    return 1;\n  }\n  if (typeof as === 'number' && typeof bs === 'number') {\n    return 0;\n  }\n\n  // 'Infinity' is a textual number, so less than 'A'\n  if (Number.isNaN(nbs) && !Number.isNaN(nas)) {\n    return -1;\n  }\n  if (Number.isNaN(nas) && !Number.isNaN(nbs)) {\n    return 1;\n  }\n\n  // finally, \"smart\" string sorting per http://stackoverflow.com/a/4373421/112871\n  let a = String(as);\n  let b = String(bs);\n  if (a === b) {\n    return 0;\n  }\n  if (!rd.test(a) || !rd.test(b)) {\n    return a > b ? 1 : -1;\n  }\n\n  // special treatment for strings containing digits\n  a = a.match(rx);\n  b = b.match(rx);\n  while (a.length && b.length) {\n    const a1 = a.shift();\n    const b1 = b.shift();\n    if (a1 !== b1) {\n      if (rd.test(a1) && rd.test(b1)) {\n        return a1.replace(rz, '.0') - b1.replace(rz, '.0');\n      }\n      return a1 > b1 ? 1 : -1;\n    }\n  }\n  return a.length - b.length;\n};\n\nconst sortAs = function (order) {\n  const mapping = {};\n\n  // sort lowercased keys similarly\n  const lMapping = {};\n  order.forEach((element, i) => {\n    mapping[element] = i;\n    if (typeof element === 'string') {\n      lMapping[element.toLowerCase()] = i;\n    }\n  });\n  return function (a, b) {\n    if (a in mapping && b in mapping) {\n      return mapping[a] - mapping[b];\n    }\n    if (a in mapping) {\n      return -1;\n    }\n    if (b in mapping) {\n      return 1;\n    }\n    if (a in lMapping && b in lMapping) {\n      return lMapping[a] - lMapping[b];\n    }\n    if (a in lMapping) {\n      return -1;\n    }\n    if (b in lMapping) {\n      return 1;\n    }\n    return naturalSort(a, b);\n  };\n};\n\nconst getSort = function (sorters, attr) {\n  if (sorters) {\n    if (typeof sorters === 'function') {\n      const sort = sorters(attr);\n      if (typeof sort === 'function') {\n        return sort;\n      }\n    } else if (attr in sorters) {\n      return sorters[attr];\n    }\n  }\n  return naturalSort;\n};\n\n// aggregator templates default to US number formatting but this is overridable\nconst usFmt = numberFormat();\nconst usFmtInt = numberFormat({ digitsAfterDecimal: 0 });\nconst usFmtPct = numberFormat({\n  digitsAfterDecimal: 1,\n  scaler: 100,\n  suffix: '%',\n});\n\nconst fmtNonString = formatter => x =>\n  typeof x === 'string' ? x : formatter(x);\n\nconst baseAggregatorTemplates = {\n  count(formatter = usFmtInt) {\n    return () =>\n      function () {\n        return {\n          count: 0,\n          push() {\n            this.count += 1;\n          },\n          value() {\n            return this.count;\n          },\n          format: formatter,\n        };\n      };\n  },\n\n  uniques(fn, formatter = usFmtInt) {\n    return function ([attr]) {\n      return function () {\n        return {\n          uniq: [],\n          push(record) {\n            if (!Array.from(this.uniq).includes(record[attr])) {\n              this.uniq.push(record[attr]);\n            }\n          },\n          value() {\n            return fn(this.uniq);\n          },\n          format: fmtNonString(formatter),\n          numInputs: typeof attr !== 'undefined' ? 0 : 1,\n        };\n      };\n    };\n  },\n\n  sum(formatter = usFmt) {\n    return function ([attr]) {\n      return function () {\n        return {\n          sum: 0,\n          push(record) {\n            if (Number.isNaN(Number(record[attr]))) {\n              this.sum = record[attr];\n            } else {\n              this.sum += parseFloat(record[attr]);\n            }\n          },\n          value() {\n            return this.sum;\n          },\n          format: fmtNonString(formatter),\n          numInputs: typeof attr !== 'undefined' ? 0 : 1,\n        };\n      };\n    };\n  },\n\n  extremes(mode, formatter = usFmt) {\n    return function ([attr]) {\n      return function (data) {\n        return {\n          val: null,\n          sorter: getSort(\n            typeof data !== 'undefined' ? data.sorters : null,\n            attr,\n          ),\n          push(record) {\n            const x = record[attr];\n            if (['min', 'max'].includes(mode)) {\n              const coercedValue = Number(x);\n              if (Number.isNaN(coercedValue)) {\n                this.val =\n                  !this.val ||\n                  (mode === 'min' && x < this.val) ||\n                  (mode === 'max' && x > this.val)\n                    ? x\n                    : this.val;\n              } else {\n                this.val = Math[mode](\n                  coercedValue,\n                  this.val !== null ? this.val : coercedValue,\n                );\n              }\n            } else if (\n              mode === 'first' &&\n              this.sorter(x, this.val !== null ? this.val : x) <= 0\n            ) {\n              this.val = x;\n            } else if (\n              mode === 'last' &&\n              this.sorter(x, this.val !== null ? this.val : x) >= 0\n            ) {\n              this.val = x;\n            }\n          },\n          value() {\n            return this.val;\n          },\n          format(x) {\n            if (typeof x === 'number') {\n              return formatter(x);\n            }\n            return x;\n          },\n          numInputs: typeof attr !== 'undefined' ? 0 : 1,\n        };\n      };\n    };\n  },\n\n  quantile(q, formatter = usFmt) {\n    return function ([attr]) {\n      return function () {\n        return {\n          vals: [],\n          strMap: {},\n          push(record) {\n            const val = record[attr];\n            const x = Number(val);\n\n            if (Number.isNaN(x)) {\n              this.strMap[val] = (this.strMap[val] || 0) + 1;\n            } else {\n              this.vals.push(x);\n            }\n          },\n          value() {\n            if (\n              this.vals.length === 0 &&\n              Object.keys(this.strMap).length === 0\n            ) {\n              return null;\n            }\n\n            if (Object.keys(this.strMap).length) {\n              const values = Object.values(this.strMap).sort((a, b) => a - b);\n              const middle = Math.floor(values.length / 2);\n\n              const keys = Object.keys(this.strMap);\n              return keys.length % 2 !== 0\n                ? keys[middle]\n                : (keys[middle - 1] + keys[middle]) / 2;\n            }\n\n            this.vals.sort((a, b) => a - b);\n            const i = (this.vals.length - 1) * q;\n            return (this.vals[Math.floor(i)] + this.vals[Math.ceil(i)]) / 2.0;\n          },\n          format: fmtNonString(formatter),\n          numInputs: typeof attr !== 'undefined' ? 0 : 1,\n        };\n      };\n    };\n  },\n\n  runningStat(mode = 'mean', ddof = 1, formatter = usFmt) {\n    return function ([attr]) {\n      return function () {\n        return {\n          n: 0.0,\n          m: 0.0,\n          s: 0.0,\n          strValue: null,\n          push(record) {\n            const x = Number(record[attr]);\n            if (Number.isNaN(x)) {\n              this.strValue =\n                typeof record[attr] === 'string' ? record[attr] : this.strValue;\n              return;\n            }\n            this.n += 1.0;\n            if (this.n === 1.0) {\n              this.m = x;\n            }\n            const mNew = this.m + (x - this.m) / this.n;\n            this.s += (x - this.m) * (x - mNew);\n            this.m = mNew;\n          },\n          value() {\n            if (this.strValue) {\n              return this.strValue;\n            }\n\n            if (mode === 'mean') {\n              if (this.n === 0) {\n                return 0 / 0;\n              }\n              return this.m;\n            }\n            if (this.n <= ddof) {\n              return 0;\n            }\n            switch (mode) {\n              case 'var':\n                return this.s / (this.n - ddof);\n              case 'stdev':\n                return Math.sqrt(this.s / (this.n - ddof));\n              default:\n                throw new Error('unknown mode for runningStat');\n            }\n          },\n          format: fmtNonString(formatter),\n          numInputs: typeof attr !== 'undefined' ? 0 : 1,\n        };\n      };\n    };\n  },\n\n  sumOverSum(formatter = usFmt) {\n    return function ([num, denom]) {\n      return function () {\n        return {\n          sumNum: 0,\n          sumDenom: 0,\n          push(record) {\n            if (!Number.isNaN(Number(record[num]))) {\n              this.sumNum += parseFloat(record[num]);\n            }\n            if (!Number.isNaN(Number(record[denom]))) {\n              this.sumDenom += parseFloat(record[denom]);\n            }\n          },\n          value() {\n            return this.sumNum / this.sumDenom;\n          },\n          format: formatter,\n          numInputs:\n            typeof num !== 'undefined' && typeof denom !== 'undefined' ? 0 : 2,\n        };\n      };\n    };\n  },\n\n  fractionOf(wrapped, type = 'total', formatter = usFmtPct) {\n    return (...x) =>\n      function (data, rowKey, colKey) {\n        return {\n          selector: { total: [[], []], row: [rowKey, []], col: [[], colKey] }[\n            type\n          ],\n          inner: wrapped(...Array.from(x || []))(data, rowKey, colKey),\n          push(record) {\n            this.inner.push(record);\n          },\n          format: fmtNonString(formatter),\n          value() {\n            const acc = data\n              .getAggregator(...Array.from(this.selector || []))\n              .inner.value();\n\n            if (typeof acc === 'string') {\n              return acc;\n            }\n\n            return this.inner.value() / acc;\n          },\n          numInputs: wrapped(...Array.from(x || []))().numInputs,\n        };\n      };\n  },\n};\n\nconst extendedAggregatorTemplates = {\n  countUnique(f) {\n    return baseAggregatorTemplates.uniques(x => x.length, f);\n  },\n  listUnique(s, f) {\n    return baseAggregatorTemplates.uniques(x => x.join(s), f || (x => x));\n  },\n  max(f) {\n    return baseAggregatorTemplates.extremes('max', f);\n  },\n  min(f) {\n    return baseAggregatorTemplates.extremes('min', f);\n  },\n  first(f) {\n    return baseAggregatorTemplates.extremes('first', f);\n  },\n  last(f) {\n    return baseAggregatorTemplates.extremes('last', f);\n  },\n  median(f) {\n    return baseAggregatorTemplates.quantile(0.5, f);\n  },\n  average(f) {\n    return baseAggregatorTemplates.runningStat('mean', 1, f);\n  },\n  var(ddof, f) {\n    return baseAggregatorTemplates.runningStat('var', ddof, f);\n  },\n  stdev(ddof, f) {\n    return baseAggregatorTemplates.runningStat('stdev', ddof, f);\n  },\n};\n\nconst aggregatorTemplates = {\n  ...baseAggregatorTemplates,\n  ...extendedAggregatorTemplates,\n};\n\n// default aggregators & renderers use US naming and number formatting\nconst aggregators = (tpl => ({\n  Count: tpl.count(usFmtInt),\n  'Count Unique Values': tpl.countUnique(usFmtInt),\n  'List Unique Values': tpl.listUnique(', '),\n  Sum: tpl.sum(usFmt),\n  'Integer Sum': tpl.sum(usFmtInt),\n  Average: tpl.average(usFmt),\n  Median: tpl.median(usFmt),\n  'Sample Variance': tpl.var(1, usFmt),\n  'Sample Standard Deviation': tpl.stdev(1, usFmt),\n  Minimum: tpl.min(usFmt),\n  Maximum: tpl.max(usFmt),\n  First: tpl.first(usFmt),\n  Last: tpl.last(usFmt),\n  'Sum over Sum': tpl.sumOverSum(usFmt),\n  'Sum as Fraction of Total': tpl.fractionOf(tpl.sum(), 'total', usFmtPct),\n  'Sum as Fraction of Rows': tpl.fractionOf(tpl.sum(), 'row', usFmtPct),\n  'Sum as Fraction of Columns': tpl.fractionOf(tpl.sum(), 'col', usFmtPct),\n  'Count as Fraction of Total': tpl.fractionOf(tpl.count(), 'total', usFmtPct),\n  'Count as Fraction of Rows': tpl.fractionOf(tpl.count(), 'row', usFmtPct),\n  'Count as Fraction of Columns': tpl.fractionOf(tpl.count(), 'col', usFmtPct),\n}))(aggregatorTemplates);\n\nconst locales = {\n  en: {\n    aggregators,\n    localeStrings: {\n      renderError: 'An error occurred rendering the PivotTable results.',\n      computeError: 'An error occurred computing the PivotTable results.',\n      uiRenderError: 'An error occurred rendering the PivotTable UI.',\n      selectAll: 'Select All',\n      selectNone: 'Select None',\n      tooMany: '(too many to list)',\n      filterResults: 'Filter values',\n      apply: 'Apply',\n      cancel: 'Cancel',\n      totals: 'Totals',\n      vs: 'vs',\n      by: 'by',\n    },\n  },\n};\n\n// dateFormat deriver l10n requires month and day names to be passed in directly\nconst mthNamesEn = [\n  'Jan',\n  'Feb',\n  'Mar',\n  'Apr',\n  'May',\n  'Jun',\n  'Jul',\n  'Aug',\n  'Sep',\n  'Oct',\n  'Nov',\n  'Dec',\n];\nconst dayNamesEn = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\nconst zeroPad = number => `0${number}`.substr(-2, 2); // eslint-disable-line no-magic-numbers\n\nconst derivers = {\n  bin(col, binWidth) {\n    return record => record[col] - (record[col] % binWidth);\n  },\n  dateFormat(\n    col,\n    formatString,\n    utcOutput = false,\n    mthNames = mthNamesEn,\n    dayNames = dayNamesEn,\n  ) {\n    const utc = utcOutput ? 'UTC' : '';\n    return function (record) {\n      const date = new Date(Date.parse(record[col]));\n      if (Number.isNaN(date)) {\n        return '';\n      }\n      return formatString.replace(/%(.)/g, function (m, p) {\n        switch (p) {\n          case 'y':\n            return date[`get${utc}FullYear`]();\n          case 'm':\n            return zeroPad(date[`get${utc}Month`]() + 1);\n          case 'n':\n            return mthNames[date[`get${utc}Month`]()];\n          case 'd':\n            return zeroPad(date[`get${utc}Date`]());\n          case 'w':\n            return dayNames[date[`get${utc}Day`]()];\n          case 'x':\n            return date[`get${utc}Day`]();\n          case 'H':\n            return zeroPad(date[`get${utc}Hours`]());\n          case 'M':\n            return zeroPad(date[`get${utc}Minutes`]());\n          case 'S':\n            return zeroPad(date[`get${utc}Seconds`]());\n          default:\n            return `%${p}`;\n        }\n      });\n    };\n  },\n};\n\n// Given an array of attribute values, convert to a key that\n// can be used in objects.\nconst flatKey = attrVals => attrVals.join(String.fromCharCode(0));\n\n/*\nData Model class\n*/\n\nclass PivotData {\n  constructor(inputProps = {}, subtotals = {}) {\n    this.props = { ...PivotData.defaultProps, ...inputProps };\n    this.processRecord = this.processRecord.bind(this);\n    PropTypes.checkPropTypes(\n      PivotData.propTypes,\n      this.props,\n      'prop',\n      'PivotData',\n    );\n\n    this.aggregator = this.props\n      .aggregatorsFactory(this.props.defaultFormatter)\n      [this.props.aggregatorName](this.props.vals);\n    this.formattedAggregators =\n      this.props.customFormatters &&\n      Object.entries(this.props.customFormatters).reduce(\n        (acc, [key, columnFormatter]) => {\n          acc[key] = {};\n          Object.entries(columnFormatter).forEach(([column, formatter]) => {\n            acc[key][column] = this.props\n              .aggregatorsFactory(formatter)\n              [this.props.aggregatorName](this.props.vals);\n          });\n          return acc;\n        },\n        {},\n      );\n    this.tree = {};\n    this.rowKeys = [];\n    this.colKeys = [];\n    this.rowTotals = {};\n    this.colTotals = {};\n    this.allTotal = this.aggregator(this, [], []);\n    this.subtotals = subtotals;\n    this.sorted = false;\n\n    // iterate through input, accumulating data for cells\n    PivotData.forEachRecord(this.props.data, this.processRecord);\n  }\n\n  getFormattedAggregator(record, totalsKeys) {\n    if (!this.formattedAggregators) {\n      return this.aggregator;\n    }\n    const [groupName, groupValue] =\n      Object.entries(record).find(\n        ([name, value]) =>\n          this.formattedAggregators[name] &&\n          this.formattedAggregators[name][value],\n      ) || [];\n    if (\n      !groupName ||\n      !groupValue ||\n      (totalsKeys && !totalsKeys.includes(groupValue))\n    ) {\n      return this.aggregator;\n    }\n    return this.formattedAggregators[groupName][groupValue] || this.aggregator;\n  }\n\n  arrSort(attrs, partialOnTop, reverse = false) {\n    const sortersArr = attrs.map(a => getSort(this.props.sorters, a));\n    return function (a, b) {\n      const limit = Math.min(a.length, b.length);\n      for (let i = 0; i < limit; i += 1) {\n        const sorter = sortersArr[i];\n        const comparison = reverse ? sorter(b[i], a[i]) : sorter(a[i], b[i]);\n        if (comparison !== 0) {\n          return comparison;\n        }\n      }\n      return partialOnTop ? a.length - b.length : b.length - a.length;\n    };\n  }\n\n  sortKeys() {\n    if (!this.sorted) {\n      this.sorted = true;\n      const v = (r, c) => this.getAggregator(r, c).value();\n      switch (this.props.rowOrder) {\n        case 'key_z_to_a':\n          this.rowKeys.sort(\n            this.arrSort(this.props.rows, this.subtotals.rowPartialOnTop, true),\n          );\n          break;\n        case 'value_a_to_z':\n          this.rowKeys.sort((a, b) => naturalSort(v(a, []), v(b, [])));\n          break;\n        case 'value_z_to_a':\n          this.rowKeys.sort((a, b) => -naturalSort(v(a, []), v(b, [])));\n          break;\n        default:\n          this.rowKeys.sort(\n            this.arrSort(this.props.rows, this.subtotals.rowPartialOnTop),\n          );\n      }\n      switch (this.props.colOrder) {\n        case 'key_z_to_a':\n          this.colKeys.sort(\n            this.arrSort(this.props.cols, this.subtotals.colPartialOnTop, true),\n          );\n          break;\n        case 'value_a_to_z':\n          this.colKeys.sort((a, b) => naturalSort(v([], a), v([], b)));\n          break;\n        case 'value_z_to_a':\n          this.colKeys.sort((a, b) => -naturalSort(v([], a), v([], b)));\n          break;\n        default:\n          this.colKeys.sort(\n            this.arrSort(this.props.cols, this.subtotals.colPartialOnTop),\n          );\n      }\n    }\n  }\n\n  getColKeys() {\n    this.sortKeys();\n    return this.colKeys;\n  }\n\n  getRowKeys() {\n    this.sortKeys();\n    return this.rowKeys;\n  }\n\n  processRecord(record) {\n    // this code is called in a tight loop\n    const colKey = [];\n    const rowKey = [];\n    this.props.cols.forEach(col => {\n      colKey.push(col in record ? record[col] : 'null');\n    });\n    this.props.rows.forEach(row => {\n      rowKey.push(row in record ? record[row] : 'null');\n    });\n\n    this.allTotal.push(record);\n\n    const rowStart = this.subtotals.rowEnabled ? 1 : Math.max(1, rowKey.length);\n    const colStart = this.subtotals.colEnabled ? 1 : Math.max(1, colKey.length);\n\n    let isRowSubtotal;\n    let isColSubtotal;\n    for (let ri = rowStart; ri <= rowKey.length; ri += 1) {\n      isRowSubtotal = ri < rowKey.length;\n      const fRowKey = rowKey.slice(0, ri);\n      const flatRowKey = flatKey(fRowKey);\n      if (!this.rowTotals[flatRowKey]) {\n        this.rowKeys.push(fRowKey);\n        this.rowTotals[flatRowKey] = this.getFormattedAggregator(\n          record,\n          rowKey,\n        )(this, fRowKey, []);\n      }\n      this.rowTotals[flatRowKey].push(record);\n      this.rowTotals[flatRowKey].isSubtotal = isRowSubtotal;\n    }\n\n    for (let ci = colStart; ci <= colKey.length; ci += 1) {\n      isColSubtotal = ci < colKey.length;\n      const fColKey = colKey.slice(0, ci);\n      const flatColKey = flatKey(fColKey);\n      if (!this.colTotals[flatColKey]) {\n        this.colKeys.push(fColKey);\n        this.colTotals[flatColKey] = this.getFormattedAggregator(\n          record,\n          colKey,\n        )(this, [], fColKey);\n      }\n      this.colTotals[flatColKey].push(record);\n      this.colTotals[flatColKey].isSubtotal = isColSubtotal;\n    }\n\n    // And now fill in for all the sub-cells.\n    for (let ri = rowStart; ri <= rowKey.length; ri += 1) {\n      isRowSubtotal = ri < rowKey.length;\n      const fRowKey = rowKey.slice(0, ri);\n      const flatRowKey = flatKey(fRowKey);\n      if (!this.tree[flatRowKey]) {\n        this.tree[flatRowKey] = {};\n      }\n      for (let ci = colStart; ci <= colKey.length; ci += 1) {\n        isColSubtotal = ci < colKey.length;\n        const fColKey = colKey.slice(0, ci);\n        const flatColKey = flatKey(fColKey);\n        if (!this.tree[flatRowKey][flatColKey]) {\n          this.tree[flatRowKey][flatColKey] = this.getFormattedAggregator(\n            record,\n          )(this, fRowKey, fColKey);\n        }\n        this.tree[flatRowKey][flatColKey].push(record);\n\n        this.tree[flatRowKey][flatColKey].isRowSubtotal = isRowSubtotal;\n        this.tree[flatRowKey][flatColKey].isColSubtotal = isColSubtotal;\n        this.tree[flatRowKey][flatColKey].isSubtotal =\n          isRowSubtotal || isColSubtotal;\n      }\n    }\n  }\n\n  getAggregator(rowKey, colKey) {\n    let agg;\n    const flatRowKey = flatKey(rowKey);\n    const flatColKey = flatKey(colKey);\n    if (rowKey.length === 0 && colKey.length === 0) {\n      agg = this.allTotal;\n    } else if (rowKey.length === 0) {\n      agg = this.colTotals[flatColKey];\n    } else if (colKey.length === 0) {\n      agg = this.rowTotals[flatRowKey];\n    } else {\n      agg = this.tree[flatRowKey][flatColKey];\n    }\n    return (\n      agg || {\n        value() {\n          return null;\n        },\n        format() {\n          return '';\n        },\n      }\n    );\n  }\n}\n\n// can handle arrays or jQuery selections of tables\nPivotData.forEachRecord = function (input, processRecord) {\n  if (Array.isArray(input)) {\n    // array of objects\n    return input.map(record => processRecord(record));\n  }\n  throw new Error(t('Unknown input format'));\n};\n\nPivotData.defaultProps = {\n  aggregators,\n  cols: [],\n  rows: [],\n  vals: [],\n  aggregatorName: 'Count',\n  sorters: {},\n  rowOrder: 'key_a_to_z',\n  colOrder: 'key_a_to_z',\n};\n\nPivotData.propTypes = {\n  data: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.func])\n    .isRequired,\n  aggregatorName: PropTypes.string,\n  cols: PropTypes.arrayOf(PropTypes.string),\n  rows: PropTypes.arrayOf(PropTypes.string),\n  vals: PropTypes.arrayOf(PropTypes.string),\n  valueFilter: PropTypes.objectOf(PropTypes.objectOf(PropTypes.bool)),\n  sorters: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.objectOf(PropTypes.func),\n  ]),\n  derivedAttributes: PropTypes.objectOf(PropTypes.func),\n  rowOrder: PropTypes.oneOf([\n    'key_a_to_z',\n    'key_z_to_a',\n    'value_a_to_z',\n    'value_z_to_a',\n  ]),\n  colOrder: PropTypes.oneOf([\n    'key_a_to_z',\n    'key_z_to_a',\n    'value_a_to_z',\n    'value_z_to_a',\n  ]),\n};\n\nexport {\n  aggregatorTemplates,\n  aggregators,\n  derivers,\n  locales,\n  naturalSort,\n  numberFormat,\n  getSort,\n  sortAs,\n  flatKey,\n  PivotData,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}