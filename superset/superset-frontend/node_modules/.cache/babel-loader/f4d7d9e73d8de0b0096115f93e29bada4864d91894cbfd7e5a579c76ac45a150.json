{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { log } from '@deck.gl/core';\nimport IconLayer from '../../icon-layer/icon-layer';\nimport fs from './multi-icon-layer-fragment.glsl';\nconst DEFAULT_BUFFER = 192.0 / 256;\nconst EMPTY_ARRAY = [];\nconst defaultProps = {\n  getIconOffsets: {\n    type: 'accessor',\n    value: (x) => x.offsets\n  },\n  alphaCutoff: 0.001,\n  smoothing: 0.1,\n  outlineWidth: 0,\n  outlineColor: {\n    type: 'color',\n    value: [0, 0, 0, 255]\n  }\n};\nexport default class MultiIconLayer extends IconLayer {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", void 0);\n  }\n\n  getShaders() {\n    return { ...super.getShaders(),\n      fs\n    };\n  }\n\n  initializeState() {\n    super.initializeState();\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      instanceOffsets: {\n        size: 2,\n        accessor: 'getIconOffsets'\n      },\n      instancePickingColors: {\n        type: 5121,\n        size: 3,\n        accessor: (object, {\n          index,\n          target: value\n        }) => this.encodePickingColor(index, value)\n      }\n    });\n  }\n\n  updateState(params) {\n    super.updateState(params);\n    const {\n      props,\n      oldProps\n    } = params;\n    let {\n      outlineColor\n    } = props;\n\n    if (outlineColor !== oldProps.outlineColor) {\n      outlineColor = outlineColor.map((x) => x / 255);\n      outlineColor[3] = Number.isFinite(outlineColor[3]) ? outlineColor[3] : 1;\n      this.setState({\n        outlineColor\n      });\n    }\n\n    if (!props.sdf && props.outlineWidth) {\n      log.warn(\"\".concat(this.id, \": fontSettings.sdf is required to render outline\"))();\n    }\n  }\n\n  draw(params) {\n    const {\n      sdf,\n      smoothing,\n      outlineWidth\n    } = this.props;\n    const {\n      outlineColor\n    } = this.state;\n    const outlineBuffer = outlineWidth ? Math.max(smoothing, DEFAULT_BUFFER * (1 - outlineWidth)) : -1;\n    params.uniforms = { ...params.uniforms,\n      sdfBuffer: DEFAULT_BUFFER,\n      outlineBuffer,\n      gamma: smoothing,\n      sdf: Boolean(sdf),\n      outlineColor\n    };\n    super.draw(params);\n\n    if (sdf && outlineWidth) {\n      const {\n        iconManager\n      } = this.state;\n      const iconsTexture = iconManager.getTexture();\n\n      if (iconsTexture) {\n        this.state.model.draw({\n          uniforms: {\n            outlineBuffer: DEFAULT_BUFFER\n          }\n        });\n      }\n    }\n  }\n\n  getInstanceOffset(icons) {\n    return icons ? Array.from(icons).flatMap((icon) => super.getInstanceOffset(icon)) : EMPTY_ARRAY;\n  }\n\n  getInstanceColorMode(icons) {\n    return 1;\n  }\n\n  getInstanceIconFrame(icons) {\n    return icons ? Array.from(icons).flatMap((icon) => super.getInstanceIconFrame(icon)) : EMPTY_ARRAY;\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\n\n_defineProperty(MultiIconLayer, \"defaultProps\", defaultProps);\n\n_defineProperty(MultiIconLayer, \"layerName\", 'MultiIconLayer');;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(DEFAULT_BUFFER, \"DEFAULT_BUFFER\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/layers/dist/esm/text-layer/multi-icon-layer/multi-icon-layer.js\");reactHotLoader.register(EMPTY_ARRAY, \"EMPTY_ARRAY\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/layers/dist/esm/text-layer/multi-icon-layer/multi-icon-layer.js\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/layers/dist/esm/text-layer/multi-icon-layer/multi-icon-layer.js\");reactHotLoader.register(MultiIconLayer, \"MultiIconLayer\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/layers/dist/esm/text-layer/multi-icon-layer/multi-icon-layer.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["log","IconLayer","fs","DEFAULT_BUFFER","EMPTY_ARRAY","defaultProps","getIconOffsets","type","value","x","offsets","alphaCutoff","smoothing","outlineWidth","outlineColor","MultiIconLayer","constructor","args","_defineProperty","getShaders","initializeState","attributeManager","getAttributeManager","addInstanced","instanceOffsets","size","accessor","instancePickingColors","object","index","target","encodePickingColor","updateState","params","props","oldProps","map","Number","isFinite","setState","sdf","warn","concat","id","draw","state","outlineBuffer","Math","max","uniforms","sdfBuffer","gamma","Boolean","iconManager","iconsTexture","getTexture","model","getInstanceOffset","icons","Array","from","flatMap","icon","getInstanceColorMode","getInstanceIconFrame","__reactstandin__regenerateByEval","key","code","eval","reactHotLoader","register","leaveModule","reactHotLoaderGlobal","undefined","module"],"sources":["../../../../src/text-layer/multi-icon-layer/multi-icon-layer.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport {log} from '@deck.gl/core';\nimport IconLayer from '../../icon-layer/icon-layer';\n\nimport fs from './multi-icon-layer-fragment.glsl';\n\nimport type {IconLayerProps} from '../../icon-layer/icon-layer';\nimport type {Accessor, Color, UpdateParameters, DefaultProps} from '@deck.gl/core';\n\n// TODO expose as layer properties\nconst DEFAULT_BUFFER = 192.0 / 256;\nconst EMPTY_ARRAY = [];\n\ntype _MultiIconLayerProps<DataT> = {\n  getIconOffsets?: Accessor<DataT, number[]>;\n  sdf?: boolean;\n  smoothing?: number;\n  outlineWidth?: number;\n  outlineColor?: Color;\n};\n\nexport type MultiIconLayerProps<DataT = any> = _MultiIconLayerProps<DataT> & IconLayerProps<DataT>;\n\nconst defaultProps: DefaultProps<MultiIconLayerProps> = {\n  getIconOffsets: {type: 'accessor', value: x => x.offsets},\n  alphaCutoff: 0.001,\n  smoothing: 0.1,\n  outlineWidth: 0,\n  outlineColor: {type: 'color', value: [0, 0, 0, 255]}\n};\n\nexport default class MultiIconLayer<DataT, ExtraPropsT extends {} = {}> extends IconLayer<\n  DataT,\n  ExtraPropsT & Required<_MultiIconLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'MultiIconLayer';\n\n  state!: IconLayer['state'] & {\n    outlineColor: Color;\n  };\n\n  getShaders() {\n    return {...super.getShaders(), fs};\n  }\n\n  initializeState() {\n    super.initializeState();\n\n    const attributeManager = this.getAttributeManager();\n    attributeManager!.addInstanced({\n      instanceOffsets: {\n        size: 2,\n        accessor: 'getIconOffsets'\n      },\n      instancePickingColors: {\n        type: GL.UNSIGNED_BYTE,\n        size: 3,\n        accessor: (object, {index, target: value}) => this.encodePickingColor(index, value)\n      }\n    });\n  }\n\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n    const {props, oldProps} = params;\n    let {outlineColor} = props;\n\n    if (outlineColor !== oldProps.outlineColor) {\n      outlineColor = outlineColor.map(x => x / 255) as Color;\n      outlineColor[3] = Number.isFinite(outlineColor[3]) ? outlineColor[3] : 1;\n\n      this.setState({\n        outlineColor\n      });\n    }\n    if (!props.sdf && props.outlineWidth) {\n      log.warn(`${this.id}: fontSettings.sdf is required to render outline`)();\n    }\n  }\n\n  draw(params) {\n    const {sdf, smoothing, outlineWidth} = this.props;\n    const {outlineColor} = this.state;\n    const outlineBuffer = outlineWidth\n      ? Math.max(smoothing, DEFAULT_BUFFER * (1 - outlineWidth))\n      : -1;\n\n    params.uniforms = {\n      ...params.uniforms,\n      // Refer the following doc about gamma and buffer\n      // https://blog.mapbox.com/drawing-text-with-signed-distance-fields-in-mapbox-gl-b0933af6f817\n      sdfBuffer: DEFAULT_BUFFER,\n      outlineBuffer,\n      gamma: smoothing,\n      sdf: Boolean(sdf),\n      outlineColor\n    };\n\n    super.draw(params);\n\n    // draw text without outline on top to ensure a thick outline won't occlude other characters\n    if (sdf && outlineWidth) {\n      const {iconManager} = this.state;\n      const iconsTexture = iconManager.getTexture();\n\n      if (iconsTexture) {\n        this.state.model.draw({uniforms: {outlineBuffer: DEFAULT_BUFFER}});\n      }\n    }\n  }\n\n  protected getInstanceOffset(icons: string): number[] {\n    return icons ? Array.from(icons).flatMap(icon => super.getInstanceOffset(icon)) : EMPTY_ARRAY;\n  }\n\n  getInstanceColorMode(icons: string): number {\n    return 1; // mask\n  }\n\n  getInstanceIconFrame(icons: string): number[] {\n    return icons\n      ? Array.from(icons).flatMap(icon => super.getInstanceIconFrame(icon))\n      : EMPTY_ARRAY;\n  }\n}\n"],"mappings":";AAqBA,SAAQA,GAAR,QAAkB,eAAlB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AAEA,OAAOC,EAAP,MAAe,kCAAf;AAMA,MAAMC,cAAc,GAAG,QAAQ,GAA/B;AACA,MAAMC,WAAW,GAAG,EAApB;AAYA,MAAMC,YAA+C,GAAG;EACtDC,cAAc,EAAE;IAACC,IAAI,EAAE,UAAP;IAAmBC,KAAK,EAAEA,CAAAC,CAAC,KAAIA,CAAC,CAACC;EAAjC,CADsC;EAEtDC,WAAW,EAAE,KAFyC;EAGtDC,SAAS,EAAE,GAH2C;EAItDC,YAAY,EAAE,CAJwC;EAKtDC,YAAY,EAAE;IAACP,IAAI,EAAE,OAAP;IAAgBC,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,GAAV;EAAvB;AALwC,CAAxD;AAQA,eAAe,MAAMO,cAAN,SAAiEd,SAAjE,CAGb;EAAAe,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;;IAAAC,eAAA;EAAA;;EAQAC,UAAUA,CAAA,EAAG;IACX,OAAO,EAAC,GAAG,MAAMA,UAAN,EAAJ;MAAwBjB;IAAxB,CAAP;EACD;;EAEDkB,eAAeA,CAAA,EAAG;IAChB,MAAMA,eAAN;IAEA,MAAMC,gBAAgB,GAAG,KAAKC,mBAAL,EAAzB;IACAD,gBAAgB,CAAEE,YAAlB,CAA+B;MAC7BC,eAAe,EAAE;QACfC,IAAI,EAAE,CADS;QAEfC,QAAQ,EAAE;MAFK,CADY;MAK7BC,qBAAqB,EAAE;QACrBpB,IAAI,MADiB;QAErBkB,IAAI,EAAE,CAFe;QAGrBC,QAAQ,EAAEA,CAACE,MAAD,EAAS;UAACC,KAAD;UAAQC,MAAM,EAAEtB;QAAhB,CAAT,KAAoC,KAAKuB,kBAAL,CAAwBF,KAAxB,EAA+BrB,KAA/B;MAHzB;IALM,CAA/B;EAWD;;EAEDwB,WAAWA,CAACC,MAAD,EAAiC;IAC1C,MAAMD,WAAN,CAAkBC,MAAlB;IACA,MAAM;MAACC,KAAD;MAAQC;IAAR,IAAoBF,MAA1B;IACA,IAAI;MAACnB;IAAD,IAAiBoB,KAArB;;IAEA,IAAIpB,YAAY,KAAKqB,QAAQ,CAACrB,YAA9B,EAA4C;MAC1CA,YAAY,GAAGA,YAAY,CAACsB,GAAb,CAAiB,CAAA3B,CAAC,KAAIA,CAAC,GAAG,GAA1B,CAAf;MACAK,YAAY,CAAC,CAAD,CAAZ,GAAkBuB,MAAM,CAACC,QAAP,CAAgBxB,YAAY,CAAC,CAAD,CAA5B,IAAmCA,YAAY,CAAC,CAAD,CAA/C,GAAqD,CAAvE;MAEA,KAAKyB,QAAL,CAAc;QACZzB;MADY,CAAd;IAGD;;IACD,IAAI,CAACoB,KAAK,CAACM,GAAP,IAAcN,KAAK,CAACrB,YAAxB,EAAsC;MACpCb,GAAG,CAACyC,IAAJ,IAAAC,MAAA,CAAY,KAAKC,EAAjB;IACD;EACF;;EAEDC,IAAIA,CAACX,MAAD,EAAS;IACX,MAAM;MAACO,GAAD;MAAM5B,SAAN;MAAiBC;IAAjB,IAAiC,KAAKqB,KAA5C;IACA,MAAM;MAACpB;IAAD,IAAiB,KAAK+B,KAA5B;IACA,MAAMC,aAAa,GAAGjC,YAAY,GAC9BkC,IAAI,CAACC,GAAL,CAASpC,SAAT,EAAoBT,cAAc,IAAI,IAAIU,YAAR,CAAlC,CAD8B,GAE9B,CAAC,CAFL;IAIAoB,MAAM,CAACgB,QAAP,GAAkB,EAChB,GAAGhB,MAAM,CAACgB,QADM;MAIhBC,SAAS,EAAE/C,cAJK;MAKhB2C,aALgB;MAMhBK,KAAK,EAAEvC,SANS;MAOhB4B,GAAG,EAAEY,OAAO,CAACZ,GAAD,CAPI;MAQhB1B;IARgB,CAAlB;IAWA,MAAM8B,IAAN,CAAWX,MAAX;;IAGA,IAAIO,GAAG,IAAI3B,YAAX,EAAyB;MACvB,MAAM;QAACwC;MAAD,IAAgB,KAAKR,KAA3B;MACA,MAAMS,YAAY,GAAGD,WAAW,CAACE,UAAZ,EAArB;;MAEA,IAAID,YAAJ,EAAkB;QAChB,KAAKT,KAAL,CAAWW,KAAX,CAAiBZ,IAAjB,CAAsB;UAACK,QAAQ,EAAE;YAACH,aAAa,EAAE3C;UAAhB;QAAX,CAAtB;MACD;IACF;EACF;;EAESsD,iBAAiBA,CAACC,KAAD,EAA0B;IACnD,OAAOA,KAAK,GAAGC,KAAK,CAACC,IAAN,CAAWF,KAAX,EAAkBG,OAAlB,CAA0B,CAAAC,IAAI,KAAI,MAAML,iBAAN,CAAwBK,IAAxB,CAAlC,CAAH,GAAsE1D,WAAlF;EACD;;EAED2D,oBAAoBA,CAACL,KAAD,EAAwB;IAC1C,OAAO,CAAP;EACD;;EAEDM,oBAAoBA,CAACN,KAAD,EAA0B;IAC5C,OAAOA,KAAK,GACRC,KAAK,CAACC,IAAN,CAAWF,KAAX,EAAkBG,OAAlB,CAA0B,CAAAC,IAAI,KAAI,MAAME,oBAAN,CAA2BF,IAA3B,CAAlC,CADQ,GAER1D,WAFJ;EAGD;EAAA6D,iCAAAC,GAAA,EAAAC,IAAA;IAAA,KAAAD,GAAA,IAAAE,IAAA,CAAAD,IAAA,GA1FD;;gBAHmBpD,c,kBAIGV,Y;;gBAJHU,c,eAKA,gB,mLA1BfZ,cAAc,uMAAAkE,cAAA,CAAAC,QAAA,CACdlE,WAAW,oMAAAiE,cAAA,CAAAC,QAAA,CAYXjE,YAA+C,qMAAAgE,cAAA,CAAAC,QAAA,CAQhCvD,cAAN,+NAAAwD,WAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAD,WAAA,GAAAE,SAAA,CAAAF,WAAA,IAAAA,WAAA,CAAAG,MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}