{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { t } from '@superset-ui/core';\nimport PropTypes from 'prop-types';\nimport { PivotData, flatKey } from './utilities';\nimport { Styles } from './Styles';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst parseLabel = (value) => {\n  if (typeof value === 'string') {\n    if (value === 'metric') return t('metric');\n    return value;\n  }\n  if (typeof value === 'number') {\n    return value;\n  }\n  return String(value);\n};\n\nfunction displayHeaderCell(\nneedToggle,\nArrowIcon,\nonArrowClick,\nvalue,\nnamesMapping)\n{\n  const name = namesMapping[value] || value;\n  return needToggle ?\n  ___EmotionJSX(\"span\", { className: \"toggle-wrapper\" },\n  ___EmotionJSX(\"span\", {\n    role: \"button\",\n    tabIndex: \"0\",\n    className: \"toggle\",\n    onClick: onArrowClick },\n\n  ArrowIcon\n  ),\n  ___EmotionJSX(\"span\", { className: \"toggle-val\" }, parseLabel(name))\n  ) :\n\n  parseLabel(name);\n\n}\n\nexport class TableRenderer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // We need state to record which entries are collapsed and which aren't.\n    // This is an object with flat-keys indicating if the corresponding rows\n    // should be collapsed.\n    this.state = { collapsedRows: {}, collapsedCols: {} };\n\n    this.clickHeaderHandler = this.clickHeaderHandler.bind(this);\n    this.clickHandler = this.clickHandler.bind(this);\n  }\n\n  getBasePivotSettings() {\n    // One-time extraction of pivot settings that we'll use throughout the render.\n\n    const { props } = this;\n    const colAttrs = props.cols;\n    const rowAttrs = props.rows;\n\n    const tableOptions = {\n      rowTotals: true,\n      colTotals: true,\n      ...props.tableOptions\n    };\n    const rowTotals = tableOptions.rowTotals || colAttrs.length === 0;\n    const colTotals = tableOptions.colTotals || rowAttrs.length === 0;\n\n    const namesMapping = props.namesMapping || {};\n    const subtotalOptions = {\n      arrowCollapsed: '\\u25B2',\n      arrowExpanded: '\\u25BC',\n      ...props.subtotalOptions\n    };\n\n    const colSubtotalDisplay = {\n      displayOnTop: false,\n      enabled: tableOptions.colSubTotals,\n      hideOnExpand: false,\n      ...subtotalOptions.colSubtotalDisplay\n    };\n\n    const rowSubtotalDisplay = {\n      displayOnTop: false,\n      enabled: tableOptions.rowSubTotals,\n      hideOnExpand: false,\n      ...subtotalOptions.rowSubtotalDisplay\n    };\n\n    const pivotData = new PivotData(props, {\n      rowEnabled: rowSubtotalDisplay.enabled,\n      colEnabled: colSubtotalDisplay.enabled,\n      rowPartialOnTop: rowSubtotalDisplay.displayOnTop,\n      colPartialOnTop: colSubtotalDisplay.displayOnTop\n    });\n    const rowKeys = pivotData.getRowKeys();\n    const colKeys = pivotData.getColKeys();\n\n    // Also pre-calculate all the callbacks for cells, etc... This is nice to have to\n    // avoid re-calculations of the call-backs on cell expansions, etc...\n    const cellCallbacks = {};\n    const rowTotalCallbacks = {};\n    const colTotalCallbacks = {};\n    let grandTotalCallback = null;\n    if (tableOptions.clickCallback) {\n      rowKeys.forEach((rowKey) => {\n        const flatRowKey = flatKey(rowKey);\n        if (!(flatRowKey in cellCallbacks)) {\n          cellCallbacks[flatRowKey] = {};\n        }\n        colKeys.forEach((colKey) => {\n          cellCallbacks[flatRowKey][flatKey(colKey)] = this.clickHandler(\n            pivotData,\n            rowKey,\n            colKey\n          );\n        });\n      });\n\n      // Add in totals as well.\n      if (rowTotals) {\n        rowKeys.forEach((rowKey) => {\n          rowTotalCallbacks[flatKey(rowKey)] = this.clickHandler(\n            pivotData,\n            rowKey,\n            []\n          );\n        });\n      }\n      if (colTotals) {\n        colKeys.forEach((colKey) => {\n          colTotalCallbacks[flatKey(colKey)] = this.clickHandler(\n            pivotData,\n            [],\n            colKey\n          );\n        });\n      }\n      if (rowTotals && colTotals) {\n        grandTotalCallback = this.clickHandler(pivotData, [], []);\n      }\n    }\n\n    return {\n      pivotData,\n      colAttrs,\n      rowAttrs,\n      colKeys,\n      rowKeys,\n      rowTotals,\n      colTotals,\n      arrowCollapsed: subtotalOptions.arrowCollapsed,\n      arrowExpanded: subtotalOptions.arrowExpanded,\n      colSubtotalDisplay,\n      rowSubtotalDisplay,\n      cellCallbacks,\n      rowTotalCallbacks,\n      colTotalCallbacks,\n      grandTotalCallback,\n      namesMapping\n    };\n  }\n\n  clickHandler(pivotData, rowValues, colValues) {\n    const colAttrs = this.props.cols;\n    const rowAttrs = this.props.rows;\n    const value = pivotData.getAggregator(rowValues, colValues).value();\n    const filters = {};\n    const colLimit = Math.min(colAttrs.length, colValues.length);\n    for (let i = 0; i < colLimit; i += 1) {\n      const attr = colAttrs[i];\n      if (colValues[i] !== null) {\n        filters[attr] = colValues[i];\n      }\n    }\n    const rowLimit = Math.min(rowAttrs.length, rowValues.length);\n    for (let i = 0; i < rowLimit; i += 1) {\n      const attr = rowAttrs[i];\n      if (rowValues[i] !== null) {\n        filters[attr] = rowValues[i];\n      }\n    }\n    return (e) =>\n    this.props.tableOptions.clickCallback(e, value, filters, pivotData);\n  }\n\n  clickHeaderHandler(\n  pivotData,\n  values,\n  attrs,\n  attrIdx,\n  callback,\n  isSubtotal = false,\n  isGrandTotal = false)\n  {\n    const filters = {};\n    for (let i = 0; i <= attrIdx; i += 1) {\n      const attr = attrs[i];\n      filters[attr] = values[i];\n    }\n    return (e) =>\n    callback(\n      e,\n      values[attrIdx],\n      filters,\n      pivotData,\n      isSubtotal,\n      isGrandTotal\n    );\n  }\n\n  collapseAttr(rowOrCol, attrIdx, allKeys) {\n    return (e) => {\n      // Collapse an entire attribute.\n      e.stopPropagation();\n      const keyLen = attrIdx + 1;\n      const collapsed = allKeys.filter((k) => k.length === keyLen).map(flatKey);\n\n      const updates = {};\n      collapsed.forEach((k) => {\n        updates[k] = true;\n      });\n\n      if (rowOrCol) {\n        this.setState((state) => ({\n          collapsedRows: { ...state.collapsedRows, ...updates }\n        }));\n      } else {\n        this.setState((state) => ({\n          collapsedCols: { ...state.collapsedCols, ...updates }\n        }));\n      }\n    };\n  }\n\n  expandAttr(rowOrCol, attrIdx, allKeys) {\n    return (e) => {\n      // Expand an entire attribute. This implicitly implies expanding all of the\n      // parents as well. It's a bit inefficient but ah well...\n      e.stopPropagation();\n      const updates = {};\n      allKeys.forEach((k) => {\n        for (let i = 0; i <= attrIdx; i += 1) {\n          updates[flatKey(k.slice(0, i + 1))] = false;\n        }\n      });\n\n      if (rowOrCol) {\n        this.setState((state) => ({\n          collapsedRows: { ...state.collapsedRows, ...updates }\n        }));\n      } else {\n        this.setState((state) => ({\n          collapsedCols: { ...state.collapsedCols, ...updates }\n        }));\n      }\n    };\n  }\n\n  toggleRowKey(flatRowKey) {\n    return (e) => {\n      e.stopPropagation();\n      this.setState((state) => ({\n        collapsedRows: {\n          ...state.collapsedRows,\n          [flatRowKey]: !state.collapsedRows[flatRowKey]\n        }\n      }));\n    };\n  }\n\n  toggleColKey(flatColKey) {\n    return (e) => {\n      e.stopPropagation();\n      this.setState((state) => ({\n        collapsedCols: {\n          ...state.collapsedCols,\n          [flatColKey]: !state.collapsedCols[flatColKey]\n        }\n      }));\n    };\n  }\n\n  calcAttrSpans(attrArr, numAttrs) {\n    // Given an array of attribute values (i.e. each element is another array with\n    // the value at every level), compute the spans for every attribute value at\n    // every level. The return value is a nested array of the same shape. It has\n    // -1's for repeated values and the span number otherwise.\n\n    const spans = [];\n    // Index of the last new value\n    const li = Array(numAttrs).map(() => 0);\n    let lv = Array(numAttrs).map(() => null);\n    for (let i = 0; i < attrArr.length; i += 1) {\n      // Keep increasing span values as long as the last keys are the same. For\n      // the rest, record spans of 1. Update the indices too.\n      const cv = attrArr[i];\n      const ent = [];\n      let depth = 0;\n      const limit = Math.min(lv.length, cv.length);\n      while (depth < limit && lv[depth] === cv[depth]) {\n        ent.push(-1);\n        spans[li[depth]][depth] += 1;\n        depth += 1;\n      }\n      while (depth < cv.length) {\n        li[depth] = i;\n        ent.push(1);\n        depth += 1;\n      }\n      spans.push(ent);\n      lv = cv;\n    }\n    return spans;\n  }\n\n  renderColHeaderRow(attrName, attrIdx, pivotSettings) {\n    // Render a single row in the column header at the top of the pivot table.\n\n    const {\n      rowAttrs,\n      colAttrs,\n      colKeys,\n      visibleColKeys,\n      colAttrSpans,\n      rowTotals,\n      arrowExpanded,\n      arrowCollapsed,\n      colSubtotalDisplay,\n      maxColVisible,\n      pivotData,\n      namesMapping\n    } = pivotSettings;\n    const {\n      highlightHeaderCellsOnHover,\n      omittedHighlightHeaderGroups = [],\n      highlightedHeaderCells,\n      dateFormatters\n    } = this.props.tableOptions;\n\n    const spaceCell =\n    attrIdx === 0 && rowAttrs.length !== 0 ?\n    ___EmotionJSX(\"th\", {\n      key: \"padding\",\n      colSpan: rowAttrs.length,\n      rowSpan: colAttrs.length,\n      \"aria-hidden\": \"true\" }\n    ) :\n    null;\n\n    const needToggle =\n    colSubtotalDisplay.enabled && attrIdx !== colAttrs.length - 1;\n    let arrowClickHandle = null;\n    let subArrow = null;\n    if (needToggle) {\n      arrowClickHandle =\n      attrIdx + 1 < maxColVisible ?\n      this.collapseAttr(false, attrIdx, colKeys) :\n      this.expandAttr(false, attrIdx, colKeys);\n      subArrow = attrIdx + 1 < maxColVisible ? arrowExpanded : arrowCollapsed;\n    }\n    const attrNameCell =\n    ___EmotionJSX(\"th\", { key: \"label\", className: \"pvtAxisLabel\" },\n    displayHeaderCell(\n      needToggle,\n      subArrow,\n      arrowClickHandle,\n      attrName,\n      namesMapping\n    )\n    );\n\n\n    const attrValueCells = [];\n    const rowIncrSpan = rowAttrs.length !== 0 ? 1 : 0;\n    // Iterate through columns. Jump over duplicate values.\n    let i = 0;\n    while (i < visibleColKeys.length) {\n      let handleContextMenu;\n      const colKey = visibleColKeys[i];\n      const colSpan = attrIdx < colKey.length ? colAttrSpans[i][attrIdx] : 1;\n      let colLabelClass = 'pvtColLabel';\n      if (attrIdx < colKey.length) {\n        if (!omittedHighlightHeaderGroups.includes(colAttrs[attrIdx])) {\n          if (highlightHeaderCellsOnHover) {\n            colLabelClass += ' hoverable';\n          }\n          handleContextMenu = (e) =>\n          this.props.onContextMenu(e, colKey, undefined, {\n            [attrName]: colKey[attrIdx]\n          });\n        }\n        if (\n        highlightedHeaderCells &&\n        Array.isArray(highlightedHeaderCells[colAttrs[attrIdx]]) &&\n        highlightedHeaderCells[colAttrs[attrIdx]].includes(colKey[attrIdx]))\n        {\n          colLabelClass += ' active';\n        }\n\n        const rowSpan = 1 + (attrIdx === colAttrs.length - 1 ? rowIncrSpan : 0);\n        const flatColKey = flatKey(colKey.slice(0, attrIdx + 1));\n        const onArrowClick = needToggle ? this.toggleColKey(flatColKey) : null;\n\n        const headerCellFormattedValue =\n        dateFormatters &&\n        dateFormatters[attrName] &&\n        typeof dateFormatters[attrName] === 'function' ?\n        dateFormatters[attrName](colKey[attrIdx]) :\n        colKey[attrIdx];\n        attrValueCells.push(\n          ___EmotionJSX(\"th\", {\n            className: colLabelClass,\n            key: `colKey-${flatColKey}`,\n            colSpan: colSpan,\n            rowSpan: rowSpan,\n            role: \"columnheader button\",\n            onClick: this.clickHeaderHandler(\n              pivotData,\n              colKey,\n              this.props.cols,\n              attrIdx,\n              this.props.tableOptions.clickColumnHeaderCallback\n            ),\n            onContextMenu: handleContextMenu },\n\n          displayHeaderCell(\n            needToggle,\n            this.state.collapsedCols[flatColKey] ?\n            arrowCollapsed :\n            arrowExpanded,\n            onArrowClick,\n            headerCellFormattedValue,\n            namesMapping\n          )\n          )\n        );\n      } else if (attrIdx === colKey.length) {\n        const rowSpan = colAttrs.length - colKey.length + rowIncrSpan;\n        attrValueCells.push(\n          ___EmotionJSX(\"th\", {\n            className: `${colLabelClass} pvtSubtotalLabel`,\n            key: `colKeyBuffer-${flatKey(colKey)}`,\n            colSpan: colSpan,\n            rowSpan: rowSpan,\n            role: \"columnheader button\",\n            onClick: this.clickHeaderHandler(\n              pivotData,\n              colKey,\n              this.props.cols,\n              attrIdx,\n              this.props.tableOptions.clickColumnHeaderCallback,\n              true\n            ) },\n\n          t('Subtotal')\n          )\n        );\n      }\n      // The next colSpan columns will have the same value anyway...\n      i += colSpan;\n    }\n\n    const totalCell =\n    attrIdx === 0 && rowTotals ?\n    ___EmotionJSX(\"th\", {\n      key: \"total\",\n      className: \"pvtTotalLabel\",\n      rowSpan: colAttrs.length + Math.min(rowAttrs.length, 1),\n      role: \"columnheader button\",\n      onClick: this.clickHeaderHandler(\n        pivotData,\n        [],\n        this.props.cols,\n        attrIdx,\n        this.props.tableOptions.clickColumnHeaderCallback,\n        false,\n        true\n      ) },\n\n    t('Total (%(aggregatorName)s)', {\n      aggregatorName: t(this.props.aggregatorName)\n    })\n    ) :\n    null;\n\n    const cells = [spaceCell, attrNameCell, ...attrValueCells, totalCell];\n    return ___EmotionJSX(\"tr\", { key: `colAttr-${attrIdx}` }, cells);\n  }\n\n  renderRowHeaderRow(pivotSettings) {\n    // Render just the attribute names of the rows (the actual attribute values\n    // will show up in the individual rows).\n\n    const {\n      rowAttrs,\n      colAttrs,\n      rowKeys,\n      arrowCollapsed,\n      arrowExpanded,\n      rowSubtotalDisplay,\n      maxRowVisible,\n      pivotData,\n      namesMapping\n    } = pivotSettings;\n    return (\n      ___EmotionJSX(\"tr\", { key: \"rowHdr\" },\n      rowAttrs.map((r, i) => {\n        const needLabelToggle =\n        rowSubtotalDisplay.enabled && i !== rowAttrs.length - 1;\n        let arrowClickHandle = null;\n        let subArrow = null;\n        if (needLabelToggle) {\n          arrowClickHandle =\n          i + 1 < maxRowVisible ?\n          this.collapseAttr(true, i, rowKeys) :\n          this.expandAttr(true, i, rowKeys);\n          subArrow = i + 1 < maxRowVisible ? arrowExpanded : arrowCollapsed;\n        }\n        return (\n          ___EmotionJSX(\"th\", { className: \"pvtAxisLabel\", key: `rowAttr-${i}` },\n          displayHeaderCell(\n            needLabelToggle,\n            subArrow,\n            arrowClickHandle,\n            r,\n            namesMapping\n          )\n          ));\n\n      }),\n      ___EmotionJSX(\"th\", {\n        className: \"pvtTotalLabel\",\n        key: \"padding\",\n        role: \"columnheader button\",\n        onClick: this.clickHeaderHandler(\n          pivotData,\n          [],\n          this.props.rows,\n          0,\n          this.props.tableOptions.clickRowHeaderCallback,\n          false,\n          true\n        ) },\n\n      colAttrs.length === 0 ?\n      t('Total (%(aggregatorName)s)', {\n        aggregatorName: t(this.props.aggregatorName)\n      }) :\n      null\n      )\n      ));\n\n  }\n\n  renderTableRow(rowKey, rowIdx, pivotSettings) {\n    // Render a single row in the pivot table.\n\n    const {\n      rowAttrs,\n      colAttrs,\n      rowAttrSpans,\n      visibleColKeys,\n      pivotData,\n      rowTotals,\n      rowSubtotalDisplay,\n      arrowExpanded,\n      arrowCollapsed,\n      cellCallbacks,\n      rowTotalCallbacks,\n      namesMapping\n    } = pivotSettings;\n\n    const {\n      highlightHeaderCellsOnHover,\n      omittedHighlightHeaderGroups = [],\n      highlightedHeaderCells,\n      cellColorFormatters,\n      dateFormatters\n    } = this.props.tableOptions;\n    const flatRowKey = flatKey(rowKey);\n\n    const colIncrSpan = colAttrs.length !== 0 ? 1 : 0;\n    const attrValueCells = rowKey.map((r, i) => {\n      let handleContextMenu;\n      let valueCellClassName = 'pvtRowLabel';\n      if (!omittedHighlightHeaderGroups.includes(rowAttrs[i])) {\n        if (highlightHeaderCellsOnHover) {\n          valueCellClassName += ' hoverable';\n        }\n        handleContextMenu = (e) =>\n        this.props.onContextMenu(e, undefined, rowKey, {\n          [rowAttrs[i]]: r\n        });\n      }\n      if (\n      highlightedHeaderCells &&\n      Array.isArray(highlightedHeaderCells[rowAttrs[i]]) &&\n      highlightedHeaderCells[rowAttrs[i]].includes(r))\n      {\n        valueCellClassName += ' active';\n      }\n      const rowSpan = rowAttrSpans[rowIdx][i];\n      if (rowSpan > 0) {\n        const flatRowKey = flatKey(rowKey.slice(0, i + 1));\n        const colSpan = 1 + (i === rowAttrs.length - 1 ? colIncrSpan : 0);\n        const needRowToggle =\n        rowSubtotalDisplay.enabled && i !== rowAttrs.length - 1;\n        const onArrowClick = needRowToggle ?\n        this.toggleRowKey(flatRowKey) :\n        null;\n\n        const headerCellFormattedValue =\n        dateFormatters && dateFormatters[rowAttrs[i]] ?\n        dateFormatters[rowAttrs[i]](r) :\n        r;\n        return (\n          ___EmotionJSX(\"th\", {\n            key: `rowKeyLabel-${i}`,\n            className: valueCellClassName,\n            rowSpan: rowSpan,\n            colSpan: colSpan,\n            role: \"columnheader button\",\n            onClick: this.clickHeaderHandler(\n              pivotData,\n              rowKey,\n              this.props.rows,\n              i,\n              this.props.tableOptions.clickRowHeaderCallback\n            ),\n            onContextMenu: handleContextMenu },\n\n          displayHeaderCell(\n            needRowToggle,\n            this.state.collapsedRows[flatRowKey] ?\n            arrowCollapsed :\n            arrowExpanded,\n            onArrowClick,\n            headerCellFormattedValue,\n            namesMapping\n          )\n          ));\n\n      }\n      return null;\n    });\n\n    const attrValuePaddingCell =\n    rowKey.length < rowAttrs.length ?\n    ___EmotionJSX(\"th\", {\n      className: \"pvtRowLabel pvtSubtotalLabel\",\n      key: \"rowKeyBuffer\",\n      colSpan: rowAttrs.length - rowKey.length + colIncrSpan,\n      rowSpan: 1,\n      role: \"columnheader button\",\n      onClick: this.clickHeaderHandler(\n        pivotData,\n        rowKey,\n        this.props.rows,\n        rowKey.length,\n        this.props.tableOptions.clickRowHeaderCallback,\n        true\n      ) },\n\n    t('Subtotal')\n    ) :\n    null;\n\n    const rowClickHandlers = cellCallbacks[flatRowKey] || {};\n    const valueCells = visibleColKeys.map((colKey) => {\n      const flatColKey = flatKey(colKey);\n      const agg = pivotData.getAggregator(rowKey, colKey);\n      const aggValue = agg.value();\n\n      const keys = [...rowKey, ...colKey];\n      let backgroundColor;\n      if (cellColorFormatters) {\n        Object.values(cellColorFormatters).forEach((cellColorFormatter) => {\n          if (Array.isArray(cellColorFormatter)) {\n            keys.forEach((key) => {\n              if (backgroundColor) {\n                return;\n              }\n              cellColorFormatter.\n              filter((formatter) => formatter.column === key).\n              forEach((formatter) => {\n                const formatterResult = formatter.getColorFromValue(aggValue);\n                if (formatterResult) {\n                  backgroundColor = formatterResult;\n                }\n              });\n            });\n          }\n        });\n      }\n\n      const style = agg.isSubtotal ?\n      { fontWeight: 'bold' } :\n      { backgroundColor };\n\n      return (\n        ___EmotionJSX(\"td\", {\n          role: \"gridcell\",\n          className: \"pvtVal\",\n          key: `pvtVal-${flatColKey}`,\n          onClick: rowClickHandlers[flatColKey],\n          onContextMenu: (e) => this.props.onContextMenu(e, colKey, rowKey),\n          style: style },\n\n        agg.format(aggValue)\n        ));\n\n    });\n\n    let totalCell = null;\n    if (rowTotals) {\n      const agg = pivotData.getAggregator(rowKey, []);\n      const aggValue = agg.value();\n      totalCell =\n      ___EmotionJSX(\"td\", {\n        role: \"gridcell\",\n        key: \"total\",\n        className: \"pvtTotal\",\n        onClick: rowTotalCallbacks[flatRowKey],\n        onContextMenu: (e) => this.props.onContextMenu(e, undefined, rowKey) },\n\n      agg.format(aggValue)\n      );\n\n    }\n\n    const rowCells = [\n    ...attrValueCells,\n    attrValuePaddingCell,\n    ...valueCells,\n    totalCell];\n\n\n    return ___EmotionJSX(\"tr\", { key: `keyRow-${flatRowKey}` }, rowCells);\n  }\n\n  renderTotalsRow(pivotSettings) {\n    // Render the final totals rows that has the totals for all the columns.\n\n    const {\n      rowAttrs,\n      colAttrs,\n      visibleColKeys,\n      rowTotals,\n      pivotData,\n      colTotalCallbacks,\n      grandTotalCallback\n    } = pivotSettings;\n\n    const totalLabelCell =\n    ___EmotionJSX(\"th\", {\n      key: \"label\",\n      className: \"pvtTotalLabel pvtRowTotalLabel\",\n      colSpan: rowAttrs.length + Math.min(colAttrs.length, 1),\n      role: \"columnheader button\",\n      onClick: this.clickHeaderHandler(\n        pivotData,\n        [],\n        this.props.rows,\n        0,\n        this.props.tableOptions.clickRowHeaderCallback,\n        false,\n        true\n      ) },\n\n    t('Total (%(aggregatorName)s)', {\n      aggregatorName: t(this.props.aggregatorName)\n    })\n    );\n\n\n    const totalValueCells = visibleColKeys.map((colKey) => {\n      const flatColKey = flatKey(colKey);\n      const agg = pivotData.getAggregator([], colKey);\n      const aggValue = agg.value();\n\n      return (\n        ___EmotionJSX(\"td\", {\n          role: \"gridcell\",\n          className: \"pvtTotal pvtRowTotal\",\n          key: `total-${flatColKey}`,\n          onClick: colTotalCallbacks[flatColKey],\n          onContextMenu: (e) => this.props.onContextMenu(e, colKey, undefined),\n          style: { padding: '5px' } },\n\n        agg.format(aggValue)\n        ));\n\n    });\n\n    let grandTotalCell = null;\n    if (rowTotals) {\n      const agg = pivotData.getAggregator([], []);\n      const aggValue = agg.value();\n      grandTotalCell =\n      ___EmotionJSX(\"td\", {\n        role: \"gridcell\",\n        key: \"total\",\n        className: \"pvtGrandTotal pvtRowTotal\",\n        onClick: grandTotalCallback,\n        onContextMenu: (e) => this.props.onContextMenu(e, undefined, undefined) },\n\n      agg.format(aggValue)\n      );\n\n    }\n\n    const totalCells = [totalLabelCell, ...totalValueCells, grandTotalCell];\n\n    return (\n      ___EmotionJSX(\"tr\", { key: \"total\", className: \"pvtRowTotals\" },\n      totalCells\n      ));\n\n  }\n\n  visibleKeys(keys, collapsed, numAttrs, subtotalDisplay) {\n    return keys.filter(\n      (key) =>\n      // Is the key hidden by one of its parents?\n      !key.some((k, j) => collapsed[flatKey(key.slice(0, j))]) && (\n      // Leaf key.\n      key.length === numAttrs ||\n      // Children hidden. Must show total.\n      flatKey(key) in collapsed ||\n      // Don't hide totals.\n      !subtotalDisplay.hideOnExpand)\n    );\n  }\n\n  isDashboardEditMode() {\n    return document.contains(document.querySelector('.dashboard--editing'));\n  }\n\n  render() {\n    if (this.cachedProps !== this.props) {\n      this.cachedProps = this.props;\n      this.cachedBasePivotSettings = this.getBasePivotSettings();\n    }\n    const {\n      colAttrs,\n      rowAttrs,\n      rowKeys,\n      colKeys,\n      colTotals,\n      rowSubtotalDisplay,\n      colSubtotalDisplay\n    } = this.cachedBasePivotSettings;\n\n    // Need to account for exclusions to compute the effective row\n    // and column keys.\n    const visibleRowKeys = this.visibleKeys(\n      rowKeys,\n      this.state.collapsedRows,\n      rowAttrs.length,\n      rowSubtotalDisplay\n    );\n    const visibleColKeys = this.visibleKeys(\n      colKeys,\n      this.state.collapsedCols,\n      colAttrs.length,\n      colSubtotalDisplay\n    );\n\n    const pivotSettings = {\n      visibleRowKeys,\n      maxRowVisible: Math.max(...visibleRowKeys.map((k) => k.length)),\n      visibleColKeys,\n      maxColVisible: Math.max(...visibleColKeys.map((k) => k.length)),\n      rowAttrSpans: this.calcAttrSpans(visibleRowKeys, rowAttrs.length),\n      colAttrSpans: this.calcAttrSpans(visibleColKeys, colAttrs.length),\n      ...this.cachedBasePivotSettings\n    };\n\n    return (\n      ___EmotionJSX(Styles, { isDashboardEditMode: this.isDashboardEditMode() },\n      ___EmotionJSX(\"table\", { className: \"pvtTable\", role: \"grid\" },\n      ___EmotionJSX(\"thead\", null,\n      colAttrs.map((c, j) =>\n      this.renderColHeaderRow(c, j, pivotSettings)\n      ),\n      rowAttrs.length !== 0 && this.renderRowHeaderRow(pivotSettings)\n      ),\n      ___EmotionJSX(\"tbody\", null,\n      visibleRowKeys.map((r, i) =>\n      this.renderTableRow(r, i, pivotSettings)\n      ),\n      colTotals && this.renderTotalsRow(pivotSettings)\n      )\n      )\n      ));\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\nTableRenderer.propTypes = {\n  ...PivotData.propTypes,\n  tableOptions: PropTypes.object,\n  onContextMenu: PropTypes.func\n};\nTableRenderer.defaultProps = { ...PivotData.defaultProps, tableOptions: {} };;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(parseLabel, \"parseLabel\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/TableRenderers.jsx\");reactHotLoader.register(displayHeaderCell, \"displayHeaderCell\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/TableRenderers.jsx\");reactHotLoader.register(TableRenderer, \"TableRenderer\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/TableRenderers.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["React","t","PropTypes","PivotData","flatKey","Styles","jsx","___EmotionJSX","parseLabel","value","String","displayHeaderCell","needToggle","ArrowIcon","onArrowClick","namesMapping","name","className","role","tabIndex","onClick","TableRenderer","Component","constructor","props","state","collapsedRows","collapsedCols","clickHeaderHandler","bind","clickHandler","getBasePivotSettings","colAttrs","cols","rowAttrs","rows","tableOptions","rowTotals","colTotals","length","subtotalOptions","arrowCollapsed","arrowExpanded","colSubtotalDisplay","displayOnTop","enabled","colSubTotals","hideOnExpand","rowSubtotalDisplay","rowSubTotals","pivotData","rowEnabled","colEnabled","rowPartialOnTop","colPartialOnTop","rowKeys","getRowKeys","colKeys","getColKeys","cellCallbacks","rowTotalCallbacks","colTotalCallbacks","grandTotalCallback","clickCallback","forEach","rowKey","flatRowKey","colKey","rowValues","colValues","getAggregator","filters","colLimit","Math","min","i","attr","rowLimit","e","values","attrs","attrIdx","callback","isSubtotal","isGrandTotal","collapseAttr","rowOrCol","allKeys","stopPropagation","keyLen","collapsed","filter","k","map","updates","setState","expandAttr","slice","toggleRowKey","toggleColKey","flatColKey","calcAttrSpans","attrArr","numAttrs","spans","li","Array","lv","cv","ent","depth","limit","push","renderColHeaderRow","attrName","pivotSettings","visibleColKeys","colAttrSpans","maxColVisible","highlightHeaderCellsOnHover","omittedHighlightHeaderGroups","highlightedHeaderCells","dateFormatters","spaceCell","key","colSpan","rowSpan","arrowClickHandle","subArrow","attrNameCell","attrValueCells","rowIncrSpan","handleContextMenu","colLabelClass","includes","onContextMenu","undefined","isArray","headerCellFormattedValue","clickColumnHeaderCallback","totalCell","aggregatorName","cells","renderRowHeaderRow","maxRowVisible","r","needLabelToggle","clickRowHeaderCallback","renderTableRow","rowIdx","rowAttrSpans","cellColorFormatters","colIncrSpan","valueCellClassName","needRowToggle","attrValuePaddingCell","rowClickHandlers","valueCells","agg","aggValue","keys","backgroundColor","Object","cellColorFormatter","formatter","column","formatterResult","getColorFromValue","style","fontWeight","format","rowCells","renderTotalsRow","totalLabelCell","totalValueCells","padding","grandTotalCell","totalCells","visibleKeys","subtotalDisplay","some","j","isDashboardEditMode","document","contains","querySelector","render","cachedProps","cachedBasePivotSettings","visibleRowKeys","max","c","__reactstandin__regenerateByEval","code","eval","propTypes","object","func","defaultProps","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/TableRenderers.jsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { t } from '@superset-ui/core';\nimport PropTypes from 'prop-types';\nimport { PivotData, flatKey } from './utilities';\nimport { Styles } from './Styles';\n\nconst parseLabel = value => {\n  if (typeof value === 'string') {\n    if (value === 'metric') return t('metric');\n    return value;\n  }\n  if (typeof value === 'number') {\n    return value;\n  }\n  return String(value);\n};\n\nfunction displayHeaderCell(\n  needToggle,\n  ArrowIcon,\n  onArrowClick,\n  value,\n  namesMapping,\n) {\n  const name = namesMapping[value] || value;\n  return needToggle ? (\n    <span className=\"toggle-wrapper\">\n      <span\n        role=\"button\"\n        tabIndex=\"0\"\n        className=\"toggle\"\n        onClick={onArrowClick}\n      >\n        {ArrowIcon}\n      </span>\n      <span className=\"toggle-val\">{parseLabel(name)}</span>\n    </span>\n  ) : (\n    parseLabel(name)\n  );\n}\n\nexport class TableRenderer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // We need state to record which entries are collapsed and which aren't.\n    // This is an object with flat-keys indicating if the corresponding rows\n    // should be collapsed.\n    this.state = { collapsedRows: {}, collapsedCols: {} };\n\n    this.clickHeaderHandler = this.clickHeaderHandler.bind(this);\n    this.clickHandler = this.clickHandler.bind(this);\n  }\n\n  getBasePivotSettings() {\n    // One-time extraction of pivot settings that we'll use throughout the render.\n\n    const { props } = this;\n    const colAttrs = props.cols;\n    const rowAttrs = props.rows;\n\n    const tableOptions = {\n      rowTotals: true,\n      colTotals: true,\n      ...props.tableOptions,\n    };\n    const rowTotals = tableOptions.rowTotals || colAttrs.length === 0;\n    const colTotals = tableOptions.colTotals || rowAttrs.length === 0;\n\n    const namesMapping = props.namesMapping || {};\n    const subtotalOptions = {\n      arrowCollapsed: '\\u25B2',\n      arrowExpanded: '\\u25BC',\n      ...props.subtotalOptions,\n    };\n\n    const colSubtotalDisplay = {\n      displayOnTop: false,\n      enabled: tableOptions.colSubTotals,\n      hideOnExpand: false,\n      ...subtotalOptions.colSubtotalDisplay,\n    };\n\n    const rowSubtotalDisplay = {\n      displayOnTop: false,\n      enabled: tableOptions.rowSubTotals,\n      hideOnExpand: false,\n      ...subtotalOptions.rowSubtotalDisplay,\n    };\n\n    const pivotData = new PivotData(props, {\n      rowEnabled: rowSubtotalDisplay.enabled,\n      colEnabled: colSubtotalDisplay.enabled,\n      rowPartialOnTop: rowSubtotalDisplay.displayOnTop,\n      colPartialOnTop: colSubtotalDisplay.displayOnTop,\n    });\n    const rowKeys = pivotData.getRowKeys();\n    const colKeys = pivotData.getColKeys();\n\n    // Also pre-calculate all the callbacks for cells, etc... This is nice to have to\n    // avoid re-calculations of the call-backs on cell expansions, etc...\n    const cellCallbacks = {};\n    const rowTotalCallbacks = {};\n    const colTotalCallbacks = {};\n    let grandTotalCallback = null;\n    if (tableOptions.clickCallback) {\n      rowKeys.forEach(rowKey => {\n        const flatRowKey = flatKey(rowKey);\n        if (!(flatRowKey in cellCallbacks)) {\n          cellCallbacks[flatRowKey] = {};\n        }\n        colKeys.forEach(colKey => {\n          cellCallbacks[flatRowKey][flatKey(colKey)] = this.clickHandler(\n            pivotData,\n            rowKey,\n            colKey,\n          );\n        });\n      });\n\n      // Add in totals as well.\n      if (rowTotals) {\n        rowKeys.forEach(rowKey => {\n          rowTotalCallbacks[flatKey(rowKey)] = this.clickHandler(\n            pivotData,\n            rowKey,\n            [],\n          );\n        });\n      }\n      if (colTotals) {\n        colKeys.forEach(colKey => {\n          colTotalCallbacks[flatKey(colKey)] = this.clickHandler(\n            pivotData,\n            [],\n            colKey,\n          );\n        });\n      }\n      if (rowTotals && colTotals) {\n        grandTotalCallback = this.clickHandler(pivotData, [], []);\n      }\n    }\n\n    return {\n      pivotData,\n      colAttrs,\n      rowAttrs,\n      colKeys,\n      rowKeys,\n      rowTotals,\n      colTotals,\n      arrowCollapsed: subtotalOptions.arrowCollapsed,\n      arrowExpanded: subtotalOptions.arrowExpanded,\n      colSubtotalDisplay,\n      rowSubtotalDisplay,\n      cellCallbacks,\n      rowTotalCallbacks,\n      colTotalCallbacks,\n      grandTotalCallback,\n      namesMapping,\n    };\n  }\n\n  clickHandler(pivotData, rowValues, colValues) {\n    const colAttrs = this.props.cols;\n    const rowAttrs = this.props.rows;\n    const value = pivotData.getAggregator(rowValues, colValues).value();\n    const filters = {};\n    const colLimit = Math.min(colAttrs.length, colValues.length);\n    for (let i = 0; i < colLimit; i += 1) {\n      const attr = colAttrs[i];\n      if (colValues[i] !== null) {\n        filters[attr] = colValues[i];\n      }\n    }\n    const rowLimit = Math.min(rowAttrs.length, rowValues.length);\n    for (let i = 0; i < rowLimit; i += 1) {\n      const attr = rowAttrs[i];\n      if (rowValues[i] !== null) {\n        filters[attr] = rowValues[i];\n      }\n    }\n    return e =>\n      this.props.tableOptions.clickCallback(e, value, filters, pivotData);\n  }\n\n  clickHeaderHandler(\n    pivotData,\n    values,\n    attrs,\n    attrIdx,\n    callback,\n    isSubtotal = false,\n    isGrandTotal = false,\n  ) {\n    const filters = {};\n    for (let i = 0; i <= attrIdx; i += 1) {\n      const attr = attrs[i];\n      filters[attr] = values[i];\n    }\n    return e =>\n      callback(\n        e,\n        values[attrIdx],\n        filters,\n        pivotData,\n        isSubtotal,\n        isGrandTotal,\n      );\n  }\n\n  collapseAttr(rowOrCol, attrIdx, allKeys) {\n    return e => {\n      // Collapse an entire attribute.\n      e.stopPropagation();\n      const keyLen = attrIdx + 1;\n      const collapsed = allKeys.filter(k => k.length === keyLen).map(flatKey);\n\n      const updates = {};\n      collapsed.forEach(k => {\n        updates[k] = true;\n      });\n\n      if (rowOrCol) {\n        this.setState(state => ({\n          collapsedRows: { ...state.collapsedRows, ...updates },\n        }));\n      } else {\n        this.setState(state => ({\n          collapsedCols: { ...state.collapsedCols, ...updates },\n        }));\n      }\n    };\n  }\n\n  expandAttr(rowOrCol, attrIdx, allKeys) {\n    return e => {\n      // Expand an entire attribute. This implicitly implies expanding all of the\n      // parents as well. It's a bit inefficient but ah well...\n      e.stopPropagation();\n      const updates = {};\n      allKeys.forEach(k => {\n        for (let i = 0; i <= attrIdx; i += 1) {\n          updates[flatKey(k.slice(0, i + 1))] = false;\n        }\n      });\n\n      if (rowOrCol) {\n        this.setState(state => ({\n          collapsedRows: { ...state.collapsedRows, ...updates },\n        }));\n      } else {\n        this.setState(state => ({\n          collapsedCols: { ...state.collapsedCols, ...updates },\n        }));\n      }\n    };\n  }\n\n  toggleRowKey(flatRowKey) {\n    return e => {\n      e.stopPropagation();\n      this.setState(state => ({\n        collapsedRows: {\n          ...state.collapsedRows,\n          [flatRowKey]: !state.collapsedRows[flatRowKey],\n        },\n      }));\n    };\n  }\n\n  toggleColKey(flatColKey) {\n    return e => {\n      e.stopPropagation();\n      this.setState(state => ({\n        collapsedCols: {\n          ...state.collapsedCols,\n          [flatColKey]: !state.collapsedCols[flatColKey],\n        },\n      }));\n    };\n  }\n\n  calcAttrSpans(attrArr, numAttrs) {\n    // Given an array of attribute values (i.e. each element is another array with\n    // the value at every level), compute the spans for every attribute value at\n    // every level. The return value is a nested array of the same shape. It has\n    // -1's for repeated values and the span number otherwise.\n\n    const spans = [];\n    // Index of the last new value\n    const li = Array(numAttrs).map(() => 0);\n    let lv = Array(numAttrs).map(() => null);\n    for (let i = 0; i < attrArr.length; i += 1) {\n      // Keep increasing span values as long as the last keys are the same. For\n      // the rest, record spans of 1. Update the indices too.\n      const cv = attrArr[i];\n      const ent = [];\n      let depth = 0;\n      const limit = Math.min(lv.length, cv.length);\n      while (depth < limit && lv[depth] === cv[depth]) {\n        ent.push(-1);\n        spans[li[depth]][depth] += 1;\n        depth += 1;\n      }\n      while (depth < cv.length) {\n        li[depth] = i;\n        ent.push(1);\n        depth += 1;\n      }\n      spans.push(ent);\n      lv = cv;\n    }\n    return spans;\n  }\n\n  renderColHeaderRow(attrName, attrIdx, pivotSettings) {\n    // Render a single row in the column header at the top of the pivot table.\n\n    const {\n      rowAttrs,\n      colAttrs,\n      colKeys,\n      visibleColKeys,\n      colAttrSpans,\n      rowTotals,\n      arrowExpanded,\n      arrowCollapsed,\n      colSubtotalDisplay,\n      maxColVisible,\n      pivotData,\n      namesMapping,\n    } = pivotSettings;\n    const {\n      highlightHeaderCellsOnHover,\n      omittedHighlightHeaderGroups = [],\n      highlightedHeaderCells,\n      dateFormatters,\n    } = this.props.tableOptions;\n\n    const spaceCell =\n      attrIdx === 0 && rowAttrs.length !== 0 ? (\n        <th\n          key=\"padding\"\n          colSpan={rowAttrs.length}\n          rowSpan={colAttrs.length}\n          aria-hidden=\"true\"\n        />\n      ) : null;\n\n    const needToggle =\n      colSubtotalDisplay.enabled && attrIdx !== colAttrs.length - 1;\n    let arrowClickHandle = null;\n    let subArrow = null;\n    if (needToggle) {\n      arrowClickHandle =\n        attrIdx + 1 < maxColVisible\n          ? this.collapseAttr(false, attrIdx, colKeys)\n          : this.expandAttr(false, attrIdx, colKeys);\n      subArrow = attrIdx + 1 < maxColVisible ? arrowExpanded : arrowCollapsed;\n    }\n    const attrNameCell = (\n      <th key=\"label\" className=\"pvtAxisLabel\">\n        {displayHeaderCell(\n          needToggle,\n          subArrow,\n          arrowClickHandle,\n          attrName,\n          namesMapping,\n        )}\n      </th>\n    );\n\n    const attrValueCells = [];\n    const rowIncrSpan = rowAttrs.length !== 0 ? 1 : 0;\n    // Iterate through columns. Jump over duplicate values.\n    let i = 0;\n    while (i < visibleColKeys.length) {\n      let handleContextMenu;\n      const colKey = visibleColKeys[i];\n      const colSpan = attrIdx < colKey.length ? colAttrSpans[i][attrIdx] : 1;\n      let colLabelClass = 'pvtColLabel';\n      if (attrIdx < colKey.length) {\n        if (!omittedHighlightHeaderGroups.includes(colAttrs[attrIdx])) {\n          if (highlightHeaderCellsOnHover) {\n            colLabelClass += ' hoverable';\n          }\n          handleContextMenu = e =>\n            this.props.onContextMenu(e, colKey, undefined, {\n              [attrName]: colKey[attrIdx],\n            });\n        }\n        if (\n          highlightedHeaderCells &&\n          Array.isArray(highlightedHeaderCells[colAttrs[attrIdx]]) &&\n          highlightedHeaderCells[colAttrs[attrIdx]].includes(colKey[attrIdx])\n        ) {\n          colLabelClass += ' active';\n        }\n\n        const rowSpan = 1 + (attrIdx === colAttrs.length - 1 ? rowIncrSpan : 0);\n        const flatColKey = flatKey(colKey.slice(0, attrIdx + 1));\n        const onArrowClick = needToggle ? this.toggleColKey(flatColKey) : null;\n\n        const headerCellFormattedValue =\n          dateFormatters &&\n          dateFormatters[attrName] &&\n          typeof dateFormatters[attrName] === 'function'\n            ? dateFormatters[attrName](colKey[attrIdx])\n            : colKey[attrIdx];\n        attrValueCells.push(\n          <th\n            className={colLabelClass}\n            key={`colKey-${flatColKey}`}\n            colSpan={colSpan}\n            rowSpan={rowSpan}\n            role=\"columnheader button\"\n            onClick={this.clickHeaderHandler(\n              pivotData,\n              colKey,\n              this.props.cols,\n              attrIdx,\n              this.props.tableOptions.clickColumnHeaderCallback,\n            )}\n            onContextMenu={handleContextMenu}\n          >\n            {displayHeaderCell(\n              needToggle,\n              this.state.collapsedCols[flatColKey]\n                ? arrowCollapsed\n                : arrowExpanded,\n              onArrowClick,\n              headerCellFormattedValue,\n              namesMapping,\n            )}\n          </th>,\n        );\n      } else if (attrIdx === colKey.length) {\n        const rowSpan = colAttrs.length - colKey.length + rowIncrSpan;\n        attrValueCells.push(\n          <th\n            className={`${colLabelClass} pvtSubtotalLabel`}\n            key={`colKeyBuffer-${flatKey(colKey)}`}\n            colSpan={colSpan}\n            rowSpan={rowSpan}\n            role=\"columnheader button\"\n            onClick={this.clickHeaderHandler(\n              pivotData,\n              colKey,\n              this.props.cols,\n              attrIdx,\n              this.props.tableOptions.clickColumnHeaderCallback,\n              true,\n            )}\n          >\n            {t('Subtotal')}\n          </th>,\n        );\n      }\n      // The next colSpan columns will have the same value anyway...\n      i += colSpan;\n    }\n\n    const totalCell =\n      attrIdx === 0 && rowTotals ? (\n        <th\n          key=\"total\"\n          className=\"pvtTotalLabel\"\n          rowSpan={colAttrs.length + Math.min(rowAttrs.length, 1)}\n          role=\"columnheader button\"\n          onClick={this.clickHeaderHandler(\n            pivotData,\n            [],\n            this.props.cols,\n            attrIdx,\n            this.props.tableOptions.clickColumnHeaderCallback,\n            false,\n            true,\n          )}\n        >\n          {t('Total (%(aggregatorName)s)', {\n            aggregatorName: t(this.props.aggregatorName),\n          })}\n        </th>\n      ) : null;\n\n    const cells = [spaceCell, attrNameCell, ...attrValueCells, totalCell];\n    return <tr key={`colAttr-${attrIdx}`}>{cells}</tr>;\n  }\n\n  renderRowHeaderRow(pivotSettings) {\n    // Render just the attribute names of the rows (the actual attribute values\n    // will show up in the individual rows).\n\n    const {\n      rowAttrs,\n      colAttrs,\n      rowKeys,\n      arrowCollapsed,\n      arrowExpanded,\n      rowSubtotalDisplay,\n      maxRowVisible,\n      pivotData,\n      namesMapping,\n    } = pivotSettings;\n    return (\n      <tr key=\"rowHdr\">\n        {rowAttrs.map((r, i) => {\n          const needLabelToggle =\n            rowSubtotalDisplay.enabled && i !== rowAttrs.length - 1;\n          let arrowClickHandle = null;\n          let subArrow = null;\n          if (needLabelToggle) {\n            arrowClickHandle =\n              i + 1 < maxRowVisible\n                ? this.collapseAttr(true, i, rowKeys)\n                : this.expandAttr(true, i, rowKeys);\n            subArrow = i + 1 < maxRowVisible ? arrowExpanded : arrowCollapsed;\n          }\n          return (\n            <th className=\"pvtAxisLabel\" key={`rowAttr-${i}`}>\n              {displayHeaderCell(\n                needLabelToggle,\n                subArrow,\n                arrowClickHandle,\n                r,\n                namesMapping,\n              )}\n            </th>\n          );\n        })}\n        <th\n          className=\"pvtTotalLabel\"\n          key=\"padding\"\n          role=\"columnheader button\"\n          onClick={this.clickHeaderHandler(\n            pivotData,\n            [],\n            this.props.rows,\n            0,\n            this.props.tableOptions.clickRowHeaderCallback,\n            false,\n            true,\n          )}\n        >\n          {colAttrs.length === 0\n            ? t('Total (%(aggregatorName)s)', {\n                aggregatorName: t(this.props.aggregatorName),\n              })\n            : null}\n        </th>\n      </tr>\n    );\n  }\n\n  renderTableRow(rowKey, rowIdx, pivotSettings) {\n    // Render a single row in the pivot table.\n\n    const {\n      rowAttrs,\n      colAttrs,\n      rowAttrSpans,\n      visibleColKeys,\n      pivotData,\n      rowTotals,\n      rowSubtotalDisplay,\n      arrowExpanded,\n      arrowCollapsed,\n      cellCallbacks,\n      rowTotalCallbacks,\n      namesMapping,\n    } = pivotSettings;\n\n    const {\n      highlightHeaderCellsOnHover,\n      omittedHighlightHeaderGroups = [],\n      highlightedHeaderCells,\n      cellColorFormatters,\n      dateFormatters,\n    } = this.props.tableOptions;\n    const flatRowKey = flatKey(rowKey);\n\n    const colIncrSpan = colAttrs.length !== 0 ? 1 : 0;\n    const attrValueCells = rowKey.map((r, i) => {\n      let handleContextMenu;\n      let valueCellClassName = 'pvtRowLabel';\n      if (!omittedHighlightHeaderGroups.includes(rowAttrs[i])) {\n        if (highlightHeaderCellsOnHover) {\n          valueCellClassName += ' hoverable';\n        }\n        handleContextMenu = e =>\n          this.props.onContextMenu(e, undefined, rowKey, {\n            [rowAttrs[i]]: r,\n          });\n      }\n      if (\n        highlightedHeaderCells &&\n        Array.isArray(highlightedHeaderCells[rowAttrs[i]]) &&\n        highlightedHeaderCells[rowAttrs[i]].includes(r)\n      ) {\n        valueCellClassName += ' active';\n      }\n      const rowSpan = rowAttrSpans[rowIdx][i];\n      if (rowSpan > 0) {\n        const flatRowKey = flatKey(rowKey.slice(0, i + 1));\n        const colSpan = 1 + (i === rowAttrs.length - 1 ? colIncrSpan : 0);\n        const needRowToggle =\n          rowSubtotalDisplay.enabled && i !== rowAttrs.length - 1;\n        const onArrowClick = needRowToggle\n          ? this.toggleRowKey(flatRowKey)\n          : null;\n\n        const headerCellFormattedValue =\n          dateFormatters && dateFormatters[rowAttrs[i]]\n            ? dateFormatters[rowAttrs[i]](r)\n            : r;\n        return (\n          <th\n            key={`rowKeyLabel-${i}`}\n            className={valueCellClassName}\n            rowSpan={rowSpan}\n            colSpan={colSpan}\n            role=\"columnheader button\"\n            onClick={this.clickHeaderHandler(\n              pivotData,\n              rowKey,\n              this.props.rows,\n              i,\n              this.props.tableOptions.clickRowHeaderCallback,\n            )}\n            onContextMenu={handleContextMenu}\n          >\n            {displayHeaderCell(\n              needRowToggle,\n              this.state.collapsedRows[flatRowKey]\n                ? arrowCollapsed\n                : arrowExpanded,\n              onArrowClick,\n              headerCellFormattedValue,\n              namesMapping,\n            )}\n          </th>\n        );\n      }\n      return null;\n    });\n\n    const attrValuePaddingCell =\n      rowKey.length < rowAttrs.length ? (\n        <th\n          className=\"pvtRowLabel pvtSubtotalLabel\"\n          key=\"rowKeyBuffer\"\n          colSpan={rowAttrs.length - rowKey.length + colIncrSpan}\n          rowSpan={1}\n          role=\"columnheader button\"\n          onClick={this.clickHeaderHandler(\n            pivotData,\n            rowKey,\n            this.props.rows,\n            rowKey.length,\n            this.props.tableOptions.clickRowHeaderCallback,\n            true,\n          )}\n        >\n          {t('Subtotal')}\n        </th>\n      ) : null;\n\n    const rowClickHandlers = cellCallbacks[flatRowKey] || {};\n    const valueCells = visibleColKeys.map(colKey => {\n      const flatColKey = flatKey(colKey);\n      const agg = pivotData.getAggregator(rowKey, colKey);\n      const aggValue = agg.value();\n\n      const keys = [...rowKey, ...colKey];\n      let backgroundColor;\n      if (cellColorFormatters) {\n        Object.values(cellColorFormatters).forEach(cellColorFormatter => {\n          if (Array.isArray(cellColorFormatter)) {\n            keys.forEach(key => {\n              if (backgroundColor) {\n                return;\n              }\n              cellColorFormatter\n                .filter(formatter => formatter.column === key)\n                .forEach(formatter => {\n                  const formatterResult = formatter.getColorFromValue(aggValue);\n                  if (formatterResult) {\n                    backgroundColor = formatterResult;\n                  }\n                });\n            });\n          }\n        });\n      }\n\n      const style = agg.isSubtotal\n        ? { fontWeight: 'bold' }\n        : { backgroundColor };\n\n      return (\n        <td\n          role=\"gridcell\"\n          className=\"pvtVal\"\n          key={`pvtVal-${flatColKey}`}\n          onClick={rowClickHandlers[flatColKey]}\n          onContextMenu={e => this.props.onContextMenu(e, colKey, rowKey)}\n          style={style}\n        >\n          {agg.format(aggValue)}\n        </td>\n      );\n    });\n\n    let totalCell = null;\n    if (rowTotals) {\n      const agg = pivotData.getAggregator(rowKey, []);\n      const aggValue = agg.value();\n      totalCell = (\n        <td\n          role=\"gridcell\"\n          key=\"total\"\n          className=\"pvtTotal\"\n          onClick={rowTotalCallbacks[flatRowKey]}\n          onContextMenu={e => this.props.onContextMenu(e, undefined, rowKey)}\n        >\n          {agg.format(aggValue)}\n        </td>\n      );\n    }\n\n    const rowCells = [\n      ...attrValueCells,\n      attrValuePaddingCell,\n      ...valueCells,\n      totalCell,\n    ];\n\n    return <tr key={`keyRow-${flatRowKey}`}>{rowCells}</tr>;\n  }\n\n  renderTotalsRow(pivotSettings) {\n    // Render the final totals rows that has the totals for all the columns.\n\n    const {\n      rowAttrs,\n      colAttrs,\n      visibleColKeys,\n      rowTotals,\n      pivotData,\n      colTotalCallbacks,\n      grandTotalCallback,\n    } = pivotSettings;\n\n    const totalLabelCell = (\n      <th\n        key=\"label\"\n        className=\"pvtTotalLabel pvtRowTotalLabel\"\n        colSpan={rowAttrs.length + Math.min(colAttrs.length, 1)}\n        role=\"columnheader button\"\n        onClick={this.clickHeaderHandler(\n          pivotData,\n          [],\n          this.props.rows,\n          0,\n          this.props.tableOptions.clickRowHeaderCallback,\n          false,\n          true,\n        )}\n      >\n        {t('Total (%(aggregatorName)s)', {\n          aggregatorName: t(this.props.aggregatorName),\n        })}\n      </th>\n    );\n\n    const totalValueCells = visibleColKeys.map(colKey => {\n      const flatColKey = flatKey(colKey);\n      const agg = pivotData.getAggregator([], colKey);\n      const aggValue = agg.value();\n\n      return (\n        <td\n          role=\"gridcell\"\n          className=\"pvtTotal pvtRowTotal\"\n          key={`total-${flatColKey}`}\n          onClick={colTotalCallbacks[flatColKey]}\n          onContextMenu={e => this.props.onContextMenu(e, colKey, undefined)}\n          style={{ padding: '5px' }}\n        >\n          {agg.format(aggValue)}\n        </td>\n      );\n    });\n\n    let grandTotalCell = null;\n    if (rowTotals) {\n      const agg = pivotData.getAggregator([], []);\n      const aggValue = agg.value();\n      grandTotalCell = (\n        <td\n          role=\"gridcell\"\n          key=\"total\"\n          className=\"pvtGrandTotal pvtRowTotal\"\n          onClick={grandTotalCallback}\n          onContextMenu={e => this.props.onContextMenu(e, undefined, undefined)}\n        >\n          {agg.format(aggValue)}\n        </td>\n      );\n    }\n\n    const totalCells = [totalLabelCell, ...totalValueCells, grandTotalCell];\n\n    return (\n      <tr key=\"total\" className=\"pvtRowTotals\">\n        {totalCells}\n      </tr>\n    );\n  }\n\n  visibleKeys(keys, collapsed, numAttrs, subtotalDisplay) {\n    return keys.filter(\n      key =>\n        // Is the key hidden by one of its parents?\n        !key.some((k, j) => collapsed[flatKey(key.slice(0, j))]) &&\n        // Leaf key.\n        (key.length === numAttrs ||\n          // Children hidden. Must show total.\n          flatKey(key) in collapsed ||\n          // Don't hide totals.\n          !subtotalDisplay.hideOnExpand),\n    );\n  }\n\n  isDashboardEditMode() {\n    return document.contains(document.querySelector('.dashboard--editing'));\n  }\n\n  render() {\n    if (this.cachedProps !== this.props) {\n      this.cachedProps = this.props;\n      this.cachedBasePivotSettings = this.getBasePivotSettings();\n    }\n    const {\n      colAttrs,\n      rowAttrs,\n      rowKeys,\n      colKeys,\n      colTotals,\n      rowSubtotalDisplay,\n      colSubtotalDisplay,\n    } = this.cachedBasePivotSettings;\n\n    // Need to account for exclusions to compute the effective row\n    // and column keys.\n    const visibleRowKeys = this.visibleKeys(\n      rowKeys,\n      this.state.collapsedRows,\n      rowAttrs.length,\n      rowSubtotalDisplay,\n    );\n    const visibleColKeys = this.visibleKeys(\n      colKeys,\n      this.state.collapsedCols,\n      colAttrs.length,\n      colSubtotalDisplay,\n    );\n\n    const pivotSettings = {\n      visibleRowKeys,\n      maxRowVisible: Math.max(...visibleRowKeys.map(k => k.length)),\n      visibleColKeys,\n      maxColVisible: Math.max(...visibleColKeys.map(k => k.length)),\n      rowAttrSpans: this.calcAttrSpans(visibleRowKeys, rowAttrs.length),\n      colAttrSpans: this.calcAttrSpans(visibleColKeys, colAttrs.length),\n      ...this.cachedBasePivotSettings,\n    };\n\n    return (\n      <Styles isDashboardEditMode={this.isDashboardEditMode()}>\n        <table className=\"pvtTable\" role=\"grid\">\n          <thead>\n            {colAttrs.map((c, j) =>\n              this.renderColHeaderRow(c, j, pivotSettings),\n            )}\n            {rowAttrs.length !== 0 && this.renderRowHeaderRow(pivotSettings)}\n          </thead>\n          <tbody>\n            {visibleRowKeys.map((r, i) =>\n              this.renderTableRow(r, i, pivotSettings),\n            )}\n            {colTotals && this.renderTotalsRow(pivotSettings)}\n          </tbody>\n        </table>\n      </Styles>\n    );\n  }\n}\n\nTableRenderer.propTypes = {\n  ...PivotData.propTypes,\n  tableOptions: PropTypes.object,\n  onContextMenu: PropTypes.func,\n};\nTableRenderer.defaultProps = { ...PivotData.defaultProps, tableOptions: {} };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}