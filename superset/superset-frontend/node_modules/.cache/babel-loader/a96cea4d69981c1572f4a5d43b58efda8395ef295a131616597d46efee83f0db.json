{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport memoizeOne from 'memoize-one';\nimport { getChartControlPanelRegistry } from '@superset-ui/core';\nimport { expandControlConfig, isControlPanelSectionConfig } from '@superset-ui/chart-controls';\n/**\n * Find control item from control panel config.\n */\nexport function findControlItem(controlPanelSections, controlKey) {var _controlPanelSections;\n  return (_controlPanelSections = controlPanelSections.\n  filter(isControlPanelSectionConfig).\n  map((section) => section.controlSetRows).\n  flat(2).\n  find((control) => controlKey === control ||\n  control !== null &&\n  typeof control === 'object' &&\n  'name' in control &&\n  control.name === controlKey)) != null ? _controlPanelSections : null;\n}\nconst getMemoizedControlConfig = memoizeOne((controlKey, controlPanelConfig) => {\n  const { controlOverrides = {}, controlPanelSections = [] } = controlPanelConfig;\n  const control = expandControlConfig(findControlItem(controlPanelSections, controlKey), controlOverrides);\n  return control && 'config' in control ? control.config : control;\n});\nexport const getControlConfig = function getControlConfig(controlKey, vizType) {\n  const controlPanelConfig = getChartControlPanelRegistry().get(vizType) || {};\n  return getMemoizedControlConfig(controlKey,\n  // TODO: the ChartControlPanelRegistry is incorrectly typed and needs to\n  // be fixed\n  controlPanelConfig);\n};;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(findControlItem, \"findControlItem\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/controlUtils/getControlConfig.ts\");reactHotLoader.register(getMemoizedControlConfig, \"getMemoizedControlConfig\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/controlUtils/getControlConfig.ts\");reactHotLoader.register(getControlConfig, \"getControlConfig\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/controlUtils/getControlConfig.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["memoizeOne","getChartControlPanelRegistry","expandControlConfig","isControlPanelSectionConfig","findControlItem","controlPanelSections","controlKey","_controlPanelSections","filter","map","section","controlSetRows","flat","find","control","name","getMemoizedControlConfig","controlPanelConfig","controlOverrides","config","getControlConfig","vizType","get","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/controlUtils/getControlConfig.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport memoizeOne from 'memoize-one';\nimport { getChartControlPanelRegistry } from '@superset-ui/core';\nimport {\n  ControlPanelConfig,\n  ControlPanelSectionConfig,\n  expandControlConfig,\n  isControlPanelSectionConfig,\n} from '@superset-ui/chart-controls';\n\n/**\n * Find control item from control panel config.\n */\nexport function findControlItem(\n  controlPanelSections: (ControlPanelSectionConfig | null)[],\n  controlKey: string,\n) {\n  return (\n    controlPanelSections\n      .filter(isControlPanelSectionConfig)\n      .map(section => section.controlSetRows)\n      .flat(2)\n      .find(\n        control =>\n          controlKey === control ||\n          (control !== null &&\n            typeof control === 'object' &&\n            'name' in control &&\n            control.name === controlKey),\n      ) ?? null\n  );\n}\n\nconst getMemoizedControlConfig = memoizeOne(\n  (controlKey, controlPanelConfig: ControlPanelConfig) => {\n    const { controlOverrides = {}, controlPanelSections = [] } =\n      controlPanelConfig;\n    const control = expandControlConfig(\n      findControlItem(controlPanelSections, controlKey),\n      controlOverrides,\n    );\n    return control && 'config' in control ? control.config : control;\n  },\n);\n\nexport const getControlConfig = function getControlConfig(\n  controlKey: string,\n  vizType: string,\n) {\n  const controlPanelConfig = getChartControlPanelRegistry().get(vizType) || {};\n  return getMemoizedControlConfig(\n    controlKey,\n    // TODO: the ChartControlPanelRegistry is incorrectly typed and needs to\n    // be fixed\n    controlPanelConfig as ControlPanelConfig,\n  );\n};\n"],"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,UAAU,MAAM,aAAa;AACpC,SAASC,4BAA4B,QAAQ,mBAAmB;AAChE,SAGEC,mBAAmB,EACnBC,2BAA2B,QACtB,6BAA6B;AAEpC;;;AAGA,OAAM,SAAUC,eAAeA,CAC7BC,oBAA0D,EAC1DC,UAAkB,OAAAC,qBAAA;EAElB,QAAAA,qBAAA,GACEF,oBAAoB;EACjBG,MAAM,CAACL,2BAA2B,CAAC;EACnCM,GAAG,CAAC,CAAAC,OAAO,KAAIA,OAAO,CAACC,cAAc,CAAC;EACtCC,IAAI,CAAC,CAAC,CAAC;EACPC,IAAI,CACH,CAAAC,OAAO,KACLR,UAAU,KAAKQ,OAAO;EACrBA,OAAO,KAAK,IAAI;EACf,OAAOA,OAAO,KAAK,QAAQ;EAC3B,MAAM,IAAIA,OAAO;EACjBA,OAAO,CAACC,IAAI,KAAKT,UAAW,CACjC,YAAAC,qBAAA,GAAI,IAAI;AAEf;AAEA,MAAMS,wBAAwB,GAAGhB,UAAU,CACzC,CAACM,UAAU,EAAEW,kBAAsC,KAAI;EACrD,MAAM,EAAEC,gBAAgB,GAAG,EAAE,EAAEb,oBAAoB,GAAG,EAAE,EAAE,GACxDY,kBAAkB;EACpB,MAAMH,OAAO,GAAGZ,mBAAmB,CACjCE,eAAe,CAACC,oBAAoB,EAAEC,UAAU,CAAC,EACjDY,gBAAgB,CACjB;EACD,OAAOJ,OAAO,IAAI,QAAQ,IAAIA,OAAO,GAAGA,OAAO,CAACK,MAAM,GAAGL,OAAO;AAClE,CAAC,CACF;AAED,OAAO,MAAMM,gBAAgB,GAAG,SAASA,gBAAgBA,CACvDd,UAAkB,EAClBe,OAAe;EAEf,MAAMJ,kBAAkB,GAAGhB,4BAA4B,EAAE,CAACqB,GAAG,CAACD,OAAO,CAAC,IAAI,EAAE;EAC5E,OAAOL,wBAAwB,CAC7BV,UAAU;EACV;EACA;EACAW,kBAAwC,CACzC;AACH,CAAC,CAAC,mBAAAM,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAC,OAAA,GAAAC,SAAA,MAAAH,cAAA,WAAAA,cAAA,CAAAI,QAAA,CA3CcvB,eAAe,4HAAAmB,cAAA,CAAAI,QAAA,CAoBzBX,wBAAwB,qIAAAO,cAAA,CAAAI,QAAA,CAYjBP,gBAAgB,qJAAAQ,WAAA,UAAAJ,oBAAA,mBAAAA,oBAAA,CAAAI,WAAA,GAAAF,SAAA,CAAAE,WAAA,IAAAA,WAAA,CAAAC,MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}