{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useRef } from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\nimport { DragContainer } from 'src/explore/components/controls/OptionControls';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { StyledColumnOption } from 'src/explore/components/optionRenderers';\nimport { styled, isAdhocColumn } from '@superset-ui/core';\nimport Option from './Option';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport const OptionLabel = styled.div`\n  width: 100%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\nexport default function OptionWrapper(props) {\n  const { index, label, tooltipTitle, column, type, onShiftOptions, clickClose, withCaret, isExtra, datasourceWarningMessage, canDelete = true, tooltipOverlay, ...rest } = props;\n  const ref = useRef(null);\n  const labelRef = useRef(null);\n  const [{ isDragging }, drag] = useDrag({\n    item: {\n      type,\n      dragIndex: index\n    },\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging()\n    })\n  });\n  const [, drop] = useDrop({\n    accept: type,\n    hover: (item, monitor) => {var _ref$current;\n      if (!ref.current) {\n        return;\n      }\n      const { dragIndex } = item;\n      const hoverIndex = index;\n      // Don't replace items with themselves\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n      // Determine rectangle on screen\n      const hoverBoundingRect = (_ref$current = ref.current) == null ? void 0 : _ref$current.getBoundingClientRect();\n      // Get vertical middle\n      const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n      // Determine mouse position\n      const clientOffset = monitor.getClientOffset();\n      // Get pixels to the top\n      const hoverClientY = clientOffset ?\n      clientOffset.y - hoverBoundingRect.top :\n      0;\n      // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n      // Dragging downwards\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      }\n      // Dragging upwards\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      }\n      // Time to actually perform the action\n      onShiftOptions(dragIndex, hoverIndex);\n      // eslint-disable-next-line no-param-reassign\n      item.dragIndex = hoverIndex;\n    }\n  });\n  const shouldShowTooltip = !isDragging && tooltipTitle && label && tooltipTitle !== label ||\n  !isDragging &&\n  labelRef &&\n  labelRef.current &&\n  labelRef.current.scrollWidth > labelRef.current.clientWidth ||\n  !isDragging && tooltipOverlay;\n  const LabelContent = () => {\n    if (!shouldShowTooltip) {\n      return ___EmotionJSX(\"span\", null, label);\n    }\n    if (tooltipOverlay) {\n      return ___EmotionJSX(Tooltip, { overlay: tooltipOverlay },\n      ___EmotionJSX(\"span\", null, label)\n      );\n    }\n    return ___EmotionJSX(Tooltip, { title: tooltipTitle || label },\n    ___EmotionJSX(\"span\", null, label)\n    );\n  };\n  const ColumnOption = () => {\n    const transformedCol = column && isAdhocColumn(column) ?\n    { verbose_name: column.label, expression: column.sqlExpression } :\n    column;\n    return ___EmotionJSX(StyledColumnOption, { column: transformedCol, labelRef: labelRef, showType: true });\n  };\n  const Label = () => {\n    if (label) {\n      return ___EmotionJSX(OptionLabel, { ref: labelRef },\n      ___EmotionJSX(LabelContent, null)\n      );\n    }\n    if (column) {\n      return ___EmotionJSX(OptionLabel, null,\n      ___EmotionJSX(ColumnOption, null)\n      );\n    }\n    return null;\n  };\n  drag(drop(ref));\n  return ___EmotionJSX(DragContainer, _extends({ ref: ref }, rest),\n  ___EmotionJSX(Option, { index: index, clickClose: clickClose, withCaret: withCaret, isExtra: isExtra, datasourceWarningMessage: datasourceWarningMessage, canDelete: canDelete },\n  ___EmotionJSX(Label, null)\n  )\n  );\n}__signature__(OptionWrapper, \"useRef{ref}\\nuseRef{labelRef}\\nuseDrag{[{ isDragging }, drag]}\\nuseDrop{[, drop]}\", () => [useDrag, useDrop]);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(OptionLabel, \"OptionLabel\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/OptionWrapper.tsx\");reactHotLoader.register(OptionWrapper, \"OptionWrapper\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/OptionWrapper.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["React","useRef","useDrag","useDrop","DragContainer","Tooltip","StyledColumnOption","styled","isAdhocColumn","Option","jsx","___EmotionJSX","OptionLabel","div","OptionWrapper","props","index","label","tooltipTitle","column","type","onShiftOptions","clickClose","withCaret","isExtra","datasourceWarningMessage","canDelete","tooltipOverlay","rest","ref","labelRef","isDragging","drag","item","dragIndex","collect","monitor","drop","accept","hover","_ref$current","current","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","clientOffset","getClientOffset","hoverClientY","y","shouldShowTooltip","scrollWidth","clientWidth","LabelContent","overlay","title","ColumnOption","transformedCol","verbose_name","expression","sqlExpression","showType","Label","_extends","__signature__","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/OptionWrapper.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useRef } from 'react';\nimport {\n  useDrag,\n  useDrop,\n  DropTargetMonitor,\n  DragSourceMonitor,\n} from 'react-dnd';\nimport { DragContainer } from 'src/explore/components/controls/OptionControls';\nimport {\n  OptionProps,\n  OptionItemInterface,\n} from 'src/explore/components/controls/DndColumnSelectControl/types';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { StyledColumnOption } from 'src/explore/components/optionRenderers';\nimport { styled, isAdhocColumn } from '@superset-ui/core';\nimport { ColumnMeta } from '@superset-ui/chart-controls';\nimport Option from './Option';\n\nexport const OptionLabel = styled.div`\n  width: 100%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\nexport default function OptionWrapper(\n  props: OptionProps & {\n    type: string;\n    onShiftOptions: (dragIndex: number, hoverIndex: number) => void;\n  },\n) {\n  const {\n    index,\n    label,\n    tooltipTitle,\n    column,\n    type,\n    onShiftOptions,\n    clickClose,\n    withCaret,\n    isExtra,\n    datasourceWarningMessage,\n    canDelete = true,\n    tooltipOverlay,\n    ...rest\n  } = props;\n  const ref = useRef<HTMLDivElement>(null);\n  const labelRef = useRef<HTMLDivElement>(null);\n\n  const [{ isDragging }, drag] = useDrag({\n    item: {\n      type,\n      dragIndex: index,\n    },\n    collect: (monitor: DragSourceMonitor) => ({\n      isDragging: monitor.isDragging(),\n    }),\n  });\n\n  const [, drop] = useDrop({\n    accept: type,\n\n    hover: (item: OptionItemInterface, monitor: DropTargetMonitor) => {\n      if (!ref.current) {\n        return;\n      }\n      const { dragIndex } = item;\n      const hoverIndex = index;\n\n      // Don't replace items with themselves\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n      // Determine rectangle on screen\n      const hoverBoundingRect = ref.current?.getBoundingClientRect();\n      // Get vertical middle\n      const hoverMiddleY =\n        (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n      // Determine mouse position\n      const clientOffset = monitor.getClientOffset();\n      // Get pixels to the top\n      const hoverClientY = clientOffset\n        ? clientOffset.y - hoverBoundingRect.top\n        : 0;\n      // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n      // Dragging downwards\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      }\n      // Dragging upwards\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      }\n\n      // Time to actually perform the action\n      onShiftOptions(dragIndex, hoverIndex);\n      // eslint-disable-next-line no-param-reassign\n      item.dragIndex = hoverIndex;\n    },\n  });\n\n  const shouldShowTooltip =\n    (!isDragging && tooltipTitle && label && tooltipTitle !== label) ||\n    (!isDragging &&\n      labelRef &&\n      labelRef.current &&\n      labelRef.current.scrollWidth > labelRef.current.clientWidth) ||\n    (!isDragging && tooltipOverlay);\n\n  const LabelContent = () => {\n    if (!shouldShowTooltip) {\n      return <span>{label}</span>;\n    }\n    if (tooltipOverlay) {\n      return (\n        <Tooltip overlay={tooltipOverlay}>\n          <span>{label}</span>\n        </Tooltip>\n      );\n    }\n    return (\n      <Tooltip title={tooltipTitle || label}>\n        <span>{label}</span>\n      </Tooltip>\n    );\n  };\n\n  const ColumnOption = () => {\n    const transformedCol =\n      column && isAdhocColumn(column)\n        ? { verbose_name: column.label, expression: column.sqlExpression }\n        : column;\n    return (\n      <StyledColumnOption\n        column={transformedCol as ColumnMeta}\n        labelRef={labelRef}\n        showType\n      />\n    );\n  };\n\n  const Label = () => {\n    if (label) {\n      return (\n        <OptionLabel ref={labelRef}>\n          <LabelContent />\n        </OptionLabel>\n      );\n    }\n    if (column) {\n      return (\n        <OptionLabel>\n          <ColumnOption />\n        </OptionLabel>\n      );\n    }\n    return null;\n  };\n\n  drag(drop(ref));\n\n  return (\n    <DragContainer ref={ref} {...rest}>\n      <Option\n        index={index}\n        clickClose={clickClose}\n        withCaret={withCaret}\n        isExtra={isExtra}\n        datasourceWarningMessage={datasourceWarningMessage}\n        canDelete={canDelete}\n      >\n        <Label />\n      </Option>\n    </DragContainer>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}