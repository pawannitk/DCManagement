{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport Viewport from '../viewports/viewport';\nimport { Matrix4 } from '@math.gl/core';\nimport { pixelsToWorld, fovyToAltitude } from '@math.gl/web-mercator';\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\nfunction getViewMatrix({\n  height,\n  focalDistance,\n  orbitAxis,\n  rotationX,\n  rotationOrbit,\n  zoom\n}) {\n  const up = orbitAxis === 'Z' ? [0, 0, 1] : [0, 1, 0];\n  const eye = orbitAxis === 'Z' ? [0, -focalDistance, 0] : [0, 0, focalDistance];\n  const viewMatrix = new Matrix4().lookAt({\n    eye,\n    up\n  });\n  viewMatrix.rotateX(rotationX * DEGREES_TO_RADIANS);\n\n  if (orbitAxis === 'Z') {\n    viewMatrix.rotateZ(rotationOrbit * DEGREES_TO_RADIANS);\n  } else {\n    viewMatrix.rotateY(rotationOrbit * DEGREES_TO_RADIANS);\n  }\n\n  const projectionScale = Math.pow(2, zoom) / height;\n  viewMatrix.scale(projectionScale);\n  return viewMatrix;\n}\n\nexport default class OrbitViewport extends Viewport {\n  constructor(props) {\n    const {\n      height,\n      projectionMatrix,\n      fovy = 50,\n      orbitAxis = 'Z',\n      target = [0, 0, 0],\n      rotationX = 0,\n      rotationOrbit = 0,\n      zoom = 0\n    } = props;\n    const focalDistance = projectionMatrix ? projectionMatrix[5] / 2 : fovyToAltitude(fovy);\n    super({ ...props,\n      longitude: undefined,\n      viewMatrix: getViewMatrix({\n        height: height || 1,\n        focalDistance,\n        orbitAxis,\n        rotationX,\n        rotationOrbit,\n        zoom\n      }),\n      fovy,\n      focalDistance,\n      position: target,\n      zoom\n    });\n\n    _defineProperty(this, \"projectedCenter\", void 0);\n\n    this.projectedCenter = this.project(this.center);\n  }\n\n  unproject(xyz, {\n    topLeft = true\n  } = {}) {\n    const [x, y, z = this.projectedCenter[2]] = xyz;\n    const y2 = topLeft ? y : this.height - y;\n    const [X, Y, Z] = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix);\n    return [X, Y, Z];\n  }\n\n  panByPosition(coords, pixel) {\n    const p0 = this.project(coords);\n    const nextCenter = [this.width / 2 + p0[0] - pixel[0], this.height / 2 + p0[1] - pixel[1], this.projectedCenter[2]];\n    return {\n      target: this.unproject(nextCenter)\n    };\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(DEGREES_TO_RADIANS, \"DEGREES_TO_RADIANS\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/core/dist/esm/viewports/orbit-viewport.js\");reactHotLoader.register(getViewMatrix, \"getViewMatrix\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/core/dist/esm/viewports/orbit-viewport.js\");reactHotLoader.register(OrbitViewport, \"OrbitViewport\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/core/dist/esm/viewports/orbit-viewport.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["Viewport","Matrix4","pixelsToWorld","fovyToAltitude","DEGREES_TO_RADIANS","Math","PI","getViewMatrix","height","focalDistance","orbitAxis","rotationX","rotationOrbit","zoom","up","eye","viewMatrix","lookAt","rotateX","rotateZ","rotateY","projectionScale","pow","scale","OrbitViewport","constructor","props","projectionMatrix","fovy","target","longitude","undefined","position","_defineProperty","projectedCenter","project","center","unproject","xyz","topLeft","x","y","z","y2","X","Y","Z","pixelUnprojectionMatrix","panByPosition","coords","pixel","p0","nextCenter","width","__reactstandin__regenerateByEval","key","code","eval","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["../../../src/viewports/orbit-viewport.ts"],"sourcesContent":["import Viewport from '../viewports/viewport';\n\nimport {Matrix4} from '@math.gl/core';\nimport {pixelsToWorld, fovyToAltitude} from '@math.gl/web-mercator';\n\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\nfunction getViewMatrix({\n  height,\n  focalDistance,\n  orbitAxis,\n  rotationX,\n  rotationOrbit,\n  zoom\n}: {\n  height: number;\n  focalDistance: number;\n  orbitAxis: 'Y' | 'Z';\n  rotationX: number;\n  rotationOrbit: number;\n  zoom: number;\n}): Matrix4 {\n  // We position the camera so that one common space unit (world space unit scaled by zoom)\n  // at the target maps to one screen pixel.\n  // This is a similar technique to that used in web mercator projection\n  // By doing so we are able to convert between common space and screen space sizes efficiently\n  // in the vertex shader.\n  const up = orbitAxis === 'Z' ? [0, 0, 1] : [0, 1, 0];\n  const eye = orbitAxis === 'Z' ? [0, -focalDistance, 0] : [0, 0, focalDistance];\n\n  const viewMatrix = new Matrix4().lookAt({eye, up});\n\n  viewMatrix.rotateX(rotationX * DEGREES_TO_RADIANS);\n  if (orbitAxis === 'Z') {\n    viewMatrix.rotateZ(rotationOrbit * DEGREES_TO_RADIANS);\n  } else {\n    viewMatrix.rotateY(rotationOrbit * DEGREES_TO_RADIANS);\n  }\n\n  // When height increases, we need to increase the distance from the camera to the target to\n  // keep the 1:1 mapping. However, this also changes the projected depth of each position by\n  // moving them further away between the near/far plane.\n  // Without modifying the default near/far planes, we instead scale down the common space to\n  // remove the distortion to the depth field.\n  const projectionScale = Math.pow(2, zoom) / height;\n  viewMatrix.scale(projectionScale);\n\n  return viewMatrix;\n}\n\nexport type OrbitViewportOptions = {\n  /** Name of the viewport */\n  id?: string;\n  /** Left offset from the canvas edge, in pixels */\n  x?: number;\n  /** Top offset from the canvas edge, in pixels */\n  y?: number;\n  /** Viewport width in pixels */\n  width?: number;\n  /** Viewport height in pixels */\n  height?: number;\n  /** Axis with 360 degrees rotating freedom, either `'Y'` or `'Z'`, default to `'Z'`. */\n  orbitAxis?: 'Y' | 'Z';\n  /** The world position at the center of the viewport. Default `[0, 0, 0]`. */\n  target?: [number, number, number];\n  /** The zoom level of the viewport. `zoom: 0` maps one unit distance to one pixel on screen, and increasing `zoom` by `1` scales the same object to twice as large. Default `0`. */\n  zoom?: number;\n  /** Rotating angle around orbit axis. Default `0`. */\n  rotationOrbit?: number;\n  /** Rotating angle around orbit axis. Default `0`. */\n  rotationX?: number;\n  /** Custom projection matrix */\n  projectionMatrix?: number[];\n  /** Field of view covered by camera, in the perspective case. In degrees. Default `50`. */\n  fovy?: number;\n  /** Distance of near clipping plane. Default `0.1`. */\n  near?: number;\n  /** Distance of far clipping plane. Default `1000`. */\n  far?: number;\n  /** Whether to create an orthographic or perspective projection matrix. Default is `false` (perspective projection). */\n  orthographic?: boolean;\n};\n\nexport default class OrbitViewport extends Viewport {\n  projectedCenter: number[];\n\n  constructor(props: OrbitViewportOptions) {\n    const {\n      height,\n\n      projectionMatrix,\n\n      fovy = 50, // For setting camera position\n      orbitAxis = 'Z', // Orbit axis with 360 degrees rotating freedom, can only be 'Y' or 'Z'\n      target = [0, 0, 0], // Which point is camera looking at, default origin\n\n      rotationX = 0, // Rotating angle around X axis\n      rotationOrbit = 0, // Rotating angle around orbit axis\n\n      zoom = 0\n    } = props;\n\n    const focalDistance = projectionMatrix ? projectionMatrix[5] / 2 : fovyToAltitude(fovy);\n\n    super({\n      ...props,\n      // in case viewState contains longitude/latitude values,\n      // make sure that the base Viewport class does not treat this as a geospatial viewport\n      longitude: undefined,\n      viewMatrix: getViewMatrix({\n        height: height || 1,\n        focalDistance,\n        orbitAxis,\n        rotationX,\n        rotationOrbit,\n        zoom\n      }),\n      fovy,\n      focalDistance,\n      position: target,\n      zoom\n    });\n\n    this.projectedCenter = this.project(this.center);\n  }\n\n  unproject(xyz: number[], {topLeft = true}: {topLeft?: boolean} = {}): [number, number, number] {\n    const [x, y, z = this.projectedCenter[2]] = xyz;\n\n    const y2 = topLeft ? y : this.height - y;\n    const [X, Y, Z] = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix);\n    return [X, Y, Z];\n  }\n\n  panByPosition(coords: number[], pixel: number[]): OrbitViewportOptions {\n    const p0 = this.project(coords);\n    const nextCenter = [\n      this.width / 2 + p0[0] - pixel[0],\n      this.height / 2 + p0[1] - pixel[1],\n      this.projectedCenter[2]\n    ];\n    return {\n      target: this.unproject(nextCenter)\n    };\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}