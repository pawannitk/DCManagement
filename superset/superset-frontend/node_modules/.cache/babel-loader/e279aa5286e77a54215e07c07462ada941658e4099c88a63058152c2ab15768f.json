{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\";import _isEmpty from \"lodash/isEmpty\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { t } from '@superset-ui/core';\nimport { Menu } from 'src/components/Menu';\nimport { URL_PARAMS } from 'src/constants';\nimport ShareMenuItems from 'src/dashboard/components/menu/ShareMenuItems';\nimport DownloadMenuItems from 'src/dashboard/components/menu/DownloadMenuItems';\nimport CssEditor from 'src/dashboard/components/CssEditor';\nimport RefreshIntervalModal from 'src/dashboard/components/RefreshIntervalModal';\nimport SaveModal from 'src/dashboard/components/SaveModal';\nimport HeaderReportDropdown from 'src/features/reports/ReportModal/HeaderReportDropdown';\nimport injectCustomCss from 'src/dashboard/util/injectCustomCss';\nimport { SAVE_TYPE_NEWDASHBOARD } from 'src/dashboard/util/constants';\nimport FilterScopeModal from 'src/dashboard/components/filterscope/FilterScopeModal';\nimport getDashboardUrl from 'src/dashboard/util/getDashboardUrl';\nimport { getActiveFilters } from 'src/dashboard/util/activeDashboardFilters';\nimport { getUrlParam } from 'src/utils/urlUtils';\nimport { MenuKeys } from 'src/dashboard/types';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  addSuccessToast: PropTypes.func.isRequired,\n  addDangerToast: PropTypes.func.isRequired,\n  dashboardInfo: PropTypes.object.isRequired,\n  dashboardId: PropTypes.number,\n  dashboardTitle: PropTypes.string,\n  dataMask: PropTypes.object.isRequired,\n  customCss: PropTypes.string,\n  colorNamespace: PropTypes.string,\n  colorScheme: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  updateCss: PropTypes.func.isRequired,\n  forceRefreshAllCharts: PropTypes.func.isRequired,\n  refreshFrequency: PropTypes.number,\n  shouldPersistRefreshFrequency: PropTypes.bool.isRequired,\n  setRefreshFrequency: PropTypes.func.isRequired,\n  startPeriodicRender: PropTypes.func.isRequired,\n  editMode: PropTypes.bool.isRequired,\n  userCanEdit: PropTypes.bool,\n  userCanShare: PropTypes.bool,\n  userCanSave: PropTypes.bool,\n  userCanCurate: PropTypes.bool.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  layout: PropTypes.object.isRequired,\n  expandedSlices: PropTypes.object,\n  onSave: PropTypes.func.isRequired,\n  showPropertiesModal: PropTypes.func.isRequired,\n  manageEmbedded: PropTypes.func.isRequired,\n  logEvent: PropTypes.func,\n  refreshLimit: PropTypes.number,\n  refreshWarning: PropTypes.string,\n  lastModifiedTime: PropTypes.number.isRequired\n};\n\nconst defaultProps = {\n  colorNamespace: undefined,\n  colorScheme: undefined,\n  refreshLimit: 0,\n  refreshWarning: null\n};\n\nclass HeaderActionsDropdown extends React.PureComponent {\n  static discardChanges() {\n    window.location.reload();\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      css: props.customCss,\n      showReportSubMenu: null\n    };\n\n    this.changeCss = this.changeCss.bind(this);\n    this.changeRefreshInterval = this.changeRefreshInterval.bind(this);\n    this.handleMenuClick = this.handleMenuClick.bind(this);\n    this.setShowReportSubMenu = this.setShowReportSubMenu.bind(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.customCss !== nextProps.customCss) {\n      this.setState({ css: nextProps.customCss }, () => {\n        injectCustomCss(nextProps.customCss);\n      });\n    }\n  }\n\n  setShowReportSubMenu(show) {\n    this.setState({\n      showReportSubMenu: show\n    });\n  }\n\n  changeCss(css) {\n    this.props.onChange();\n    this.props.updateCss(css);\n  }\n\n  changeRefreshInterval(refreshInterval, isPersistent) {\n    this.props.setRefreshFrequency(refreshInterval, isPersistent);\n    this.props.startPeriodicRender(refreshInterval * 1000);\n  }\n\n  handleMenuClick({ key }) {\n    switch (key) {\n      case MenuKeys.RefreshDashboard:\n        this.props.forceRefreshAllCharts();\n        this.props.addSuccessToast(t('Refreshing charts'));\n        break;\n      case MenuKeys.EditProperties:\n        this.props.showPropertiesModal();\n        break;\n      case MenuKeys.ToggleFullscreen:{\n          const url = getDashboardUrl({\n            pathname: window.location.pathname,\n            filters: getActiveFilters(),\n            hash: window.location.hash,\n            standalone: !getUrlParam(URL_PARAMS.standalone)\n          });\n          window.location.replace(url);\n          break;\n        }\n      case MenuKeys.ManageEmbedded:{\n          this.props.manageEmbedded();\n          break;\n        }\n      default:\n        break;\n    }\n  }\n\n  render() {var _dashboardInfo$common, _dashboardInfo$common2, _dashboardInfo$metada;\n    const {\n      dashboardTitle,\n      dashboardId,\n      dashboardInfo,\n      refreshFrequency,\n      shouldPersistRefreshFrequency,\n      editMode,\n      customCss,\n      colorNamespace,\n      colorScheme,\n      layout,\n      expandedSlices,\n      onSave,\n      userCanEdit,\n      userCanShare,\n      userCanSave,\n      userCanCurate,\n      isLoading,\n      refreshLimit,\n      refreshWarning,\n      lastModifiedTime,\n      addSuccessToast,\n      addDangerToast,\n      setIsDropdownVisible,\n      isDropdownVisible,\n      ...rest\n    } = this.props;\n\n    const emailTitle = t('Superset dashboard');\n    const emailSubject = `${emailTitle} ${dashboardTitle}`;\n    const emailBody = t('Check out this dashboard: ');\n\n    const isEmbedded = !(dashboardInfo != null && dashboardInfo.userId);\n\n    const url = getDashboardUrl({\n      pathname: window.location.pathname,\n      filters: getActiveFilters(),\n      hash: window.location.hash\n    });\n\n    const refreshIntervalOptions = (_dashboardInfo$common =\n    dashboardInfo.common) == null ? void 0 : (_dashboardInfo$common2 = _dashboardInfo$common.conf) == null ? void 0 : _dashboardInfo$common2.DASHBOARD_AUTO_REFRESH_INTERVALS;\n\n    return (\n      ___EmotionJSX(Menu, _extends({ selectable: false, \"data-test\": \"header-actions-menu\" }, rest),\n      !editMode &&\n      ___EmotionJSX(Menu.Item, {\n        key: MenuKeys.RefreshDashboard,\n        \"data-test\": \"refresh-dashboard-menu-item\",\n        disabled: isLoading,\n        onClick: this.handleMenuClick },\n\n      t('Refresh dashboard')\n      ),\n\n      !editMode && !isEmbedded &&\n      ___EmotionJSX(Menu.Item, {\n        key: MenuKeys.ToggleFullscreen,\n        onClick: this.handleMenuClick },\n\n      getUrlParam(URL_PARAMS.standalone) ?\n      t('Exit fullscreen') :\n      t('Enter fullscreen')\n      ),\n\n      editMode &&\n      ___EmotionJSX(Menu.Item, {\n        key: MenuKeys.EditProperties,\n        onClick: this.handleMenuClick },\n\n      t('Edit properties')\n      ),\n\n      editMode &&\n      ___EmotionJSX(Menu.Item, { key: MenuKeys.EditCss },\n      ___EmotionJSX(CssEditor, {\n        triggerNode: ___EmotionJSX(\"span\", null, t('Edit CSS')),\n        initialCss: this.state.css,\n        onChange: this.changeCss,\n        addDangerToast: addDangerToast }\n      )\n      ),\n\n      ___EmotionJSX(Menu.Divider, null),\n      userCanSave &&\n      ___EmotionJSX(Menu.Item, { key: MenuKeys.SaveModal },\n      ___EmotionJSX(SaveModal, {\n        addSuccessToast: this.props.addSuccessToast,\n        addDangerToast: this.props.addDangerToast,\n        dashboardId: dashboardId,\n        dashboardTitle: dashboardTitle,\n        dashboardInfo: dashboardInfo,\n        saveType: SAVE_TYPE_NEWDASHBOARD,\n        layout: layout,\n        expandedSlices: expandedSlices,\n        refreshFrequency: refreshFrequency,\n        shouldPersistRefreshFrequency: shouldPersistRefreshFrequency,\n        lastModifiedTime: lastModifiedTime,\n        customCss: customCss,\n        colorNamespace: colorNamespace,\n        colorScheme: colorScheme,\n        onSave: onSave,\n        triggerNode:\n        ___EmotionJSX(\"span\", { \"data-test\": \"save-as-menu-item\" }, t('Save as')),\n\n        canOverwrite: userCanEdit }\n      )\n      ),\n\n      ___EmotionJSX(Menu.SubMenu, {\n        key: MenuKeys.Download,\n        disabled: isLoading,\n        title: t('Download'),\n        logEvent: this.props.logEvent },\n\n      ___EmotionJSX(DownloadMenuItems, {\n        pdfMenuItemTitle: t('Export to PDF'),\n        imageMenuItemTitle: t('Download as Image'),\n        dashboardTitle: dashboardTitle,\n        addDangerToast: addDangerToast }\n      )\n      ),\n      userCanShare &&\n      ___EmotionJSX(Menu.SubMenu, {\n        key: MenuKeys.Share,\n        \"data-test\": \"share-dashboard-menu-item\",\n        disabled: isLoading,\n        title: t('Share') },\n\n      ___EmotionJSX(ShareMenuItems, {\n        url: url,\n        copyMenuItemTitle: t('Copy permalink to clipboard'),\n        emailMenuItemTitle: t('Share permalink by email'),\n        emailSubject: emailSubject,\n        emailBody: emailBody,\n        addSuccessToast: addSuccessToast,\n        addDangerToast: addDangerToast,\n        dashboardId: dashboardId }\n      )\n      ),\n\n      !editMode && userCanCurate &&\n      ___EmotionJSX(Menu.Item, {\n        key: MenuKeys.ManageEmbedded,\n        onClick: this.handleMenuClick },\n\n      t('Embed dashboard')\n      ),\n\n      ___EmotionJSX(Menu.Divider, null),\n      !editMode ?\n      this.state.showReportSubMenu ?\n      ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(Menu.SubMenu, { title: t('Manage email report') },\n      ___EmotionJSX(HeaderReportDropdown, {\n        dashboardId: dashboardInfo.id,\n        setShowReportSubMenu: this.setShowReportSubMenu,\n        showReportSubMenu: this.state.showReportSubMenu,\n        setIsDropdownVisible: setIsDropdownVisible,\n        isDropdownVisible: isDropdownVisible,\n        useTextMenu: true }\n      )\n      ),\n      ___EmotionJSX(Menu.Divider, null)\n      ) :\n\n      ___EmotionJSX(Menu, null,\n      ___EmotionJSX(HeaderReportDropdown, {\n        dashboardId: dashboardInfo.id,\n        setShowReportSubMenu: this.setShowReportSubMenu,\n        setIsDropdownVisible: setIsDropdownVisible,\n        isDropdownVisible: isDropdownVisible,\n        useTextMenu: true }\n      )\n      ) :\n\n      null,\n      editMode && !_isEmpty(dashboardInfo == null ? void 0 : (_dashboardInfo$metada = dashboardInfo.metadata) == null ? void 0 : _dashboardInfo$metada.filter_scopes) &&\n      ___EmotionJSX(Menu.Item, { key: MenuKeys.SetFilterMapping },\n      ___EmotionJSX(FilterScopeModal, {\n        className: \"m-r-5\",\n        triggerNode: t('Set filter mapping') }\n      )\n      ),\n\n\n      ___EmotionJSX(Menu.Item, { key: MenuKeys.AutorefreshModal },\n      ___EmotionJSX(RefreshIntervalModal, {\n        addSuccessToast: this.props.addSuccessToast,\n        refreshFrequency: refreshFrequency,\n        refreshLimit: refreshLimit,\n        refreshWarning: refreshWarning,\n        onChange: this.changeRefreshInterval,\n        editMode: editMode,\n        refreshIntervalOptions: refreshIntervalOptions,\n        triggerNode: ___EmotionJSX(\"span\", null, t('Set auto-refresh interval')) }\n      )\n      )\n      ));\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\nHeaderActionsDropdown.propTypes = propTypes;\nHeaderActionsDropdown.defaultProps = defaultProps;const _default =\n\nHeaderActionsDropdown;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(propTypes, \"propTypes\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/components/Header/HeaderActionsDropdown/index.jsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/components/Header/HeaderActionsDropdown/index.jsx\");reactHotLoader.register(HeaderActionsDropdown, \"HeaderActionsDropdown\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/components/Header/HeaderActionsDropdown/index.jsx\");reactHotLoader.register(_default, \"default\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/components/Header/HeaderActionsDropdown/index.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["React","PropTypes","t","Menu","URL_PARAMS","ShareMenuItems","DownloadMenuItems","CssEditor","RefreshIntervalModal","SaveModal","HeaderReportDropdown","injectCustomCss","SAVE_TYPE_NEWDASHBOARD","FilterScopeModal","getDashboardUrl","getActiveFilters","getUrlParam","MenuKeys","jsx","___EmotionJSX","propTypes","addSuccessToast","func","isRequired","addDangerToast","dashboardInfo","object","dashboardId","number","dashboardTitle","string","dataMask","customCss","colorNamespace","colorScheme","onChange","updateCss","forceRefreshAllCharts","refreshFrequency","shouldPersistRefreshFrequency","bool","setRefreshFrequency","startPeriodicRender","editMode","userCanEdit","userCanShare","userCanSave","userCanCurate","isLoading","layout","expandedSlices","onSave","showPropertiesModal","manageEmbedded","logEvent","refreshLimit","refreshWarning","lastModifiedTime","defaultProps","undefined","HeaderActionsDropdown","PureComponent","discardChanges","window","location","reload","constructor","props","state","css","showReportSubMenu","changeCss","bind","changeRefreshInterval","handleMenuClick","setShowReportSubMenu","UNSAFE_componentWillReceiveProps","nextProps","setState","show","refreshInterval","isPersistent","key","RefreshDashboard","EditProperties","ToggleFullscreen","url","pathname","filters","hash","standalone","replace","ManageEmbedded","render","_dashboardInfo$common","_dashboardInfo$common2","_dashboardInfo$metada","setIsDropdownVisible","isDropdownVisible","rest","emailTitle","emailSubject","emailBody","isEmbedded","userId","refreshIntervalOptions","common","conf","DASHBOARD_AUTO_REFRESH_INTERVALS","_extends","selectable","Item","disabled","onClick","EditCss","triggerNode","initialCss","Divider","saveType","canOverwrite","SubMenu","Download","title","pdfMenuItemTitle","imageMenuItemTitle","Share","copyMenuItemTitle","emailMenuItemTitle","Fragment","id","useTextMenu","_isEmpty","metadata","filter_scopes","SetFilterMapping","className","AutorefreshModal","__reactstandin__regenerateByEval","code","eval","_default","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/components/Header/HeaderActionsDropdown/index.jsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { isEmpty } from 'lodash';\nimport { t } from '@superset-ui/core';\nimport { Menu } from 'src/components/Menu';\nimport { URL_PARAMS } from 'src/constants';\nimport ShareMenuItems from 'src/dashboard/components/menu/ShareMenuItems';\nimport DownloadMenuItems from 'src/dashboard/components/menu/DownloadMenuItems';\nimport CssEditor from 'src/dashboard/components/CssEditor';\nimport RefreshIntervalModal from 'src/dashboard/components/RefreshIntervalModal';\nimport SaveModal from 'src/dashboard/components/SaveModal';\nimport HeaderReportDropdown from 'src/features/reports/ReportModal/HeaderReportDropdown';\nimport injectCustomCss from 'src/dashboard/util/injectCustomCss';\nimport { SAVE_TYPE_NEWDASHBOARD } from 'src/dashboard/util/constants';\nimport FilterScopeModal from 'src/dashboard/components/filterscope/FilterScopeModal';\nimport getDashboardUrl from 'src/dashboard/util/getDashboardUrl';\nimport { getActiveFilters } from 'src/dashboard/util/activeDashboardFilters';\nimport { getUrlParam } from 'src/utils/urlUtils';\nimport { MenuKeys } from 'src/dashboard/types';\n\nconst propTypes = {\n  addSuccessToast: PropTypes.func.isRequired,\n  addDangerToast: PropTypes.func.isRequired,\n  dashboardInfo: PropTypes.object.isRequired,\n  dashboardId: PropTypes.number,\n  dashboardTitle: PropTypes.string,\n  dataMask: PropTypes.object.isRequired,\n  customCss: PropTypes.string,\n  colorNamespace: PropTypes.string,\n  colorScheme: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  updateCss: PropTypes.func.isRequired,\n  forceRefreshAllCharts: PropTypes.func.isRequired,\n  refreshFrequency: PropTypes.number,\n  shouldPersistRefreshFrequency: PropTypes.bool.isRequired,\n  setRefreshFrequency: PropTypes.func.isRequired,\n  startPeriodicRender: PropTypes.func.isRequired,\n  editMode: PropTypes.bool.isRequired,\n  userCanEdit: PropTypes.bool,\n  userCanShare: PropTypes.bool,\n  userCanSave: PropTypes.bool,\n  userCanCurate: PropTypes.bool.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  layout: PropTypes.object.isRequired,\n  expandedSlices: PropTypes.object,\n  onSave: PropTypes.func.isRequired,\n  showPropertiesModal: PropTypes.func.isRequired,\n  manageEmbedded: PropTypes.func.isRequired,\n  logEvent: PropTypes.func,\n  refreshLimit: PropTypes.number,\n  refreshWarning: PropTypes.string,\n  lastModifiedTime: PropTypes.number.isRequired,\n};\n\nconst defaultProps = {\n  colorNamespace: undefined,\n  colorScheme: undefined,\n  refreshLimit: 0,\n  refreshWarning: null,\n};\n\nclass HeaderActionsDropdown extends React.PureComponent {\n  static discardChanges() {\n    window.location.reload();\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      css: props.customCss,\n      showReportSubMenu: null,\n    };\n\n    this.changeCss = this.changeCss.bind(this);\n    this.changeRefreshInterval = this.changeRefreshInterval.bind(this);\n    this.handleMenuClick = this.handleMenuClick.bind(this);\n    this.setShowReportSubMenu = this.setShowReportSubMenu.bind(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.customCss !== nextProps.customCss) {\n      this.setState({ css: nextProps.customCss }, () => {\n        injectCustomCss(nextProps.customCss);\n      });\n    }\n  }\n\n  setShowReportSubMenu(show) {\n    this.setState({\n      showReportSubMenu: show,\n    });\n  }\n\n  changeCss(css) {\n    this.props.onChange();\n    this.props.updateCss(css);\n  }\n\n  changeRefreshInterval(refreshInterval, isPersistent) {\n    this.props.setRefreshFrequency(refreshInterval, isPersistent);\n    this.props.startPeriodicRender(refreshInterval * 1000);\n  }\n\n  handleMenuClick({ key }) {\n    switch (key) {\n      case MenuKeys.RefreshDashboard:\n        this.props.forceRefreshAllCharts();\n        this.props.addSuccessToast(t('Refreshing charts'));\n        break;\n      case MenuKeys.EditProperties:\n        this.props.showPropertiesModal();\n        break;\n      case MenuKeys.ToggleFullscreen: {\n        const url = getDashboardUrl({\n          pathname: window.location.pathname,\n          filters: getActiveFilters(),\n          hash: window.location.hash,\n          standalone: !getUrlParam(URL_PARAMS.standalone),\n        });\n        window.location.replace(url);\n        break;\n      }\n      case MenuKeys.ManageEmbedded: {\n        this.props.manageEmbedded();\n        break;\n      }\n      default:\n        break;\n    }\n  }\n\n  render() {\n    const {\n      dashboardTitle,\n      dashboardId,\n      dashboardInfo,\n      refreshFrequency,\n      shouldPersistRefreshFrequency,\n      editMode,\n      customCss,\n      colorNamespace,\n      colorScheme,\n      layout,\n      expandedSlices,\n      onSave,\n      userCanEdit,\n      userCanShare,\n      userCanSave,\n      userCanCurate,\n      isLoading,\n      refreshLimit,\n      refreshWarning,\n      lastModifiedTime,\n      addSuccessToast,\n      addDangerToast,\n      setIsDropdownVisible,\n      isDropdownVisible,\n      ...rest\n    } = this.props;\n\n    const emailTitle = t('Superset dashboard');\n    const emailSubject = `${emailTitle} ${dashboardTitle}`;\n    const emailBody = t('Check out this dashboard: ');\n\n    const isEmbedded = !dashboardInfo?.userId;\n\n    const url = getDashboardUrl({\n      pathname: window.location.pathname,\n      filters: getActiveFilters(),\n      hash: window.location.hash,\n    });\n\n    const refreshIntervalOptions =\n      dashboardInfo.common?.conf?.DASHBOARD_AUTO_REFRESH_INTERVALS;\n\n    return (\n      <Menu selectable={false} data-test=\"header-actions-menu\" {...rest}>\n        {!editMode && (\n          <Menu.Item\n            key={MenuKeys.RefreshDashboard}\n            data-test=\"refresh-dashboard-menu-item\"\n            disabled={isLoading}\n            onClick={this.handleMenuClick}\n          >\n            {t('Refresh dashboard')}\n          </Menu.Item>\n        )}\n        {!editMode && !isEmbedded && (\n          <Menu.Item\n            key={MenuKeys.ToggleFullscreen}\n            onClick={this.handleMenuClick}\n          >\n            {getUrlParam(URL_PARAMS.standalone)\n              ? t('Exit fullscreen')\n              : t('Enter fullscreen')}\n          </Menu.Item>\n        )}\n        {editMode && (\n          <Menu.Item\n            key={MenuKeys.EditProperties}\n            onClick={this.handleMenuClick}\n          >\n            {t('Edit properties')}\n          </Menu.Item>\n        )}\n        {editMode && (\n          <Menu.Item key={MenuKeys.EditCss}>\n            <CssEditor\n              triggerNode={<span>{t('Edit CSS')}</span>}\n              initialCss={this.state.css}\n              onChange={this.changeCss}\n              addDangerToast={addDangerToast}\n            />\n          </Menu.Item>\n        )}\n        <Menu.Divider />\n        {userCanSave && (\n          <Menu.Item key={MenuKeys.SaveModal}>\n            <SaveModal\n              addSuccessToast={this.props.addSuccessToast}\n              addDangerToast={this.props.addDangerToast}\n              dashboardId={dashboardId}\n              dashboardTitle={dashboardTitle}\n              dashboardInfo={dashboardInfo}\n              saveType={SAVE_TYPE_NEWDASHBOARD}\n              layout={layout}\n              expandedSlices={expandedSlices}\n              refreshFrequency={refreshFrequency}\n              shouldPersistRefreshFrequency={shouldPersistRefreshFrequency}\n              lastModifiedTime={lastModifiedTime}\n              customCss={customCss}\n              colorNamespace={colorNamespace}\n              colorScheme={colorScheme}\n              onSave={onSave}\n              triggerNode={\n                <span data-test=\"save-as-menu-item\">{t('Save as')}</span>\n              }\n              canOverwrite={userCanEdit}\n            />\n          </Menu.Item>\n        )}\n        <Menu.SubMenu\n          key={MenuKeys.Download}\n          disabled={isLoading}\n          title={t('Download')}\n          logEvent={this.props.logEvent}\n        >\n          <DownloadMenuItems\n            pdfMenuItemTitle={t('Export to PDF')}\n            imageMenuItemTitle={t('Download as Image')}\n            dashboardTitle={dashboardTitle}\n            addDangerToast={addDangerToast}\n          />\n        </Menu.SubMenu>\n        {userCanShare && (\n          <Menu.SubMenu\n            key={MenuKeys.Share}\n            data-test=\"share-dashboard-menu-item\"\n            disabled={isLoading}\n            title={t('Share')}\n          >\n            <ShareMenuItems\n              url={url}\n              copyMenuItemTitle={t('Copy permalink to clipboard')}\n              emailMenuItemTitle={t('Share permalink by email')}\n              emailSubject={emailSubject}\n              emailBody={emailBody}\n              addSuccessToast={addSuccessToast}\n              addDangerToast={addDangerToast}\n              dashboardId={dashboardId}\n            />\n          </Menu.SubMenu>\n        )}\n        {!editMode && userCanCurate && (\n          <Menu.Item\n            key={MenuKeys.ManageEmbedded}\n            onClick={this.handleMenuClick}\n          >\n            {t('Embed dashboard')}\n          </Menu.Item>\n        )}\n        <Menu.Divider />\n        {!editMode ? (\n          this.state.showReportSubMenu ? (\n            <>\n              <Menu.SubMenu title={t('Manage email report')}>\n                <HeaderReportDropdown\n                  dashboardId={dashboardInfo.id}\n                  setShowReportSubMenu={this.setShowReportSubMenu}\n                  showReportSubMenu={this.state.showReportSubMenu}\n                  setIsDropdownVisible={setIsDropdownVisible}\n                  isDropdownVisible={isDropdownVisible}\n                  useTextMenu\n                />\n              </Menu.SubMenu>\n              <Menu.Divider />\n            </>\n          ) : (\n            <Menu>\n              <HeaderReportDropdown\n                dashboardId={dashboardInfo.id}\n                setShowReportSubMenu={this.setShowReportSubMenu}\n                setIsDropdownVisible={setIsDropdownVisible}\n                isDropdownVisible={isDropdownVisible}\n                useTextMenu\n              />\n            </Menu>\n          )\n        ) : null}\n        {editMode && !isEmpty(dashboardInfo?.metadata?.filter_scopes) && (\n          <Menu.Item key={MenuKeys.SetFilterMapping}>\n            <FilterScopeModal\n              className=\"m-r-5\"\n              triggerNode={t('Set filter mapping')}\n            />\n          </Menu.Item>\n        )}\n\n        <Menu.Item key={MenuKeys.AutorefreshModal}>\n          <RefreshIntervalModal\n            addSuccessToast={this.props.addSuccessToast}\n            refreshFrequency={refreshFrequency}\n            refreshLimit={refreshLimit}\n            refreshWarning={refreshWarning}\n            onChange={this.changeRefreshInterval}\n            editMode={editMode}\n            refreshIntervalOptions={refreshIntervalOptions}\n            triggerNode={<span>{t('Set auto-refresh interval')}</span>}\n          />\n        </Menu.Item>\n      </Menu>\n    );\n  }\n}\n\nHeaderActionsDropdown.propTypes = propTypes;\nHeaderActionsDropdown.defaultProps = defaultProps;\n\nexport default HeaderActionsDropdown;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}