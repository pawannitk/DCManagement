{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; // the values should align with the database\n// model enum in superset/superset/models/core.py\nexport var ConfigurationMethod;\n(function (ConfigurationMethod) {\n  ConfigurationMethod[\"SqlalchemyUri\"] = \"sqlalchemy_form\";\n  ConfigurationMethod[\"DynamicForm\"] = \"dynamic_form\";\n})(ConfigurationMethod || (ConfigurationMethod = {}));\nexport var Engines;\n(function (Engines) {\n  Engines[\"GSheet\"] = \"gsheets\";\n  Engines[\"Snowflake\"] = \"snowflake\";\n})(Engines || (Engines = {}));;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(ConfigurationMethod, \"ConfigurationMethod\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/features/databases/types.ts\");reactHotLoader.register(Engines, \"Engines\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/features/databases/types.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["ConfigurationMethod","Engines","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/features/databases/types.ts"],"sourcesContent":["import { JsonObject } from '@superset-ui/core';\nimport { InputProps } from 'antd/lib/input';\nimport { ChangeEvent, EventHandler, FormEvent } from 'react';\n\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\ntype DatabaseUser = {\n  first_name: string;\n  last_name: string;\n};\n\nexport type CatalogObject = {\n  name: string;\n  value: string;\n};\n\nexport type SSHTunnelObject = {\n  id?: number;\n  server_address?: string;\n  server_port?: number;\n  username?: string;\n  password?: string;\n  private_key?: string;\n  private_key_password?: string;\n};\n\nexport type DatabaseObject = {\n  // Connection + general\n  backend?: string;\n  changed_on?: string;\n  changed_on_delta_humanized?: string;\n  configuration_method: ConfigurationMethod;\n  created_by?: null | DatabaseUser;\n  database_name: string;\n  driver: string;\n  engine?: string;\n  extra?: string;\n  id: number;\n  uuid?: null | string;\n  name: string; // synonym to database_name\n  paramProperties?: Record<string, any>;\n  sqlalchemy_uri?: string;\n  sqlalchemy_uri_placeholder?: string;\n  parameters?: {\n    access_token?: string;\n    database_name?: string;\n    host?: string;\n    port?: number;\n    database?: string;\n    default_catalog?: string;\n    default_schema?: string;\n    http_path_field?: string;\n    username?: string;\n    password?: string;\n    encryption?: boolean;\n    credentials_info?: string;\n    service_account_info?: string;\n    query?: Record<string, string>;\n    catalog?: Record<string, string | undefined>;\n    properties?: Record<string, any>;\n    warehouse?: string;\n    role?: string;\n    account?: string;\n    ssh?: boolean;\n  };\n\n  // Performance\n  cache_timeout?: string;\n  allow_run_async?: boolean;\n\n  // SQL Lab\n  allows_cost_estimate?: boolean;\n  allow_ctas?: boolean;\n  allow_cvas?: boolean;\n  allow_dml?: boolean;\n  allows_virtual_table_explore?: boolean;\n  expose_in_sqllab?: boolean;\n  force_ctas_schema?: string;\n  extra_json?: ExtraJson;\n\n  // Security\n  allow_file_upload?: boolean;\n  impersonate_user?: boolean;\n  masked_encrypted_extra?: string;\n  parameters_schema?: Record<string, any>;\n  server_cert?: string;\n\n  // External management\n  is_managed_externally: boolean;\n\n  // Temporary storage\n  catalog?: Array<CatalogObject>;\n  query_input?: string;\n\n  // DB Engine Spec information\n  engine_information?: {\n    supports_file_upload?: boolean;\n    disable_ssh_tunneling?: boolean;\n    supports_dynamic_catalog?: boolean;\n  };\n\n  // SSH Tunnel information\n  ssh_tunnel?: SSHTunnelObject | null;\n};\n\nexport type DatabaseForm = {\n  default_driver: string;\n  engine: string;\n  name: string;\n  parameters: {\n    properties: {\n      database: {\n        description: string;\n        type: string;\n      };\n      default_catalog: {\n        description: string;\n        type: string;\n      };\n      default_schema: {\n        description: string;\n        type: string;\n      };\n      http_path_field: {\n        description: string;\n        type: string;\n      };\n      host: {\n        description: string;\n        type: string;\n      };\n      password: {\n        description: string;\n        nullable: boolean;\n        type: string;\n      };\n      port: {\n        description: string;\n        format: string;\n        type: string;\n      };\n      query: {\n        additionalProperties: {};\n        description: string;\n        type: string;\n      };\n      username: {\n        description: string;\n        nullable: boolean;\n        type: string;\n      };\n      credentials_info: {\n        description: string;\n        nullable: boolean;\n        type: string;\n      };\n      service_account_info: {\n        description: string;\n        nullable: boolean;\n        type: string;\n      };\n    };\n    required: string[];\n    type: string;\n  };\n  ssh_tunnel: {\n    properties: {\n      ssh_address: {\n        description: string;\n        type: string;\n      };\n      ssh_port: {\n        description: string;\n        format: string;\n        type: string;\n      };\n      username: {\n        description: string;\n        type: string;\n      };\n      password: {\n        description: string;\n        nullable: boolean;\n        type: string;\n      };\n      private_key: {\n        description: string;\n        nullable: boolean;\n        type: string;\n      };\n      private_key_password: {\n        description: string;\n        nullable: boolean;\n        type: string;\n      };\n    };\n    required: string[];\n    type: string;\n  };\n  preferred: boolean;\n  sqlalchemy_uri_placeholder: string;\n  engine_information: {\n    supports_file_upload: boolean;\n    disable_ssh_tunneling: boolean;\n    supports_dynamic_catalog: boolean;\n  };\n};\n\n// the values should align with the database\n// model enum in superset/superset/models/core.py\nexport enum ConfigurationMethod {\n  SqlalchemyUri = 'sqlalchemy_form',\n  DynamicForm = 'dynamic_form',\n}\n\nexport enum Engines {\n  GSheet = 'gsheets',\n  Snowflake = 'snowflake',\n}\n\nexport interface ExtraJson {\n  allows_virtual_table_explore?: boolean; // in SQL Lab\n  cancel_query_on_windows_unload?: boolean; // in Performance\n  cost_estimate_enabled?: boolean; // in SQL Lab\n  disable_data_preview?: boolean; // in SQL Lab\n  disable_drill_to_detail?: boolean;\n  allow_multi_catalog?: boolean;\n  engine_params?: {\n    catalog?: Record<string, string>;\n    connect_args?: {\n      http_path?: string;\n    };\n  };\n  metadata_params?: {};\n  metadata_cache_timeout?: {\n    schema_cache_timeout?: number; // in Performance\n    table_cache_timeout?: number; // in Performance\n  }; // No field, holds schema and table timeout\n  schemas_allowed_for_file_upload?: string[]; // in Security\n  schema_options?: {\n    expand_rows?: boolean;\n  };\n  version?: string;\n}\n\nexport type CustomTextType = {\n  value?: string | boolean | number;\n  type?: string | null;\n  name?: string;\n  checked?: boolean;\n};\n\ntype CustomHTMLInputElement = Omit<Partial<CustomTextType>, 'value' | 'type'> &\n  CustomTextType;\n\ntype CustomHTMLTextAreaElement = Omit<\n  Partial<CustomTextType>,\n  'value' | 'type'\n> &\n  CustomTextType;\n\nexport type CustomParametersChangeType<T = CustomTextType> =\n  | FormEvent<InputProps>\n  | { target: T };\n\nexport type CustomEventHandlerType = EventHandler<\n  ChangeEvent<CustomHTMLInputElement | CustomHTMLTextAreaElement>\n>;\n\nexport interface FieldPropTypes {\n  required: boolean;\n  hasTooltip?: boolean;\n  tooltipText?: (value: any) => string;\n  placeholder?: string;\n  onParametersChange: (event: CustomParametersChangeType) => void;\n  onParametersUploadFileChange: (value: any) => string;\n  changeMethods: {\n    onParametersChange: (event: CustomParametersChangeType) => void;\n  } & {\n    onChange: (value: any) => string;\n  } & {\n    onQueryChange: (value: any) => string;\n  } & { onParametersUploadFileChange: (value: any) => string } & {\n    onAddTableCatalog: () => void;\n    onRemoveTableCatalog: (idx: number) => void;\n  } & {\n    onExtraInputChange: (value: any) => void;\n    onSSHTunnelParametersChange: CustomEventHandlerType;\n  };\n  validationErrors: JsonObject | null;\n  getValidation: () => void;\n  clearValidationErrors: () => void;\n  db?: DatabaseObject;\n  dbModel?: DatabaseForm;\n  field: string;\n  default_value?: any;\n  description?: string;\n  isEditMode?: boolean;\n  sslForced?: boolean;\n  defaultDBName?: string;\n  editNewDb?: boolean;\n}\n\ntype ChangeMethodsType = FieldPropTypes['changeMethods'];\n\n// changeMethods compatibility with dynamic forms\ntype SwitchPropsChangeMethodsType = {\n  onParametersChange: ChangeMethodsType['onParametersChange'];\n};\n\nexport type SwitchProps = {\n  dbModel: DatabaseForm;\n  db: DatabaseObject;\n  changeMethods: SwitchPropsChangeMethodsType;\n  clearValidationErrors: () => void;\n};\n"],"mappings":"wSAgOA;AACA;AACA,WAAYA,mBAGX;AAHD,WAAYA,mBAAmB;EAC7BA,mBAAA,qCAAiC;EACjCA,mBAAA,gCAA4B;AAC9B,CAAC,EAHWA,mBAAmB,KAAnBA,mBAAmB;AAK/B,WAAYC,OAGX;AAHD,WAAYA,OAAO;EACjBA,OAAA,sBAAkB;EAClBA,OAAA,2BAAuB;AACzB,CAAC,EAHWA,OAAO,KAAPA,OAAO,QAGlB,mBAAAC,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAC,OAAA,GAAAC,SAAA,MAAAH,cAAA,WAAAA,cAAA,CAAAI,QAAA,CARWN,mBAGX,mHAAAE,cAAA,CAAAI,QAAA,CAEWL,OAGX,+HAAAM,WAAA,UAAAJ,oBAAA,mBAAAA,oBAAA,CAAAI,WAAA,GAAAF,SAAA,CAAAE,WAAA,IAAAA,WAAA,CAAAC,MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}