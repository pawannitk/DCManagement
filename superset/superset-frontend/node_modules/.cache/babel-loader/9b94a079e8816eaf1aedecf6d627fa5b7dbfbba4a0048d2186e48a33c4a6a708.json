{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useState, useRef } from 'react';\nimport { Link } from 'react-router-dom';\nimport cx from 'classnames';\nimport { css, styled, t } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';\nimport CertifiedBadge from '../CertifiedBadge';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst StyledCertifiedBadge = styled(CertifiedBadge)`\n  vertical-align: middle;\n`;\nexport default function EditableTitle({ canEdit = false, editing = false, extraClasses, multiLine = false, noPermitTooltip, onSaveTitle, showTooltip = true, style, title = '', defaultTitle = '', placeholder = '', certifiedBy, certificationDetails, url,\n  // rest is related to title tooltip\n  ...rest }) {\n  const [isEditing, setIsEditing] = useState(editing);\n  const [currentTitle, setCurrentTitle] = useState(title);\n  const [lastTitle, setLastTitle] = useState(title);\n  const [contentBoundingRect, setContentBoundingRect] = useState(null);\n  // Used so we can access the DOM element if a user clicks on this component.\n  const contentRef = useRef();\n  useEffect(() => {\n    if (title !== currentTitle) {\n      setLastTitle(currentTitle);\n      setCurrentTitle(title);\n    }\n  }, [title]);\n  useEffect(() => {\n    if (isEditing) {\n      contentRef.current.focus();\n      // move cursor and scroll to the end\n      if (contentRef.current.setSelectionRange) {\n        const { length } = contentRef.current.value;\n        contentRef.current.setSelectionRange(length, length);\n        contentRef.current.scrollLeft = contentRef.current.scrollWidth;\n        contentRef.current.scrollTop = contentRef.current.scrollHeight;\n      }\n    }\n  }, [isEditing]);\n  function handleClick() {\n    if (!canEdit || isEditing) {\n      return;\n    }\n    // For multi-line values, save the actual rendered size of the displayed text.\n    // Later, if a textarea is constructed for editing the value, we'll need this.\n    const contentBounding = contentRef.current ?\n    contentRef.current.getBoundingClientRect() :\n    null;\n    setIsEditing(true);\n    setContentBoundingRect(contentBounding);\n  }\n  function handleBlur() {\n    const formattedTitle = currentTitle.trim();\n    if (!canEdit) {\n      return;\n    }\n    setIsEditing(false);\n    if (!formattedTitle.length) {\n      setCurrentTitle(lastTitle);\n      return;\n    }\n    if (lastTitle !== formattedTitle) {\n      setLastTitle(formattedTitle);\n    }\n    if (title !== formattedTitle) {\n      onSaveTitle(formattedTitle);\n    }\n  }\n  // tl;dr when a EditableTitle is being edited, typically the Tab that wraps it has been\n  // clicked and is focused/active. For accessibility, when the focused tab anchor intercepts\n  // the ' ' key (among others, including all arrows) the onChange() doesn't fire. Somehow\n  // keydown is still called so we can detect this and manually add a ' ' to the current title\n  function handleKeyDown(event) {\n    if (event.key === ' ') {\n      event.stopPropagation();\n    }\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      handleBlur();\n    }\n  }\n  function handleChange(ev) {\n    if (!canEdit) {\n      return;\n    }\n    setCurrentTitle(ev.target.value);\n  }\n  function handleKeyPress(ev) {\n    if (ev.key === 'Enter') {\n      ev.preventDefault();\n      handleBlur();\n    }\n  }\n  let value;\n  value = currentTitle;\n  if (!isEditing && !currentTitle) {\n    value = defaultTitle || title;\n  }\n  // Construct an inline style based on previously-saved height of the rendered label. Only\n  // used in multi-line contexts.\n  const editStyle = isEditing && contentBoundingRect ?\n  { height: `${contentBoundingRect.height}px` } :\n  undefined;\n  // Create a textarea when we're editing a multi-line value, otherwise create an input (which may\n  // be text or a button).\n  let titleComponent = multiLine && isEditing ? ___EmotionJSX(\"textarea\", { \"data-test\": \"editable-title-input\", ref: contentRef, value: value, className: !title ? 'text-muted' : undefined, onKeyDown: handleKeyDown, onChange: handleChange, onBlur: handleBlur, onClick: handleClick, onKeyPress: handleKeyPress, placeholder: placeholder, style: editStyle }) : ___EmotionJSX(\"input\", { \"data-test\": \"editable-title-input\", ref: contentRef, type: isEditing ? 'text' : 'button', value: value, className: !title ? 'text-muted' : undefined, onKeyDown: handleKeyDown, onChange: handleChange, onBlur: handleBlur, onClick: handleClick, onKeyPress: handleKeyPress, placeholder: placeholder });\n  if (showTooltip && !isEditing) {\n    titleComponent = ___EmotionJSX(Tooltip, { id: \"title-tooltip\", title: canEdit ?\n      t('Click to edit') :\n      noPermitTooltip ||\n      t(\"You don't have the rights to alter this title.\") },\n    titleComponent\n    );\n  }\n  if (!canEdit) {\n    // don't actually want an input in this case\n    titleComponent = url ? ___EmotionJSX(Link, { to: url, \"data-test\": \"editable-title-input\", css: (theme) => css`\n          color: ${theme.colors.grayscale.dark1};\n          text-decoration: none;\n          :hover {\n            text-decoration: underline;\n          }\n          display: inline-block;\n        ` },\n    value\n    ) : ___EmotionJSX(\"span\", { \"data-test\": \"editable-title-input\" }, value);\n  }\n  return ___EmotionJSX(\"span\", _extends({ \"data-test\": \"editable-title\", className: cx('editable-title', extraClasses, canEdit && 'editable-title--editable', isEditing && 'editable-title--editing'), style: style }, rest),\n  certifiedBy && ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(StyledCertifiedBadge, { certifiedBy: certifiedBy, details: certificationDetails, size: \"xl\" }), ' '\n  ),\n  titleComponent\n  );\n}__signature__(EditableTitle, \"useState{[isEditing, setIsEditing](editing)}\\nuseState{[currentTitle, setCurrentTitle](title)}\\nuseState{[lastTitle, setLastTitle](title)}\\nuseState{[contentBoundingRect, setContentBoundingRect](null)}\\nuseRef{contentRef}\\nuseEffect{}\\nuseEffect{}\");;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(StyledCertifiedBadge, \"StyledCertifiedBadge\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/EditableTitle/index.tsx\");reactHotLoader.register(EditableTitle, \"EditableTitle\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/EditableTitle/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["React","useEffect","useState","useRef","Link","cx","css","styled","t","Tooltip","CertifiedBadge","jsx","___EmotionJSX","StyledCertifiedBadge","EditableTitle","canEdit","editing","extraClasses","multiLine","noPermitTooltip","onSaveTitle","showTooltip","style","title","defaultTitle","placeholder","certifiedBy","certificationDetails","url","rest","isEditing","setIsEditing","currentTitle","setCurrentTitle","lastTitle","setLastTitle","contentBoundingRect","setContentBoundingRect","contentRef","current","focus","setSelectionRange","length","value","scrollLeft","scrollWidth","scrollTop","scrollHeight","handleClick","contentBounding","getBoundingClientRect","handleBlur","formattedTitle","trim","handleKeyDown","event","key","stopPropagation","preventDefault","handleChange","ev","target","handleKeyPress","editStyle","height","undefined","titleComponent","ref","className","onKeyDown","onChange","onBlur","onClick","onKeyPress","type","id","to","theme","colors","grayscale","dark1","_extends","Fragment","details","size","__signature__","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/components/EditableTitle/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useState, useRef } from 'react';\nimport { Link } from 'react-router-dom';\nimport cx from 'classnames';\nimport { css, styled, SupersetTheme, t } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';\nimport CertifiedBadge from '../CertifiedBadge';\n\nexport interface EditableTitleProps {\n  canEdit?: boolean;\n  editing?: boolean;\n  emptyText?: string;\n  extraClasses?: Array<string> | string;\n  multiLine?: boolean;\n  noPermitTooltip?: string;\n  onSaveTitle: (arg0: string) => void;\n  showTooltip?: boolean;\n  style?: object;\n  title?: string;\n  defaultTitle?: string;\n  placeholder?: string;\n  certifiedBy?: string;\n  certificationDetails?: string;\n  url?: string;\n}\n\nconst StyledCertifiedBadge = styled(CertifiedBadge)`\n  vertical-align: middle;\n`;\n\nexport default function EditableTitle({\n  canEdit = false,\n  editing = false,\n  extraClasses,\n  multiLine = false,\n  noPermitTooltip,\n  onSaveTitle,\n  showTooltip = true,\n  style,\n  title = '',\n  defaultTitle = '',\n  placeholder = '',\n  certifiedBy,\n  certificationDetails,\n  url,\n  // rest is related to title tooltip\n  ...rest\n}: EditableTitleProps) {\n  const [isEditing, setIsEditing] = useState(editing);\n  const [currentTitle, setCurrentTitle] = useState(title);\n  const [lastTitle, setLastTitle] = useState(title);\n  const [contentBoundingRect, setContentBoundingRect] =\n    useState<DOMRect | null>(null);\n  // Used so we can access the DOM element if a user clicks on this component.\n\n  const contentRef = useRef<any | HTMLInputElement | HTMLTextAreaElement>();\n\n  useEffect(() => {\n    if (title !== currentTitle) {\n      setLastTitle(currentTitle);\n      setCurrentTitle(title);\n    }\n  }, [title]);\n\n  useEffect(() => {\n    if (isEditing) {\n      contentRef.current.focus();\n      // move cursor and scroll to the end\n      if (contentRef.current.setSelectionRange) {\n        const { length } = contentRef.current.value;\n        contentRef.current.setSelectionRange(length, length);\n        contentRef.current.scrollLeft = contentRef.current.scrollWidth;\n        contentRef.current.scrollTop = contentRef.current.scrollHeight;\n      }\n    }\n  }, [isEditing]);\n\n  function handleClick() {\n    if (!canEdit || isEditing) {\n      return;\n    }\n\n    // For multi-line values, save the actual rendered size of the displayed text.\n    // Later, if a textarea is constructed for editing the value, we'll need this.\n    const contentBounding = contentRef.current\n      ? contentRef.current.getBoundingClientRect()\n      : null;\n    setIsEditing(true);\n    setContentBoundingRect(contentBounding);\n  }\n\n  function handleBlur() {\n    const formattedTitle = currentTitle.trim();\n\n    if (!canEdit) {\n      return;\n    }\n\n    setIsEditing(false);\n\n    if (!formattedTitle.length) {\n      setCurrentTitle(lastTitle);\n      return;\n    }\n\n    if (lastTitle !== formattedTitle) {\n      setLastTitle(formattedTitle);\n    }\n\n    if (title !== formattedTitle) {\n      onSaveTitle(formattedTitle);\n    }\n  }\n\n  // tl;dr when a EditableTitle is being edited, typically the Tab that wraps it has been\n  // clicked and is focused/active. For accessibility, when the focused tab anchor intercepts\n  // the ' ' key (among others, including all arrows) the onChange() doesn't fire. Somehow\n  // keydown is still called so we can detect this and manually add a ' ' to the current title\n  function handleKeyDown(event: any) {\n    if (event.key === ' ') {\n      event.stopPropagation();\n    }\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      handleBlur();\n    }\n  }\n\n  function handleChange(ev: any) {\n    if (!canEdit) {\n      return;\n    }\n    setCurrentTitle(ev.target.value);\n  }\n\n  function handleKeyPress(ev: any) {\n    if (ev.key === 'Enter') {\n      ev.preventDefault();\n      handleBlur();\n    }\n  }\n\n  let value: string | undefined;\n  value = currentTitle;\n  if (!isEditing && !currentTitle) {\n    value = defaultTitle || title;\n  }\n\n  // Construct an inline style based on previously-saved height of the rendered label. Only\n  // used in multi-line contexts.\n  const editStyle =\n    isEditing && contentBoundingRect\n      ? { height: `${contentBoundingRect.height}px` }\n      : undefined;\n\n  // Create a textarea when we're editing a multi-line value, otherwise create an input (which may\n  // be text or a button).\n  let titleComponent =\n    multiLine && isEditing ? (\n      <textarea\n        data-test=\"editable-title-input\"\n        ref={contentRef}\n        value={value}\n        className={!title ? 'text-muted' : undefined}\n        onKeyDown={handleKeyDown}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        onClick={handleClick}\n        onKeyPress={handleKeyPress}\n        placeholder={placeholder}\n        style={editStyle}\n      />\n    ) : (\n      <input\n        data-test=\"editable-title-input\"\n        ref={contentRef}\n        type={isEditing ? 'text' : 'button'}\n        value={value}\n        className={!title ? 'text-muted' : undefined}\n        onKeyDown={handleKeyDown}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        onClick={handleClick}\n        onKeyPress={handleKeyPress}\n        placeholder={placeholder}\n      />\n    );\n  if (showTooltip && !isEditing) {\n    titleComponent = (\n      <Tooltip\n        id=\"title-tooltip\"\n        title={\n          canEdit\n            ? t('Click to edit')\n            : noPermitTooltip ||\n              t(\"You don't have the rights to alter this title.\")\n        }\n      >\n        {titleComponent}\n      </Tooltip>\n    );\n  }\n  if (!canEdit) {\n    // don't actually want an input in this case\n    titleComponent = url ? (\n      <Link\n        to={url}\n        data-test=\"editable-title-input\"\n        css={(theme: SupersetTheme) => css`\n          color: ${theme.colors.grayscale.dark1};\n          text-decoration: none;\n          :hover {\n            text-decoration: underline;\n          }\n          display: inline-block;\n        `}\n      >\n        {value}\n      </Link>\n    ) : (\n      <span data-test=\"editable-title-input\">{value}</span>\n    );\n  }\n  return (\n    <span\n      data-test=\"editable-title\"\n      className={cx(\n        'editable-title',\n        extraClasses,\n        canEdit && 'editable-title--editable',\n        isEditing && 'editable-title--editing',\n      )}\n      style={style}\n      {...rest}\n    >\n      {certifiedBy && (\n        <>\n          <StyledCertifiedBadge\n            certifiedBy={certifiedBy}\n            details={certificationDetails}\n            size=\"xl\"\n          />{' '}\n        </>\n      )}\n      {titleComponent}\n    </span>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}