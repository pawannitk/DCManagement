{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint react/sort-comp: 'off' */\nimport React from 'react';\nimport ChartClient from '../clients/ChartClient';\nclass ChartDataProvider extends React.PureComponent {\n\n  constructor(props) {\n    super(props);this.chartClient = void 0;this.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    handleFetchData = () => {\n      const { loadDatasource, formDataRequestOptions, datasourceRequestOptions, queryRequestOptions } = this.props;\n      this.setState({ status: 'loading' }, () => {\n        try {\n          this.chartClient.\n          loadFormData(this.extractSliceIdAndFormData(), formDataRequestOptions).\n          then((formData) => Promise.all([\n          loadDatasource ?\n          this.chartClient.loadDatasource(formData.datasource, datasourceRequestOptions) :\n          Promise.resolve(undefined),\n          this.chartClient.loadQueryData(formData, queryRequestOptions)]\n          ).then(([datasource, queriesData]) => (\n          // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n          {\n            datasource,\n            formData,\n            queriesData\n          }))).\n          then(this.handleReceiveData).\n          catch(this.handleError);\n        }\n        catch (error) {\n          this.handleError(error);\n        }\n      });\n    };this.\n    handleReceiveData = (payload) => {\n      const { onLoaded } = this.props;\n      if (onLoaded)\n      onLoaded(payload);\n      this.setState({ payload, status: 'loaded' });\n    };this.\n    handleError = (error) => {\n      const { onError } = this.props;\n      if (onError)\n      onError(error);\n      this.setState({ error, status: 'error' });\n    };this.state = { status: 'uninitialized' };this.chartClient = new ChartClient({ client: props.client });}componentDidMount() {this.handleFetchData();}componentDidUpdate(prevProps) {const { formData, sliceId } = this.props;if (formData !== prevProps.formData || sliceId !== prevProps.sliceId) {this.handleFetchData();}}extractSliceIdAndFormData() {const { formData, sliceId } = this.props;return formData ? { formData } : { sliceId: sliceId };}\n  render() {\n    const { children } = this.props;\n    const { status, payload, error } = this.state;\n    switch (status) {\n      case 'loading':\n        return children({ loading: true });\n      case 'loaded':\n        return children({ payload });\n      case 'error':\n        return children({ error });\n      case 'uninitialized':\n      default:\n        return null;\n    }\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}const _default = ChartDataProvider;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(ChartDataProvider, \"ChartDataProvider\", \"/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/chart/components/ChartDataProvider.tsx\");reactHotLoader.register(_default, \"default\", \"/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/chart/components/ChartDataProvider.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["React","ChartClient","ChartDataProvider","PureComponent","constructor","props","chartClient","handleFetchData","loadDatasource","formDataRequestOptions","datasourceRequestOptions","queryRequestOptions","setState","status","loadFormData","extractSliceIdAndFormData","then","formData","Promise","all","datasource","resolve","undefined","loadQueryData","queriesData","handleReceiveData","catch","handleError","error","payload","onLoaded","onError","state","client","componentDidMount","componentDidUpdate","prevProps","sliceId","render","children","loading","__reactstandin__regenerateByEval","key","code","eval","_default","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/chart/components/ChartDataProvider.tsx"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/* eslint react/sort-comp: 'off' */\nimport React, { ReactNode } from 'react';\nimport {\n  SupersetClientInterface,\n  RequestConfig,\n  QueryFormData,\n  Datasource,\n} from '../..';\nimport ChartClient, { SliceIdAndOrFormData } from '../clients/ChartClient';\nimport { QueryData } from '../types/QueryResponse';\n\ninterface Payload {\n  formData: Partial<QueryFormData>;\n  queriesData: QueryData[];\n  datasource?: Datasource;\n}\n\nexport interface ProvidedProps {\n  payload?: Payload;\n  error?: Error;\n  loading?: boolean;\n}\n\nexport type ChartDataProviderProps =\n  /** User can pass either one or both of sliceId or formData */\n  SliceIdAndOrFormData & {\n    /** Child function called with ProvidedProps */\n    children: (provided: ProvidedProps) => ReactNode;\n    /** Superset client which is used to fetch data. It should already be configured and initialized. */\n    client?: SupersetClientInterface;\n    /** Will fetch and include datasource metadata for SliceIdAndOrFormData in the payload. */\n    loadDatasource?: boolean;\n    /** Callback when an error occurs. Enables wrapping the Provider in an ErrorBoundary. */\n    onError?: (error: ProvidedProps['error']) => void;\n    /** Callback when data is loaded. */\n    onLoaded?: (payload: ProvidedProps['payload']) => void;\n    /** Hook to override the formData request config. */\n    formDataRequestOptions?: Partial<RequestConfig>;\n    /** Hook to override the datasource request config. */\n    datasourceRequestOptions?: Partial<RequestConfig>;\n    /** Hook to override the queriesData request config. */\n    queryRequestOptions?: Partial<RequestConfig>;\n  };\n\nexport type ChartDataProviderState = {\n  status: 'uninitialized' | 'loading' | 'error' | 'loaded';\n  payload?: ProvidedProps['payload'];\n  error?: ProvidedProps['error'];\n};\n\nclass ChartDataProvider extends React.PureComponent<\n  ChartDataProviderProps,\n  ChartDataProviderState\n> {\n  readonly chartClient: ChartClient;\n\n  constructor(props: ChartDataProviderProps) {\n    super(props);\n    this.state = { status: 'uninitialized' };\n    this.chartClient = new ChartClient({ client: props.client });\n  }\n\n  componentDidMount() {\n    this.handleFetchData();\n  }\n\n  componentDidUpdate(prevProps: ChartDataProviderProps) {\n    const { formData, sliceId } = this.props;\n    if (formData !== prevProps.formData || sliceId !== prevProps.sliceId) {\n      this.handleFetchData();\n    }\n  }\n\n  private extractSliceIdAndFormData() {\n    const { formData, sliceId } = this.props;\n    return formData ? { formData } : { sliceId: sliceId as number };\n  }\n\n  private handleFetchData = () => {\n    const {\n      loadDatasource,\n      formDataRequestOptions,\n      datasourceRequestOptions,\n      queryRequestOptions,\n    } = this.props;\n\n    this.setState({ status: 'loading' }, () => {\n      try {\n        this.chartClient\n          .loadFormData(\n            this.extractSliceIdAndFormData(),\n            formDataRequestOptions,\n          )\n          .then(formData =>\n            Promise.all([\n              loadDatasource\n                ? this.chartClient.loadDatasource(\n                    formData.datasource,\n                    datasourceRequestOptions,\n                  )\n                : Promise.resolve(undefined),\n              this.chartClient.loadQueryData(formData, queryRequestOptions),\n            ]).then(\n              ([datasource, queriesData]) =>\n                // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n                ({\n                  datasource,\n                  formData,\n                  queriesData,\n                }) as Payload,\n            ),\n          )\n          .then(this.handleReceiveData)\n          .catch(this.handleError);\n      } catch (error) {\n        this.handleError(error as Error);\n      }\n    });\n  };\n\n  private handleReceiveData = (payload?: Payload) => {\n    const { onLoaded } = this.props;\n    if (onLoaded) onLoaded(payload);\n    this.setState({ payload, status: 'loaded' });\n  };\n\n  private handleError = (error: ProvidedProps['error']) => {\n    const { onError } = this.props;\n    if (onError) onError(error);\n    this.setState({ error, status: 'error' });\n  };\n\n  render() {\n    const { children } = this.props;\n    const { status, payload, error } = this.state;\n\n    switch (status) {\n      case 'loading':\n        return children({ loading: true });\n      case 'loaded':\n        return children({ payload });\n      case 'error':\n        return children({ error });\n      case 'uninitialized':\n      default:\n        return null;\n    }\n  }\n}\n\nexport default ChartDataProvider;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}