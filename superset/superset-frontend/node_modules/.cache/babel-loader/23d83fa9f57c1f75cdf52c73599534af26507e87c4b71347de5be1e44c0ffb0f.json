{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { forwardRef, useEffect, useImperativeHandle, useLayoutEffect, useMemo, useState, useRef } from 'react';\nimport { Global } from '@emotion/react';\nimport { css, t, useTheme, usePrevious } from '@superset-ui/core';\nimport { useResizeDetector } from 'react-resize-detector';\nimport Badge from '../Badge';\nimport Icons from '../Icons';\nimport Button from '../Button';\nimport Popover from '../Popover';\nimport { Tooltip } from '../Tooltip';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst MAX_HEIGHT = 500;\nconst DropdownContainer = /*#__PURE__*/forwardRef(__signature__(({ items, onOverflowingStateChange, dropdownContent, dropdownRef, dropdownStyle = {}, dropdownTriggerCount, dropdownTriggerIcon, dropdownTriggerText = t('More'), dropdownTriggerTooltip = null, forceRender, style }, outerRef) => {\n  const theme = useTheme();\n  const { ref, width = 0 } = useResizeDetector();\n  const previousWidth = usePrevious(width) || 0;\n  const { current } = ref;\n  const [itemsWidth, setItemsWidth] = useState([]);\n  const [popoverVisible, setPopoverVisible] = useState(false);\n  // We use React.useState to be able to mock the state in Jest\n  const [overflowingIndex, setOverflowingIndex] = React.useState(-1);\n  let targetRef = useRef(null);\n  if (dropdownRef) {\n    targetRef = dropdownRef;\n  }\n  const [showOverflow, setShowOverflow] = useState(false);\n  const reduceItems = (items) => items.reduce(([items, ids], item) => {\n    items.push({\n      id: item.id,\n      element: /*#__PURE__*/React.cloneElement(item.element, { key: item.id })\n    });\n    ids.push(item.id);\n    return [items, ids];\n  }, [[], []]);\n  const [notOverflowedItems, notOverflowedIds] = useMemo(() => reduceItems(items.slice(0, overflowingIndex !== -1 ? overflowingIndex : items.length)), [items, overflowingIndex]);\n  const [overflowedItems, overflowedIds] = useMemo(() => overflowingIndex !== -1 ?\n  reduceItems(items.slice(overflowingIndex)) :\n  [[], []], [items, overflowingIndex]);\n  useLayoutEffect(() => {\n    const container = current == null ? void 0 : current.children.item(0);\n    if (container) {\n      const { children } = container;\n      const childrenArray = Array.from(children);\n      // If items length change, add all items to the container\n      // and recalculate the widths\n      if (itemsWidth.length !== items.length) {\n        if (childrenArray.length === items.length) {\n          setItemsWidth(childrenArray.map((child) => child.getBoundingClientRect().width));\n        } else\n        {\n          setOverflowingIndex(-1);\n          return;\n        }\n      }\n      // Calculates the index of the first overflowed element\n      // +1 is to give at least one pixel of difference and avoid flakiness\n      const index = childrenArray.findIndex((child) => child.getBoundingClientRect().right >\n      container.getBoundingClientRect().right + 1);\n      // If elements fit (-1) and there's overflowed items\n      // then preserve the overflow index. We can't use overflowIndex\n      // directly because the items may have been modified\n      let newOverflowingIndex = index === -1 && overflowedItems.length > 0 ?\n      items.length - overflowedItems.length :\n      index;\n      if (width > previousWidth) {\n        // Calculates remaining space in the container\n        const button = current == null ? void 0 : current.children.item(1);\n        const buttonRight = (button == null ? void 0 : button.getBoundingClientRect().right) || 0;\n        const containerRight = (current == null ? void 0 : current.getBoundingClientRect().right) || 0;\n        const remainingSpace = containerRight - buttonRight;\n        // Checks if some elements in the dropdown fits in the remaining space\n        let sum = 0;\n        for (let i = childrenArray.length; i < items.length; i += 1) {\n          sum += itemsWidth[i];\n          if (sum <= remainingSpace) {\n            newOverflowingIndex = i + 1;\n          } else\n          {\n            break;\n          }\n        }\n      }\n      setOverflowingIndex(newOverflowingIndex);\n    }\n  }, [\n  current,\n  items.length,\n  itemsWidth,\n  overflowedItems.length,\n  previousWidth,\n  width]\n  );\n  useEffect(() => {\n    if (onOverflowingStateChange) {\n      onOverflowingStateChange({\n        notOverflowed: notOverflowedIds,\n        overflowed: overflowedIds\n      });\n    }\n  }, [notOverflowedIds, onOverflowingStateChange, overflowedIds]);\n  const overflowingCount = overflowingIndex !== -1 ? items.length - overflowingIndex : 0;\n  const popoverContent = useMemo(() => dropdownContent || overflowingCount ? ___EmotionJSX(\"div\", { css: css`\n              display: flex;\n              flex-direction: column;\n              gap: ${theme.gridUnit * 4}px;\n            `, \"data-test\": \"dropdown-content\", style: dropdownStyle, ref: targetRef },\n  dropdownContent ?\n  dropdownContent(overflowedItems) :\n  overflowedItems.map((item) => item.element)\n  ) : null, [\n  dropdownContent,\n  overflowingCount,\n  theme.gridUnit,\n  dropdownStyle,\n  overflowedItems]\n  );\n  useLayoutEffect(() => {\n    if (popoverVisible) {\n      // Measures scroll height after rendering the elements\n      setTimeout(() => {\n        if (targetRef.current) {\n          // We only set overflow when there's enough space to display\n          // Select's popovers because they are restrained by the overflow property.\n          setShowOverflow(targetRef.current.scrollHeight > MAX_HEIGHT);\n        }\n      }, 100);\n    }\n  }, [popoverVisible]);\n  useImperativeHandle(outerRef, () => ({\n    ...ref.current,\n    open: () => setPopoverVisible(true)\n  }), [ref]);\n  // Closes the popover when scrolling on the document\n  useEffect(() => {\n    document.onscroll = popoverVisible ?\n    () => setPopoverVisible(false) :\n    null;\n    return () => {\n      document.onscroll = null;\n    };\n  }, [popoverVisible]);\n  return ___EmotionJSX(\"div\", { ref: ref, css: css`\n          display: flex;\n          align-items: center;\n        ` },\n  ___EmotionJSX(\"div\", { css: css`\n            display: flex;\n            align-items: center;\n            gap: ${theme.gridUnit * 4}px;\n            margin-right: ${theme.gridUnit * 4}px;\n            min-width: 0px;\n          `, \"data-test\": \"container\", style: style },\n  notOverflowedItems.map((item) => item.element)\n  ),\n  popoverContent && ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(Global, { styles: css`\n                .ant-popover-inner-content {\n                  max-height: ${MAX_HEIGHT}px;\n                  overflow: ${showOverflow ? 'auto' : 'visible'};\n                  padding: ${theme.gridUnit * 3}px ${theme.gridUnit * 4}px;\n\n                  // Some OS versions only show the scroll when hovering.\n                  // These settings will make the scroll always visible.\n                  ::-webkit-scrollbar {\n                    -webkit-appearance: none;\n                    width: 14px;\n                  }\n                  ::-webkit-scrollbar-thumb {\n                    border-radius: 9px;\n                    background-color: ${theme.colors.grayscale.light1};\n                    border: 3px solid transparent;\n                    background-clip: content-box;\n                  }\n                  ::-webkit-scrollbar-track {\n                    background-color: ${theme.colors.grayscale.light4};\n                    border-left: 1px solid ${theme.colors.grayscale.light2};\n                  }\n                }\n              ` }),\n  ___EmotionJSX(Popover, { content: popoverContent, trigger: \"click\", visible: popoverVisible, onVisibleChange: (visible) => setPopoverVisible(visible), placement: \"bottom\", forceRender: forceRender },\n  ___EmotionJSX(Tooltip, { title: dropdownTriggerTooltip },\n  ___EmotionJSX(Button, { buttonStyle: \"secondary\", \"data-test\": \"dropdown-container-btn\" },\n  dropdownTriggerIcon,\n  dropdownTriggerText,\n  ___EmotionJSX(Badge, { count: dropdownTriggerCount != null ? dropdownTriggerCount : overflowingCount, color: (dropdownTriggerCount != null ? dropdownTriggerCount : overflowingCount) > 0 ?\n    theme.colors.primary.base :\n    theme.colors.grayscale.light1, showZero: true, css: css`\n                      margin-left: ${theme.gridUnit * 2}px;\n                    ` }),\n  ___EmotionJSX(Icons.DownOutlined, { iconSize: \"m\", iconColor: theme.colors.grayscale.light1, css: css`\n                      .anticon {\n                        display: flex;\n                      }\n                    ` })\n  )\n  )\n  )\n  )\n  );\n}, \"useTheme{theme}\\nuseResizeDetector{{ ref, width = 0 }}\\nusePrevious{}\\nuseState{[itemsWidth, setItemsWidth]([])}\\nuseState{[popoverVisible, setPopoverVisible](false)}\\nuseState{[overflowingIndex, setOverflowingIndex](-1)}\\nuseRef{targetRef}\\nuseState{[showOverflow, setShowOverflow](false)}\\nuseMemo{[notOverflowedItems, notOverflowedIds]}\\nuseMemo{[overflowedItems, overflowedIds]}\\nuseLayoutEffect{}\\nuseEffect{}\\nuseMemo{popoverContent}\\nuseLayoutEffect{}\\nuseImperativeHandle{}\\nuseEffect{}\", () => [useTheme, useResizeDetector, usePrevious, useImperativeHandle]));const _default =\nDropdownContainer;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(MAX_HEIGHT, \"MAX_HEIGHT\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/DropdownContainer/index.tsx\");reactHotLoader.register(DropdownContainer, \"DropdownContainer\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/DropdownContainer/index.tsx\");reactHotLoader.register(_default, \"default\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/DropdownContainer/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["React","forwardRef","useEffect","useImperativeHandle","useLayoutEffect","useMemo","useState","useRef","Global","css","t","useTheme","usePrevious","useResizeDetector","Badge","Icons","Button","Popover","Tooltip","jsx","___EmotionJSX","MAX_HEIGHT","DropdownContainer","__signature__","items","onOverflowingStateChange","dropdownContent","dropdownRef","dropdownStyle","dropdownTriggerCount","dropdownTriggerIcon","dropdownTriggerText","dropdownTriggerTooltip","forceRender","style","outerRef","theme","ref","width","previousWidth","current","itemsWidth","setItemsWidth","popoverVisible","setPopoverVisible","overflowingIndex","setOverflowingIndex","targetRef","showOverflow","setShowOverflow","reduceItems","reduce","ids","item","push","id","element","cloneElement","key","notOverflowedItems","notOverflowedIds","slice","length","overflowedItems","overflowedIds","container","children","childrenArray","Array","from","map","child","getBoundingClientRect","index","findIndex","right","newOverflowingIndex","button","buttonRight","containerRight","remainingSpace","sum","i","notOverflowed","overflowed","overflowingCount","popoverContent","gridUnit","setTimeout","scrollHeight","open","document","onscroll","Fragment","styles","colors","grayscale","light1","light4","light2","content","trigger","visible","onVisibleChange","placement","title","buttonStyle","count","color","primary","base","showZero","DownOutlined","iconSize","iconColor","_default","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/components/DropdownContainer/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, {\n  CSSProperties,\n  forwardRef,\n  ReactElement,\n  RefObject,\n  useEffect,\n  useImperativeHandle,\n  useLayoutEffect,\n  useMemo,\n  useState,\n  useRef,\n  ReactNode,\n} from 'react';\nimport { Global } from '@emotion/react';\nimport { css, t, useTheme, usePrevious } from '@superset-ui/core';\nimport { useResizeDetector } from 'react-resize-detector';\nimport Badge from '../Badge';\nimport Icons from '../Icons';\nimport Button from '../Button';\nimport Popover from '../Popover';\nimport { Tooltip } from '../Tooltip';\n\nconst MAX_HEIGHT = 500;\n\n/**\n * Container item.\n */\nexport interface Item {\n  /**\n   * String that uniquely identifies the item.\n   */\n  id: string;\n  /**\n   * The element to be rendered.\n   */\n  element: ReactElement;\n}\n\n/**\n * Horizontal container that displays overflowed items in a dropdown.\n * It shows an indicator of how many items are currently overflowing.\n */\nexport interface DropdownContainerProps {\n  /**\n   * Array of items. The id property is used to uniquely identify\n   * the elements when rendering or dealing with event handlers.\n   */\n  items: Item[];\n  /**\n   * Event handler called every time an element moves between\n   * main container and dropdown.\n   */\n  onOverflowingStateChange?: (overflowingState: {\n    notOverflowed: string[];\n    overflowed: string[];\n  }) => void;\n  /**\n   * Option to customize the content of the dropdown.\n   */\n  dropdownContent?: (overflowedItems: Item[]) => ReactElement;\n  /**\n   * Dropdown ref.\n   */\n  dropdownRef?: RefObject<HTMLDivElement>;\n  /**\n   * Dropdown additional style properties.\n   */\n  dropdownStyle?: CSSProperties;\n  /**\n   * Displayed count in the dropdown trigger.\n   */\n  dropdownTriggerCount?: number;\n  /**\n   * Icon of the dropdown trigger.\n   */\n  dropdownTriggerIcon?: ReactElement;\n  /**\n   * Text of the dropdown trigger.\n   */\n  dropdownTriggerText?: string;\n  /**\n   * Text of the dropdown trigger tooltip\n   */\n  dropdownTriggerTooltip?: ReactNode | null;\n  /**\n   * Main container additional style properties.\n   */\n  style?: CSSProperties;\n  /**\n   * Force render popover content before it's first opened\n   */\n  forceRender?: boolean;\n}\n\nexport type Ref = HTMLDivElement & { open: () => void };\n\nconst DropdownContainer = forwardRef(\n  (\n    {\n      items,\n      onOverflowingStateChange,\n      dropdownContent,\n      dropdownRef,\n      dropdownStyle = {},\n      dropdownTriggerCount,\n      dropdownTriggerIcon,\n      dropdownTriggerText = t('More'),\n      dropdownTriggerTooltip = null,\n      forceRender,\n      style,\n    }: DropdownContainerProps,\n    outerRef: RefObject<Ref>,\n  ) => {\n    const theme = useTheme();\n    const { ref, width = 0 } = useResizeDetector<HTMLDivElement>();\n    const previousWidth = usePrevious(width) || 0;\n    const { current } = ref;\n    const [itemsWidth, setItemsWidth] = useState<number[]>([]);\n    const [popoverVisible, setPopoverVisible] = useState(false);\n\n    // We use React.useState to be able to mock the state in Jest\n    const [overflowingIndex, setOverflowingIndex] = React.useState<number>(-1);\n\n    let targetRef = useRef<HTMLDivElement>(null);\n    if (dropdownRef) {\n      targetRef = dropdownRef;\n    }\n\n    const [showOverflow, setShowOverflow] = useState(false);\n\n    const reduceItems = (items: Item[]): [Item[], string[]] =>\n      items.reduce(\n        ([items, ids], item) => {\n          items.push({\n            id: item.id,\n            element: React.cloneElement(item.element, { key: item.id }),\n          });\n          ids.push(item.id);\n          return [items, ids];\n        },\n        [[], []] as [Item[], string[]],\n      );\n\n    const [notOverflowedItems, notOverflowedIds] = useMemo(\n      () =>\n        reduceItems(\n          items.slice(\n            0,\n            overflowingIndex !== -1 ? overflowingIndex : items.length,\n          ),\n        ),\n      [items, overflowingIndex],\n    );\n\n    const [overflowedItems, overflowedIds] = useMemo(\n      () =>\n        overflowingIndex !== -1\n          ? reduceItems(items.slice(overflowingIndex))\n          : [[], []],\n      [items, overflowingIndex],\n    );\n\n    useLayoutEffect(() => {\n      const container = current?.children.item(0);\n      if (container) {\n        const { children } = container;\n        const childrenArray = Array.from(children);\n\n        // If items length change, add all items to the container\n        // and recalculate the widths\n        if (itemsWidth.length !== items.length) {\n          if (childrenArray.length === items.length) {\n            setItemsWidth(\n              childrenArray.map(child => child.getBoundingClientRect().width),\n            );\n          } else {\n            setOverflowingIndex(-1);\n            return;\n          }\n        }\n\n        // Calculates the index of the first overflowed element\n        // +1 is to give at least one pixel of difference and avoid flakiness\n        const index = childrenArray.findIndex(\n          child =>\n            child.getBoundingClientRect().right >\n            container.getBoundingClientRect().right + 1,\n        );\n\n        // If elements fit (-1) and there's overflowed items\n        // then preserve the overflow index. We can't use overflowIndex\n        // directly because the items may have been modified\n        let newOverflowingIndex =\n          index === -1 && overflowedItems.length > 0\n            ? items.length - overflowedItems.length\n            : index;\n\n        if (width > previousWidth) {\n          // Calculates remaining space in the container\n          const button = current?.children.item(1);\n          const buttonRight = button?.getBoundingClientRect().right || 0;\n          const containerRight = current?.getBoundingClientRect().right || 0;\n          const remainingSpace = containerRight - buttonRight;\n\n          // Checks if some elements in the dropdown fits in the remaining space\n          let sum = 0;\n          for (let i = childrenArray.length; i < items.length; i += 1) {\n            sum += itemsWidth[i];\n            if (sum <= remainingSpace) {\n              newOverflowingIndex = i + 1;\n            } else {\n              break;\n            }\n          }\n        }\n\n        setOverflowingIndex(newOverflowingIndex);\n      }\n    }, [\n      current,\n      items.length,\n      itemsWidth,\n      overflowedItems.length,\n      previousWidth,\n      width,\n    ]);\n\n    useEffect(() => {\n      if (onOverflowingStateChange) {\n        onOverflowingStateChange({\n          notOverflowed: notOverflowedIds,\n          overflowed: overflowedIds,\n        });\n      }\n    }, [notOverflowedIds, onOverflowingStateChange, overflowedIds]);\n\n    const overflowingCount =\n      overflowingIndex !== -1 ? items.length - overflowingIndex : 0;\n\n    const popoverContent = useMemo(\n      () =>\n        dropdownContent || overflowingCount ? (\n          <div\n            css={css`\n              display: flex;\n              flex-direction: column;\n              gap: ${theme.gridUnit * 4}px;\n            `}\n            data-test=\"dropdown-content\"\n            style={dropdownStyle}\n            ref={targetRef}\n          >\n            {dropdownContent\n              ? dropdownContent(overflowedItems)\n              : overflowedItems.map(item => item.element)}\n          </div>\n        ) : null,\n      [\n        dropdownContent,\n        overflowingCount,\n        theme.gridUnit,\n        dropdownStyle,\n        overflowedItems,\n      ],\n    );\n\n    useLayoutEffect(() => {\n      if (popoverVisible) {\n        // Measures scroll height after rendering the elements\n        setTimeout(() => {\n          if (targetRef.current) {\n            // We only set overflow when there's enough space to display\n            // Select's popovers because they are restrained by the overflow property.\n            setShowOverflow(targetRef.current.scrollHeight > MAX_HEIGHT);\n          }\n        }, 100);\n      }\n    }, [popoverVisible]);\n\n    useImperativeHandle(\n      outerRef,\n      () => ({\n        ...(ref.current as HTMLDivElement),\n        open: () => setPopoverVisible(true),\n      }),\n      [ref],\n    );\n\n    // Closes the popover when scrolling on the document\n    useEffect(() => {\n      document.onscroll = popoverVisible\n        ? () => setPopoverVisible(false)\n        : null;\n      return () => {\n        document.onscroll = null;\n      };\n    }, [popoverVisible]);\n\n    return (\n      <div\n        ref={ref}\n        css={css`\n          display: flex;\n          align-items: center;\n        `}\n      >\n        <div\n          css={css`\n            display: flex;\n            align-items: center;\n            gap: ${theme.gridUnit * 4}px;\n            margin-right: ${theme.gridUnit * 4}px;\n            min-width: 0px;\n          `}\n          data-test=\"container\"\n          style={style}\n        >\n          {notOverflowedItems.map(item => item.element)}\n        </div>\n        {popoverContent && (\n          <>\n            <Global\n              styles={css`\n                .ant-popover-inner-content {\n                  max-height: ${MAX_HEIGHT}px;\n                  overflow: ${showOverflow ? 'auto' : 'visible'};\n                  padding: ${theme.gridUnit * 3}px ${theme.gridUnit * 4}px;\n\n                  // Some OS versions only show the scroll when hovering.\n                  // These settings will make the scroll always visible.\n                  ::-webkit-scrollbar {\n                    -webkit-appearance: none;\n                    width: 14px;\n                  }\n                  ::-webkit-scrollbar-thumb {\n                    border-radius: 9px;\n                    background-color: ${theme.colors.grayscale.light1};\n                    border: 3px solid transparent;\n                    background-clip: content-box;\n                  }\n                  ::-webkit-scrollbar-track {\n                    background-color: ${theme.colors.grayscale.light4};\n                    border-left: 1px solid ${theme.colors.grayscale.light2};\n                  }\n                }\n              `}\n            />\n            <Popover\n              content={popoverContent}\n              trigger=\"click\"\n              visible={popoverVisible}\n              onVisibleChange={visible => setPopoverVisible(visible)}\n              placement=\"bottom\"\n              forceRender={forceRender}\n            >\n              <Tooltip title={dropdownTriggerTooltip}>\n                <Button\n                  buttonStyle=\"secondary\"\n                  data-test=\"dropdown-container-btn\"\n                >\n                  {dropdownTriggerIcon}\n                  {dropdownTriggerText}\n                  <Badge\n                    count={dropdownTriggerCount ?? overflowingCount}\n                    color={\n                      (dropdownTriggerCount ?? overflowingCount) > 0\n                        ? theme.colors.primary.base\n                        : theme.colors.grayscale.light1\n                    }\n                    showZero\n                    css={css`\n                      margin-left: ${theme.gridUnit * 2}px;\n                    `}\n                  />\n                  <Icons.DownOutlined\n                    iconSize=\"m\"\n                    iconColor={theme.colors.grayscale.light1}\n                    css={css`\n                      .anticon {\n                        display: flex;\n                      }\n                    `}\n                  />\n                </Button>\n              </Tooltip>\n            </Popover>\n          </>\n        )}\n      </div>\n    );\n  },\n);\n\nexport default DropdownContainer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}