{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport debug from '../debug';\nimport DrawLayersPass from '../passes/draw-layers-pass';\nimport PickLayersPass from '../passes/pick-layers-pass';\nimport { Framebuffer } from '@luma.gl/core';\nconst TRACE_RENDER_LAYERS = 'deckRenderer.renderLayers';\nexport default class DeckRenderer {\n  constructor(gl) {\n    _defineProperty(this, \"gl\", void 0);\n\n    _defineProperty(this, \"layerFilter\", void 0);\n\n    _defineProperty(this, \"drawPickingColors\", void 0);\n\n    _defineProperty(this, \"drawLayersPass\", void 0);\n\n    _defineProperty(this, \"pickLayersPass\", void 0);\n\n    _defineProperty(this, \"renderCount\", void 0);\n\n    _defineProperty(this, \"_needsRedraw\", void 0);\n\n    _defineProperty(this, \"renderBuffers\", void 0);\n\n    _defineProperty(this, \"lastPostProcessEffect\", void 0);\n\n    this.gl = gl;\n    this.layerFilter = null;\n    this.drawPickingColors = false;\n    this.drawLayersPass = new DrawLayersPass(gl);\n    this.pickLayersPass = new PickLayersPass(gl);\n    this.renderCount = 0;\n    this._needsRedraw = 'Initial render';\n    this.renderBuffers = [];\n    this.lastPostProcessEffect = null;\n  }\n\n  setProps(props) {\n    if (this.layerFilter !== props.layerFilter) {\n      this.layerFilter = props.layerFilter;\n      this._needsRedraw = 'layerFilter changed';\n    }\n\n    if (this.drawPickingColors !== props.drawPickingColors) {\n      this.drawPickingColors = props.drawPickingColors;\n      this._needsRedraw = 'drawPickingColors changed';\n    }\n  }\n\n  renderLayers(opts) {\n    const layerPass = this.drawPickingColors ? this.pickLayersPass : this.drawLayersPass;\n    const renderOpts = {\n      layerFilter: this.layerFilter,\n      isPicking: this.drawPickingColors,\n      ...opts,\n      target: opts.target || Framebuffer.getDefaultFramebuffer(this.gl)\n    };\n\n    if (renderOpts.effects) {\n      this._preRender(renderOpts.effects, renderOpts);\n    }\n\n    const outputBuffer = this.lastPostProcessEffect ? this.renderBuffers[0] : renderOpts.target;\n    const renderStats = layerPass.render({ ...renderOpts,\n      target: outputBuffer\n    });\n\n    if (renderOpts.effects) {\n      this._postRender(renderOpts.effects, renderOpts);\n    }\n\n    this.renderCount++;\n    debug(TRACE_RENDER_LAYERS, this, renderStats, opts);\n  }\n\n  needsRedraw(opts = {\n    clearRedrawFlags: false\n  }) {\n    const redraw = this._needsRedraw;\n\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n\n    return redraw;\n  }\n\n  finalize() {\n    const {\n      renderBuffers\n    } = this;\n\n    for (const buffer of renderBuffers) {\n      buffer.delete();\n    }\n\n    renderBuffers.length = 0;\n  }\n\n  _preRender(effects, opts) {\n    this.lastPostProcessEffect = null;\n    opts.preRenderStats = opts.preRenderStats || {};\n\n    for (const effect of effects) {\n      opts.preRenderStats[effect.id] = effect.preRender(this.gl, opts);\n\n      if (effect.postRender) {\n        this.lastPostProcessEffect = effect.id;\n      }\n    }\n\n    if (this.lastPostProcessEffect) {\n      this._resizeRenderBuffers();\n    }\n  }\n\n  _resizeRenderBuffers() {\n    const {\n      renderBuffers\n    } = this;\n\n    if (renderBuffers.length === 0) {\n      renderBuffers.push(new Framebuffer(this.gl), new Framebuffer(this.gl));\n    }\n\n    for (const buffer of renderBuffers) {\n      buffer.resize();\n    }\n  }\n\n  _postRender(effects, opts) {\n    const {\n      renderBuffers\n    } = this;\n    const params = { ...opts,\n      inputBuffer: renderBuffers[0],\n      swapBuffer: renderBuffers[1],\n      target: null\n    };\n\n    for (const effect of effects) {\n      if (effect.postRender) {\n        if (effect.id === this.lastPostProcessEffect) {\n          params.target = opts.target;\n          effect.postRender(this.gl, params);\n          break;\n        }\n\n        const buffer = effect.postRender(this.gl, params);\n        params.inputBuffer = buffer;\n        params.swapBuffer = buffer === renderBuffers[0] ? renderBuffers[1] : renderBuffers[0];\n      }\n    }\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(TRACE_RENDER_LAYERS, \"TRACE_RENDER_LAYERS\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/core/dist/esm/lib/deck-renderer.js\");reactHotLoader.register(DeckRenderer, \"DeckRenderer\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/core/dist/esm/lib/deck-renderer.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["debug","DrawLayersPass","PickLayersPass","Framebuffer","TRACE_RENDER_LAYERS","DeckRenderer","constructor","gl","_defineProperty","layerFilter","drawPickingColors","drawLayersPass","pickLayersPass","renderCount","_needsRedraw","renderBuffers","lastPostProcessEffect","setProps","props","renderLayers","opts","layerPass","renderOpts","isPicking","target","getDefaultFramebuffer","effects","_preRender","outputBuffer","renderStats","render","_postRender","needsRedraw","clearRedrawFlags","redraw","finalize","buffer","delete","length","preRenderStats","effect","id","preRender","postRender","_resizeRenderBuffers","push","resize","params","inputBuffer","swapBuffer","__reactstandin__regenerateByEval","key","code","eval","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["../../../src/lib/deck-renderer.ts"],"sourcesContent":["import debug from '../debug';\nimport DrawLayersPass from '../passes/draw-layers-pass';\nimport PickLayersPass from '../passes/pick-layers-pass';\nimport {Framebuffer} from '@luma.gl/core';\n\nimport type Layer from './layer';\nimport type Viewport from '../viewports/viewport';\nimport type View from '../views/view';\nimport type {Effect} from './effect';\nimport type {LayersPassRenderOptions, FilterContext} from '../passes/layers-pass';\n\nconst TRACE_RENDER_LAYERS = 'deckRenderer.renderLayers';\n\ntype LayerFilter = ((context: FilterContext) => boolean) | null;\n\nexport default class DeckRenderer {\n  gl: WebGLRenderingContext;\n  layerFilter: LayerFilter;\n  drawPickingColors: boolean;\n  drawLayersPass: DrawLayersPass;\n  pickLayersPass: PickLayersPass;\n\n  private renderCount: number;\n  private _needsRedraw: string | false;\n  private renderBuffers: Framebuffer[];\n  private lastPostProcessEffect: string | null;\n\n  constructor(gl: WebGLRenderingContext) {\n    this.gl = gl;\n    this.layerFilter = null;\n    this.drawPickingColors = false;\n    this.drawLayersPass = new DrawLayersPass(gl);\n    this.pickLayersPass = new PickLayersPass(gl);\n    this.renderCount = 0;\n    this._needsRedraw = 'Initial render';\n    this.renderBuffers = [];\n    this.lastPostProcessEffect = null;\n  }\n\n  setProps(props: {layerFilter: LayerFilter; drawPickingColors: boolean}) {\n    if (this.layerFilter !== props.layerFilter) {\n      this.layerFilter = props.layerFilter;\n      this._needsRedraw = 'layerFilter changed';\n    }\n\n    if (this.drawPickingColors !== props.drawPickingColors) {\n      this.drawPickingColors = props.drawPickingColors;\n      this._needsRedraw = 'drawPickingColors changed';\n    }\n  }\n\n  renderLayers(opts: {\n    pass: string;\n    layers: Layer[];\n    viewports: Viewport[];\n    views: {[viewId: string]: View};\n    onViewportActive: (viewport: Viewport) => void;\n    effects: Effect[];\n    target?: Framebuffer;\n    layerFilter?: LayerFilter;\n    clearStack?: boolean;\n    clearCanvas?: boolean;\n  }) {\n    const layerPass = this.drawPickingColors ? this.pickLayersPass : this.drawLayersPass;\n\n    const renderOpts: LayersPassRenderOptions = {\n      layerFilter: this.layerFilter,\n      isPicking: this.drawPickingColors,\n      ...opts,\n      target: opts.target || Framebuffer.getDefaultFramebuffer(this.gl)\n    };\n\n    if (renderOpts.effects) {\n      this._preRender(renderOpts.effects, renderOpts);\n    }\n\n    const outputBuffer = this.lastPostProcessEffect ? this.renderBuffers[0] : renderOpts.target;\n    const renderStats = layerPass.render({...renderOpts, target: outputBuffer});\n\n    if (renderOpts.effects) {\n      this._postRender(renderOpts.effects, renderOpts);\n    }\n\n    this.renderCount++;\n\n    debug(TRACE_RENDER_LAYERS, this, renderStats, opts);\n  }\n\n  needsRedraw(opts: {clearRedrawFlags: boolean} = {clearRedrawFlags: false}): string | false {\n    const redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n    return redraw;\n  }\n\n  finalize() {\n    const {renderBuffers} = this;\n    for (const buffer of renderBuffers) {\n      buffer.delete();\n    }\n    renderBuffers.length = 0;\n  }\n\n  private _preRender(effects: Effect[], opts: LayersPassRenderOptions) {\n    this.lastPostProcessEffect = null;\n    opts.preRenderStats = opts.preRenderStats || {};\n\n    for (const effect of effects) {\n      opts.preRenderStats[effect.id] = effect.preRender(this.gl, opts);\n      if (effect.postRender) {\n        this.lastPostProcessEffect = effect.id;\n      }\n    }\n\n    if (this.lastPostProcessEffect) {\n      this._resizeRenderBuffers();\n    }\n  }\n\n  private _resizeRenderBuffers() {\n    const {renderBuffers} = this;\n    if (renderBuffers.length === 0) {\n      renderBuffers.push(new Framebuffer(this.gl), new Framebuffer(this.gl));\n    }\n    for (const buffer of renderBuffers) {\n      buffer.resize();\n    }\n  }\n\n  private _postRender(effects: Effect[], opts: LayersPassRenderOptions) {\n    const {renderBuffers} = this;\n    const params = {\n      ...opts,\n      inputBuffer: renderBuffers[0],\n      swapBuffer: renderBuffers[1],\n      target: null\n    };\n    for (const effect of effects) {\n      if (effect.postRender) {\n        if (effect.id === this.lastPostProcessEffect) {\n          params.target = opts.target;\n          effect.postRender(this.gl, params);\n          break;\n        }\n        const buffer = effect.postRender(this.gl, params);\n        params.inputBuffer = buffer;\n        params.swapBuffer = buffer === renderBuffers[0] ? renderBuffers[1] : renderBuffers[0];\n      }\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}