{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};export function getEmptyPickingInfo({\n  pickInfo,\n  viewports,\n  pixelRatio,\n  x,\n  y,\n  z\n}) {\n  let pickedViewport = viewports[0];\n\n  if (viewports.length > 1) {\n    pickedViewport = getViewportFromCoordinates((pickInfo === null || pickInfo === void 0 ? void 0 : pickInfo.pickedViewports) || viewports, {\n      x,\n      y\n    });\n  }\n\n  let coordinate;\n\n  if (pickedViewport) {\n    const point = [x - pickedViewport.x, y - pickedViewport.y];\n\n    if (z !== undefined) {\n      point[2] = z;\n    }\n\n    coordinate = pickedViewport.unproject(point);\n  }\n\n  return {\n    color: null,\n    layer: null,\n    viewport: pickedViewport,\n    index: -1,\n    picked: false,\n    x,\n    y,\n    pixel: [x, y],\n    coordinate,\n    devicePixel: pickInfo && 'pickedX' in pickInfo ? [pickInfo.pickedX, pickInfo.pickedY] : undefined,\n    pixelRatio\n  };\n}\nexport function processPickInfo(opts) {\n  const {\n    pickInfo,\n    lastPickedInfo,\n    mode,\n    layers\n  } = opts;\n  const {\n    pickedColor,\n    pickedLayer,\n    pickedObjectIndex\n  } = pickInfo;\n  const affectedLayers = pickedLayer ? [pickedLayer] : [];\n\n  if (mode === 'hover') {\n    const lastPickedPixelIndex = lastPickedInfo.index;\n    const lastPickedLayerId = lastPickedInfo.layerId;\n    const pickedLayerId = pickedLayer ? pickedLayer.props.id : null;\n\n    if (pickedLayerId !== lastPickedLayerId || pickedObjectIndex !== lastPickedPixelIndex) {\n      if (pickedLayerId !== lastPickedLayerId) {\n        const lastPickedLayer = layers.find((layer) => layer.props.id === lastPickedLayerId);\n\n        if (lastPickedLayer) {\n          affectedLayers.unshift(lastPickedLayer);\n        }\n      }\n\n      lastPickedInfo.layerId = pickedLayerId;\n      lastPickedInfo.index = pickedObjectIndex;\n      lastPickedInfo.info = null;\n    }\n  }\n\n  const baseInfo = getEmptyPickingInfo(opts);\n  const infos = new Map();\n  infos.set(null, baseInfo);\n  affectedLayers.forEach((layer) => {\n    let info = { ...baseInfo\n    };\n\n    if (layer === pickedLayer) {\n      info.color = pickedColor;\n      info.index = pickedObjectIndex;\n      info.picked = true;\n    }\n\n    info = getLayerPickingInfo({\n      layer,\n      info,\n      mode\n    });\n    const rootLayer = info.layer;\n\n    if (layer === pickedLayer && mode === 'hover') {\n      lastPickedInfo.info = info;\n    }\n\n    infos.set(rootLayer.id, info);\n\n    if (mode === 'hover') {\n      rootLayer.updateAutoHighlight(info);\n    }\n  });\n  return infos;\n}\nexport function getLayerPickingInfo({\n  layer,\n  info,\n  mode\n}) {\n  while (layer && info) {\n    const sourceLayer = info.layer || null;\n    info.sourceLayer = sourceLayer;\n    info.layer = layer;\n    info = layer.getPickingInfo({\n      info,\n      mode,\n      sourceLayer\n    });\n    layer = layer.parent;\n  }\n\n  return info;\n}\n\nfunction getViewportFromCoordinates(viewports, pixel) {\n  for (let i = viewports.length - 1; i >= 0; i--) {\n    const viewport = viewports[i];\n\n    if (viewport.containsPixel(pixel)) {\n      return viewport;\n    }\n  }\n\n  return viewports[0];\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(getEmptyPickingInfo, \"getEmptyPickingInfo\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/core/dist/esm/lib/picking/pick-info.js\");reactHotLoader.register(processPickInfo, \"processPickInfo\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/core/dist/esm/lib/picking/pick-info.js\");reactHotLoader.register(getLayerPickingInfo, \"getLayerPickingInfo\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/core/dist/esm/lib/picking/pick-info.js\");reactHotLoader.register(getViewportFromCoordinates, \"getViewportFromCoordinates\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/core/dist/esm/lib/picking/pick-info.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["getEmptyPickingInfo","pickInfo","viewports","pixelRatio","x","y","z","pickedViewport","length","getViewportFromCoordinates","pickedViewports","coordinate","point","undefined","unproject","color","layer","viewport","index","picked","pixel","devicePixel","pickedX","pickedY","processPickInfo","opts","lastPickedInfo","mode","layers","pickedColor","pickedLayer","pickedObjectIndex","affectedLayers","lastPickedPixelIndex","lastPickedLayerId","layerId","pickedLayerId","props","id","lastPickedLayer","find","unshift","info","baseInfo","infos","Map","set","forEach","getLayerPickingInfo","rootLayer","updateAutoHighlight","sourceLayer","getPickingInfo","parent","i","containsPixel","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["../../../../src/lib/picking/pick-info.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport type Layer from '../layer';\nimport type Viewport from '../../viewports/viewport';\nimport type {PickedPixel} from './query-object';\n\nexport interface PickingInfo {\n  color: Uint8Array | null;\n  layer: Layer | null;\n  sourceLayer?: Layer | null;\n  viewport?: Viewport;\n  index: number;\n  picked: boolean;\n  object?: any;\n  x: number;\n  y: number;\n  pixel?: [number, number];\n  coordinate?: number[];\n  devicePixel?: [number, number];\n  pixelRatio: number;\n}\n\nexport interface GetPickingInfoParams {\n  info: PickingInfo;\n  mode: string;\n  sourceLayer: Layer | null;\n}\n\n/** Generates some basic information of the picking action: x, y, coordinates etc.\n * Regardless if anything is picked\n */\nexport function getEmptyPickingInfo({\n  pickInfo,\n  viewports,\n  pixelRatio,\n  x,\n  y,\n  z\n}: {\n  pickInfo?: PickedPixel;\n  viewports: Viewport[];\n  pixelRatio: number;\n  x: number;\n  y: number;\n  z?: number;\n}): PickingInfo {\n  // If more than one viewports are used in the picking pass, locate the viewport that\n  // drew the picked pixel\n  let pickedViewport = viewports[0];\n  if (viewports.length > 1) {\n    // Find the viewport that contain the picked pixel\n    pickedViewport = getViewportFromCoordinates(pickInfo?.pickedViewports || viewports, {x, y});\n  }\n  let coordinate: number[] | undefined;\n  if (pickedViewport) {\n    const point = [x - pickedViewport.x, y - pickedViewport.y];\n    if (z !== undefined) {\n      point[2] = z;\n    }\n    coordinate = pickedViewport.unproject(point);\n  }\n\n  return {\n    color: null,\n    layer: null,\n    viewport: pickedViewport,\n    index: -1,\n    picked: false,\n    x,\n    y,\n    pixel: [x, y],\n    coordinate,\n    devicePixel:\n      pickInfo && 'pickedX' in pickInfo\n        ? [pickInfo.pickedX as number, pickInfo.pickedY as number]\n        : undefined,\n    pixelRatio\n  };\n}\n\n/* eslint-disable max-depth */\n/** Generates the picking info of a picking operation */\nexport function processPickInfo(opts: {\n  pickInfo: PickedPixel;\n  lastPickedInfo: {\n    index: number;\n    layerId: string | null;\n    info: PickingInfo | null;\n  };\n  mode: string;\n  layers: Layer[];\n  viewports: Viewport[];\n  pixelRatio: number;\n  x: number;\n  y: number;\n  z?: number;\n}): Map<string | null, PickingInfo> {\n  const {pickInfo, lastPickedInfo, mode, layers} = opts;\n  const {pickedColor, pickedLayer, pickedObjectIndex} = pickInfo;\n\n  const affectedLayers = pickedLayer ? [pickedLayer] : [];\n\n  if (mode === 'hover') {\n    // only invoke onHover events if picked object has changed\n    const lastPickedPixelIndex = lastPickedInfo.index;\n    const lastPickedLayerId = lastPickedInfo.layerId;\n    const pickedLayerId = pickedLayer ? pickedLayer.props.id : null;\n\n    // proceed only if picked object changed\n    if (pickedLayerId !== lastPickedLayerId || pickedObjectIndex !== lastPickedPixelIndex) {\n      if (pickedLayerId !== lastPickedLayerId) {\n        // We cannot store a ref to lastPickedLayer in the context because\n        // the state of an outdated layer is no longer valid\n        // and the props may have changed\n        const lastPickedLayer = layers.find(layer => layer.props.id === lastPickedLayerId);\n        if (lastPickedLayer) {\n          // Let leave event fire before enter event\n          affectedLayers.unshift(lastPickedLayer);\n        }\n      }\n\n      // Update layer manager context\n      lastPickedInfo.layerId = pickedLayerId;\n      lastPickedInfo.index = pickedObjectIndex;\n      lastPickedInfo.info = null;\n    }\n  }\n\n  const baseInfo = getEmptyPickingInfo(opts);\n\n  // Use a Map to store all picking infos.\n  // The following two forEach loops are the result of\n  // https://github.com/visgl/deck.gl/issues/443\n  // Please be very careful when changing this pattern\n  const infos = new Map();\n\n  // Make sure infos always contain something even if no layer is affected\n  infos.set(null, baseInfo);\n\n  affectedLayers.forEach(layer => {\n    let info = {...baseInfo};\n\n    if (layer === pickedLayer) {\n      info.color = pickedColor;\n      info.index = pickedObjectIndex;\n      info.picked = true;\n    }\n\n    info = getLayerPickingInfo({layer, info, mode});\n    const rootLayer = info.layer as Layer;\n\n    if (layer === pickedLayer && mode === 'hover') {\n      lastPickedInfo.info = info;\n    }\n\n    // This guarantees that there will be only one copy of info for\n    // one composite layer\n    infos.set(rootLayer.id, info);\n\n    if (mode === 'hover') {\n      rootLayer.updateAutoHighlight(info);\n    }\n  });\n\n  return infos;\n}\n\n/** Walk up the layer composite chain to populate the info object */\nexport function getLayerPickingInfo({\n  layer,\n  info,\n  mode\n}: {\n  layer: Layer;\n  info: PickingInfo;\n  mode: string;\n}): PickingInfo {\n  while (layer && info) {\n    // For a composite layer, sourceLayer will point to the sublayer\n    // where the event originates from.\n    // It provides additional context for the composite layer's\n    // getPickingInfo() method to populate the info object\n    const sourceLayer = info.layer || null;\n    info.sourceLayer = sourceLayer;\n    info.layer = layer;\n    // layer.pickLayer() function requires a non-null ```layer.state```\n    // object to function properly. So the layer referenced here\n    // must be the \"current\" layer, not an \"out-dated\" / \"invalidated\" layer\n    info = layer.getPickingInfo({info, mode, sourceLayer});\n    layer = layer.parent as Layer;\n  }\n  return info;\n}\n\n/** Indentifies which viewport, if any corresponds to x and y\n   If multiple viewports contain the target pixel, last viewport drawn is returend\n   Returns first viewport if no match */\nfunction getViewportFromCoordinates(\n  viewports: Viewport[],\n  pixel: {x: number; y: number}\n): Viewport {\n  // find the last viewport that contains the pixel\n  for (let i = viewports.length - 1; i >= 0; i--) {\n    const viewport = viewports[i];\n    if (viewport.containsPixel(pixel)) {\n      return viewport;\n    }\n  }\n  return viewports[0];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}