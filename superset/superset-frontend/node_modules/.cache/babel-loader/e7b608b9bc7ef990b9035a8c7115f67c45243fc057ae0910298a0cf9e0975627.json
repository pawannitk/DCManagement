{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useMemo } from 'react';\nimport { t, styled, useTheme } from '@superset-ui/core';\nimport Button from 'src/components/Button';\nimport Icons from 'src/components/Icons';\nimport { DropdownButton } from 'src/components/DropdownButton';\nimport { detectOS } from 'src/utils/common';\nimport useQueryEditor from 'src/SqlLab/hooks/useQueryEditor';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst buildText = (shouldShowStopButton, selectedText) => {\n  if (shouldShowStopButton) {\n    return ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(\"i\", { className: \"fa fa-stop\" }), \" \", t('Stop')\n    );\n  }\n  if (selectedText) {\n    return t('Run selection');\n  }\n  return t('Run');\n};\nconst onClick = (shouldShowStopButton, allowAsync, runQuery = () => undefined, stopQuery = () => {}) => {\n  if (shouldShowStopButton)\n  return stopQuery();\n  if (allowAsync) {\n    return runQuery(true);\n  }\n  return runQuery(false);\n};\nconst StyledButton = styled.span`\n  button {\n    line-height: 13px;\n    // this is to over ride a previous transition built into the component\n    transition: background-color 0ms;\n    &:last-of-type {\n      margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n    }\n    span[name='caret-down'] {\n      display: flex;\n      margin-left: ${({ theme }) => theme.gridUnit * 1}px;\n    }\n  }\n`;\nconst RunQueryActionButton = ({ allowAsync = false, queryEditorId, queryState, overlayCreateAsMenu, runQuery, stopQuery }) => {\n  const theme = useTheme();\n  const userOS = detectOS();\n  const { selectedText, sql } = useQueryEditor(queryEditorId, [\n  'selectedText',\n  'sql']\n  );\n  const shouldShowStopBtn = !!queryState && ['running', 'pending'].indexOf(queryState) > -1;\n  const ButtonComponent = overlayCreateAsMenu ?\n  DropdownButton :\n  Button;\n  const sqlContent = selectedText || sql || '';\n  const isDisabled = !(sqlContent != null && sqlContent.\n  replace(/(\\/\\*[^*]*\\*\\/)|(\\/\\/[^*]*)|(--[^.].*)/gm, '').\n  trim());\n  const stopButtonTooltipText = useMemo(() => userOS === 'MacOS' ?\n  t('Stop running (Ctrl + x)') :\n  t('Stop running (Ctrl + e)'), [userOS]);\n  return ___EmotionJSX(StyledButton, null,\n  ___EmotionJSX(ButtonComponent, _extends({ \"data-test\": \"run-query-action\", onClick: () => onClick(shouldShowStopBtn, allowAsync, runQuery, stopQuery), disabled: isDisabled, tooltip: !isDisabled && (\n    shouldShowStopBtn ?\n    stopButtonTooltipText :\n    t('Run query (Ctrl + Return)')), cta: true }, overlayCreateAsMenu ?\n  {\n    overlay: overlayCreateAsMenu,\n    icon: ___EmotionJSX(Icons.CaretDown, { iconColor: isDisabled ?\n      theme.colors.grayscale.base :\n      theme.colors.grayscale.light5, name: \"caret-down\" }),\n    trigger: 'click'\n  } :\n  {\n    buttonStyle: shouldShowStopBtn ? 'warning' : 'primary'\n  }),\n  buildText(shouldShowStopBtn, selectedText)\n  )\n  );\n};__signature__(RunQueryActionButton, \"useTheme{theme}\\nuseQueryEditor{{ selectedText, sql }}\\nuseMemo{stopButtonTooltipText}\", () => [useTheme, useQueryEditor]);const _default =\nRunQueryActionButton;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(buildText, \"buildText\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/RunQueryActionButton/index.tsx\");reactHotLoader.register(onClick, \"onClick\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/RunQueryActionButton/index.tsx\");reactHotLoader.register(StyledButton, \"StyledButton\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/RunQueryActionButton/index.tsx\");reactHotLoader.register(RunQueryActionButton, \"RunQueryActionButton\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/RunQueryActionButton/index.tsx\");reactHotLoader.register(_default, \"default\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/RunQueryActionButton/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["React","useMemo","t","styled","useTheme","Button","Icons","DropdownButton","detectOS","useQueryEditor","jsx","___EmotionJSX","buildText","shouldShowStopButton","selectedText","Fragment","className","onClick","allowAsync","runQuery","undefined","stopQuery","StyledButton","span","theme","gridUnit","RunQueryActionButton","queryEditorId","queryState","overlayCreateAsMenu","userOS","sql","shouldShowStopBtn","indexOf","ButtonComponent","sqlContent","isDisabled","replace","trim","stopButtonTooltipText","_extends","disabled","tooltip","cta","overlay","icon","CaretDown","iconColor","colors","grayscale","base","light5","name","trigger","buttonStyle","__signature__","_default","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/RunQueryActionButton/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useMemo } from 'react';\nimport { t, styled, useTheme } from '@superset-ui/core';\n\nimport Button from 'src/components/Button';\nimport Icons from 'src/components/Icons';\nimport { DropdownButton } from 'src/components/DropdownButton';\nimport { detectOS } from 'src/utils/common';\nimport { QueryButtonProps } from 'src/SqlLab/types';\nimport useQueryEditor from 'src/SqlLab/hooks/useQueryEditor';\n\nexport interface RunQueryActionButtonProps {\n  queryEditorId: string;\n  allowAsync: boolean;\n  queryState?: string;\n  runQuery: (c?: boolean) => void;\n  stopQuery: () => void;\n  overlayCreateAsMenu: React.ReactElement | null;\n}\n\nconst buildText = (\n  shouldShowStopButton: boolean,\n  selectedText: string | undefined,\n): string | JSX.Element => {\n  if (shouldShowStopButton) {\n    return (\n      <>\n        <i className=\"fa fa-stop\" /> {t('Stop')}\n      </>\n    );\n  }\n  if (selectedText) {\n    return t('Run selection');\n  }\n  return t('Run');\n};\n\nconst onClick = (\n  shouldShowStopButton: boolean,\n  allowAsync: boolean,\n  runQuery: (c?: boolean) => void = () => undefined,\n  stopQuery = () => {},\n): void => {\n  if (shouldShowStopButton) return stopQuery();\n  if (allowAsync) {\n    return runQuery(true);\n  }\n  return runQuery(false);\n};\n\nconst StyledButton = styled.span`\n  button {\n    line-height: 13px;\n    // this is to over ride a previous transition built into the component\n    transition: background-color 0ms;\n    &:last-of-type {\n      margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n    }\n    span[name='caret-down'] {\n      display: flex;\n      margin-left: ${({ theme }) => theme.gridUnit * 1}px;\n    }\n  }\n`;\n\nconst RunQueryActionButton = ({\n  allowAsync = false,\n  queryEditorId,\n  queryState,\n  overlayCreateAsMenu,\n  runQuery,\n  stopQuery,\n}: RunQueryActionButtonProps) => {\n  const theme = useTheme();\n  const userOS = detectOS();\n\n  const { selectedText, sql } = useQueryEditor(queryEditorId, [\n    'selectedText',\n    'sql',\n  ]);\n\n  const shouldShowStopBtn =\n    !!queryState && ['running', 'pending'].indexOf(queryState) > -1;\n\n  const ButtonComponent: React.FC<QueryButtonProps> = overlayCreateAsMenu\n    ? (DropdownButton as React.FC)\n    : Button;\n\n  const sqlContent = selectedText || sql || '';\n  const isDisabled = !sqlContent\n    ?.replace(/(\\/\\*[^*]*\\*\\/)|(\\/\\/[^*]*)|(--[^.].*)/gm, '')\n    .trim();\n\n  const stopButtonTooltipText = useMemo(\n    () =>\n      userOS === 'MacOS'\n        ? t('Stop running (Ctrl + x)')\n        : t('Stop running (Ctrl + e)'),\n    [userOS],\n  );\n\n  return (\n    <StyledButton>\n      <ButtonComponent\n        data-test=\"run-query-action\"\n        onClick={() =>\n          onClick(shouldShowStopBtn, allowAsync, runQuery, stopQuery)\n        }\n        disabled={isDisabled}\n        tooltip={\n          (!isDisabled &&\n            (shouldShowStopBtn\n              ? stopButtonTooltipText\n              : t('Run query (Ctrl + Return)'))) as string\n        }\n        cta\n        {...(overlayCreateAsMenu\n          ? {\n              overlay: overlayCreateAsMenu,\n              icon: (\n                <Icons.CaretDown\n                  iconColor={\n                    isDisabled\n                      ? theme.colors.grayscale.base\n                      : theme.colors.grayscale.light5\n                  }\n                  name=\"caret-down\"\n                />\n              ),\n              trigger: 'click',\n            }\n          : {\n              buttonStyle: shouldShowStopBtn ? 'warning' : 'primary',\n            })}\n      >\n        {buildText(shouldShowStopBtn, selectedText)}\n      </ButtonComponent>\n    </StyledButton>\n  );\n};\n\nexport default RunQueryActionButton;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}