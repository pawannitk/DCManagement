{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { defineSavedMetrics } from '@superset-ui/chart-controls';\nimport { t } from '@superset-ui/core';\nimport { getQueryMode, isAggMode, validateAggControlValues } from './shared';\nconst percentMetrics = {\n  type: 'MetricsControl',\n  label: t('Percentage metrics'),\n  description: t('Select one or many metrics to display, that will be displayed in the percentages of total. ' +\n  'Percentage metrics will be calculated only from data within the row limit. ' +\n  'You can use an aggregation function on a column or write custom SQL to create a percentage metric.'),\n  multi: true,\n  visibility: isAggMode,\n  resetOnHide: false,\n  mapStateToProps: ({ datasource, controls }, controlState) => {var _controls$groupby, _controls$metrics;return {\n      columns: (datasource == null ? void 0 : datasource.columns) || [],\n      savedMetrics: defineSavedMetrics(datasource),\n      datasource,\n      datasourceType: datasource == null ? void 0 : datasource.type,\n      queryMode: getQueryMode(controls),\n      externalValidationErrors: validateAggControlValues(controls, [(_controls$groupby =\n      controls.groupby) == null ? void 0 : _controls$groupby.value, (_controls$metrics =\n      controls.metrics) == null ? void 0 : _controls$metrics.value,\n      controlState == null ? void 0 : controlState.value]\n      )\n    };},\n  rerender: ['groupby', 'metrics'],\n  default: [],\n  validators: []\n};\nconst dndPercentMetrics = {\n  ...percentMetrics,\n  type: 'DndMetricSelect'\n};\nexport const percentMetricsControlSetItem = {\n  name: 'percent_metrics',\n  config: {\n    ...dndPercentMetrics\n  }\n};\nexport const metricsControlSetItem = {\n  name: 'metrics',\n  override: {\n    validators: [],\n    visibility: isAggMode,\n    mapStateToProps: ({ controls, datasource, form_data }, controlState) => {var _datasource$columns$, _datasource$columns, _controls$groupby2, _controls$percent_met;return {\n        columns: datasource != null && (_datasource$columns$ = datasource.columns[0]) != null && _datasource$columns$.hasOwnProperty('filterable') ?\n        datasource == null ? void 0 : (_datasource$columns = datasource.columns) == null ? void 0 : _datasource$columns.filter((c) => c.filterable) :\n        datasource == null ? void 0 : datasource.columns,\n        savedMetrics: defineSavedMetrics(datasource),\n        // current active adhoc metrics\n        selectedMetrics: form_data.metrics || (form_data.metric ? [form_data.metric] : []),\n        datasource,\n        externalValidationErrors: validateAggControlValues(controls, [(_controls$groupby2 =\n        controls.groupby) == null ? void 0 : _controls$groupby2.value, (_controls$percent_met =\n        controls.percent_metrics) == null ? void 0 : _controls$percent_met.value,\n        controlState.value]\n        )\n      };},\n    rerender: ['groupby', 'percent_metrics'],\n    resetOnHide: false\n  }\n};\nexport const showTotalsControlSetItem = {\n  name: 'show_totals',\n  config: {\n    type: 'CheckboxControl',\n    label: t('Show totals'),\n    default: false,\n    description: t('Show total aggregations of selected metrics. Note that row limit does not apply to the result.'),\n    visibility: isAggMode,\n    resetOnHide: false\n  }\n};;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(percentMetrics, \"percentMetrics\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-handlebars/src/plugin/controls/metrics.tsx\");reactHotLoader.register(dndPercentMetrics, \"dndPercentMetrics\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-handlebars/src/plugin/controls/metrics.tsx\");reactHotLoader.register(percentMetricsControlSetItem, \"percentMetricsControlSetItem\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-handlebars/src/plugin/controls/metrics.tsx\");reactHotLoader.register(metricsControlSetItem, \"metricsControlSetItem\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-handlebars/src/plugin/controls/metrics.tsx\");reactHotLoader.register(showTotalsControlSetItem, \"showTotalsControlSetItem\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-handlebars/src/plugin/controls/metrics.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["defineSavedMetrics","t","getQueryMode","isAggMode","validateAggControlValues","percentMetrics","type","label","description","multi","visibility","resetOnHide","mapStateToProps","datasource","controls","controlState","_controls$groupby","_controls$metrics","columns","savedMetrics","datasourceType","queryMode","externalValidationErrors","groupby","value","metrics","rerender","default","validators","dndPercentMetrics","percentMetricsControlSetItem","name","config","metricsControlSetItem","override","form_data","_datasource$columns$","_datasource$columns","_controls$groupby2","_controls$percent_met","hasOwnProperty","filter","c","filterable","selectedMetrics","metric","percent_metrics","showTotalsControlSetItem","reactHotLoader","reactHotLoaderGlobal","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-handlebars/src/plugin/controls/metrics.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  ControlPanelState,\n  ControlSetItem,\n  ControlState,\n  sharedControls,\n  Dataset,\n  ColumnMeta,\n  defineSavedMetrics,\n} from '@superset-ui/chart-controls';\nimport { t } from '@superset-ui/core';\nimport { getQueryMode, isAggMode, validateAggControlValues } from './shared';\n\nconst percentMetrics: typeof sharedControls.metrics = {\n  type: 'MetricsControl',\n  label: t('Percentage metrics'),\n  description: t(\n    'Select one or many metrics to display, that will be displayed in the percentages of total. ' +\n      'Percentage metrics will be calculated only from data within the row limit. ' +\n      'You can use an aggregation function on a column or write custom SQL to create a percentage metric.',\n  ),\n  multi: true,\n  visibility: isAggMode,\n  resetOnHide: false,\n  mapStateToProps: ({ datasource, controls }, controlState) => ({\n    columns: datasource?.columns || [],\n    savedMetrics: defineSavedMetrics(datasource),\n    datasource,\n    datasourceType: datasource?.type,\n    queryMode: getQueryMode(controls),\n    externalValidationErrors: validateAggControlValues(controls, [\n      controls.groupby?.value,\n      controls.metrics?.value,\n      controlState?.value,\n    ]),\n  }),\n  rerender: ['groupby', 'metrics'],\n  default: [],\n  validators: [],\n};\n\nconst dndPercentMetrics = {\n  ...percentMetrics,\n  type: 'DndMetricSelect',\n};\n\nexport const percentMetricsControlSetItem: ControlSetItem = {\n  name: 'percent_metrics',\n  config: {\n    ...dndPercentMetrics,\n  },\n};\n\nexport const metricsControlSetItem: ControlSetItem = {\n  name: 'metrics',\n  override: {\n    validators: [],\n    visibility: isAggMode,\n    mapStateToProps: (\n      { controls, datasource, form_data }: ControlPanelState,\n      controlState: ControlState,\n    ) => ({\n      columns: datasource?.columns[0]?.hasOwnProperty('filterable')\n        ? (datasource as Dataset)?.columns?.filter(\n            (c: ColumnMeta) => c.filterable,\n          )\n        : datasource?.columns,\n      savedMetrics: defineSavedMetrics(datasource),\n      // current active adhoc metrics\n      selectedMetrics:\n        form_data.metrics || (form_data.metric ? [form_data.metric] : []),\n      datasource,\n      externalValidationErrors: validateAggControlValues(controls, [\n        controls.groupby?.value,\n        controls.percent_metrics?.value,\n        controlState.value,\n      ]),\n    }),\n    rerender: ['groupby', 'percent_metrics'],\n    resetOnHide: false,\n  },\n};\n\nexport const showTotalsControlSetItem: ControlSetItem = {\n  name: 'show_totals',\n  config: {\n    type: 'CheckboxControl',\n    label: t('Show totals'),\n    default: false,\n    description: t(\n      'Show total aggregations of selected metrics. Note that row limit does not apply to the result.',\n    ),\n    visibility: isAggMode,\n    resetOnHide: false,\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}