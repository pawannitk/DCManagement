{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n// https://en.wikipedia.org/wiki/Linear_congruential_generator\nfunction stringAsciiPRNG(value, m) {\n  // Xn+1 = (a * Xn + c) % m\n  // 0 < a < m\n  // 0 <= c < m\n  // 0 <= X0 < m\n  const charCodes = [...value].map((letter) => letter.charCodeAt(0));\n  const len = charCodes.length;\n  const a = len % (m - 1) + 1;\n  const c = charCodes.reduce((current, next) => current + next) % m;\n  let random = charCodes[0] % m;\n  [...new Array(len)].forEach(() => {\n    random = (a * random + c) % m;\n  });\n  return random;\n}\nexport function getRandomColor(sampleValue, colorList) {\n  // if no value is passed, always return transparent color for consistency\n  if (!sampleValue)\n  return 'transparent';\n  // value based random color index,\n  // ensuring the same sampleValue always resolves to the same color\n  return colorList[stringAsciiPRNG(sampleValue, colorList.length)];\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(stringAsciiPRNG, \"stringAsciiPRNG\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/FacePile/utils.tsx\");reactHotLoader.register(getRandomColor, \"getRandomColor\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/FacePile/utils.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["stringAsciiPRNG","value","m","charCodes","map","letter","charCodeAt","len","length","a","c","reduce","current","next","random","Array","forEach","getRandomColor","sampleValue","colorList","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/components/FacePile/utils.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n// https://en.wikipedia.org/wiki/Linear_congruential_generator\nfunction stringAsciiPRNG(value: string, m: number) {\n  // Xn+1 = (a * Xn + c) % m\n  // 0 < a < m\n  // 0 <= c < m\n  // 0 <= X0 < m\n\n  const charCodes = [...value].map(letter => letter.charCodeAt(0));\n  const len = charCodes.length;\n\n  const a = (len % (m - 1)) + 1;\n  const c = charCodes.reduce((current, next) => current + next) % m;\n\n  let random = charCodes[0] % m;\n\n  [...new Array(len)].forEach(() => {\n    random = (a * random + c) % m;\n  });\n\n  return random;\n}\n\nexport function getRandomColor(sampleValue: string, colorList: string[]) {\n  // if no value is passed, always return transparent color for consistency\n  if (!sampleValue) return 'transparent';\n\n  // value based random color index,\n  // ensuring the same sampleValue always resolves to the same color\n  return colorList[stringAsciiPRNG(sampleValue, colorList.length)];\n}\n"],"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAmBA;AACA,SAASA,eAAeA,CAACC,KAAa,EAAEC,CAAS;EAC/C;EACA;EACA;EACA;EAEA,MAAMC,SAAS,GAAG,CAAC,GAAGF,KAAK,CAAC,CAACG,GAAG,CAAC,CAAAC,MAAM,KAAIA,MAAM,CAACC,UAAU,CAAC,CAAC,CAAC,CAAC;EAChE,MAAMC,GAAG,GAAGJ,SAAS,CAACK,MAAM;EAE5B,MAAMC,CAAC,GAAIF,GAAG,IAAIL,CAAC,GAAG,CAAC,CAAC,GAAI,CAAC;EAC7B,MAAMQ,CAAC,GAAGP,SAAS,CAACQ,MAAM,CAAC,CAACC,OAAO,EAAEC,IAAI,KAAKD,OAAO,GAAGC,IAAI,CAAC,GAAGX,CAAC;EAEjE,IAAIY,MAAM,GAAGX,SAAS,CAAC,CAAC,CAAC,GAAGD,CAAC;EAE7B,CAAC,GAAG,IAAIa,KAAK,CAACR,GAAG,CAAC,CAAC,CAACS,OAAO,CAAC,MAAK;IAC/BF,MAAM,GAAG,CAACL,CAAC,GAAGK,MAAM,GAAGJ,CAAC,IAAIR,CAAC;EAC/B,CAAC,CAAC;EAEF,OAAOY,MAAM;AACf;AAEA,OAAM,SAAUG,cAAcA,CAACC,WAAmB,EAAEC,SAAmB;EACrE;EACA,IAAI,CAACD,WAAW;EAAE,OAAO,aAAa;EAEtC;EACA;EACA,OAAOC,SAAS,CAACnB,eAAe,CAACkB,WAAW,EAAEC,SAAS,CAACX,MAAM,CAAC,CAAC;AAClE,CAAC,mBAAAY,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAC,OAAA,GAAAC,SAAA,MAAAH,cAAA,WAAAA,cAAA,CAAAI,QAAA,CA5BQxB,eAAe,iHAAAoB,cAAA,CAAAI,QAAA,CAqBRP,cAAc,wIAAAQ,WAAA,UAAAJ,oBAAA,mBAAAA,oBAAA,CAAAI,WAAA,GAAAF,SAAA,CAAAE,WAAA,IAAAA,WAAA,CAAAC,MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}