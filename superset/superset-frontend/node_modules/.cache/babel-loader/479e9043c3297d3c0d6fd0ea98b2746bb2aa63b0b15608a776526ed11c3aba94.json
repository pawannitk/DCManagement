{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useState, useRef } from 'react';\nimport { SupersetClient, logging, t } from '@superset-ui/core';\nimport { addDangerToast } from 'src/components/MessageToasts/actions';\nimport { toQueryString } from 'src/utils/urlUtils';\nimport DatasetPanel from './DatasetPanel';\nimport { isIDatabaseTable } from './types';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst DatasetPanelWrapper = ({ tableName, dbId, catalog, schema, setHasColumns, datasets }) => {\n  const [columnList, setColumnList] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const tableNameRef = useRef(tableName);\n  const getTableMetadata = async (props) => {\n    const { dbId, tableName, schema } = props;\n    setLoading(true);\n    setHasColumns == null ? void 0 : setHasColumns(false);\n    const path = `/api/v1/database/${dbId}/table_metadata/${toQueryString({\n      name: tableName,\n      catalog,\n      schema\n    })}`;\n    try {\n      const response = await SupersetClient.get({\n        endpoint: path\n      });\n      if (isIDatabaseTable(response == null ? void 0 : response.json)) {\n        const table = response.json;\n        /**\n         *  The user is able to click other table columns while the http call for last selected table column is made\n         *  This check ensures we process the response that matches the last selected table name and ignore the others\n         */\n        if (table.name === tableNameRef.current) {\n          setColumnList(table.columns);\n          setHasColumns == null ? void 0 : setHasColumns(table.columns.length > 0);\n          setHasError(false);\n        }\n      } else\n      {\n        setColumnList([]);\n        setHasColumns == null ? void 0 : setHasColumns(false);\n        setHasError(true);\n        addDangerToast(t('The API response from %s does not match the IDatabaseTable interface.', path));\n        logging.error(t('The API response from %s does not match the IDatabaseTable interface.', path));\n      }\n    }\n    catch (error) {\n      setColumnList([]);\n      setHasColumns == null ? void 0 : setHasColumns(false);\n      setHasError(true);\n    } finally\n    {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    tableNameRef.current = tableName;\n    if (tableName && schema && dbId) {\n      getTableMetadata({ tableName, dbId, schema });\n    }\n    // getTableMetadata is a const and should not be in dependency array\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [tableName, dbId, schema]);\n  return ___EmotionJSX(DatasetPanel, { columnList: columnList, hasError: hasError, loading: loading, tableName: tableName, datasets: datasets });\n};__signature__(DatasetPanelWrapper, \"useState{[columnList, setColumnList]([])}\\nuseState{[loading, setLoading](false)}\\nuseState{[hasError, setHasError](false)}\\nuseRef{tableNameRef}\\nuseEffect{}\");const _default =\nDatasetPanelWrapper;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(DatasetPanelWrapper, \"DatasetPanelWrapper\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/features/datasets/AddDataset/DatasetPanel/index.tsx\");reactHotLoader.register(_default, \"default\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/features/datasets/AddDataset/DatasetPanel/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["React","useEffect","useState","useRef","SupersetClient","logging","t","addDangerToast","toQueryString","DatasetPanel","isIDatabaseTable","jsx","___EmotionJSX","DatasetPanelWrapper","tableName","dbId","catalog","schema","setHasColumns","datasets","columnList","setColumnList","loading","setLoading","hasError","setHasError","tableNameRef","getTableMetadata","props","path","name","response","get","endpoint","json","table","current","columns","length","error","__signature__","_default","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/features/datasets/AddDataset/DatasetPanel/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useState, useRef } from 'react';\nimport { SupersetClient, logging, t } from '@superset-ui/core';\nimport { DatasetObject } from 'src/features/datasets/AddDataset/types';\nimport { addDangerToast } from 'src/components/MessageToasts/actions';\nimport { toQueryString } from 'src/utils/urlUtils';\nimport DatasetPanel from './DatasetPanel';\nimport { ITableColumn, IDatabaseTable, isIDatabaseTable } from './types';\n\n/**\n * Interface for the getTableMetadata API call\n */\ninterface IColumnProps {\n  /**\n   * Unique id of the database\n   */\n  dbId: number;\n  /**\n   * Name of the table\n   */\n  tableName: string;\n  /**\n   * Name of the schema\n   */\n  schema: string;\n}\n\nexport interface IDatasetPanelWrapperProps {\n  /**\n   * Name of the database table\n   */\n  tableName?: string | null;\n  /**\n   * Database ID\n   */\n  dbId?: number;\n  /**\n   * The selected catalog/schema for the database\n   */\n  catalog?: string | null;\n  schema?: string | null;\n  setHasColumns?: Function;\n  datasets?: DatasetObject[] | undefined;\n}\n\nconst DatasetPanelWrapper = ({\n  tableName,\n  dbId,\n  catalog,\n  schema,\n  setHasColumns,\n  datasets,\n}: IDatasetPanelWrapperProps) => {\n  const [columnList, setColumnList] = useState<ITableColumn[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const tableNameRef = useRef(tableName);\n\n  const getTableMetadata = async (props: IColumnProps) => {\n    const { dbId, tableName, schema } = props;\n    setLoading(true);\n    setHasColumns?.(false);\n    const path = `/api/v1/database/${dbId}/table_metadata/${toQueryString({\n      name: tableName,\n      catalog,\n      schema,\n    })}`;\n    try {\n      const response = await SupersetClient.get({\n        endpoint: path,\n      });\n\n      if (isIDatabaseTable(response?.json)) {\n        const table: IDatabaseTable = response.json as IDatabaseTable;\n        /**\n         *  The user is able to click other table columns while the http call for last selected table column is made\n         *  This check ensures we process the response that matches the last selected table name and ignore the others\n         */\n        if (table.name === tableNameRef.current) {\n          setColumnList(table.columns);\n          setHasColumns?.(table.columns.length > 0);\n          setHasError(false);\n        }\n      } else {\n        setColumnList([]);\n        setHasColumns?.(false);\n        setHasError(true);\n        addDangerToast(\n          t(\n            'The API response from %s does not match the IDatabaseTable interface.',\n            path,\n          ),\n        );\n        logging.error(\n          t(\n            'The API response from %s does not match the IDatabaseTable interface.',\n            path,\n          ),\n        );\n      }\n    } catch (error) {\n      setColumnList([]);\n      setHasColumns?.(false);\n      setHasError(true);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    tableNameRef.current = tableName;\n    if (tableName && schema && dbId) {\n      getTableMetadata({ tableName, dbId, schema });\n    }\n    // getTableMetadata is a const and should not be in dependency array\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [tableName, dbId, schema]);\n\n  return (\n    <DatasetPanel\n      columnList={columnList}\n      hasError={hasError}\n      loading={loading}\n      tableName={tableName}\n      datasets={datasets}\n    />\n  );\n};\n\nexport default DatasetPanelWrapper;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}