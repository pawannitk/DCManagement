{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /* eslint-disable camelcase */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { ensureIsArray, GenericDataType, isAdhocColumn, isPhysicalColumn, QueryMode, smartDateFormatter, t } from '@superset-ui/core';\nimport { ColumnOption, D3_TIME_FORMAT_OPTIONS, QueryModeLabel, sharedControls, defineSavedMetrics, getStandardizedControls } from '@superset-ui/chart-controls';\nimport { PAGE_SIZE_OPTIONS } from './consts';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nfunction getQueryMode(controls) {var _controls$query_mode, _controls$all_columns;\n  const mode = controls == null ? void 0 : (_controls$query_mode = controls.query_mode) == null ? void 0 : _controls$query_mode.value;\n  if (mode === QueryMode.Aggregate || mode === QueryMode.Raw) {\n    return mode;\n  }\n  const rawColumns = controls == null ? void 0 : (_controls$all_columns = controls.all_columns) == null ? void 0 : _controls$all_columns.value;\n  const hasRawColumns = rawColumns && rawColumns.length > 0;\n  return hasRawColumns ? QueryMode.Raw : QueryMode.Aggregate;\n}\n/**\n * Visibility check\n */\nfunction isQueryMode(mode) {\n  return ({ controls }) => getQueryMode(controls) === mode;\n}\nconst isAggMode = isQueryMode(QueryMode.Aggregate);\nconst isRawMode = isQueryMode(QueryMode.Raw);\nconst validateAggControlValues = (controls, values) => {\n  const areControlsEmpty = values.every((val) => ensureIsArray(val).length === 0);\n  return areControlsEmpty && isAggMode({ controls }) ?\n  [t('Group By, Metrics or Percentage Metrics must have a value')] :\n  [];\n};\nconst queryMode = {\n  type: 'RadioButtonControl',\n  label: t('Query mode'),\n  default: null,\n  options: [\n  [QueryMode.Aggregate, QueryModeLabel[QueryMode.Aggregate]],\n  [QueryMode.Raw, QueryModeLabel[QueryMode.Raw]]],\n\n  mapStateToProps: ({ controls }) => ({ value: getQueryMode(controls) }),\n  rerender: ['all_columns', 'groupby', 'metrics', 'percent_metrics']\n};\nconst allColumnsControl = {\n  ...sharedControls.groupby,\n  label: t('Columns'),\n  description: t('Columns to display'),\n  multi: true,\n  freeForm: true,\n  allowAll: true,\n  commaChoosesOption: false,\n  optionRenderer: (c) => ___EmotionJSX(ColumnOption, { showType: true, column: c }),\n  valueRenderer: (c) => ___EmotionJSX(ColumnOption, { column: c }),\n  valueKey: 'column_name',\n  mapStateToProps: ({ datasource, controls }, controlState) => ({\n    options: (datasource == null ? void 0 : datasource.columns) || [],\n    queryMode: getQueryMode(controls),\n    externalValidationErrors: isRawMode({ controls }) && ensureIsArray(controlState == null ? void 0 : controlState.value).length === 0 ?\n    [t('must have a value')] :\n    []\n  }),\n  visibility: isRawMode,\n  resetOnHide: false\n};\nconst percentMetricsControl = {\n  ...sharedControls.metrics,\n  label: t('Percentage metrics'),\n  description: t('Select one or many metrics to display, that will be displayed in the percentages of total. ' +\n  'Percentage metrics will be calculated only from data within the row limit. ' +\n  'You can use an aggregation function on a column or write custom SQL to create a percentage metric.'),\n  visibility: isAggMode,\n  resetOnHide: false,\n  mapStateToProps: ({ datasource, controls }, controlState) => {var _controls$groupby, _controls$metrics;return {\n      columns: (datasource == null ? void 0 : datasource.columns) || [],\n      savedMetrics: defineSavedMetrics(datasource),\n      datasource,\n      datasourceType: datasource == null ? void 0 : datasource.type,\n      queryMode: getQueryMode(controls),\n      externalValidationErrors: validateAggControlValues(controls, [(_controls$groupby =\n      controls.groupby) == null ? void 0 : _controls$groupby.value, (_controls$metrics =\n      controls.metrics) == null ? void 0 : _controls$metrics.value,\n      controlState == null ? void 0 : controlState.value]\n      )\n    };},\n  rerender: ['groupby', 'metrics'],\n  default: [],\n  validators: []\n};\nconst config = {\n  controlPanelSections: [\n  {\n    label: t('Query'),\n    expanded: true,\n    controlSetRows: [\n    [\n    {\n      name: 'query_mode',\n      config: queryMode\n    }],\n\n    [\n    {\n      name: 'groupby',\n      override: {\n        visibility: isAggMode,\n        resetOnHide: false,\n        mapStateToProps: (state, controlState) => {var _sharedControls$group, _originalMapStateToPr, _controls$metrics2, _controls$percent_met;\n          const { controls } = state;\n          const originalMapStateToProps = sharedControls == null ? void 0 : (_sharedControls$group = sharedControls.groupby) == null ? void 0 : _sharedControls$group.mapStateToProps;\n          const newState = (_originalMapStateToPr = originalMapStateToProps == null ? void 0 : originalMapStateToProps(state, controlState)) != null ? _originalMapStateToPr : {};\n          newState.externalValidationErrors = validateAggControlValues(controls, [(_controls$metrics2 =\n          controls.metrics) == null ? void 0 : _controls$metrics2.value, (_controls$percent_met =\n          controls.percent_metrics) == null ? void 0 : _controls$percent_met.value,\n          controlState.value]\n          );\n          return newState;\n        },\n        rerender: ['metrics', 'percent_metrics']\n      }\n    }],\n\n    [\n    {\n      name: 'time_grain_sqla',\n      config: {\n        ...sharedControls.time_grain_sqla,\n        visibility: ({ controls }) => {var _controls$groupby2;\n          const dttmLookup = Object.fromEntries(ensureIsArray(controls == null ? void 0 : (_controls$groupby2 = controls.groupby) == null ? void 0 : _controls$groupby2.options).map((option) => [\n          option.column_name,\n          option.is_dttm]\n          ));\n          return ensureIsArray(controls == null ? void 0 : controls.groupby.value).\n          map((selection) => {\n            if (isAdhocColumn(selection)) {\n              return true;\n            }\n            if (isPhysicalColumn(selection)) {\n              return !!dttmLookup[selection];\n            }\n            return false;\n          }).\n          some(Boolean);\n        }\n      }\n    },\n    'temporal_columns_lookup'],\n\n    [\n    {\n      name: 'metrics',\n      override: {\n        validators: [],\n        visibility: isAggMode,\n        resetOnHide: false,\n        mapStateToProps: ({ controls, datasource, form_data }, controlState) => {var _datasource$columns$, _datasource$columns, _controls$groupby3, _controls$percent_met2;return {\n            columns: datasource != null && (_datasource$columns$ = datasource.columns[0]) != null && _datasource$columns$.hasOwnProperty('filterable') ?\n            datasource == null ? void 0 : (_datasource$columns = datasource.columns) == null ? void 0 : _datasource$columns.filter((c) => c.filterable) :\n            datasource == null ? void 0 : datasource.columns,\n            savedMetrics: defineSavedMetrics(datasource),\n            // current active adhoc metrics\n            selectedMetrics: form_data.metrics || (\n            form_data.metric ? [form_data.metric] : []),\n            datasource,\n            externalValidationErrors: validateAggControlValues(controls, [(_controls$groupby3 =\n            controls.groupby) == null ? void 0 : _controls$groupby3.value, (_controls$percent_met2 =\n            controls.percent_metrics) == null ? void 0 : _controls$percent_met2.value,\n            controlState.value]\n            )\n          };},\n        rerender: ['groupby', 'percent_metrics']\n      }\n    },\n    {\n      name: 'all_columns',\n      config: allColumnsControl\n    }],\n\n    [\n    {\n      name: 'percent_metrics',\n      config: percentMetricsControl\n    }],\n\n    ['adhoc_filters'],\n    [\n    {\n      name: 'timeseries_limit_metric',\n      override: {\n        visibility: isAggMode,\n        resetOnHide: false\n      }\n    },\n    {\n      name: 'order_by_cols',\n      config: {\n        type: 'SelectControl',\n        label: t('Ordering'),\n        description: t('Order results by selected columns'),\n        multi: true,\n        default: [],\n        mapStateToProps: ({ datasource }) => ({\n          choices: datasource != null && datasource.hasOwnProperty('order_by_choices') ?\n          datasource == null ? void 0 : datasource.order_by_choices :\n          (datasource == null ? void 0 : datasource.columns) || []\n        }),\n        visibility: isRawMode,\n        resetOnHide: false\n      }\n    }],\n\n    [\n    {\n      name: 'server_pagination',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Server pagination'),\n        description: t('Enable server side pagination of results (experimental feature)'),\n        default: false\n      }\n    }],\n\n    [\n    {\n      name: 'row_limit',\n      override: {\n        default: 1000,\n        visibility: ({ controls }) => {var _controls$server_pagi;return !(controls != null && (_controls$server_pagi = controls.server_pagination) != null && _controls$server_pagi.value);}\n      }\n    },\n    {\n      name: 'server_page_length',\n      config: {\n        type: 'SelectControl',\n        freeForm: true,\n        label: t('Server Page Length'),\n        default: 10,\n        choices: PAGE_SIZE_OPTIONS,\n        description: t('Rows per page, 0 means no pagination'),\n        visibility: ({ controls }) => {var _controls$server_pagi2;return Boolean(controls == null ? void 0 : (_controls$server_pagi2 = controls.server_pagination) == null ? void 0 : _controls$server_pagi2.value);}\n      }\n    }],\n\n    [\n    {\n      name: 'order_desc',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Sort descending'),\n        default: true,\n        description: t('If enabled, this control sorts the results/values descending, otherwise it sorts the results ascending.'),\n        visibility: isAggMode,\n        resetOnHide: false\n      }\n    }],\n\n    [\n    {\n      name: 'show_totals',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Show totals'),\n        default: false,\n        description: t('Show total aggregations of selected metrics. Note that row limit does not apply to the result.'),\n        visibility: isAggMode,\n        resetOnHide: false\n      }\n    }]]\n\n\n  },\n  {\n    label: t('Options'),\n    expanded: true,\n    controlSetRows: [\n    [\n    {\n      name: 'table_timestamp_format',\n      config: {\n        type: 'SelectControl',\n        freeForm: true,\n        label: t('Timestamp format'),\n        default: smartDateFormatter.id,\n        renderTrigger: true,\n        clearable: false,\n        choices: D3_TIME_FORMAT_OPTIONS,\n        description: t('D3 time format for datetime columns')\n      }\n    }],\n\n    [\n    {\n      name: 'page_length',\n      config: {\n        type: 'SelectControl',\n        freeForm: true,\n        renderTrigger: true,\n        label: t('Page length'),\n        default: null,\n        choices: PAGE_SIZE_OPTIONS,\n        description: t('Rows per page, 0 means no pagination'),\n        visibility: ({ controls }) => {var _controls$server_pagi3;return !(controls != null && (_controls$server_pagi3 = controls.server_pagination) != null && _controls$server_pagi3.value);}\n      }\n    },\n    null],\n\n    [\n    {\n      name: 'include_search',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Search box'),\n        renderTrigger: true,\n        default: false,\n        description: t('Whether to include a client-side search box')\n      }\n    },\n    {\n      name: 'show_cell_bars',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Cell bars'),\n        renderTrigger: true,\n        default: true,\n        description: t('Whether to display a bar chart background in table columns')\n      }\n    }],\n\n    [\n    {\n      name: 'align_pn',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Align +/-'),\n        renderTrigger: true,\n        default: false,\n        description: t('Whether to align background charts with both positive and negative values at 0')\n      }\n    },\n    {\n      name: 'color_pn',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Color +/-'),\n        renderTrigger: true,\n        default: true,\n        description: t('Whether to colorize numeric values by whether they are positive or negative')\n      }\n    }],\n\n    [\n    {\n      name: 'allow_rearrange_columns',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Allow columns to be rearranged'),\n        renderTrigger: true,\n        default: false,\n        description: t(\"Allow end user to drag-and-drop column headers to rearrange them. Note their changes won't persist for the next time they open the chart.\")\n      }\n    }],\n\n    [\n    {\n      name: 'allow_render_html',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Render columns in HTML format'),\n        renderTrigger: true,\n        default: true,\n        description: t('Render data in HTML format if applicable.')\n      }\n    }],\n\n    [\n    {\n      name: 'column_config',\n      config: {\n        type: 'ColumnConfigControl',\n        label: t('Customize columns'),\n        description: t('Further customize how to display each column'),\n        width: 400,\n        height: 320,\n        renderTrigger: true,\n        shouldMapStateToProps() {\n          return true;\n        },\n        mapStateToProps(explore, _, chart) {var _chart$queriesRespons;\n          return {\n            queryResponse: chart == null ? void 0 : (_chart$queriesRespons = chart.queriesResponse) == null ? void 0 : _chart$queriesRespons[0]\n          };\n        }\n      }\n    }],\n\n    [\n    {\n      name: 'conditional_formatting',\n      config: {\n        type: 'ConditionalFormattingControl',\n        renderTrigger: true,\n        label: t('Conditional formatting'),\n        description: t('Apply conditional color formatting to numeric columns'),\n        shouldMapStateToProps() {\n          return true;\n        },\n        mapStateToProps(explore, _, chart) {var _explore$datasource, _explore$datasource2, _explore$datasource$c, _explore$datasource3, _chart$queriesRespons2, _chart$queriesRespons3;\n          const verboseMap = explore != null && (_explore$datasource = explore.datasource) != null && _explore$datasource.hasOwnProperty('verbose_map') ?\n          explore == null ? void 0 : (_explore$datasource2 = explore.datasource) == null ? void 0 : _explore$datasource2.verbose_map : (_explore$datasource$c =\n          explore == null ? void 0 : (_explore$datasource3 = explore.datasource) == null ? void 0 : _explore$datasource3.columns) != null ? _explore$datasource$c : {};\n          const chartStatus = chart == null ? void 0 : chart.chartStatus;\n          const { colnames, coltypes } = (_chart$queriesRespons2 = chart == null ? void 0 : (_chart$queriesRespons3 = chart.queriesResponse) == null ? void 0 : _chart$queriesRespons3[0]) != null ? _chart$queriesRespons2 : {};\n          const numericColumns = Array.isArray(colnames) && Array.isArray(coltypes) ?\n          colnames.\n          filter((colname, index) => coltypes[index] === GenericDataType.Numeric).\n          map((colname) => {var _verboseMap$colname;return {\n              value: colname,\n              label: (_verboseMap$colname = verboseMap[colname]) != null ? _verboseMap$colname : colname\n            };}) :\n          [];\n          return {\n            removeIrrelevantConditions: chartStatus === 'success',\n            columnOptions: numericColumns,\n            verboseMap\n          };\n        }\n      }\n    }]]\n\n\n  }],\n\n  formDataOverrides: (formData) => ({\n    ...formData,\n    metrics: getStandardizedControls().popAllMetrics(),\n    groupby: getStandardizedControls().popAllColumns()\n  })\n};const _default =\nconfig;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(getQueryMode, \"getQueryMode\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-table/src/controlPanel.tsx\");reactHotLoader.register(isQueryMode, \"isQueryMode\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-table/src/controlPanel.tsx\");reactHotLoader.register(isAggMode, \"isAggMode\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-table/src/controlPanel.tsx\");reactHotLoader.register(isRawMode, \"isRawMode\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-table/src/controlPanel.tsx\");reactHotLoader.register(validateAggControlValues, \"validateAggControlValues\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-table/src/controlPanel.tsx\");reactHotLoader.register(queryMode, \"queryMode\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-table/src/controlPanel.tsx\");reactHotLoader.register(allColumnsControl, \"allColumnsControl\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-table/src/controlPanel.tsx\");reactHotLoader.register(percentMetricsControl, \"percentMetricsControl\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-table/src/controlPanel.tsx\");reactHotLoader.register(config, \"config\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-table/src/controlPanel.tsx\");reactHotLoader.register(_default, \"default\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-table/src/controlPanel.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["React","ensureIsArray","GenericDataType","isAdhocColumn","isPhysicalColumn","QueryMode","smartDateFormatter","t","ColumnOption","D3_TIME_FORMAT_OPTIONS","QueryModeLabel","sharedControls","defineSavedMetrics","getStandardizedControls","PAGE_SIZE_OPTIONS","jsx","___EmotionJSX","getQueryMode","controls","_controls$query_mode","_controls$all_columns","mode","query_mode","value","Aggregate","Raw","rawColumns","all_columns","hasRawColumns","length","isQueryMode","isAggMode","isRawMode","validateAggControlValues","values","areControlsEmpty","every","val","queryMode","type","label","default","options","mapStateToProps","rerender","allColumnsControl","groupby","description","multi","freeForm","allowAll","commaChoosesOption","optionRenderer","c","showType","column","valueRenderer","valueKey","datasource","controlState","columns","externalValidationErrors","visibility","resetOnHide","percentMetricsControl","metrics","_controls$groupby","_controls$metrics","savedMetrics","datasourceType","validators","config","controlPanelSections","expanded","controlSetRows","name","override","state","_sharedControls$group","_originalMapStateToPr","_controls$metrics2","_controls$percent_met","originalMapStateToProps","newState","percent_metrics","time_grain_sqla","_controls$groupby2","dttmLookup","Object","fromEntries","map","option","column_name","is_dttm","selection","some","Boolean","form_data","_datasource$columns$","_datasource$columns","_controls$groupby3","_controls$percent_met2","hasOwnProperty","filter","filterable","selectedMetrics","metric","choices","order_by_choices","_controls$server_pagi","server_pagination","_controls$server_pagi2","id","renderTrigger","clearable","_controls$server_pagi3","width","height","shouldMapStateToProps","explore","_","chart","_chart$queriesRespons","queryResponse","queriesResponse","_explore$datasource","_explore$datasource2","_explore$datasource$c","_explore$datasource3","_chart$queriesRespons2","_chart$queriesRespons3","verboseMap","verbose_map","chartStatus","colnames","coltypes","numericColumns","Array","isArray","colname","index","Numeric","_verboseMap$colname","removeIrrelevantConditions","columnOptions","formDataOverrides","formData","popAllMetrics","popAllColumns","_default","reactHotLoader","reactHotLoaderGlobal","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-table/src/controlPanel.tsx"],"sourcesContent":["/* eslint-disable camelcase */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport {\n  ChartDataResponseResult,\n  ensureIsArray,\n  GenericDataType,\n  isAdhocColumn,\n  isPhysicalColumn,\n  QueryFormColumn,\n  QueryMode,\n  smartDateFormatter,\n  t,\n} from '@superset-ui/core';\nimport {\n  ColumnOption,\n  ControlConfig,\n  ControlPanelConfig,\n  ControlPanelsContainerProps,\n  ControlStateMapping,\n  D3_TIME_FORMAT_OPTIONS,\n  QueryModeLabel,\n  sharedControls,\n  ControlPanelState,\n  ControlState,\n  Dataset,\n  ColumnMeta,\n  defineSavedMetrics,\n  getStandardizedControls,\n} from '@superset-ui/chart-controls';\n\nimport { PAGE_SIZE_OPTIONS } from './consts';\n\nfunction getQueryMode(controls: ControlStateMapping): QueryMode {\n  const mode = controls?.query_mode?.value;\n  if (mode === QueryMode.Aggregate || mode === QueryMode.Raw) {\n    return mode as QueryMode;\n  }\n  const rawColumns = controls?.all_columns?.value as\n    | QueryFormColumn[]\n    | undefined;\n  const hasRawColumns = rawColumns && rawColumns.length > 0;\n  return hasRawColumns ? QueryMode.Raw : QueryMode.Aggregate;\n}\n\n/**\n * Visibility check\n */\nfunction isQueryMode(mode: QueryMode) {\n  return ({ controls }: Pick<ControlPanelsContainerProps, 'controls'>) =>\n    getQueryMode(controls) === mode;\n}\n\nconst isAggMode = isQueryMode(QueryMode.Aggregate);\nconst isRawMode = isQueryMode(QueryMode.Raw);\n\nconst validateAggControlValues = (\n  controls: ControlStateMapping,\n  values: any[],\n) => {\n  const areControlsEmpty = values.every(val => ensureIsArray(val).length === 0);\n  return areControlsEmpty && isAggMode({ controls })\n    ? [t('Group By, Metrics or Percentage Metrics must have a value')]\n    : [];\n};\n\nconst queryMode: ControlConfig<'RadioButtonControl'> = {\n  type: 'RadioButtonControl',\n  label: t('Query mode'),\n  default: null,\n  options: [\n    [QueryMode.Aggregate, QueryModeLabel[QueryMode.Aggregate]],\n    [QueryMode.Raw, QueryModeLabel[QueryMode.Raw]],\n  ],\n  mapStateToProps: ({ controls }) => ({ value: getQueryMode(controls) }),\n  rerender: ['all_columns', 'groupby', 'metrics', 'percent_metrics'],\n};\n\nconst allColumnsControl: typeof sharedControls.groupby = {\n  ...sharedControls.groupby,\n  label: t('Columns'),\n  description: t('Columns to display'),\n  multi: true,\n  freeForm: true,\n  allowAll: true,\n  commaChoosesOption: false,\n  optionRenderer: c => <ColumnOption showType column={c} />,\n  valueRenderer: c => <ColumnOption column={c} />,\n  valueKey: 'column_name',\n  mapStateToProps: ({ datasource, controls }, controlState) => ({\n    options: datasource?.columns || [],\n    queryMode: getQueryMode(controls),\n    externalValidationErrors:\n      isRawMode({ controls }) && ensureIsArray(controlState?.value).length === 0\n        ? [t('must have a value')]\n        : [],\n  }),\n  visibility: isRawMode,\n  resetOnHide: false,\n};\n\nconst percentMetricsControl: typeof sharedControls.metrics = {\n  ...sharedControls.metrics,\n  label: t('Percentage metrics'),\n  description: t(\n    'Select one or many metrics to display, that will be displayed in the percentages of total. ' +\n      'Percentage metrics will be calculated only from data within the row limit. ' +\n      'You can use an aggregation function on a column or write custom SQL to create a percentage metric.',\n  ),\n  visibility: isAggMode,\n  resetOnHide: false,\n  mapStateToProps: ({ datasource, controls }, controlState) => ({\n    columns: datasource?.columns || [],\n    savedMetrics: defineSavedMetrics(datasource),\n    datasource,\n    datasourceType: datasource?.type,\n    queryMode: getQueryMode(controls),\n    externalValidationErrors: validateAggControlValues(controls, [\n      controls.groupby?.value,\n      controls.metrics?.value,\n      controlState?.value,\n    ]),\n  }),\n  rerender: ['groupby', 'metrics'],\n  default: [],\n  validators: [],\n};\n\nconst config: ControlPanelConfig = {\n  controlPanelSections: [\n    {\n      label: t('Query'),\n      expanded: true,\n      controlSetRows: [\n        [\n          {\n            name: 'query_mode',\n            config: queryMode,\n          },\n        ],\n        [\n          {\n            name: 'groupby',\n            override: {\n              visibility: isAggMode,\n              resetOnHide: false,\n              mapStateToProps: (\n                state: ControlPanelState,\n                controlState: ControlState,\n              ) => {\n                const { controls } = state;\n                const originalMapStateToProps =\n                  sharedControls?.groupby?.mapStateToProps;\n                const newState =\n                  originalMapStateToProps?.(state, controlState) ?? {};\n                newState.externalValidationErrors = validateAggControlValues(\n                  controls,\n                  [\n                    controls.metrics?.value,\n                    controls.percent_metrics?.value,\n                    controlState.value,\n                  ],\n                );\n\n                return newState;\n              },\n              rerender: ['metrics', 'percent_metrics'],\n            },\n          },\n        ],\n        [\n          {\n            name: 'time_grain_sqla',\n            config: {\n              ...sharedControls.time_grain_sqla,\n              visibility: ({ controls }) => {\n                const dttmLookup = Object.fromEntries(\n                  ensureIsArray(controls?.groupby?.options).map(option => [\n                    option.column_name,\n                    option.is_dttm,\n                  ]),\n                );\n\n                return ensureIsArray(controls?.groupby.value)\n                  .map(selection => {\n                    if (isAdhocColumn(selection)) {\n                      return true;\n                    }\n                    if (isPhysicalColumn(selection)) {\n                      return !!dttmLookup[selection];\n                    }\n                    return false;\n                  })\n                  .some(Boolean);\n              },\n            },\n          },\n          'temporal_columns_lookup',\n        ],\n        [\n          {\n            name: 'metrics',\n            override: {\n              validators: [],\n              visibility: isAggMode,\n              resetOnHide: false,\n              mapStateToProps: (\n                { controls, datasource, form_data }: ControlPanelState,\n                controlState: ControlState,\n              ) => ({\n                columns: datasource?.columns[0]?.hasOwnProperty('filterable')\n                  ? (datasource as Dataset)?.columns?.filter(\n                      (c: ColumnMeta) => c.filterable,\n                    )\n                  : datasource?.columns,\n                savedMetrics: defineSavedMetrics(datasource),\n                // current active adhoc metrics\n                selectedMetrics:\n                  form_data.metrics ||\n                  (form_data.metric ? [form_data.metric] : []),\n                datasource,\n                externalValidationErrors: validateAggControlValues(controls, [\n                  controls.groupby?.value,\n                  controls.percent_metrics?.value,\n                  controlState.value,\n                ]),\n              }),\n              rerender: ['groupby', 'percent_metrics'],\n            },\n          },\n          {\n            name: 'all_columns',\n            config: allColumnsControl,\n          },\n        ],\n        [\n          {\n            name: 'percent_metrics',\n            config: percentMetricsControl,\n          },\n        ],\n        ['adhoc_filters'],\n        [\n          {\n            name: 'timeseries_limit_metric',\n            override: {\n              visibility: isAggMode,\n              resetOnHide: false,\n            },\n          },\n          {\n            name: 'order_by_cols',\n            config: {\n              type: 'SelectControl',\n              label: t('Ordering'),\n              description: t('Order results by selected columns'),\n              multi: true,\n              default: [],\n              mapStateToProps: ({ datasource }) => ({\n                choices: datasource?.hasOwnProperty('order_by_choices')\n                  ? (datasource as Dataset)?.order_by_choices\n                  : datasource?.columns || [],\n              }),\n              visibility: isRawMode,\n              resetOnHide: false,\n            },\n          },\n        ],\n        [\n          {\n            name: 'server_pagination',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Server pagination'),\n              description: t(\n                'Enable server side pagination of results (experimental feature)',\n              ),\n              default: false,\n            },\n          },\n        ],\n        [\n          {\n            name: 'row_limit',\n            override: {\n              default: 1000,\n              visibility: ({ controls }: ControlPanelsContainerProps) =>\n                !controls?.server_pagination?.value,\n            },\n          },\n          {\n            name: 'server_page_length',\n            config: {\n              type: 'SelectControl',\n              freeForm: true,\n              label: t('Server Page Length'),\n              default: 10,\n              choices: PAGE_SIZE_OPTIONS,\n              description: t('Rows per page, 0 means no pagination'),\n              visibility: ({ controls }: ControlPanelsContainerProps) =>\n                Boolean(controls?.server_pagination?.value),\n            },\n          },\n        ],\n        [\n          {\n            name: 'order_desc',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Sort descending'),\n              default: true,\n              description: t(\n                'If enabled, this control sorts the results/values descending, otherwise it sorts the results ascending.',\n              ),\n              visibility: isAggMode,\n              resetOnHide: false,\n            },\n          },\n        ],\n        [\n          {\n            name: 'show_totals',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Show totals'),\n              default: false,\n              description: t(\n                'Show total aggregations of selected metrics. Note that row limit does not apply to the result.',\n              ),\n              visibility: isAggMode,\n              resetOnHide: false,\n            },\n          },\n        ],\n      ],\n    },\n    {\n      label: t('Options'),\n      expanded: true,\n      controlSetRows: [\n        [\n          {\n            name: 'table_timestamp_format',\n            config: {\n              type: 'SelectControl',\n              freeForm: true,\n              label: t('Timestamp format'),\n              default: smartDateFormatter.id,\n              renderTrigger: true,\n              clearable: false,\n              choices: D3_TIME_FORMAT_OPTIONS,\n              description: t('D3 time format for datetime columns'),\n            },\n          },\n        ],\n        [\n          {\n            name: 'page_length',\n            config: {\n              type: 'SelectControl',\n              freeForm: true,\n              renderTrigger: true,\n              label: t('Page length'),\n              default: null,\n              choices: PAGE_SIZE_OPTIONS,\n              description: t('Rows per page, 0 means no pagination'),\n              visibility: ({ controls }: ControlPanelsContainerProps) =>\n                !controls?.server_pagination?.value,\n            },\n          },\n          null,\n        ],\n        [\n          {\n            name: 'include_search',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Search box'),\n              renderTrigger: true,\n              default: false,\n              description: t('Whether to include a client-side search box'),\n            },\n          },\n          {\n            name: 'show_cell_bars',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Cell bars'),\n              renderTrigger: true,\n              default: true,\n              description: t(\n                'Whether to display a bar chart background in table columns',\n              ),\n            },\n          },\n        ],\n        [\n          {\n            name: 'align_pn',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Align +/-'),\n              renderTrigger: true,\n              default: false,\n              description: t(\n                'Whether to align background charts with both positive and negative values at 0',\n              ),\n            },\n          },\n          {\n            name: 'color_pn',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Color +/-'),\n              renderTrigger: true,\n              default: true,\n              description: t(\n                'Whether to colorize numeric values by whether they are positive or negative',\n              ),\n            },\n          },\n        ],\n        [\n          {\n            name: 'allow_rearrange_columns',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Allow columns to be rearranged'),\n              renderTrigger: true,\n              default: false,\n              description: t(\n                \"Allow end user to drag-and-drop column headers to rearrange them. Note their changes won't persist for the next time they open the chart.\",\n              ),\n            },\n          },\n        ],\n        [\n          {\n            name: 'allow_render_html',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Render columns in HTML format'),\n              renderTrigger: true,\n              default: true,\n              description: t('Render data in HTML format if applicable.'),\n            },\n          },\n        ],\n        [\n          {\n            name: 'column_config',\n            config: {\n              type: 'ColumnConfigControl',\n              label: t('Customize columns'),\n              description: t('Further customize how to display each column'),\n              width: 400,\n              height: 320,\n              renderTrigger: true,\n              shouldMapStateToProps() {\n                return true;\n              },\n              mapStateToProps(explore, _, chart) {\n                return {\n                  queryResponse: chart?.queriesResponse?.[0] as\n                    | ChartDataResponseResult\n                    | undefined,\n                };\n              },\n            },\n          },\n        ],\n        [\n          {\n            name: 'conditional_formatting',\n            config: {\n              type: 'ConditionalFormattingControl',\n              renderTrigger: true,\n              label: t('Conditional formatting'),\n              description: t(\n                'Apply conditional color formatting to numeric columns',\n              ),\n              shouldMapStateToProps() {\n                return true;\n              },\n              mapStateToProps(explore, _, chart) {\n                const verboseMap = explore?.datasource?.hasOwnProperty(\n                  'verbose_map',\n                )\n                  ? (explore?.datasource as Dataset)?.verbose_map\n                  : explore?.datasource?.columns ?? {};\n                const chartStatus = chart?.chartStatus;\n                const { colnames, coltypes } =\n                  chart?.queriesResponse?.[0] ?? {};\n                const numericColumns =\n                  Array.isArray(colnames) && Array.isArray(coltypes)\n                    ? colnames\n                        .filter(\n                          (colname: string, index: number) =>\n                            coltypes[index] === GenericDataType.Numeric,\n                        )\n                        .map(colname => ({\n                          value: colname,\n                          label: verboseMap[colname] ?? colname,\n                        }))\n                    : [];\n                return {\n                  removeIrrelevantConditions: chartStatus === 'success',\n                  columnOptions: numericColumns,\n                  verboseMap,\n                };\n              },\n            },\n          },\n        ],\n      ],\n    },\n  ],\n  formDataOverrides: formData => ({\n    ...formData,\n    metrics: getStandardizedControls().popAllMetrics(),\n    groupby: getStandardizedControls().popAllColumns(),\n  }),\n};\n\nexport default config;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}