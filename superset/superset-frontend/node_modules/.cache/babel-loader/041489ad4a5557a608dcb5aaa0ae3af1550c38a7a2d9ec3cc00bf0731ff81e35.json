{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { isColumnMeta } from '@superset-ui/chart-controls';\nimport { ensureIsArray, isPhysicalColumn } from '@superset-ui/core';\nconst getColumnNameOrAdhocColumn = (column) => {\n  if (isColumnMeta(column)) {\n    return column.column_name;\n  }\n  return column;\n};\nexport class OptionSelector {\n\n\n\n  constructor(options, multi, initialValues) {this.values = void 0;this.options = void 0;this.multi = void 0;\n    this.options = options;\n    this.multi = multi;\n    this.values = ensureIsArray(initialValues).\n    map((value) => {\n      if (value && isPhysicalColumn(value) && value in options) {\n        return options[value];\n      }\n      if (!isPhysicalColumn(value)) {\n        return value;\n      }\n      return null;\n    }).\n    filter(Boolean);\n  }\n  add(value) {\n    if (isPhysicalColumn(value) && value in this.options) {\n      this.values.push(this.options[value]);\n    } else\n    if (!isPhysicalColumn(value)) {\n      this.values.push(value);\n    }\n  }\n  del(idx) {\n    this.values.splice(idx, 1);\n  }\n  replace(idx, value) {\n    if (this.values[idx]) {\n      this.values[idx] = isPhysicalColumn(value) ? this.options[value] : value;\n    }\n  }\n  swap(a, b) {\n    [this.values[a], this.values[b]] = [this.values[b], this.values[a]];\n  }\n  has(value) {\n    return this.values.some((col) => {\n      if (isPhysicalColumn(value)) {\n        return col.column_name === value ||\n        col.label === value;\n      }\n      return col.column_name === value.label ||\n      col.label === value.label;\n    });\n  }\n  getValues() {\n    if (!this.multi) {\n      return this.values.length > 0 ?\n      getColumnNameOrAdhocColumn(this.values[0]) :\n      undefined;\n    }\n    return this.values.map(getColumnNameOrAdhocColumn);\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(getColumnNameOrAdhocColumn, \"getColumnNameOrAdhocColumn\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/utils/optionSelector.ts\");reactHotLoader.register(OptionSelector, \"OptionSelector\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/utils/optionSelector.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["isColumnMeta","ensureIsArray","isPhysicalColumn","getColumnNameOrAdhocColumn","column","column_name","OptionSelector","constructor","options","multi","initialValues","values","map","value","filter","Boolean","add","push","del","idx","splice","replace","swap","a","b","has","some","col","label","getValues","length","undefined","__reactstandin__regenerateByEval","key","code","eval","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/utils/optionSelector.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ColumnMeta, isColumnMeta } from '@superset-ui/chart-controls';\nimport {\n  AdhocColumn,\n  ensureIsArray,\n  QueryFormColumn,\n  isPhysicalColumn,\n} from '@superset-ui/core';\n\nconst getColumnNameOrAdhocColumn = (\n  column: ColumnMeta | AdhocColumn,\n): QueryFormColumn => {\n  if (isColumnMeta(column)) {\n    return column.column_name;\n  }\n  return column as AdhocColumn;\n};\n\nexport class OptionSelector {\n  values: (ColumnMeta | AdhocColumn)[];\n\n  options: Record<string, ColumnMeta>;\n\n  multi: boolean;\n\n  constructor(\n    options: Record<string, ColumnMeta>,\n    multi: boolean,\n    initialValues?: QueryFormColumn[] | QueryFormColumn | null,\n  ) {\n    this.options = options;\n    this.multi = multi;\n    this.values = ensureIsArray(initialValues)\n      .map(value => {\n        if (value && isPhysicalColumn(value) && value in options) {\n          return options[value];\n        }\n        if (!isPhysicalColumn(value)) {\n          return value;\n        }\n        return null;\n      })\n      .filter(Boolean) as ColumnMeta[];\n  }\n\n  add(value: QueryFormColumn) {\n    if (isPhysicalColumn(value) && value in this.options) {\n      this.values.push(this.options[value]);\n    } else if (!isPhysicalColumn(value)) {\n      this.values.push(value as AdhocColumn);\n    }\n  }\n\n  del(idx: number) {\n    this.values.splice(idx, 1);\n  }\n\n  replace(idx: number, value: QueryFormColumn) {\n    if (this.values[idx]) {\n      this.values[idx] = isPhysicalColumn(value) ? this.options[value] : value;\n    }\n  }\n\n  swap(a: number, b: number) {\n    [this.values[a], this.values[b]] = [this.values[b], this.values[a]];\n  }\n\n  has(value: QueryFormColumn): boolean {\n    return this.values.some(col => {\n      if (isPhysicalColumn(value)) {\n        return (\n          (col as ColumnMeta).column_name === value ||\n          (col as AdhocColumn).label === value\n        );\n      }\n      return (\n        (col as ColumnMeta).column_name === value.label ||\n        (col as AdhocColumn).label === value.label\n      );\n    });\n  }\n\n  getValues(): QueryFormColumn[] | QueryFormColumn | undefined {\n    if (!this.multi) {\n      return this.values.length > 0\n        ? getColumnNameOrAdhocColumn(this.values[0])\n        : undefined;\n    }\n    return this.values.map(getColumnNameOrAdhocColumn);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}