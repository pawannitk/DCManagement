{"ast":null,"code":"import { css as _css } from \"@emotion/react\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();function _EMOTION_STRINGIFIED_CSS_ERROR__() {return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport rison from 'rison';\nimport React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { Radio } from 'src/components/Radio';\nimport Card from 'src/components/Card';\nimport Alert from 'src/components/Alert';\nimport Badge from 'src/components/Badge';\nimport shortid from 'shortid';\nimport {\n  css,\n  isFeatureEnabled,\n  getCurrencySymbol,\n  ensureIsArray,\n  FeatureFlag,\n  styled,\n  SupersetClient,\n  t,\n  withTheme,\n  getClientErrorObject } from\n'@superset-ui/core';\nimport { Select, AsyncSelect, Row, Col } from 'src/components';\nimport { FormLabel } from 'src/components/Form';\nimport Button from 'src/components/Button';\nimport Tabs from 'src/components/Tabs';\nimport CertifiedBadge from 'src/components/CertifiedBadge';\nimport WarningIconWithTooltip from 'src/components/WarningIconWithTooltip';\nimport DatabaseSelector from 'src/components/DatabaseSelector';\nimport Label from 'src/components/Label';\nimport Loading from 'src/components/Loading';\nimport TableSelector from 'src/components/TableSelector';\nimport EditableTitle from 'src/components/EditableTitle';\nimport CheckboxControl from 'src/explore/components/controls/CheckboxControl';\nimport TextControl from 'src/explore/components/controls/TextControl';\nimport TextAreaControl from 'src/explore/components/controls/TextAreaControl';\nimport SpatialControl from 'src/explore/components/controls/SpatialControl';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport Icons from 'src/components/Icons';\nimport CurrencyControl from 'src/explore/components/controls/CurrencyControl';\nimport CollectionTable from './CollectionTable';\nimport Fieldset from './Fieldset';\nimport Field from './Field';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst DatasourceContainer = styled.div`\n  .change-warning {\n    margin: 16px 10px 0;\n    color: ${({ theme }) => theme.colors.warning.base};\n  }\n\n  .change-warning .bold {\n    font-weight: ${({ theme }) => theme.typography.weights.bold};\n  }\n\n  .form-group.has-feedback > .help-block {\n    margin-top: 8px;\n  }\n\n  .form-group.form-group-md {\n    margin-bottom: 8px;\n  }\n`;\n\nconst FlexRowContainer = styled.div`\n  align-items: center;\n  display: flex;\n\n  svg {\n    margin-right: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n\nconst StyledTableTabs = styled(Tabs)`\n  overflow: visible;\n  .ant-tabs-content-holder {\n    overflow: visible;\n  }\n`;\n\nconst StyledBadge = styled(Badge)`\n  .ant-badge-count {\n    line-height: ${({ theme }) => theme.gridUnit * 4}px;\n    height: ${({ theme }) => theme.gridUnit * 4}px;\n    margin-left: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n\nconst EditLockContainer = styled.div`\n  font-size: ${({ theme }) => theme.typography.sizes.s}px;\n  display: flex;\n  align-items: center;\n  a {\n    padding: 0 10px;\n  }\n`;\n\nconst ColumnButtonWrapper = styled.div`\n  text-align: right;\n  ${({ theme }) => `margin-bottom: ${theme.gridUnit * 2}px`}\n`;\n\nconst StyledLabelWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  span {\n    margin-right: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n\nconst StyledColumnsTabWrapper = styled.div`\n  .table > tbody > tr > td {\n    vertical-align: middle;\n  }\n\n  .ant-tag {\n    margin-top: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n\nconst StyledButtonWrapper = styled.span`\n  ${({ theme }) => `\n    margin-top: ${theme.gridUnit * 3}px;\n    margin-left: ${theme.gridUnit * 3}px;\n  `}\n`;\n\nconst checkboxGenerator = (d, onChange) =>\n___EmotionJSX(CheckboxControl, { value: d, onChange: onChange });\n\nconst DATA_TYPES = [\n{ value: 'STRING', label: t('STRING') },\n{ value: 'NUMERIC', label: t('NUMERIC') },\n{ value: 'DATETIME', label: t('DATETIME') },\n{ value: 'BOOLEAN', label: t('BOOLEAN') }];\n\n\nconst DATASOURCE_TYPES_ARR = [\n{ key: 'physical', label: t('Physical (table or view)') },\n{ key: 'virtual', label: t('Virtual (SQL)') }];\n\nconst DATASOURCE_TYPES = {};\nDATASOURCE_TYPES_ARR.forEach((o) => {\n  DATASOURCE_TYPES[o.key] = o;\n});var _ref = process.env.NODE_ENV === \"production\" ? { name: \"s5xdrg\", styles: \"display:flex;align-items:center\" } : { name: \"l0hchv-CollectionTabTitle\", styles: \"display:flex;align-items:center;label:CollectionTabTitle;\", map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", toString: _EMOTION_STRINGIFIED_CSS_ERROR__ };\n\nfunction CollectionTabTitle({ title, collection }) {\n  return (\n    ___EmotionJSX(\"div\", {\n      css: _ref,\n      \"data-test\": `collection-tab-${title}` },\n\n    title, ' ',\n    ___EmotionJSX(StyledBadge, { count: collection ? collection.length : 0, showZero: true })\n    ));\n\n}\n\nCollectionTabTitle.propTypes = {\n  title: PropTypes.string,\n  collection: PropTypes.array\n};\n\nfunction ColumnCollectionTable({\n  columns,\n  datasource,\n  onColumnsChange,\n  onDatasourceChange,\n  editableColumnName,\n  showExpression,\n  allowAddItem,\n  allowEditDataType,\n  itemGenerator,\n  columnLabelTooltips\n}) {\n  return (\n    ___EmotionJSX(CollectionTable, {\n      tableColumns:\n      isFeatureEnabled(FeatureFlag.EnableAdvancedDataTypes) ?\n      [\n      'column_name',\n      'advanced_data_type',\n      'type',\n      'is_dttm',\n      'main_dttm_col',\n      'filterable',\n      'groupby'] :\n\n      [\n      'column_name',\n      'type',\n      'is_dttm',\n      'main_dttm_col',\n      'filterable',\n      'groupby'],\n\n\n      sortColumns:\n      isFeatureEnabled(FeatureFlag.EnableAdvancedDataTypes) ?\n      [\n      'column_name',\n      'advanced_data_type',\n      'type',\n      'is_dttm',\n      'main_dttm_col',\n      'filterable',\n      'groupby'] :\n\n      [\n      'column_name',\n      'type',\n      'is_dttm',\n      'main_dttm_col',\n      'filterable',\n      'groupby'],\n\n\n      allowDeletes: true,\n      allowAddItem: allowAddItem,\n      itemGenerator: itemGenerator,\n      collection: columns,\n      columnLabelTooltips: columnLabelTooltips,\n      stickyHeader: true,\n      expandFieldset:\n      ___EmotionJSX(FormContainer, null,\n      ___EmotionJSX(Fieldset, { compact: true },\n      showExpression &&\n      ___EmotionJSX(Field, {\n        fieldKey: \"expression\",\n        label: t('SQL expression'),\n        control:\n        ___EmotionJSX(TextAreaControl, {\n          language: \"markdown\",\n          offerEditInModal: false,\n          resize: \"vertical\" }\n        ) }\n\n      ),\n\n      ___EmotionJSX(Field, {\n        fieldKey: \"verbose_name\",\n        label: t('Label'),\n        control:\n        ___EmotionJSX(TextControl, {\n          controlId: \"verbose_name\",\n          placeholder: t('Label') }\n        ) }\n\n      ),\n      ___EmotionJSX(Field, {\n        fieldKey: \"description\",\n        label: t('Description'),\n        control:\n        ___EmotionJSX(TextControl, {\n          controlId: \"description\",\n          placeholder: t('Description') }\n        ) }\n\n      ),\n      allowEditDataType &&\n      ___EmotionJSX(Field, {\n        fieldKey: \"type\",\n        label: t('Data type'),\n        control:\n        ___EmotionJSX(Select, {\n          ariaLabel: t('Data type'),\n          options: DATA_TYPES,\n          name: \"type\",\n          allowNewOptions: true,\n          allowClear: true }\n        ) }\n\n      ),\n\n      isFeatureEnabled(FeatureFlag.EnableAdvancedDataTypes) ?\n      ___EmotionJSX(Field, {\n        fieldKey: \"advanced_data_type\",\n        label: t('Advanced data type'),\n        control:\n        ___EmotionJSX(TextControl, {\n          controlId: \"advanced_data_type\",\n          placeholder: t('Advanced Data type') }\n        ) }\n\n      ) :\n\n      ___EmotionJSX(React.Fragment, null),\n\n      ___EmotionJSX(Field, {\n        fieldKey: \"python_date_format\",\n        label: t('Datetime format'),\n        description:\n        /* Note the fragmented translations may not work. */\n        ___EmotionJSX(\"div\", null,\n        t('The pattern of timestamp format. For strings use '),\n        ___EmotionJSX(\"a\", { href: \"https://docs.python.org/2/library/datetime.html#strftime-strptime-behavior\" },\n        t('Python datetime string pattern')\n        ),\n        t(' expression which needs to adhere to the '),\n        ___EmotionJSX(\"a\", { href: \"https://en.wikipedia.org/wiki/ISO_8601\" },\n        t('ISO 8601')\n        ),\n        t(` standard to ensure that the lexicographical ordering\n                      coincides with the chronological ordering. If the\n                      timestamp format does not adhere to the ISO 8601 standard\n                      you will need to define an expression and type for\n                      transforming the string into a date or timestamp. Note\n                      currently time zones are not supported. If time is stored\n                      in epoch format, put \\`epoch_s\\` or \\`epoch_ms\\`. If no pattern\n                      is specified we fall back to using the optional defaults on a per\n                      database/column name level via the extra parameter.`)\n        ),\n\n        control:\n        ___EmotionJSX(TextControl, {\n          controlId: \"python_date_format\",\n          placeholder: \"%Y-%m-%d\" }\n        ) }\n\n      ),\n      ___EmotionJSX(Field, {\n        fieldKey: \"certified_by\",\n        label: t('Certified By'),\n        description: t('Person or group that has certified this metric'),\n        control:\n        ___EmotionJSX(TextControl, {\n          controlId: \"certified\",\n          placeholder: t('Certified by') }\n        ) }\n\n      ),\n      ___EmotionJSX(Field, {\n        fieldKey: \"certification_details\",\n        label: t('Certification details'),\n        description: t('Details of the certification'),\n        control:\n        ___EmotionJSX(TextControl, {\n          controlId: \"certificationDetails\",\n          placeholder: t('Certification details') }\n        ) }\n\n      )\n      )\n      ),\n\n      columnLabels:\n      isFeatureEnabled(FeatureFlag.EnableAdvancedDataTypes) ?\n      {\n        column_name: t('Column'),\n        advanced_data_type: t('Advanced data type'),\n        type: t('Data type'),\n        groupby: t('Is dimension'),\n        is_dttm: t('Is temporal'),\n        main_dttm_col: t('Default datetime'),\n        filterable: t('Is filterable')\n      } :\n      {\n        column_name: t('Column'),\n        type: t('Data type'),\n        groupby: t('Is dimension'),\n        is_dttm: t('Is temporal'),\n        main_dttm_col: t('Default datetime'),\n        filterable: t('Is filterable')\n      },\n\n      onChange: onColumnsChange,\n      itemRenderers:\n      isFeatureEnabled(FeatureFlag.EnableAdvancedDataTypes) ?\n      {\n        column_name: (v, onItemChange, _, record) =>\n        editableColumnName ?\n        ___EmotionJSX(StyledLabelWrapper, null,\n        record.is_certified &&\n        ___EmotionJSX(CertifiedBadge, {\n          certifiedBy: record.certified_by,\n          details: record.certification_details }\n        ),\n\n        ___EmotionJSX(EditableTitle, {\n          canEdit: true,\n          title: v,\n          onSaveTitle: onItemChange }\n        )\n        ) :\n\n        ___EmotionJSX(StyledLabelWrapper, null,\n        record.is_certified &&\n        ___EmotionJSX(CertifiedBadge, {\n          certifiedBy: record.certified_by,\n          details: record.certification_details }\n        ),\n\n        v\n        ),\n\n        main_dttm_col: (value, _onItemChange, _label, record) => {\n          const checked = datasource.main_dttm_col === record.column_name;\n          const disabled = !columns.find(\n            (column) => column.column_name === record.column_name\n          ).is_dttm;\n          return (\n            ___EmotionJSX(Radio, {\n              \"data-test\": `radio-default-dttm-${record.column_name}`,\n              checked: checked,\n              disabled: disabled,\n              onChange: () =>\n              onDatasourceChange({\n                ...datasource,\n                main_dttm_col: record.column_name\n              }) }\n\n            ));\n\n        },\n        type: (d) => d ? ___EmotionJSX(Label, null, d) : null,\n        advanced_data_type: (d) =>\n        ___EmotionJSX(Label, { onChange: onColumnsChange }, d),\n\n        is_dttm: checkboxGenerator,\n        filterable: checkboxGenerator,\n        groupby: checkboxGenerator\n      } :\n      {\n        column_name: (v, onItemChange, _, record) =>\n        editableColumnName ?\n        ___EmotionJSX(StyledLabelWrapper, null,\n        record.is_certified &&\n        ___EmotionJSX(CertifiedBadge, {\n          certifiedBy: record.certified_by,\n          details: record.certification_details }\n        ),\n\n        ___EmotionJSX(TextControl, { value: v, onChange: onItemChange })\n        ) :\n\n        ___EmotionJSX(StyledLabelWrapper, null,\n        record.is_certified &&\n        ___EmotionJSX(CertifiedBadge, {\n          certifiedBy: record.certified_by,\n          details: record.certification_details }\n        ),\n\n        v\n        ),\n\n        main_dttm_col: (value, _onItemChange, _label, record) => {\n          const checked = datasource.main_dttm_col === record.column_name;\n          const disabled = !columns.find(\n            (column) => column.column_name === record.column_name\n          ).is_dttm;\n          return (\n            ___EmotionJSX(Radio, {\n              \"data-test\": `radio-default-dttm-${record.column_name}`,\n              checked: checked,\n              disabled: disabled,\n              onChange: () =>\n              onDatasourceChange({\n                ...datasource,\n                main_dttm_col: record.column_name\n              }) }\n\n            ));\n\n        },\n        type: (d) => d ? ___EmotionJSX(Label, null, d) : null,\n        is_dttm: checkboxGenerator,\n        filterable: checkboxGenerator,\n        groupby: checkboxGenerator\n      } }\n\n    ));\n\n}\nColumnCollectionTable.propTypes = {\n  columns: PropTypes.array.isRequired,\n  datasource: PropTypes.object.isRequired,\n  onColumnsChange: PropTypes.func.isRequired,\n  onDatasourceChange: PropTypes.func.isRequired,\n  editableColumnName: PropTypes.bool,\n  showExpression: PropTypes.bool,\n  allowAddItem: PropTypes.bool,\n  allowEditDataType: PropTypes.bool,\n  itemGenerator: PropTypes.func\n};\nColumnCollectionTable.defaultProps = {\n  editableColumnName: false,\n  showExpression: false,\n  allowAddItem: false,\n  allowEditDataType: false,\n  itemGenerator: () => ({\n    column_name: t('<new column>'),\n    filterable: true,\n    groupby: true\n  })\n};\n\nfunction StackedField({ label, formElement }) {\n  return (\n    ___EmotionJSX(\"div\", null,\n    ___EmotionJSX(\"div\", null,\n    ___EmotionJSX(\"strong\", null, label)\n    ),\n    ___EmotionJSX(\"div\", null, formElement)\n    ));\n\n}\n\nStackedField.propTypes = {\n  label: PropTypes.string,\n  formElement: PropTypes.node\n};\n\nfunction FormContainer({ children }) {\n  return ___EmotionJSX(Card, { padded: true }, children);\n}\n\nFormContainer.propTypes = {\n  children: PropTypes.node\n};\n\nconst propTypes = {\n  datasource: PropTypes.object.isRequired,\n  onChange: PropTypes.func,\n  addSuccessToast: PropTypes.func.isRequired,\n  addDangerToast: PropTypes.func.isRequired,\n  setIsEditing: PropTypes.func\n};\n\nconst defaultProps = {\n  onChange: () => {},\n  setIsEditing: () => {}\n};\n\nfunction OwnersSelector({ datasource, onChange }) {\n  const loadOptions = useCallback((search = '', page, pageSize) => {\n    const query = rison.encode({ filter: search, page, page_size: pageSize });\n    return SupersetClient.get({\n      endpoint: `/api/v1/dataset/related/owners?q=${query}`\n    }).then((response) => ({\n      data: response.json.result.\n      filter((item) => item.extra.active).\n      map((item) => ({\n        value: item.value,\n        label: item.text\n      })),\n      totalCount: response.json.count\n    }));\n  }, []);\n\n  return (\n    ___EmotionJSX(AsyncSelect, {\n      ariaLabel: t('Select owners'),\n      mode: \"multiple\",\n      name: \"owners\",\n      value: datasource.owners,\n      options: loadOptions,\n      onChange: onChange,\n      header: ___EmotionJSX(FormLabel, null, t('Owners')),\n      allowClear: true }\n    ));\n\n}__signature__(OwnersSelector, \"useCallback{loadOptions}\");var _ref2 = process.env.NODE_ENV === \"production\" ? { name: \"hkh81z\", styles: \"margin-top:8px\" } : { name: \"17jm38f-DatasourceEditor\", styles: \"margin-top:8px;label:DatasourceEditor;\", map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", toString: _EMOTION_STRINGIFIED_CSS_ERROR__ };var _ref3 = process.env.NODE_ENV === \"production\" ? { name: \"hkh81z\", styles: \"margin-top:8px\" } : { name: \"17jm38f-DatasourceEditor\", styles: \"margin-top:8px;label:DatasourceEditor;\", map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", toString: _EMOTION_STRINGIFIED_CSS_ERROR__ };\n\nclass DatasourceEditor extends React.PureComponent {\n  constructor(props) {var _props$datasource$met;\n    super(props);\n    this.state = {\n      datasource: {\n        ...props.datasource,\n        owners: props.datasource.owners.map((owner) => ({\n          value: owner.value || owner.id,\n          label: owner.label || `${owner.first_name} ${owner.last_name}`\n        })),\n        metrics: (_props$datasource$met = props.datasource.metrics) == null ? void 0 : _props$datasource$met.map((metric) => {\n          const {\n            certified_by: certifiedByMetric,\n            certification_details: certificationDetails\n          } = metric;\n          const {\n            certification: { details, certified_by: certifiedBy } = {},\n            warning_markdown: warningMarkdown\n          } = JSON.parse(metric.extra || '{}') || {};\n          return {\n            ...metric,\n            certification_details: certificationDetails || details,\n            warning_markdown: warningMarkdown || '',\n            certified_by: certifiedBy || certifiedByMetric\n          };\n        })\n      },\n      errors: [],\n      isSqla:\n      props.datasource.datasource_type === 'table' ||\n      props.datasource.type === 'table',\n      isEditMode: false,\n      databaseColumns: props.datasource.columns.filter((col) => !col.expression),\n      calculatedColumns: props.datasource.columns.filter(\n        (col) => !!col.expression\n      ),\n      metadataLoading: false,\n      activeTabKey: 0,\n      datasourceType: props.datasource.sql ?\n      DATASOURCE_TYPES.virtual.key :\n      DATASOURCE_TYPES.physical.key\n    };\n\n    this.onChange = this.onChange.bind(this);\n    this.onChangeEditMode = this.onChangeEditMode.bind(this);\n    this.onDatasourcePropChange = this.onDatasourcePropChange.bind(this);\n    this.onDatasourceChange = this.onDatasourceChange.bind(this);\n    this.tableChangeAndSyncMetadata =\n    this.tableChangeAndSyncMetadata.bind(this);\n    this.syncMetadata = this.syncMetadata.bind(this);\n    this.setColumns = this.setColumns.bind(this);\n    this.validateAndChange = this.validateAndChange.bind(this);\n    this.handleTabSelect = this.handleTabSelect.bind(this);\n    this.currencies = ensureIsArray(props.currencies).map((currencyCode) => ({\n      value: currencyCode,\n      label: `${getCurrencySymbol({\n        symbol: currencyCode\n      })} (${currencyCode})`\n    }));\n  }\n\n  onChange() {\n    // Emptying SQL if \"Physical\" radio button is selected\n    // Currently the logic to know whether the source is\n    // physical or virtual is based on whether SQL is empty or not.\n    const { datasourceType, datasource } = this.state;\n    const sql =\n    datasourceType === DATASOURCE_TYPES.physical.key ? '' : datasource.sql;\n    const newDatasource = {\n      ...this.state.datasource,\n      sql,\n      columns: [...this.state.databaseColumns, ...this.state.calculatedColumns]\n    };\n    this.props.onChange(newDatasource, this.state.errors);\n  }\n\n  onChangeEditMode() {\n    this.props.setIsEditing(!this.state.isEditMode);\n    this.setState((prevState) => ({ isEditMode: !prevState.isEditMode }));\n  }\n\n  onDatasourceChange(datasource, callback = this.validateAndChange) {\n    this.setState({ datasource }, callback);\n  }\n\n  onDatasourcePropChange(attr, value) {\n    if (value === undefined) return; // if value is undefined do not update state\n    const datasource = { ...this.state.datasource, [attr]: value };\n    this.setState(\n      (prevState) => ({\n        datasource: { ...prevState.datasource, [attr]: value }\n      }),\n      attr === 'table_name' ?\n      this.onDatasourceChange(datasource, this.tableChangeAndSyncMetadata) :\n      this.onDatasourceChange(datasource, this.validateAndChange)\n    );\n  }\n\n  onDatasourceTypeChange(datasourceType) {\n    this.setState({ datasourceType });\n  }\n\n  setColumns(obj) {\n    // update calculatedColumns or databaseColumns\n    this.setState(obj, this.validateAndChange);\n  }\n\n  validateAndChange() {\n    this.validate(this.onChange);\n  }\n\n  tableChangeAndSyncMetadata() {\n    this.validate(() => {\n      this.syncMetadata();\n      this.onChange();\n    });\n  }\n\n  updateColumns(cols) {\n    // cols: Array<{column_name: string; is_dttm: boolean; type: string;}>\n    const { databaseColumns } = this.state;\n    const databaseColumnNames = cols.map((col) => col.column_name);\n    const currentCols = databaseColumns.reduce(\n      (agg, col) => ({\n        ...agg,\n        [col.column_name]: col\n      }),\n      {}\n    );\n    const finalColumns = [];\n    const results = {\n      added: [],\n      modified: [],\n      removed: databaseColumns.\n      map((col) => col.column_name).\n      filter((col) => !databaseColumnNames.includes(col))\n    };\n    cols.forEach((col) => {\n      const currentCol = currentCols[col.column_name];\n      if (!currentCol) {\n        // new column\n        finalColumns.push({\n          id: shortid.generate(),\n          column_name: col.column_name,\n          type: col.type,\n          groupby: true,\n          filterable: true,\n          is_dttm: col.is_dttm\n        });\n        results.added.push(col.column_name);\n      } else if (\n      currentCol.type !== col.type ||\n      !currentCol.is_dttm && col.is_dttm)\n      {\n        // modified column\n        finalColumns.push({\n          ...currentCol,\n          type: col.type,\n          is_dttm: currentCol.is_dttm || col.is_dttm\n        });\n        results.modified.push(col.column_name);\n      } else {\n        // unchanged\n        finalColumns.push(currentCol);\n      }\n    });\n    if (\n    results.added.length ||\n    results.modified.length ||\n    results.removed.length)\n    {\n      this.setColumns({ databaseColumns: finalColumns });\n    }\n    return results;\n  }\n\n  syncMetadata() {\n    const { datasource } = this.state;\n    const params = {\n      datasource_type: datasource.type || datasource.datasource_type,\n      database_name:\n      datasource.database.database_name || datasource.database.name,\n      catalog_name: datasource.catalog,\n      schema_name: datasource.schema,\n      table_name: datasource.table_name,\n      normalize_columns: datasource.normalize_columns,\n      always_filter_main_dttm: datasource.always_filter_main_dttm\n    };\n    Object.entries(params).forEach(([key, value]) => {\n      // rison can't encode the undefined value\n      if (value === undefined) {\n        params[key] = null;\n      }\n    });\n    const endpoint = `/datasource/external_metadata_by_name/?q=${rison.encode_uri(\n      params\n    )}`;\n    this.setState({ metadataLoading: true });\n\n    SupersetClient.get({ endpoint }).\n    then(({ json }) => {\n      const results = this.updateColumns(json);\n      if (results.modified.length) {\n        this.props.addSuccessToast(\n          t('Modified columns: %s', results.modified.join(', '))\n        );\n      }\n      if (results.removed.length) {\n        this.props.addSuccessToast(\n          t('Removed columns: %s', results.removed.join(', '))\n        );\n      }\n      if (results.added.length) {\n        this.props.addSuccessToast(\n          t('New columns added: %s', results.added.join(', '))\n        );\n      }\n      this.props.addSuccessToast(t('Metadata has been synced'));\n      this.setState({ metadataLoading: false });\n    }).\n    catch((response) =>\n    getClientErrorObject(response).then(({ error, statusText }) => {\n      this.props.addDangerToast(\n        error || statusText || t('An error has occurred')\n      );\n      this.setState({ metadataLoading: false });\n    })\n    );\n  }\n\n  findDuplicates(arr, accessor) {\n    const seen = {};\n    const dups = [];\n    arr.forEach((obj) => {\n      const item = accessor(obj);\n      if (item in seen) {\n        dups.push(item);\n      } else {\n        seen[item] = null;\n      }\n    });\n    return dups;\n  }\n\n  validate(callback) {\n    let errors = [];\n    let dups;\n    const { datasource } = this.state;\n\n    // Looking for duplicate column_name\n    dups = this.findDuplicates(datasource.columns, (obj) => obj.column_name);\n    errors = errors.concat(\n      dups.map((name) => t('Column name [%s] is duplicated', name))\n    );\n\n    // Looking for duplicate metric_name\n    dups = this.findDuplicates(datasource.metrics, (obj) => obj.metric_name);\n    errors = errors.concat(\n      dups.map((name) => t('Metric name [%s] is duplicated', name))\n    );\n\n    // Making sure calculatedColumns have an expression defined\n    const noFilterCalcCols = this.state.calculatedColumns.filter(\n      (col) => !col.expression && !col.json\n    );\n    errors = errors.concat(\n      noFilterCalcCols.map((col) =>\n      t('Calculated column [%s] requires an expression', col.column_name)\n      )\n    );\n\n    // validate currency code\n    try {var _this$state$datasourc;\n      (_this$state$datasourc = this.state.datasource.metrics) == null ? void 0 : _this$state$datasourc.forEach(\n        (metric) => {var _metric$currency;return (\n            ((_metric$currency = metric.currency) == null ? void 0 : _metric$currency.symbol) &&\n            new Intl.NumberFormat('en-US', {\n              style: 'currency',\n              currency: metric.currency.symbol\n            }));}\n      );\n    } catch {\n      errors = errors.concat([t('Invalid currency code in saved metrics')]);\n    }\n\n    this.setState({ errors }, callback);\n  }\n\n  handleTabSelect(activeTabKey) {\n    this.setState({ activeTabKey });\n  }\n\n  sortMetrics(metrics) {\n    return metrics.sort(({ id: a }, { id: b }) => b - a);\n  }\n\n  renderSettingsFieldset() {\n    const { datasource } = this.state;\n    return (\n      ___EmotionJSX(Fieldset, {\n        title: t('Basic'),\n        item: datasource,\n        onChange: this.onDatasourceChange },\n\n      ___EmotionJSX(Field, {\n        fieldKey: \"description\",\n        label: t('Description'),\n        control:\n        ___EmotionJSX(TextAreaControl, {\n          language: \"markdown\",\n          offerEditInModal: false,\n          resize: \"vertical\" }\n        ) }\n\n      ),\n      ___EmotionJSX(Field, {\n        fieldKey: \"default_endpoint\",\n        label: t('Default URL'),\n        description: t(\n          'Default URL to redirect to when accessing from the dataset list page'\n        ),\n        control: ___EmotionJSX(TextControl, { controlId: \"default_endpoint\" }) }\n      ),\n      ___EmotionJSX(Field, {\n        inline: true,\n        fieldKey: \"filter_select_enabled\",\n        label: t('Autocomplete filters'),\n        description: t('Whether to populate autocomplete filters options'),\n        control: ___EmotionJSX(CheckboxControl, null) }\n      ),\n      this.state.isSqla &&\n      ___EmotionJSX(Field, {\n        fieldKey: \"fetch_values_predicate\",\n        label: t('Autocomplete query predicate'),\n        description: t(\n          'When using \"Autocomplete filters\", this can be used to improve performance ' +\n          'of the query fetching the values. Use this option to apply a ' +\n          'predicate (WHERE clause) to the query selecting the distinct ' +\n          'values from the table. Typically the intent would be to limit the scan ' +\n          'by applying a relative time filter on a partitioned or indexed time-related field.'\n        ),\n        control:\n        ___EmotionJSX(TextAreaControl, {\n          language: \"sql\",\n          controlId: \"fetch_values_predicate\",\n          minLines: 5,\n          resize: \"vertical\" }\n        ) }\n\n      ),\n\n      this.state.isSqla &&\n      ___EmotionJSX(Field, {\n        fieldKey: \"extra\",\n        label: t('Extra'),\n        description: t(\n          'Extra data to specify table metadata. Currently supports ' +\n          'metadata of the format: `{ \"certification\": { \"certified_by\": ' +\n          '\"Data Platform Team\", \"details\": \"This table is the source of truth.\" ' +\n          '}, \"warning_markdown\": \"This is a warning.\" }`.'\n        ),\n        control:\n        ___EmotionJSX(TextAreaControl, {\n          controlId: \"extra\",\n          language: \"json\",\n          offerEditInModal: false,\n          resize: \"vertical\" }\n        ) }\n\n      ),\n\n      ___EmotionJSX(OwnersSelector, {\n        datasource: datasource,\n        onChange: (newOwners) => {\n          this.onDatasourceChange({ ...datasource, owners: newOwners });\n        } }\n      )\n      ));\n\n  }\n\n  renderAdvancedFieldset() {\n    const { datasource } = this.state;\n    return (\n      ___EmotionJSX(Fieldset, {\n        title: t('Advanced'),\n        item: datasource,\n        onChange: this.onDatasourceChange },\n\n      ___EmotionJSX(Field, {\n        fieldKey: \"cache_timeout\",\n        label: t('Cache timeout'),\n        description: t(\n          'The duration of time in seconds before the cache is invalidated. Set to -1 to bypass the cache.'\n        ),\n        control: ___EmotionJSX(TextControl, { controlId: \"cache_timeout\" }) }\n      ),\n      ___EmotionJSX(Field, {\n        fieldKey: \"offset\",\n        label: t('Hours offset'),\n        control: ___EmotionJSX(TextControl, { controlId: \"offset\" }),\n        description: t(\n          'The number of hours, negative or positive, to shift the time column. This can be used to move UTC time to local time.'\n        ) }\n      ),\n      this.state.isSqla &&\n      ___EmotionJSX(Field, {\n        fieldKey: \"template_params\",\n        label: t('Template parameters'),\n        description: t(\n          'A set of parameters that become available in the query using Jinja templating syntax'\n        ),\n        control: ___EmotionJSX(TextControl, { controlId: \"template_params\" }) }\n      ),\n\n      ___EmotionJSX(Field, {\n        inline: true,\n        fieldKey: \"normalize_columns\",\n        label: t('Normalize column names'),\n        description: t(\n          'Allow column names to be changed to case insensitive format, if supported (e.g. Oracle, Snowflake).'\n        ),\n        control: ___EmotionJSX(CheckboxControl, { controlId: \"normalize_columns\" }) }\n      ),\n      ___EmotionJSX(Field, {\n        inline: true,\n        fieldKey: \"always_filter_main_dttm\",\n        label: t('Always filter main datetime column'),\n        description: t(\n          `When the secondary temporal columns are filtered, apply the same filter to the main datetime column.`\n        ),\n        control: ___EmotionJSX(CheckboxControl, { controlId: \"always_filter_main_dttm\" }) }\n      )\n      ));\n\n  }\n\n  renderSpatialTab() {\n    const { datasource } = this.state;\n    const { spatials, all_cols: allCols } = datasource;\n    return (\n      ___EmotionJSX(Tabs.TabPane, {\n        tab: ___EmotionJSX(CollectionTabTitle, { collection: spatials, title: t('Spatial') }),\n        key: 4 },\n\n      ___EmotionJSX(CollectionTable, {\n        tableColumns: ['name', 'config'],\n        onChange: this.onDatasourcePropChange.bind(this, 'spatials'),\n        itemGenerator: () => ({\n          name: t('<new spatial>'),\n          type: t('<no type>'),\n          config: null\n        }),\n        collection: spatials,\n        allowDeletes: true,\n        itemRenderers: {\n          name: (d, onChange) =>\n          ___EmotionJSX(EditableTitle, { canEdit: true, title: d, onSaveTitle: onChange }),\n\n          config: (v, onChange) =>\n          ___EmotionJSX(SpatialControl, { value: v, onChange: onChange, choices: allCols })\n\n        } }\n      )\n      ));\n\n  }\n\n  renderSourceFieldset(theme) {var _datasource$database, _datasource$database2, _datasource$database3;\n    const { datasource } = this.state;\n    return (\n      ___EmotionJSX(\"div\", null,\n      ___EmotionJSX(EditLockContainer, null,\n      ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, onClick: this.onChangeEditMode },\n      this.state.isEditMode ?\n      ___EmotionJSX(Icons.LockUnlocked, { iconColor: theme.colors.grayscale.base }) :\n\n      ___EmotionJSX(Icons.LockLocked, { iconColor: theme.colors.grayscale.base })\n\n      ),\n      !this.state.isEditMode &&\n      ___EmotionJSX(\"div\", null, t('Click the lock to make changes.')),\n\n      this.state.isEditMode &&\n      ___EmotionJSX(\"div\", null, t('Click the lock to prevent further changes.'))\n\n      ),\n      ___EmotionJSX(\"div\", { className: \"m-l-10 m-t-20 m-b-10\" },\n      DATASOURCE_TYPES_ARR.map((type) =>\n      ___EmotionJSX(Radio, {\n        key: type.key,\n        value: type.key,\n        inline: true,\n        onChange: this.onDatasourceTypeChange.bind(this, type.key),\n        checked: this.state.datasourceType === type.key,\n        disabled: !this.state.isEditMode },\n\n      type.label\n      )\n      )\n      ),\n      ___EmotionJSX(\"hr\", null),\n      ___EmotionJSX(Fieldset, { item: datasource, onChange: this.onDatasourceChange, compact: true },\n      this.state.datasourceType === DATASOURCE_TYPES.virtual.key &&\n      ___EmotionJSX(\"div\", null,\n      this.state.isSqla &&\n      ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(Col, { xs: 24, md: 12 },\n      ___EmotionJSX(Field, {\n        fieldKey: \"databaseSelector\",\n        label: t('virtual'),\n        control:\n        ___EmotionJSX(\"div\", { css: _ref2 },\n        ___EmotionJSX(DatabaseSelector, {\n          db: datasource == null ? void 0 : datasource.database,\n          catalog: datasource.catalog,\n          schema: datasource.schema,\n          onCatalogChange: (catalog) =>\n          this.state.isEditMode &&\n          this.onDatasourcePropChange('catalog', catalog),\n\n          onSchemaChange: (schema) =>\n          this.state.isEditMode &&\n          this.onDatasourcePropChange('schema', schema),\n\n          onDbChange: (database) =>\n          this.state.isEditMode &&\n          this.onDatasourcePropChange('database', database),\n\n          formMode: false,\n          handleError: this.props.addDangerToast,\n          readOnly: !this.state.isEditMode }\n        )\n        ) }\n\n      ),\n      ___EmotionJSX(\"div\", { css: /*#__PURE__*/_css({ width: 'calc(100% - 34px)', marginTop: -16 }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:DatasourceEditor;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\") },\n      ___EmotionJSX(Field, {\n        fieldKey: \"table_name\",\n        label: t('Name'),\n        control:\n        ___EmotionJSX(TextControl, {\n          controlId: \"table_name\",\n          onChange: (table) => {\n            this.onDatasourcePropChange('table_name', table);\n          },\n          placeholder: t('Dataset name'),\n          disabled: !this.state.isEditMode }\n        ) }\n\n      )\n      )\n      ),\n      ___EmotionJSX(Field, {\n        fieldKey: \"sql\",\n        label: t('SQL'),\n        description: t(\n          'When specifying SQL, the datasource acts as a view. ' +\n          'Superset will use this statement as a subquery while grouping and filtering ' +\n          'on the generated parent queries.'\n        ),\n        control:\n        ___EmotionJSX(TextAreaControl, {\n          language: \"sql\",\n          offerEditInModal: false,\n          minLines: 20,\n          maxLines: Infinity,\n          readOnly: !this.state.isEditMode,\n          resize: \"both\" }\n        ) }\n\n      )\n      )\n\n      ),\n\n      this.state.datasourceType === DATASOURCE_TYPES.physical.key &&\n      ___EmotionJSX(Col, { xs: 24, md: 12 },\n      this.state.isSqla &&\n      ___EmotionJSX(Field, {\n        fieldKey: \"tableSelector\",\n        label: t('Physical'),\n        control:\n        ___EmotionJSX(\"div\", { css: _ref3 },\n        ___EmotionJSX(TableSelector, {\n          clearable: false,\n          database: {\n            ...datasource.database,\n            database_name:\n            ((_datasource$database = datasource.database) == null ? void 0 : _datasource$database.database_name) || ((_datasource$database2 =\n            datasource.database) == null ? void 0 : _datasource$database2.name)\n          },\n          dbId: (_datasource$database3 = datasource.database) == null ? void 0 : _datasource$database3.id,\n          handleError: this.props.addDangerToast,\n          catalog: datasource.catalog,\n          schema: datasource.schema,\n          sqlLabMode: false,\n          tableValue: datasource.table_name,\n          onCatalogChange:\n          this.state.isEditMode ?\n          (catalog) =>\n          this.onDatasourcePropChange('catalog', catalog) :\n          undefined,\n\n          onSchemaChange:\n          this.state.isEditMode ?\n          (schema) =>\n          this.onDatasourcePropChange('schema', schema) :\n          undefined,\n\n          onDbChange:\n          this.state.isEditMode ?\n          (database) =>\n          this.onDatasourcePropChange(\n            'database',\n            database\n          ) :\n          undefined,\n\n          onTableSelectChange:\n          this.state.isEditMode ?\n          (table) =>\n          this.onDatasourcePropChange('table_name', table) :\n          undefined,\n\n          readOnly: !this.state.isEditMode }\n        )\n        ),\n\n        description: t(\n          'The pointer to a physical table (or view). Keep in mind that the chart is ' +\n          'associated to this Superset logical table, and this logical table points ' +\n          'the physical table referenced here.'\n        ) }\n      )\n\n      )\n\n      )\n      ));\n\n  }\n\n  renderErrors() {\n    if (this.state.errors.length > 0) {\n      return (\n        ___EmotionJSX(Alert, {\n          css: (theme) => ({ marginBottom: theme.gridUnit * 4 }),\n          type: \"error\",\n          message:\n          ___EmotionJSX(React.Fragment, null,\n          this.state.errors.map((err) =>\n          ___EmotionJSX(\"div\", { key: err }, err)\n          )\n          ) }\n\n        ));\n\n    }\n    return null;\n  }\n\n  renderMetricCollection() {\n    const { datasource } = this.state;\n    const { metrics } = datasource;\n    const sortedMetrics = metrics != null && metrics.length ? this.sortMetrics(metrics) : [];\n    return (\n      ___EmotionJSX(CollectionTable, {\n        tableColumns: ['metric_name', 'verbose_name', 'expression'],\n        sortColumns: ['metric_name', 'verbose_name', 'expression'],\n        columnLabels: {\n          metric_name: t('Metric Key'),\n          verbose_name: t('Label'),\n          expression: t('SQL expression')\n        },\n        columnLabelTooltips: {\n          metric_name: t(\n            'This field is used as a unique identifier to attach ' +\n            'the metric to charts. It is also used as the alias in the ' +\n            'SQL query.'\n          )\n        },\n        expandFieldset:\n        ___EmotionJSX(FormContainer, null,\n        ___EmotionJSX(Fieldset, { compact: true },\n        ___EmotionJSX(Field, {\n          fieldKey: \"description\",\n          label: t('Description'),\n          control:\n          ___EmotionJSX(TextControl, {\n            controlId: \"description\",\n            placeholder: t('Description') }\n          ) }\n\n        ),\n        ___EmotionJSX(Field, {\n          fieldKey: \"d3format\",\n          label: t('D3 format'),\n          control:\n          ___EmotionJSX(TextControl, { controlId: \"d3format\", placeholder: \"%y/%m/%d\" }) }\n\n        ),\n        ___EmotionJSX(Field, {\n          fieldKey: \"currency\",\n          label: t('Metric currency'),\n          control:\n          ___EmotionJSX(CurrencyControl, {\n            currencySelectOverrideProps: {\n              placeholder: t('Select or type currency symbol')\n            },\n            symbolSelectAdditionalStyles: css`\n                      max-width: 30%;\n                    ` }\n          ) }\n\n        ),\n        ___EmotionJSX(Field, {\n          label: t('Certified by'),\n          fieldKey: \"certified_by\",\n          description: t(\n            'Person or group that has certified this metric'\n          ),\n          control:\n          ___EmotionJSX(TextControl, {\n            controlId: \"certified_by\",\n            placeholder: t('Certified by') }\n          ) }\n\n        ),\n        ___EmotionJSX(Field, {\n          label: t('Certification details'),\n          fieldKey: \"certification_details\",\n          description: t('Details of the certification'),\n          control:\n          ___EmotionJSX(TextControl, {\n            controlId: \"certification_details\",\n            placeholder: t('Certification details') }\n          ) }\n\n        ),\n        ___EmotionJSX(Field, {\n          label: t('Warning'),\n          fieldKey: \"warning_markdown\",\n          description: t('Optional warning about use of this metric'),\n          control:\n          ___EmotionJSX(TextAreaControl, {\n            controlId: \"warning_markdown\",\n            language: \"markdown\",\n            offerEditInModal: false,\n            resize: \"vertical\" }\n          ) }\n\n        )\n        )\n        ),\n\n        collection: sortedMetrics,\n        allowAddItem: true,\n        onChange: this.onDatasourcePropChange.bind(this, 'metrics'),\n        itemGenerator: () => ({\n          metric_name: t('<new metric>'),\n          verbose_name: '',\n          expression: ''\n        }),\n        itemCellProps: {\n          expression: () => ({\n            width: '240px'\n          })\n        },\n        itemRenderers: {\n          metric_name: (v, onChange, _, record) =>\n          ___EmotionJSX(FlexRowContainer, null,\n          record.is_certified &&\n          ___EmotionJSX(CertifiedBadge, {\n            certifiedBy: record.certified_by,\n            details: record.certification_details }\n          ),\n\n          record.warning_markdown &&\n          ___EmotionJSX(WarningIconWithTooltip, {\n            warningMarkdown: record.warning_markdown }\n          ),\n\n          ___EmotionJSX(EditableTitle, { canEdit: true, title: v, onSaveTitle: onChange })\n          ),\n\n          verbose_name: (v, onChange) =>\n          ___EmotionJSX(TextControl, { canEdit: true, value: v, onChange: onChange }),\n\n          expression: (v, onChange) =>\n          ___EmotionJSX(TextAreaControl, {\n            canEdit: true,\n            initialValue: v,\n            onChange: onChange,\n            extraClasses: ['datasource-sql-expression'],\n            language: \"sql\",\n            offerEditInModal: false,\n            minLines: 5,\n            textAreaStyles: { minWidth: '200px', maxWidth: '450px' },\n            resize: \"both\" }\n          ),\n\n          description: (v, onChange, label) =>\n          ___EmotionJSX(StackedField, {\n            label: label,\n            formElement: ___EmotionJSX(TextControl, { value: v, onChange: onChange }) }\n          ),\n\n          d3format: (v, onChange, label) =>\n          ___EmotionJSX(StackedField, {\n            label: label,\n            formElement: ___EmotionJSX(TextControl, { value: v, onChange: onChange }) }\n          )\n\n        },\n        allowDeletes: true,\n        stickyHeader: true }\n      ));\n\n  }\n\n  render() {\n    const { datasource, activeTabKey } = this.state;\n    const { metrics } = datasource;\n    const sortedMetrics = metrics != null && metrics.length ? this.sortMetrics(metrics) : [];\n    const { theme } = this.props;\n\n    return (\n      ___EmotionJSX(DatasourceContainer, { \"data-test\": \"datasource-editor\" },\n      this.renderErrors(),\n      ___EmotionJSX(Alert, {\n        css: (theme) => ({ marginBottom: theme.gridUnit * 4 }),\n        type: \"warning\",\n        message:\n        ___EmotionJSX(React.Fragment, null,\n        ' ',\n        ___EmotionJSX(\"strong\", null, t('Be careful.'), \" \"),\n        t(\n          'Changing these settings will affect all charts using this dataset, including charts owned by other people.'\n        )\n        ) }\n\n      ),\n      ___EmotionJSX(StyledTableTabs, {\n        fullWidth: false,\n        id: \"table-tabs\",\n        \"data-test\": \"edit-dataset-tabs\",\n        onChange: this.handleTabSelect,\n        defaultActiveKey: activeTabKey },\n\n      ___EmotionJSX(Tabs.TabPane, { key: 0, tab: t('Source') },\n      this.renderSourceFieldset(theme)\n      ),\n      ___EmotionJSX(Tabs.TabPane, {\n        tab:\n        ___EmotionJSX(CollectionTabTitle, {\n          collection: sortedMetrics,\n          title: t('Metrics') }\n        ),\n\n        key: 1 },\n\n      this.renderMetricCollection()\n      ),\n      ___EmotionJSX(Tabs.TabPane, {\n        tab:\n        ___EmotionJSX(CollectionTabTitle, {\n          collection: this.state.databaseColumns,\n          title: t('Columns') }\n        ),\n\n        key: 2 },\n\n      ___EmotionJSX(StyledColumnsTabWrapper, null,\n      ___EmotionJSX(ColumnButtonWrapper, null,\n      ___EmotionJSX(StyledButtonWrapper, null,\n      ___EmotionJSX(Button, {\n        buttonSize: \"small\",\n        buttonStyle: \"tertiary\",\n        onClick: this.syncMetadata,\n        className: \"sync-from-source\",\n        disabled: this.state.isEditMode },\n\n      ___EmotionJSX(\"i\", { className: \"fa fa-database\" }), ' ',\n      t('Sync columns from source')\n      )\n      )\n      ),\n      ___EmotionJSX(ColumnCollectionTable, {\n        className: \"columns-table\",\n        columns: this.state.databaseColumns,\n        datasource: datasource,\n        onColumnsChange: (databaseColumns) =>\n        this.setColumns({ databaseColumns }),\n\n        onDatasourceChange: this.onDatasourceChange }\n      ),\n      this.state.metadataLoading && ___EmotionJSX(Loading, null)\n      )\n      ),\n      ___EmotionJSX(Tabs.TabPane, {\n        tab:\n        ___EmotionJSX(CollectionTabTitle, {\n          collection: this.state.calculatedColumns,\n          title: t('Calculated columns') }\n        ),\n\n        key: 3 },\n\n      ___EmotionJSX(StyledColumnsTabWrapper, null,\n      ___EmotionJSX(ColumnCollectionTable, {\n        columns: this.state.calculatedColumns,\n        onColumnsChange: (calculatedColumns) =>\n        this.setColumns({ calculatedColumns }),\n\n        columnLabelTooltips: {\n          column_name: t(\n            'This field is used as a unique identifier to attach ' +\n            'the calculated dimension to charts. It is also used ' +\n            'as the alias in the SQL query.'\n          )\n        },\n        onDatasourceChange: this.onDatasourceChange,\n        datasource: datasource,\n        editableColumnName: true,\n        showExpression: true,\n        allowAddItem: true,\n        allowEditDataType: true,\n        itemGenerator: () => ({\n          column_name: t('<new column>'),\n          filterable: true,\n          groupby: true,\n          expression: t('<enter SQL expression here>'),\n          __expanded: true\n        }) }\n      )\n      )\n      ),\n      ___EmotionJSX(Tabs.TabPane, { key: 4, tab: t('Settings') },\n      ___EmotionJSX(Row, { gutter: 16 },\n      ___EmotionJSX(Col, { xs: 24, md: 12 },\n      ___EmotionJSX(FormContainer, null, this.renderSettingsFieldset())\n      ),\n      ___EmotionJSX(Col, { xs: 24, md: 12 },\n      ___EmotionJSX(FormContainer, null, this.renderAdvancedFieldset())\n      )\n      )\n      )\n      )\n      ));\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\nDatasourceEditor.defaultProps = defaultProps;\nDatasourceEditor.propTypes = propTypes;\n\nconst DataSourceComponent = withTheme(DatasourceEditor);const _default =\n\nwithToasts(DataSourceComponent);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(DatasourceContainer, \"DatasourceContainer\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(FlexRowContainer, \"FlexRowContainer\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(StyledTableTabs, \"StyledTableTabs\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(StyledBadge, \"StyledBadge\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(EditLockContainer, \"EditLockContainer\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(ColumnButtonWrapper, \"ColumnButtonWrapper\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(StyledLabelWrapper, \"StyledLabelWrapper\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(StyledColumnsTabWrapper, \"StyledColumnsTabWrapper\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(StyledButtonWrapper, \"StyledButtonWrapper\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(checkboxGenerator, \"checkboxGenerator\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(DATA_TYPES, \"DATA_TYPES\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(DATASOURCE_TYPES_ARR, \"DATASOURCE_TYPES_ARR\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(DATASOURCE_TYPES, \"DATASOURCE_TYPES\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(CollectionTabTitle, \"CollectionTabTitle\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(ColumnCollectionTable, \"ColumnCollectionTable\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(StackedField, \"StackedField\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(FormContainer, \"FormContainer\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(propTypes, \"propTypes\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(OwnersSelector, \"OwnersSelector\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(DatasourceEditor, \"DatasourceEditor\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(DataSourceComponent, \"DataSourceComponent\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(_default, \"default\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["rison","React","useCallback","PropTypes","Radio","Card","Alert","Badge","shortid","css","isFeatureEnabled","getCurrencySymbol","ensureIsArray","FeatureFlag","styled","SupersetClient","t","withTheme","getClientErrorObject","Select","AsyncSelect","Row","Col","FormLabel","Button","Tabs","CertifiedBadge","WarningIconWithTooltip","DatabaseSelector","Label","Loading","TableSelector","EditableTitle","CheckboxControl","TextControl","TextAreaControl","SpatialControl","withToasts","Icons","CurrencyControl","CollectionTable","Fieldset","Field","jsx","___EmotionJSX","DatasourceContainer","div","theme","colors","warning","base","typography","weights","bold","FlexRowContainer","gridUnit","StyledTableTabs","StyledBadge","EditLockContainer","sizes","s","ColumnButtonWrapper","StyledLabelWrapper","StyledColumnsTabWrapper","StyledButtonWrapper","span","checkboxGenerator","d","onChange","value","DATA_TYPES","label","DATASOURCE_TYPES_ARR","key","DATASOURCE_TYPES","forEach","o","_ref","process","env","NODE_ENV","name","styles","map","toString","_EMOTION_STRINGIFIED_CSS_ERROR__","CollectionTabTitle","title","collection","count","length","showZero","propTypes","string","array","ColumnCollectionTable","columns","datasource","onColumnsChange","onDatasourceChange","editableColumnName","showExpression","allowAddItem","allowEditDataType","itemGenerator","columnLabelTooltips","tableColumns","EnableAdvancedDataTypes","sortColumns","allowDeletes","stickyHeader","expandFieldset","FormContainer","compact","fieldKey","control","language","offerEditInModal","resize","controlId","placeholder","ariaLabel","options","allowNewOptions","allowClear","Fragment","description","href","columnLabels","column_name","advanced_data_type","type","groupby","is_dttm","main_dttm_col","filterable","itemRenderers","v","onItemChange","_","record","is_certified","certifiedBy","certified_by","details","certification_details","canEdit","onSaveTitle","_onItemChange","_label","checked","disabled","find","column","isRequired","object","func","bool","defaultProps","StackedField","formElement","node","children","padded","addSuccessToast","addDangerToast","setIsEditing","OwnersSelector","loadOptions","search","page","pageSize","query","encode","filter","page_size","get","endpoint","then","response","data","json","result","item","extra","active","text","totalCount","mode","owners","header","__signature__","_ref2","_ref3","DatasourceEditor","PureComponent","constructor","props","_props$datasource$met","state","owner","id","first_name","last_name","metrics","metric","certifiedByMetric","certificationDetails","certification","warning_markdown","warningMarkdown","JSON","parse","errors","isSqla","datasource_type","isEditMode","databaseColumns","col","expression","calculatedColumns","metadataLoading","activeTabKey","datasourceType","sql","virtual","physical","bind","onChangeEditMode","onDatasourcePropChange","tableChangeAndSyncMetadata","syncMetadata","setColumns","validateAndChange","handleTabSelect","currencies","currencyCode","symbol","newDatasource","setState","prevState","callback","attr","undefined","onDatasourceTypeChange","obj","validate","updateColumns","cols","databaseColumnNames","currentCols","reduce","agg","finalColumns","results","added","modified","removed","includes","currentCol","push","generate","params","database_name","database","catalog_name","catalog","schema_name","schema","table_name","normalize_columns","always_filter_main_dttm","Object","entries","encode_uri","join","catch","error","statusText","findDuplicates","arr","accessor","seen","dups","concat","metric_name","noFilterCalcCols","_this$state$datasourc","_metric$currency","currency","Intl","NumberFormat","style","sortMetrics","sort","a","b","renderSettingsFieldset","inline","minLines","newOwners","renderAdvancedFieldset","renderSpatialTab","spatials","all_cols","allCols","TabPane","tab","config","choices","renderSourceFieldset","_datasource$database","_datasource$database2","_datasource$database3","role","tabIndex","onClick","LockUnlocked","iconColor","grayscale","LockLocked","className","xs","md","db","onCatalogChange","onSchemaChange","onDbChange","formMode","handleError","readOnly","_css","width","marginTop","table","maxLines","Infinity","clearable","dbId","sqlLabMode","tableValue","onTableSelectChange","renderErrors","marginBottom","message","err","renderMetricCollection","sortedMetrics","verbose_name","currencySelectOverrideProps","symbolSelectAdditionalStyles","itemCellProps","initialValue","extraClasses","textAreaStyles","minWidth","maxWidth","d3format","render","fullWidth","defaultActiveKey","buttonSize","buttonStyle","__expanded","gutter","__reactstandin__regenerateByEval","code","eval","DataSourceComponent","_default","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport rison from 'rison';\nimport React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { Radio } from 'src/components/Radio';\nimport Card from 'src/components/Card';\nimport Alert from 'src/components/Alert';\nimport Badge from 'src/components/Badge';\nimport shortid from 'shortid';\nimport {\n  css,\n  isFeatureEnabled,\n  getCurrencySymbol,\n  ensureIsArray,\n  FeatureFlag,\n  styled,\n  SupersetClient,\n  t,\n  withTheme,\n  getClientErrorObject,\n} from '@superset-ui/core';\nimport { Select, AsyncSelect, Row, Col } from 'src/components';\nimport { FormLabel } from 'src/components/Form';\nimport Button from 'src/components/Button';\nimport Tabs from 'src/components/Tabs';\nimport CertifiedBadge from 'src/components/CertifiedBadge';\nimport WarningIconWithTooltip from 'src/components/WarningIconWithTooltip';\nimport DatabaseSelector from 'src/components/DatabaseSelector';\nimport Label from 'src/components/Label';\nimport Loading from 'src/components/Loading';\nimport TableSelector from 'src/components/TableSelector';\nimport EditableTitle from 'src/components/EditableTitle';\nimport CheckboxControl from 'src/explore/components/controls/CheckboxControl';\nimport TextControl from 'src/explore/components/controls/TextControl';\nimport TextAreaControl from 'src/explore/components/controls/TextAreaControl';\nimport SpatialControl from 'src/explore/components/controls/SpatialControl';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport Icons from 'src/components/Icons';\nimport CurrencyControl from 'src/explore/components/controls/CurrencyControl';\nimport CollectionTable from './CollectionTable';\nimport Fieldset from './Fieldset';\nimport Field from './Field';\n\nconst DatasourceContainer = styled.div`\n  .change-warning {\n    margin: 16px 10px 0;\n    color: ${({ theme }) => theme.colors.warning.base};\n  }\n\n  .change-warning .bold {\n    font-weight: ${({ theme }) => theme.typography.weights.bold};\n  }\n\n  .form-group.has-feedback > .help-block {\n    margin-top: 8px;\n  }\n\n  .form-group.form-group-md {\n    margin-bottom: 8px;\n  }\n`;\n\nconst FlexRowContainer = styled.div`\n  align-items: center;\n  display: flex;\n\n  svg {\n    margin-right: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n\nconst StyledTableTabs = styled(Tabs)`\n  overflow: visible;\n  .ant-tabs-content-holder {\n    overflow: visible;\n  }\n`;\n\nconst StyledBadge = styled(Badge)`\n  .ant-badge-count {\n    line-height: ${({ theme }) => theme.gridUnit * 4}px;\n    height: ${({ theme }) => theme.gridUnit * 4}px;\n    margin-left: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n\nconst EditLockContainer = styled.div`\n  font-size: ${({ theme }) => theme.typography.sizes.s}px;\n  display: flex;\n  align-items: center;\n  a {\n    padding: 0 10px;\n  }\n`;\n\nconst ColumnButtonWrapper = styled.div`\n  text-align: right;\n  ${({ theme }) => `margin-bottom: ${theme.gridUnit * 2}px`}\n`;\n\nconst StyledLabelWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  span {\n    margin-right: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n\nconst StyledColumnsTabWrapper = styled.div`\n  .table > tbody > tr > td {\n    vertical-align: middle;\n  }\n\n  .ant-tag {\n    margin-top: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n\nconst StyledButtonWrapper = styled.span`\n  ${({ theme }) => `\n    margin-top: ${theme.gridUnit * 3}px;\n    margin-left: ${theme.gridUnit * 3}px;\n  `}\n`;\n\nconst checkboxGenerator = (d, onChange) => (\n  <CheckboxControl value={d} onChange={onChange} />\n);\nconst DATA_TYPES = [\n  { value: 'STRING', label: t('STRING') },\n  { value: 'NUMERIC', label: t('NUMERIC') },\n  { value: 'DATETIME', label: t('DATETIME') },\n  { value: 'BOOLEAN', label: t('BOOLEAN') },\n];\n\nconst DATASOURCE_TYPES_ARR = [\n  { key: 'physical', label: t('Physical (table or view)') },\n  { key: 'virtual', label: t('Virtual (SQL)') },\n];\nconst DATASOURCE_TYPES = {};\nDATASOURCE_TYPES_ARR.forEach(o => {\n  DATASOURCE_TYPES[o.key] = o;\n});\n\nfunction CollectionTabTitle({ title, collection }) {\n  return (\n    <div\n      css={{ display: 'flex', alignItems: 'center' }}\n      data-test={`collection-tab-${title}`}\n    >\n      {title}{' '}\n      <StyledBadge count={collection ? collection.length : 0} showZero />\n    </div>\n  );\n}\n\nCollectionTabTitle.propTypes = {\n  title: PropTypes.string,\n  collection: PropTypes.array,\n};\n\nfunction ColumnCollectionTable({\n  columns,\n  datasource,\n  onColumnsChange,\n  onDatasourceChange,\n  editableColumnName,\n  showExpression,\n  allowAddItem,\n  allowEditDataType,\n  itemGenerator,\n  columnLabelTooltips,\n}) {\n  return (\n    <CollectionTable\n      tableColumns={\n        isFeatureEnabled(FeatureFlag.EnableAdvancedDataTypes)\n          ? [\n              'column_name',\n              'advanced_data_type',\n              'type',\n              'is_dttm',\n              'main_dttm_col',\n              'filterable',\n              'groupby',\n            ]\n          : [\n              'column_name',\n              'type',\n              'is_dttm',\n              'main_dttm_col',\n              'filterable',\n              'groupby',\n            ]\n      }\n      sortColumns={\n        isFeatureEnabled(FeatureFlag.EnableAdvancedDataTypes)\n          ? [\n              'column_name',\n              'advanced_data_type',\n              'type',\n              'is_dttm',\n              'main_dttm_col',\n              'filterable',\n              'groupby',\n            ]\n          : [\n              'column_name',\n              'type',\n              'is_dttm',\n              'main_dttm_col',\n              'filterable',\n              'groupby',\n            ]\n      }\n      allowDeletes\n      allowAddItem={allowAddItem}\n      itemGenerator={itemGenerator}\n      collection={columns}\n      columnLabelTooltips={columnLabelTooltips}\n      stickyHeader\n      expandFieldset={\n        <FormContainer>\n          <Fieldset compact>\n            {showExpression && (\n              <Field\n                fieldKey=\"expression\"\n                label={t('SQL expression')}\n                control={\n                  <TextAreaControl\n                    language=\"markdown\"\n                    offerEditInModal={false}\n                    resize=\"vertical\"\n                  />\n                }\n              />\n            )}\n            <Field\n              fieldKey=\"verbose_name\"\n              label={t('Label')}\n              control={\n                <TextControl\n                  controlId=\"verbose_name\"\n                  placeholder={t('Label')}\n                />\n              }\n            />\n            <Field\n              fieldKey=\"description\"\n              label={t('Description')}\n              control={\n                <TextControl\n                  controlId=\"description\"\n                  placeholder={t('Description')}\n                />\n              }\n            />\n            {allowEditDataType && (\n              <Field\n                fieldKey=\"type\"\n                label={t('Data type')}\n                control={\n                  <Select\n                    ariaLabel={t('Data type')}\n                    options={DATA_TYPES}\n                    name=\"type\"\n                    allowNewOptions\n                    allowClear\n                  />\n                }\n              />\n            )}\n            {isFeatureEnabled(FeatureFlag.EnableAdvancedDataTypes) ? (\n              <Field\n                fieldKey=\"advanced_data_type\"\n                label={t('Advanced data type')}\n                control={\n                  <TextControl\n                    controlId=\"advanced_data_type\"\n                    placeholder={t('Advanced Data type')}\n                  />\n                }\n              />\n            ) : (\n              <></>\n            )}\n            <Field\n              fieldKey=\"python_date_format\"\n              label={t('Datetime format')}\n              description={\n                /* Note the fragmented translations may not work. */\n                <div>\n                  {t('The pattern of timestamp format. For strings use ')}\n                  <a href=\"https://docs.python.org/2/library/datetime.html#strftime-strptime-behavior\">\n                    {t('Python datetime string pattern')}\n                  </a>\n                  {t(' expression which needs to adhere to the ')}\n                  <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">\n                    {t('ISO 8601')}\n                  </a>\n                  {t(` standard to ensure that the lexicographical ordering\n                      coincides with the chronological ordering. If the\n                      timestamp format does not adhere to the ISO 8601 standard\n                      you will need to define an expression and type for\n                      transforming the string into a date or timestamp. Note\n                      currently time zones are not supported. If time is stored\n                      in epoch format, put \\`epoch_s\\` or \\`epoch_ms\\`. If no pattern\n                      is specified we fall back to using the optional defaults on a per\n                      database/column name level via the extra parameter.`)}\n                </div>\n              }\n              control={\n                <TextControl\n                  controlId=\"python_date_format\"\n                  placeholder=\"%Y-%m-%d\"\n                />\n              }\n            />\n            <Field\n              fieldKey=\"certified_by\"\n              label={t('Certified By')}\n              description={t('Person or group that has certified this metric')}\n              control={\n                <TextControl\n                  controlId=\"certified\"\n                  placeholder={t('Certified by')}\n                />\n              }\n            />\n            <Field\n              fieldKey=\"certification_details\"\n              label={t('Certification details')}\n              description={t('Details of the certification')}\n              control={\n                <TextControl\n                  controlId=\"certificationDetails\"\n                  placeholder={t('Certification details')}\n                />\n              }\n            />\n          </Fieldset>\n        </FormContainer>\n      }\n      columnLabels={\n        isFeatureEnabled(FeatureFlag.EnableAdvancedDataTypes)\n          ? {\n              column_name: t('Column'),\n              advanced_data_type: t('Advanced data type'),\n              type: t('Data type'),\n              groupby: t('Is dimension'),\n              is_dttm: t('Is temporal'),\n              main_dttm_col: t('Default datetime'),\n              filterable: t('Is filterable'),\n            }\n          : {\n              column_name: t('Column'),\n              type: t('Data type'),\n              groupby: t('Is dimension'),\n              is_dttm: t('Is temporal'),\n              main_dttm_col: t('Default datetime'),\n              filterable: t('Is filterable'),\n            }\n      }\n      onChange={onColumnsChange}\n      itemRenderers={\n        isFeatureEnabled(FeatureFlag.EnableAdvancedDataTypes)\n          ? {\n              column_name: (v, onItemChange, _, record) =>\n                editableColumnName ? (\n                  <StyledLabelWrapper>\n                    {record.is_certified && (\n                      <CertifiedBadge\n                        certifiedBy={record.certified_by}\n                        details={record.certification_details}\n                      />\n                    )}\n                    <EditableTitle\n                      canEdit\n                      title={v}\n                      onSaveTitle={onItemChange}\n                    />\n                  </StyledLabelWrapper>\n                ) : (\n                  <StyledLabelWrapper>\n                    {record.is_certified && (\n                      <CertifiedBadge\n                        certifiedBy={record.certified_by}\n                        details={record.certification_details}\n                      />\n                    )}\n                    {v}\n                  </StyledLabelWrapper>\n                ),\n              main_dttm_col: (value, _onItemChange, _label, record) => {\n                const checked = datasource.main_dttm_col === record.column_name;\n                const disabled = !columns.find(\n                  column => column.column_name === record.column_name,\n                ).is_dttm;\n                return (\n                  <Radio\n                    data-test={`radio-default-dttm-${record.column_name}`}\n                    checked={checked}\n                    disabled={disabled}\n                    onChange={() =>\n                      onDatasourceChange({\n                        ...datasource,\n                        main_dttm_col: record.column_name,\n                      })\n                    }\n                  />\n                );\n              },\n              type: d => (d ? <Label>{d}</Label> : null),\n              advanced_data_type: d => (\n                <Label onChange={onColumnsChange}>{d}</Label>\n              ),\n              is_dttm: checkboxGenerator,\n              filterable: checkboxGenerator,\n              groupby: checkboxGenerator,\n            }\n          : {\n              column_name: (v, onItemChange, _, record) =>\n                editableColumnName ? (\n                  <StyledLabelWrapper>\n                    {record.is_certified && (\n                      <CertifiedBadge\n                        certifiedBy={record.certified_by}\n                        details={record.certification_details}\n                      />\n                    )}\n                    <TextControl value={v} onChange={onItemChange} />\n                  </StyledLabelWrapper>\n                ) : (\n                  <StyledLabelWrapper>\n                    {record.is_certified && (\n                      <CertifiedBadge\n                        certifiedBy={record.certified_by}\n                        details={record.certification_details}\n                      />\n                    )}\n                    {v}\n                  </StyledLabelWrapper>\n                ),\n              main_dttm_col: (value, _onItemChange, _label, record) => {\n                const checked = datasource.main_dttm_col === record.column_name;\n                const disabled = !columns.find(\n                  column => column.column_name === record.column_name,\n                ).is_dttm;\n                return (\n                  <Radio\n                    data-test={`radio-default-dttm-${record.column_name}`}\n                    checked={checked}\n                    disabled={disabled}\n                    onChange={() =>\n                      onDatasourceChange({\n                        ...datasource,\n                        main_dttm_col: record.column_name,\n                      })\n                    }\n                  />\n                );\n              },\n              type: d => (d ? <Label>{d}</Label> : null),\n              is_dttm: checkboxGenerator,\n              filterable: checkboxGenerator,\n              groupby: checkboxGenerator,\n            }\n      }\n    />\n  );\n}\nColumnCollectionTable.propTypes = {\n  columns: PropTypes.array.isRequired,\n  datasource: PropTypes.object.isRequired,\n  onColumnsChange: PropTypes.func.isRequired,\n  onDatasourceChange: PropTypes.func.isRequired,\n  editableColumnName: PropTypes.bool,\n  showExpression: PropTypes.bool,\n  allowAddItem: PropTypes.bool,\n  allowEditDataType: PropTypes.bool,\n  itemGenerator: PropTypes.func,\n};\nColumnCollectionTable.defaultProps = {\n  editableColumnName: false,\n  showExpression: false,\n  allowAddItem: false,\n  allowEditDataType: false,\n  itemGenerator: () => ({\n    column_name: t('<new column>'),\n    filterable: true,\n    groupby: true,\n  }),\n};\n\nfunction StackedField({ label, formElement }) {\n  return (\n    <div>\n      <div>\n        <strong>{label}</strong>\n      </div>\n      <div>{formElement}</div>\n    </div>\n  );\n}\n\nStackedField.propTypes = {\n  label: PropTypes.string,\n  formElement: PropTypes.node,\n};\n\nfunction FormContainer({ children }) {\n  return <Card padded>{children}</Card>;\n}\n\nFormContainer.propTypes = {\n  children: PropTypes.node,\n};\n\nconst propTypes = {\n  datasource: PropTypes.object.isRequired,\n  onChange: PropTypes.func,\n  addSuccessToast: PropTypes.func.isRequired,\n  addDangerToast: PropTypes.func.isRequired,\n  setIsEditing: PropTypes.func,\n};\n\nconst defaultProps = {\n  onChange: () => {},\n  setIsEditing: () => {},\n};\n\nfunction OwnersSelector({ datasource, onChange }) {\n  const loadOptions = useCallback((search = '', page, pageSize) => {\n    const query = rison.encode({ filter: search, page, page_size: pageSize });\n    return SupersetClient.get({\n      endpoint: `/api/v1/dataset/related/owners?q=${query}`,\n    }).then(response => ({\n      data: response.json.result\n        .filter(item => item.extra.active)\n        .map(item => ({\n          value: item.value,\n          label: item.text,\n        })),\n      totalCount: response.json.count,\n    }));\n  }, []);\n\n  return (\n    <AsyncSelect\n      ariaLabel={t('Select owners')}\n      mode=\"multiple\"\n      name=\"owners\"\n      value={datasource.owners}\n      options={loadOptions}\n      onChange={onChange}\n      header={<FormLabel>{t('Owners')}</FormLabel>}\n      allowClear\n    />\n  );\n}\n\nclass DatasourceEditor extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      datasource: {\n        ...props.datasource,\n        owners: props.datasource.owners.map(owner => ({\n          value: owner.value || owner.id,\n          label: owner.label || `${owner.first_name} ${owner.last_name}`,\n        })),\n        metrics: props.datasource.metrics?.map(metric => {\n          const {\n            certified_by: certifiedByMetric,\n            certification_details: certificationDetails,\n          } = metric;\n          const {\n            certification: { details, certified_by: certifiedBy } = {},\n            warning_markdown: warningMarkdown,\n          } = JSON.parse(metric.extra || '{}') || {};\n          return {\n            ...metric,\n            certification_details: certificationDetails || details,\n            warning_markdown: warningMarkdown || '',\n            certified_by: certifiedBy || certifiedByMetric,\n          };\n        }),\n      },\n      errors: [],\n      isSqla:\n        props.datasource.datasource_type === 'table' ||\n        props.datasource.type === 'table',\n      isEditMode: false,\n      databaseColumns: props.datasource.columns.filter(col => !col.expression),\n      calculatedColumns: props.datasource.columns.filter(\n        col => !!col.expression,\n      ),\n      metadataLoading: false,\n      activeTabKey: 0,\n      datasourceType: props.datasource.sql\n        ? DATASOURCE_TYPES.virtual.key\n        : DATASOURCE_TYPES.physical.key,\n    };\n\n    this.onChange = this.onChange.bind(this);\n    this.onChangeEditMode = this.onChangeEditMode.bind(this);\n    this.onDatasourcePropChange = this.onDatasourcePropChange.bind(this);\n    this.onDatasourceChange = this.onDatasourceChange.bind(this);\n    this.tableChangeAndSyncMetadata =\n      this.tableChangeAndSyncMetadata.bind(this);\n    this.syncMetadata = this.syncMetadata.bind(this);\n    this.setColumns = this.setColumns.bind(this);\n    this.validateAndChange = this.validateAndChange.bind(this);\n    this.handleTabSelect = this.handleTabSelect.bind(this);\n    this.currencies = ensureIsArray(props.currencies).map(currencyCode => ({\n      value: currencyCode,\n      label: `${getCurrencySymbol({\n        symbol: currencyCode,\n      })} (${currencyCode})`,\n    }));\n  }\n\n  onChange() {\n    // Emptying SQL if \"Physical\" radio button is selected\n    // Currently the logic to know whether the source is\n    // physical or virtual is based on whether SQL is empty or not.\n    const { datasourceType, datasource } = this.state;\n    const sql =\n      datasourceType === DATASOURCE_TYPES.physical.key ? '' : datasource.sql;\n    const newDatasource = {\n      ...this.state.datasource,\n      sql,\n      columns: [...this.state.databaseColumns, ...this.state.calculatedColumns],\n    };\n    this.props.onChange(newDatasource, this.state.errors);\n  }\n\n  onChangeEditMode() {\n    this.props.setIsEditing(!this.state.isEditMode);\n    this.setState(prevState => ({ isEditMode: !prevState.isEditMode }));\n  }\n\n  onDatasourceChange(datasource, callback = this.validateAndChange) {\n    this.setState({ datasource }, callback);\n  }\n\n  onDatasourcePropChange(attr, value) {\n    if (value === undefined) return; // if value is undefined do not update state\n    const datasource = { ...this.state.datasource, [attr]: value };\n    this.setState(\n      prevState => ({\n        datasource: { ...prevState.datasource, [attr]: value },\n      }),\n      attr === 'table_name'\n        ? this.onDatasourceChange(datasource, this.tableChangeAndSyncMetadata)\n        : this.onDatasourceChange(datasource, this.validateAndChange),\n    );\n  }\n\n  onDatasourceTypeChange(datasourceType) {\n    this.setState({ datasourceType });\n  }\n\n  setColumns(obj) {\n    // update calculatedColumns or databaseColumns\n    this.setState(obj, this.validateAndChange);\n  }\n\n  validateAndChange() {\n    this.validate(this.onChange);\n  }\n\n  tableChangeAndSyncMetadata() {\n    this.validate(() => {\n      this.syncMetadata();\n      this.onChange();\n    });\n  }\n\n  updateColumns(cols) {\n    // cols: Array<{column_name: string; is_dttm: boolean; type: string;}>\n    const { databaseColumns } = this.state;\n    const databaseColumnNames = cols.map(col => col.column_name);\n    const currentCols = databaseColumns.reduce(\n      (agg, col) => ({\n        ...agg,\n        [col.column_name]: col,\n      }),\n      {},\n    );\n    const finalColumns = [];\n    const results = {\n      added: [],\n      modified: [],\n      removed: databaseColumns\n        .map(col => col.column_name)\n        .filter(col => !databaseColumnNames.includes(col)),\n    };\n    cols.forEach(col => {\n      const currentCol = currentCols[col.column_name];\n      if (!currentCol) {\n        // new column\n        finalColumns.push({\n          id: shortid.generate(),\n          column_name: col.column_name,\n          type: col.type,\n          groupby: true,\n          filterable: true,\n          is_dttm: col.is_dttm,\n        });\n        results.added.push(col.column_name);\n      } else if (\n        currentCol.type !== col.type ||\n        (!currentCol.is_dttm && col.is_dttm)\n      ) {\n        // modified column\n        finalColumns.push({\n          ...currentCol,\n          type: col.type,\n          is_dttm: currentCol.is_dttm || col.is_dttm,\n        });\n        results.modified.push(col.column_name);\n      } else {\n        // unchanged\n        finalColumns.push(currentCol);\n      }\n    });\n    if (\n      results.added.length ||\n      results.modified.length ||\n      results.removed.length\n    ) {\n      this.setColumns({ databaseColumns: finalColumns });\n    }\n    return results;\n  }\n\n  syncMetadata() {\n    const { datasource } = this.state;\n    const params = {\n      datasource_type: datasource.type || datasource.datasource_type,\n      database_name:\n        datasource.database.database_name || datasource.database.name,\n      catalog_name: datasource.catalog,\n      schema_name: datasource.schema,\n      table_name: datasource.table_name,\n      normalize_columns: datasource.normalize_columns,\n      always_filter_main_dttm: datasource.always_filter_main_dttm,\n    };\n    Object.entries(params).forEach(([key, value]) => {\n      // rison can't encode the undefined value\n      if (value === undefined) {\n        params[key] = null;\n      }\n    });\n    const endpoint = `/datasource/external_metadata_by_name/?q=${rison.encode_uri(\n      params,\n    )}`;\n    this.setState({ metadataLoading: true });\n\n    SupersetClient.get({ endpoint })\n      .then(({ json }) => {\n        const results = this.updateColumns(json);\n        if (results.modified.length) {\n          this.props.addSuccessToast(\n            t('Modified columns: %s', results.modified.join(', ')),\n          );\n        }\n        if (results.removed.length) {\n          this.props.addSuccessToast(\n            t('Removed columns: %s', results.removed.join(', ')),\n          );\n        }\n        if (results.added.length) {\n          this.props.addSuccessToast(\n            t('New columns added: %s', results.added.join(', ')),\n          );\n        }\n        this.props.addSuccessToast(t('Metadata has been synced'));\n        this.setState({ metadataLoading: false });\n      })\n      .catch(response =>\n        getClientErrorObject(response).then(({ error, statusText }) => {\n          this.props.addDangerToast(\n            error || statusText || t('An error has occurred'),\n          );\n          this.setState({ metadataLoading: false });\n        }),\n      );\n  }\n\n  findDuplicates(arr, accessor) {\n    const seen = {};\n    const dups = [];\n    arr.forEach(obj => {\n      const item = accessor(obj);\n      if (item in seen) {\n        dups.push(item);\n      } else {\n        seen[item] = null;\n      }\n    });\n    return dups;\n  }\n\n  validate(callback) {\n    let errors = [];\n    let dups;\n    const { datasource } = this.state;\n\n    // Looking for duplicate column_name\n    dups = this.findDuplicates(datasource.columns, obj => obj.column_name);\n    errors = errors.concat(\n      dups.map(name => t('Column name [%s] is duplicated', name)),\n    );\n\n    // Looking for duplicate metric_name\n    dups = this.findDuplicates(datasource.metrics, obj => obj.metric_name);\n    errors = errors.concat(\n      dups.map(name => t('Metric name [%s] is duplicated', name)),\n    );\n\n    // Making sure calculatedColumns have an expression defined\n    const noFilterCalcCols = this.state.calculatedColumns.filter(\n      col => !col.expression && !col.json,\n    );\n    errors = errors.concat(\n      noFilterCalcCols.map(col =>\n        t('Calculated column [%s] requires an expression', col.column_name),\n      ),\n    );\n\n    // validate currency code\n    try {\n      this.state.datasource.metrics?.forEach(\n        metric =>\n          metric.currency?.symbol &&\n          new Intl.NumberFormat('en-US', {\n            style: 'currency',\n            currency: metric.currency.symbol,\n          }),\n      );\n    } catch {\n      errors = errors.concat([t('Invalid currency code in saved metrics')]);\n    }\n\n    this.setState({ errors }, callback);\n  }\n\n  handleTabSelect(activeTabKey) {\n    this.setState({ activeTabKey });\n  }\n\n  sortMetrics(metrics) {\n    return metrics.sort(({ id: a }, { id: b }) => b - a);\n  }\n\n  renderSettingsFieldset() {\n    const { datasource } = this.state;\n    return (\n      <Fieldset\n        title={t('Basic')}\n        item={datasource}\n        onChange={this.onDatasourceChange}\n      >\n        <Field\n          fieldKey=\"description\"\n          label={t('Description')}\n          control={\n            <TextAreaControl\n              language=\"markdown\"\n              offerEditInModal={false}\n              resize=\"vertical\"\n            />\n          }\n        />\n        <Field\n          fieldKey=\"default_endpoint\"\n          label={t('Default URL')}\n          description={t(\n            'Default URL to redirect to when accessing from the dataset list page',\n          )}\n          control={<TextControl controlId=\"default_endpoint\" />}\n        />\n        <Field\n          inline\n          fieldKey=\"filter_select_enabled\"\n          label={t('Autocomplete filters')}\n          description={t('Whether to populate autocomplete filters options')}\n          control={<CheckboxControl />}\n        />\n        {this.state.isSqla && (\n          <Field\n            fieldKey=\"fetch_values_predicate\"\n            label={t('Autocomplete query predicate')}\n            description={t(\n              'When using \"Autocomplete filters\", this can be used to improve performance ' +\n                'of the query fetching the values. Use this option to apply a ' +\n                'predicate (WHERE clause) to the query selecting the distinct ' +\n                'values from the table. Typically the intent would be to limit the scan ' +\n                'by applying a relative time filter on a partitioned or indexed time-related field.',\n            )}\n            control={\n              <TextAreaControl\n                language=\"sql\"\n                controlId=\"fetch_values_predicate\"\n                minLines={5}\n                resize=\"vertical\"\n              />\n            }\n          />\n        )}\n        {this.state.isSqla && (\n          <Field\n            fieldKey=\"extra\"\n            label={t('Extra')}\n            description={t(\n              'Extra data to specify table metadata. Currently supports ' +\n                'metadata of the format: `{ \"certification\": { \"certified_by\": ' +\n                '\"Data Platform Team\", \"details\": \"This table is the source of truth.\" ' +\n                '}, \"warning_markdown\": \"This is a warning.\" }`.',\n            )}\n            control={\n              <TextAreaControl\n                controlId=\"extra\"\n                language=\"json\"\n                offerEditInModal={false}\n                resize=\"vertical\"\n              />\n            }\n          />\n        )}\n        <OwnersSelector\n          datasource={datasource}\n          onChange={newOwners => {\n            this.onDatasourceChange({ ...datasource, owners: newOwners });\n          }}\n        />\n      </Fieldset>\n    );\n  }\n\n  renderAdvancedFieldset() {\n    const { datasource } = this.state;\n    return (\n      <Fieldset\n        title={t('Advanced')}\n        item={datasource}\n        onChange={this.onDatasourceChange}\n      >\n        <Field\n          fieldKey=\"cache_timeout\"\n          label={t('Cache timeout')}\n          description={t(\n            'The duration of time in seconds before the cache is invalidated. Set to -1 to bypass the cache.',\n          )}\n          control={<TextControl controlId=\"cache_timeout\" />}\n        />\n        <Field\n          fieldKey=\"offset\"\n          label={t('Hours offset')}\n          control={<TextControl controlId=\"offset\" />}\n          description={t(\n            'The number of hours, negative or positive, to shift the time column. This can be used to move UTC time to local time.',\n          )}\n        />\n        {this.state.isSqla && (\n          <Field\n            fieldKey=\"template_params\"\n            label={t('Template parameters')}\n            description={t(\n              'A set of parameters that become available in the query using Jinja templating syntax',\n            )}\n            control={<TextControl controlId=\"template_params\" />}\n          />\n        )}\n        <Field\n          inline\n          fieldKey=\"normalize_columns\"\n          label={t('Normalize column names')}\n          description={t(\n            'Allow column names to be changed to case insensitive format, if supported (e.g. Oracle, Snowflake).',\n          )}\n          control={<CheckboxControl controlId=\"normalize_columns\" />}\n        />\n        <Field\n          inline\n          fieldKey=\"always_filter_main_dttm\"\n          label={t('Always filter main datetime column')}\n          description={t(\n            `When the secondary temporal columns are filtered, apply the same filter to the main datetime column.`,\n          )}\n          control={<CheckboxControl controlId=\"always_filter_main_dttm\" />}\n        />\n      </Fieldset>\n    );\n  }\n\n  renderSpatialTab() {\n    const { datasource } = this.state;\n    const { spatials, all_cols: allCols } = datasource;\n    return (\n      <Tabs.TabPane\n        tab={<CollectionTabTitle collection={spatials} title={t('Spatial')} />}\n        key={4}\n      >\n        <CollectionTable\n          tableColumns={['name', 'config']}\n          onChange={this.onDatasourcePropChange.bind(this, 'spatials')}\n          itemGenerator={() => ({\n            name: t('<new spatial>'),\n            type: t('<no type>'),\n            config: null,\n          })}\n          collection={spatials}\n          allowDeletes\n          itemRenderers={{\n            name: (d, onChange) => (\n              <EditableTitle canEdit title={d} onSaveTitle={onChange} />\n            ),\n            config: (v, onChange) => (\n              <SpatialControl value={v} onChange={onChange} choices={allCols} />\n            ),\n          }}\n        />\n      </Tabs.TabPane>\n    );\n  }\n\n  renderSourceFieldset(theme) {\n    const { datasource } = this.state;\n    return (\n      <div>\n        <EditLockContainer>\n          <span role=\"button\" tabIndex={0} onClick={this.onChangeEditMode}>\n            {this.state.isEditMode ? (\n              <Icons.LockUnlocked iconColor={theme.colors.grayscale.base} />\n            ) : (\n              <Icons.LockLocked iconColor={theme.colors.grayscale.base} />\n            )}\n          </span>\n          {!this.state.isEditMode && (\n            <div>{t('Click the lock to make changes.')}</div>\n          )}\n          {this.state.isEditMode && (\n            <div>{t('Click the lock to prevent further changes.')}</div>\n          )}\n        </EditLockContainer>\n        <div className=\"m-l-10 m-t-20 m-b-10\">\n          {DATASOURCE_TYPES_ARR.map(type => (\n            <Radio\n              key={type.key}\n              value={type.key}\n              inline\n              onChange={this.onDatasourceTypeChange.bind(this, type.key)}\n              checked={this.state.datasourceType === type.key}\n              disabled={!this.state.isEditMode}\n            >\n              {type.label}\n            </Radio>\n          ))}\n        </div>\n        <hr />\n        <Fieldset item={datasource} onChange={this.onDatasourceChange} compact>\n          {this.state.datasourceType === DATASOURCE_TYPES.virtual.key && (\n            <div>\n              {this.state.isSqla && (\n                <>\n                  <Col xs={24} md={12}>\n                    <Field\n                      fieldKey=\"databaseSelector\"\n                      label={t('virtual')}\n                      control={\n                        <div css={{ marginTop: 8 }}>\n                          <DatabaseSelector\n                            db={datasource?.database}\n                            catalog={datasource.catalog}\n                            schema={datasource.schema}\n                            onCatalogChange={catalog =>\n                              this.state.isEditMode &&\n                              this.onDatasourcePropChange('catalog', catalog)\n                            }\n                            onSchemaChange={schema =>\n                              this.state.isEditMode &&\n                              this.onDatasourcePropChange('schema', schema)\n                            }\n                            onDbChange={database =>\n                              this.state.isEditMode &&\n                              this.onDatasourcePropChange('database', database)\n                            }\n                            formMode={false}\n                            handleError={this.props.addDangerToast}\n                            readOnly={!this.state.isEditMode}\n                          />\n                        </div>\n                      }\n                    />\n                    <div css={{ width: 'calc(100% - 34px)', marginTop: -16 }}>\n                      <Field\n                        fieldKey=\"table_name\"\n                        label={t('Name')}\n                        control={\n                          <TextControl\n                            controlId=\"table_name\"\n                            onChange={table => {\n                              this.onDatasourcePropChange('table_name', table);\n                            }}\n                            placeholder={t('Dataset name')}\n                            disabled={!this.state.isEditMode}\n                          />\n                        }\n                      />\n                    </div>\n                  </Col>\n                  <Field\n                    fieldKey=\"sql\"\n                    label={t('SQL')}\n                    description={t(\n                      'When specifying SQL, the datasource acts as a view. ' +\n                        'Superset will use this statement as a subquery while grouping and filtering ' +\n                        'on the generated parent queries.',\n                    )}\n                    control={\n                      <TextAreaControl\n                        language=\"sql\"\n                        offerEditInModal={false}\n                        minLines={20}\n                        maxLines={Infinity}\n                        readOnly={!this.state.isEditMode}\n                        resize=\"both\"\n                      />\n                    }\n                  />\n                </>\n              )}\n            </div>\n          )}\n          {this.state.datasourceType === DATASOURCE_TYPES.physical.key && (\n            <Col xs={24} md={12}>\n              {this.state.isSqla && (\n                <Field\n                  fieldKey=\"tableSelector\"\n                  label={t('Physical')}\n                  control={\n                    <div css={{ marginTop: 8 }}>\n                      <TableSelector\n                        clearable={false}\n                        database={{\n                          ...datasource.database,\n                          database_name:\n                            datasource.database?.database_name ||\n                            datasource.database?.name,\n                        }}\n                        dbId={datasource.database?.id}\n                        handleError={this.props.addDangerToast}\n                        catalog={datasource.catalog}\n                        schema={datasource.schema}\n                        sqlLabMode={false}\n                        tableValue={datasource.table_name}\n                        onCatalogChange={\n                          this.state.isEditMode\n                            ? catalog =>\n                                this.onDatasourcePropChange('catalog', catalog)\n                            : undefined\n                        }\n                        onSchemaChange={\n                          this.state.isEditMode\n                            ? schema =>\n                                this.onDatasourcePropChange('schema', schema)\n                            : undefined\n                        }\n                        onDbChange={\n                          this.state.isEditMode\n                            ? database =>\n                                this.onDatasourcePropChange(\n                                  'database',\n                                  database,\n                                )\n                            : undefined\n                        }\n                        onTableSelectChange={\n                          this.state.isEditMode\n                            ? table =>\n                                this.onDatasourcePropChange('table_name', table)\n                            : undefined\n                        }\n                        readOnly={!this.state.isEditMode}\n                      />\n                    </div>\n                  }\n                  description={t(\n                    'The pointer to a physical table (or view). Keep in mind that the chart is ' +\n                      'associated to this Superset logical table, and this logical table points ' +\n                      'the physical table referenced here.',\n                  )}\n                />\n              )}\n            </Col>\n          )}\n        </Fieldset>\n      </div>\n    );\n  }\n\n  renderErrors() {\n    if (this.state.errors.length > 0) {\n      return (\n        <Alert\n          css={theme => ({ marginBottom: theme.gridUnit * 4 })}\n          type=\"error\"\n          message={\n            <>\n              {this.state.errors.map(err => (\n                <div key={err}>{err}</div>\n              ))}\n            </>\n          }\n        />\n      );\n    }\n    return null;\n  }\n\n  renderMetricCollection() {\n    const { datasource } = this.state;\n    const { metrics } = datasource;\n    const sortedMetrics = metrics?.length ? this.sortMetrics(metrics) : [];\n    return (\n      <CollectionTable\n        tableColumns={['metric_name', 'verbose_name', 'expression']}\n        sortColumns={['metric_name', 'verbose_name', 'expression']}\n        columnLabels={{\n          metric_name: t('Metric Key'),\n          verbose_name: t('Label'),\n          expression: t('SQL expression'),\n        }}\n        columnLabelTooltips={{\n          metric_name: t(\n            'This field is used as a unique identifier to attach ' +\n              'the metric to charts. It is also used as the alias in the ' +\n              'SQL query.',\n          ),\n        }}\n        expandFieldset={\n          <FormContainer>\n            <Fieldset compact>\n              <Field\n                fieldKey=\"description\"\n                label={t('Description')}\n                control={\n                  <TextControl\n                    controlId=\"description\"\n                    placeholder={t('Description')}\n                  />\n                }\n              />\n              <Field\n                fieldKey=\"d3format\"\n                label={t('D3 format')}\n                control={\n                  <TextControl controlId=\"d3format\" placeholder=\"%y/%m/%d\" />\n                }\n              />\n              <Field\n                fieldKey=\"currency\"\n                label={t('Metric currency')}\n                control={\n                  <CurrencyControl\n                    currencySelectOverrideProps={{\n                      placeholder: t('Select or type currency symbol'),\n                    }}\n                    symbolSelectAdditionalStyles={css`\n                      max-width: 30%;\n                    `}\n                  />\n                }\n              />\n              <Field\n                label={t('Certified by')}\n                fieldKey=\"certified_by\"\n                description={t(\n                  'Person or group that has certified this metric',\n                )}\n                control={\n                  <TextControl\n                    controlId=\"certified_by\"\n                    placeholder={t('Certified by')}\n                  />\n                }\n              />\n              <Field\n                label={t('Certification details')}\n                fieldKey=\"certification_details\"\n                description={t('Details of the certification')}\n                control={\n                  <TextControl\n                    controlId=\"certification_details\"\n                    placeholder={t('Certification details')}\n                  />\n                }\n              />\n              <Field\n                label={t('Warning')}\n                fieldKey=\"warning_markdown\"\n                description={t('Optional warning about use of this metric')}\n                control={\n                  <TextAreaControl\n                    controlId=\"warning_markdown\"\n                    language=\"markdown\"\n                    offerEditInModal={false}\n                    resize=\"vertical\"\n                  />\n                }\n              />\n            </Fieldset>\n          </FormContainer>\n        }\n        collection={sortedMetrics}\n        allowAddItem\n        onChange={this.onDatasourcePropChange.bind(this, 'metrics')}\n        itemGenerator={() => ({\n          metric_name: t('<new metric>'),\n          verbose_name: '',\n          expression: '',\n        })}\n        itemCellProps={{\n          expression: () => ({\n            width: '240px',\n          }),\n        }}\n        itemRenderers={{\n          metric_name: (v, onChange, _, record) => (\n            <FlexRowContainer>\n              {record.is_certified && (\n                <CertifiedBadge\n                  certifiedBy={record.certified_by}\n                  details={record.certification_details}\n                />\n              )}\n              {record.warning_markdown && (\n                <WarningIconWithTooltip\n                  warningMarkdown={record.warning_markdown}\n                />\n              )}\n              <EditableTitle canEdit title={v} onSaveTitle={onChange} />\n            </FlexRowContainer>\n          ),\n          verbose_name: (v, onChange) => (\n            <TextControl canEdit value={v} onChange={onChange} />\n          ),\n          expression: (v, onChange) => (\n            <TextAreaControl\n              canEdit\n              initialValue={v}\n              onChange={onChange}\n              extraClasses={['datasource-sql-expression']}\n              language=\"sql\"\n              offerEditInModal={false}\n              minLines={5}\n              textAreaStyles={{ minWidth: '200px', maxWidth: '450px' }}\n              resize=\"both\"\n            />\n          ),\n          description: (v, onChange, label) => (\n            <StackedField\n              label={label}\n              formElement={<TextControl value={v} onChange={onChange} />}\n            />\n          ),\n          d3format: (v, onChange, label) => (\n            <StackedField\n              label={label}\n              formElement={<TextControl value={v} onChange={onChange} />}\n            />\n          ),\n        }}\n        allowDeletes\n        stickyHeader\n      />\n    );\n  }\n\n  render() {\n    const { datasource, activeTabKey } = this.state;\n    const { metrics } = datasource;\n    const sortedMetrics = metrics?.length ? this.sortMetrics(metrics) : [];\n    const { theme } = this.props;\n\n    return (\n      <DatasourceContainer data-test=\"datasource-editor\">\n        {this.renderErrors()}\n        <Alert\n          css={theme => ({ marginBottom: theme.gridUnit * 4 })}\n          type=\"warning\"\n          message={\n            <>\n              {' '}\n              <strong>{t('Be careful.')} </strong>\n              {t(\n                'Changing these settings will affect all charts using this dataset, including charts owned by other people.',\n              )}\n            </>\n          }\n        />\n        <StyledTableTabs\n          fullWidth={false}\n          id=\"table-tabs\"\n          data-test=\"edit-dataset-tabs\"\n          onChange={this.handleTabSelect}\n          defaultActiveKey={activeTabKey}\n        >\n          <Tabs.TabPane key={0} tab={t('Source')}>\n            {this.renderSourceFieldset(theme)}\n          </Tabs.TabPane>\n          <Tabs.TabPane\n            tab={\n              <CollectionTabTitle\n                collection={sortedMetrics}\n                title={t('Metrics')}\n              />\n            }\n            key={1}\n          >\n            {this.renderMetricCollection()}\n          </Tabs.TabPane>\n          <Tabs.TabPane\n            tab={\n              <CollectionTabTitle\n                collection={this.state.databaseColumns}\n                title={t('Columns')}\n              />\n            }\n            key={2}\n          >\n            <StyledColumnsTabWrapper>\n              <ColumnButtonWrapper>\n                <StyledButtonWrapper>\n                  <Button\n                    buttonSize=\"small\"\n                    buttonStyle=\"tertiary\"\n                    onClick={this.syncMetadata}\n                    className=\"sync-from-source\"\n                    disabled={this.state.isEditMode}\n                  >\n                    <i className=\"fa fa-database\" />{' '}\n                    {t('Sync columns from source')}\n                  </Button>\n                </StyledButtonWrapper>\n              </ColumnButtonWrapper>\n              <ColumnCollectionTable\n                className=\"columns-table\"\n                columns={this.state.databaseColumns}\n                datasource={datasource}\n                onColumnsChange={databaseColumns =>\n                  this.setColumns({ databaseColumns })\n                }\n                onDatasourceChange={this.onDatasourceChange}\n              />\n              {this.state.metadataLoading && <Loading />}\n            </StyledColumnsTabWrapper>\n          </Tabs.TabPane>\n          <Tabs.TabPane\n            tab={\n              <CollectionTabTitle\n                collection={this.state.calculatedColumns}\n                title={t('Calculated columns')}\n              />\n            }\n            key={3}\n          >\n            <StyledColumnsTabWrapper>\n              <ColumnCollectionTable\n                columns={this.state.calculatedColumns}\n                onColumnsChange={calculatedColumns =>\n                  this.setColumns({ calculatedColumns })\n                }\n                columnLabelTooltips={{\n                  column_name: t(\n                    'This field is used as a unique identifier to attach ' +\n                      'the calculated dimension to charts. It is also used ' +\n                      'as the alias in the SQL query.',\n                  ),\n                }}\n                onDatasourceChange={this.onDatasourceChange}\n                datasource={datasource}\n                editableColumnName\n                showExpression\n                allowAddItem\n                allowEditDataType\n                itemGenerator={() => ({\n                  column_name: t('<new column>'),\n                  filterable: true,\n                  groupby: true,\n                  expression: t('<enter SQL expression here>'),\n                  __expanded: true,\n                })}\n              />\n            </StyledColumnsTabWrapper>\n          </Tabs.TabPane>\n          <Tabs.TabPane key={4} tab={t('Settings')}>\n            <Row gutter={16}>\n              <Col xs={24} md={12}>\n                <FormContainer>{this.renderSettingsFieldset()}</FormContainer>\n              </Col>\n              <Col xs={24} md={12}>\n                <FormContainer>{this.renderAdvancedFieldset()}</FormContainer>\n              </Col>\n            </Row>\n          </Tabs.TabPane>\n        </StyledTableTabs>\n      </DatasourceContainer>\n    );\n  }\n}\n\nDatasourceEditor.defaultProps = defaultProps;\nDatasourceEditor.propTypes = propTypes;\n\nconst DataSourceComponent = withTheme(DatasourceEditor);\n\nexport default withToasts(DataSourceComponent);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}