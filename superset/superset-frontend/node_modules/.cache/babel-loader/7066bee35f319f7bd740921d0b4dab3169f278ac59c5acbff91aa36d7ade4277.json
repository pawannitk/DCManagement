{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { isSimpleAdhocFilter } from './types/Filter';\nimport convertFilter from './convertFilter';\nfunction sanitizeClause(clause) {\n  let sanitizedClause = clause;\n  if (clause.includes('--')) {\n    sanitizedClause = `${clause}\\n`;\n  }\n  return `(${sanitizedClause})`;\n}\n/** Logic formerly in viz.py's process_query_filters */\nexport default function processFilters(formData) {\n  // Split adhoc_filters into four fields according to\n  // (1) clause (WHERE or HAVING)\n  // (2) expressionType\n  //     2.1 SIMPLE (subject + operator + comparator)\n  //     2.2 SQL (freeform SQL expression))\n  const { adhoc_filters, extras = {}, filters = [], where } = formData;\n  const simpleWhere = filters;\n  const freeformWhere = [];\n  if (where)\n  freeformWhere.push(where);\n  const freeformHaving = [];\n  (adhoc_filters || []).forEach((filter) => {\n    const { clause } = filter;\n    if (isSimpleAdhocFilter(filter)) {\n      const filterClause = convertFilter(filter);\n      if (clause === 'WHERE') {\n        simpleWhere.push(filterClause);\n      }\n    } else\n    {\n      const { sqlExpression } = filter;\n      if (clause === 'WHERE') {\n        freeformWhere.push(sqlExpression);\n      } else\n      {\n        freeformHaving.push(sqlExpression);\n      }\n    }\n  });\n  // some filter-related fields need to go in `extras`\n  extras.having = freeformHaving.map(sanitizeClause).join(' AND ');\n  extras.where = freeformWhere.map(sanitizeClause).join(' AND ');\n  return {\n    filters: simpleWhere,\n    extras\n  };\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(sanitizeClause, \"sanitizeClause\", \"/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/query/processFilters.ts\");reactHotLoader.register(processFilters, \"processFilters\", \"/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/query/processFilters.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["isSimpleAdhocFilter","convertFilter","sanitizeClause","clause","sanitizedClause","includes","processFilters","formData","adhoc_filters","extras","filters","where","simpleWhere","freeformWhere","push","freeformHaving","forEach","filter","filterClause","sqlExpression","having","map","join","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/query/processFilters.ts"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/* eslint-disable camelcase */\nimport { QueryFormData } from './types/QueryFormData';\nimport { QueryObjectFilterClause } from './types/Query';\nimport { isSimpleAdhocFilter } from './types/Filter';\nimport convertFilter from './convertFilter';\n\nfunction sanitizeClause(clause: string): string {\n  let sanitizedClause = clause;\n  if (clause.includes('--')) {\n    sanitizedClause = `${clause}\\n`;\n  }\n  return `(${sanitizedClause})`;\n}\n\n/** Logic formerly in viz.py's process_query_filters */\nexport default function processFilters(\n  formData: Partial<QueryFormData>,\n): Partial<QueryFormData> {\n  // Split adhoc_filters into four fields according to\n  // (1) clause (WHERE or HAVING)\n  // (2) expressionType\n  //     2.1 SIMPLE (subject + operator + comparator)\n  //     2.2 SQL (freeform SQL expression))\n  const { adhoc_filters, extras = {}, filters = [], where } = formData;\n  const simpleWhere: QueryObjectFilterClause[] = filters;\n\n  const freeformWhere: string[] = [];\n  if (where) freeformWhere.push(where);\n  const freeformHaving: string[] = [];\n\n  (adhoc_filters || []).forEach(filter => {\n    const { clause } = filter;\n    if (isSimpleAdhocFilter(filter)) {\n      const filterClause = convertFilter(filter);\n      if (clause === 'WHERE') {\n        simpleWhere.push(filterClause);\n      }\n    } else {\n      const { sqlExpression } = filter;\n      if (clause === 'WHERE') {\n        freeformWhere.push(sqlExpression);\n      } else {\n        freeformHaving.push(sqlExpression);\n      }\n    }\n  });\n\n  // some filter-related fields need to go in `extras`\n  extras.having = freeformHaving.map(sanitizeClause).join(' AND ');\n  extras.where = freeformWhere.map(sanitizeClause).join(' AND ');\n\n  return {\n    filters: simpleWhere,\n    extras,\n  };\n}\n"],"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAsBA,SAASA,mBAAmB,QAAQ,gBAAgB;AACpD,OAAOC,aAAa,MAAM,iBAAiB;AAE3C,SAASC,cAAcA,CAACC,MAAc;EACpC,IAAIC,eAAe,GAAGD,MAAM;EAC5B,IAAIA,MAAM,CAACE,QAAQ,CAAC,IAAI,CAAC,EAAE;IACzBD,eAAe,GAAG,GAAGD,MAAM,IAAI;;EAEjC,OAAO,IAAIC,eAAe,GAAG;AAC/B;AAEA;AACA,eAAc,SAAUE,cAAcA,CACpCC,QAAgC;EAEhC;EACA;EACA;EACA;EACA;EACA,MAAM,EAAEC,aAAa,EAAEC,MAAM,GAAG,EAAE,EAAEC,OAAO,GAAG,EAAE,EAAEC,KAAK,EAAE,GAAGJ,QAAQ;EACpE,MAAMK,WAAW,GAA8BF,OAAO;EAEtD,MAAMG,aAAa,GAAa,EAAE;EAClC,IAAIF,KAAK;EAAEE,aAAa,CAACC,IAAI,CAACH,KAAK,CAAC;EACpC,MAAMI,cAAc,GAAa,EAAE;EAEnC,CAACP,aAAa,IAAI,EAAE,EAAEQ,OAAO,CAAC,CAAAC,MAAM,KAAG;IACrC,MAAM,EAAEd,MAAM,EAAE,GAAGc,MAAM;IACzB,IAAIjB,mBAAmB,CAACiB,MAAM,CAAC,EAAE;MAC/B,MAAMC,YAAY,GAAGjB,aAAa,CAACgB,MAAM,CAAC;MAC1C,IAAId,MAAM,KAAK,OAAO,EAAE;QACtBS,WAAW,CAACE,IAAI,CAACI,YAAY,CAAC;;KAEjC;IAAM;MACL,MAAM,EAAEC,aAAa,EAAE,GAAGF,MAAM;MAChC,IAAId,MAAM,KAAK,OAAO,EAAE;QACtBU,aAAa,CAACC,IAAI,CAACK,aAAa,CAAC;OAClC;MAAM;QACLJ,cAAc,CAACD,IAAI,CAACK,aAAa,CAAC;;;EAGxC,CAAC,CAAC;EAEF;EACAV,MAAM,CAACW,MAAM,GAAGL,cAAc,CAACM,GAAG,CAACnB,cAAc,CAAC,CAACoB,IAAI,CAAC,OAAO,CAAC;EAChEb,MAAM,CAACE,KAAK,GAAGE,aAAa,CAACQ,GAAG,CAACnB,cAAc,CAAC,CAACoB,IAAI,CAAC,OAAO,CAAC;EAE9D,OAAO;IACLZ,OAAO,EAAEE,WAAW;IACpBH;GACD;AACH,CAAC,mBAAAc,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAC,OAAA,GAAAC,SAAA,MAAAH,cAAA,WAAAA,cAAA,CAAAI,QAAA,CAjDQzB,cAAc,oIAAAqB,cAAA,CAAAI,QAAA,CASCrB,cAAc,4JAAAsB,WAAA,UAAAJ,oBAAA,mBAAAA,oBAAA,CAAAI,WAAA,GAAAF,SAAA,CAAAE,WAAA,IAAAA,WAAA,CAAAC,MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}