{"ast":null,"code":"import _noop from \"lodash/noop\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /* eslint-disable react/sort-prop-types */\n/* eslint-disable react/jsx-handler-names */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint no-underscore-dangle: [\"error\", { \"allow\": [\"\", \"__timestamp\"] }] */\nimport React, { memo, useCallback, useEffect, useRef, useState } from 'react';\nimport { ScreenGridLayer } from 'deck.gl/typed';\nimport { t } from '@superset-ui/core';\n\nimport sandboxedEval from '../../utils/sandbox';\nimport { commonLayerProps } from '../common';\nimport TooltipRow from '../../TooltipRow';\n// eslint-disable-next-line import/extensions\nimport fitViewport from '../../utils/fitViewport';\nimport { DeckGLContainerStyledWrapper } from '../../DeckGLContainer';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nfunction getPoints(data) {\n  return data.map((d) => d.position);\n}\nfunction setTooltipContent(o) {var _o$coordinate, _o$coordinate2, _o$object;\n  return ___EmotionJSX(\"div\", { className: \"deckgl-tooltip\" },\n  ___EmotionJSX(TooltipRow\n  // eslint-disable-next-line prefer-template\n  , { label: t('Longitude and Latitude') + ': ', value: `${o == null ? void 0 : (_o$coordinate = o.coordinate) == null ? void 0 : _o$coordinate[0]}, ${o == null ? void 0 : (_o$coordinate2 = o.coordinate) == null ? void 0 : _o$coordinate2[1]}` }),\n  ___EmotionJSX(TooltipRow\n  // eslint-disable-next-line prefer-template\n  , { label: t('Weight') + ': ', value: `${(_o$object = o.object) == null ? void 0 : _o$object.cellWeight}` })\n  );\n}\nexport function getLayer(formData, payload, onAddFilter, setTooltip) {\n  const fd = formData;\n  const c = fd.color_picker;\n  let data = payload.data.features.map((d) => ({\n    ...d,\n    color: [c.r, c.g, c.b, 255 * c.a]\n  }));\n  if (fd.js_data_mutator) {\n    // Applying user defined data mutator if defined\n    const jsFnMutator = sandboxedEval(fd.js_data_mutator);\n    data = jsFnMutator(data);\n  }\n  // Passing a layer creator function instead of a layer since the\n  // layer needs to be regenerated at each render\n  return new ScreenGridLayer({\n    id: `screengrid-layer-${fd.slice_id}`,\n    data,\n    cellSizePixels: fd.grid_size,\n    minColor: [c.r, c.g, c.b, 0],\n    maxColor: [c.r, c.g, c.b, 255 * c.a],\n    outline: false,\n    getWeight: (d) => d.weight || 0,\n    ...commonLayerProps(fd, setTooltip, setTooltipContent)\n  });\n}\nconst DeckGLScreenGrid = (props) => {\n  const containerRef = useRef();\n  const getAdjustedViewport = useCallback(() => {\n    const features = props.payload.data.features || [];\n    const { width, height, formData } = props;\n    if (formData.autozoom) {\n      return fitViewport(props.viewport, {\n        width,\n        height,\n        points: getPoints(features)\n      });\n    }\n    return props.viewport;\n  }, [props]);\n  const [stateFormData, setStateFormData] = useState(props.payload.form_data);\n  const [viewport, setViewport] = useState(getAdjustedViewport());\n  useEffect(() => {\n    if (props.payload.form_data !== stateFormData) {\n      setViewport(getAdjustedViewport());\n      setStateFormData(props.payload.form_data);\n    }\n  }, [getAdjustedViewport, props.payload.form_data, stateFormData]);\n  const setTooltip = useCallback((tooltip) => {\n    const { current } = containerRef;\n    if (current) {\n      current.setTooltip(tooltip);\n    }\n  }, []);\n  const getLayers = useCallback(() => {\n    const layer = getLayer(props.formData, props.payload, _noop, setTooltip);\n    return [layer];\n  }, [props.formData, props.payload, setTooltip]);\n  const { formData, payload, setControlValue } = props;\n  return ___EmotionJSX(\"div\", null,\n  ___EmotionJSX(DeckGLContainerStyledWrapper, { ref: containerRef, viewport: viewport, layers: getLayers(), setControlValue: setControlValue, mapStyle: formData.mapbox_style, mapboxApiAccessToken: payload.data.mapboxApiKey, width: props.width, height: props.height })\n  );\n};__signature__(DeckGLScreenGrid, \"useRef{containerRef}\\nuseCallback{getAdjustedViewport}\\nuseState{[stateFormData, setStateFormData](props.payload.form_data)}\\nuseState{[viewport, setViewport](getAdjustedViewport())}\\nuseEffect{}\\nuseCallback{setTooltip}\\nuseCallback{getLayers}\");const _default = /*#__PURE__*/\nmemo(DeckGLScreenGrid);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(getPoints, \"getPoints\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/src/layers/Screengrid/Screengrid.tsx\");reactHotLoader.register(setTooltipContent, \"setTooltipContent\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/src/layers/Screengrid/Screengrid.tsx\");reactHotLoader.register(getLayer, \"getLayer\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/src/layers/Screengrid/Screengrid.tsx\");reactHotLoader.register(DeckGLScreenGrid, \"DeckGLScreenGrid\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/src/layers/Screengrid/Screengrid.tsx\");reactHotLoader.register(_default, \"default\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/src/layers/Screengrid/Screengrid.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["React","memo","useCallback","useEffect","useRef","useState","ScreenGridLayer","t","sandboxedEval","commonLayerProps","TooltipRow","fitViewport","DeckGLContainerStyledWrapper","jsx","___EmotionJSX","getPoints","data","map","d","position","setTooltipContent","o","_o$coordinate","_o$coordinate2","_o$object","className","label","value","coordinate","object","cellWeight","getLayer","formData","payload","onAddFilter","setTooltip","fd","c","color_picker","features","color","r","g","b","a","js_data_mutator","jsFnMutator","id","slice_id","cellSizePixels","grid_size","minColor","maxColor","outline","getWeight","weight","DeckGLScreenGrid","props","containerRef","getAdjustedViewport","width","height","autozoom","viewport","points","stateFormData","setStateFormData","form_data","setViewport","tooltip","current","getLayers","layer","_noop","setControlValue","ref","layers","mapStyle","mapbox_style","mapboxApiAccessToken","mapboxApiKey","__signature__","_default","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/src/layers/Screengrid/Screengrid.tsx"],"sourcesContent":["/* eslint-disable react/sort-prop-types */\n/* eslint-disable react/jsx-handler-names */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint no-underscore-dangle: [\"error\", { \"allow\": [\"\", \"__timestamp\"] }] */\n\nimport React, { memo, useCallback, useEffect, useRef, useState } from 'react';\nimport { ScreenGridLayer } from 'deck.gl/typed';\nimport { JsonObject, JsonValue, QueryFormData, t } from '@superset-ui/core';\nimport { noop } from 'lodash';\nimport sandboxedEval from '../../utils/sandbox';\nimport { commonLayerProps } from '../common';\nimport TooltipRow from '../../TooltipRow';\n// eslint-disable-next-line import/extensions\nimport fitViewport, { Viewport } from '../../utils/fitViewport';\nimport {\n  DeckGLContainerHandle,\n  DeckGLContainerStyledWrapper,\n} from '../../DeckGLContainer';\nimport { TooltipProps } from '../../components/Tooltip';\n\nfunction getPoints(data: JsonObject[]) {\n  return data.map(d => d.position);\n}\n\nfunction setTooltipContent(o: JsonObject) {\n  return (\n    <div className=\"deckgl-tooltip\">\n      <TooltipRow\n        // eslint-disable-next-line prefer-template\n        label={t('Longitude and Latitude') + ': '}\n        value={`${o?.coordinate?.[0]}, ${o?.coordinate?.[1]}`}\n      />\n      <TooltipRow\n        // eslint-disable-next-line prefer-template\n        label={t('Weight') + ': '}\n        value={`${o.object?.cellWeight}`}\n      />\n    </div>\n  );\n}\n\nexport function getLayer(\n  formData: QueryFormData,\n  payload: JsonObject,\n  onAddFilter: () => void,\n  setTooltip: (tooltip: TooltipProps['tooltip']) => void,\n) {\n  const fd = formData;\n  const c = fd.color_picker;\n  let data = payload.data.features.map((d: JsonObject) => ({\n    ...d,\n    color: [c.r, c.g, c.b, 255 * c.a],\n  }));\n\n  if (fd.js_data_mutator) {\n    // Applying user defined data mutator if defined\n    const jsFnMutator = sandboxedEval(fd.js_data_mutator);\n    data = jsFnMutator(data);\n  }\n\n  // Passing a layer creator function instead of a layer since the\n  // layer needs to be regenerated at each render\n  return new ScreenGridLayer({\n    id: `screengrid-layer-${fd.slice_id}` as const,\n    data,\n    cellSizePixels: fd.grid_size,\n    minColor: [c.r, c.g, c.b, 0],\n    maxColor: [c.r, c.g, c.b, 255 * c.a],\n    outline: false,\n    getWeight: d => d.weight || 0,\n    ...commonLayerProps(fd, setTooltip, setTooltipContent),\n  });\n}\n\nexport type DeckGLScreenGridProps = {\n  formData: QueryFormData;\n  payload: JsonObject;\n  setControlValue: (control: string, value: JsonValue) => void;\n  viewport: Viewport;\n  width: number;\n  height: number;\n  onAddFilter: () => void;\n};\n\nconst DeckGLScreenGrid = (props: DeckGLScreenGridProps) => {\n  const containerRef = useRef<DeckGLContainerHandle>();\n\n  const getAdjustedViewport = useCallback(() => {\n    const features = props.payload.data.features || [];\n\n    const { width, height, formData } = props;\n\n    if (formData.autozoom) {\n      return fitViewport(props.viewport, {\n        width,\n        height,\n        points: getPoints(features),\n      });\n    }\n    return props.viewport;\n  }, [props]);\n\n  const [stateFormData, setStateFormData] = useState(props.payload.form_data);\n  const [viewport, setViewport] = useState(getAdjustedViewport());\n\n  useEffect(() => {\n    if (props.payload.form_data !== stateFormData) {\n      setViewport(getAdjustedViewport());\n      setStateFormData(props.payload.form_data);\n    }\n  }, [getAdjustedViewport, props.payload.form_data, stateFormData]);\n\n  const setTooltip = useCallback((tooltip: TooltipProps['tooltip']) => {\n    const { current } = containerRef;\n    if (current) {\n      current.setTooltip(tooltip);\n    }\n  }, []);\n\n  const getLayers = useCallback(() => {\n    const layer = getLayer(props.formData, props.payload, noop, setTooltip);\n\n    return [layer];\n  }, [props.formData, props.payload, setTooltip]);\n\n  const { formData, payload, setControlValue } = props;\n\n  return (\n    <div>\n      <DeckGLContainerStyledWrapper\n        ref={containerRef}\n        viewport={viewport}\n        layers={getLayers()}\n        setControlValue={setControlValue}\n        mapStyle={formData.mapbox_style}\n        mapboxApiAccessToken={payload.data.mapboxApiKey}\n        width={props.width}\n        height={props.height}\n      />\n    </div>\n  );\n};\n\nexport default memo(DeckGLScreenGrid);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}