{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { buildQueryContext, GenericDataType } from '@superset-ui/core';\n/**\n * The buildQuery function is used to create an instance of QueryContext that's\n * sent to the chart data endpoint. In addition to containing information of which\n * datasource to use, it specifies the type (e.g. full payload, samples, query) and\n * format (e.g. CSV or JSON) of the result and whether or not to force refresh the data from\n * the datasource as opposed to using a cached copy of the data, if available.\n *\n * More importantly though, QueryContext contains a property `queries`, which is an array of\n * QueryObjects specifying individual data requests to be made. A QueryObject specifies which\n * columns, metrics and filters, among others, to use during the query. Usually it will be enough\n * to specify just one query based on the baseQueryObject, but for some more advanced use cases\n * it is possible to define post processing operations in the QueryObject, or multiple queries\n * if a viz needs multiple different result sets.\n */\nexport default function buildQuery(formData) {\n  const { groupby } = formData;\n  const [column = ''] = groupby || [];\n  // @ts-ignore (need update interface Column )\n  return buildQueryContext(formData, (baseQueryObject) => [\n  {\n    ...baseQueryObject,\n    columns: [],\n    metrics: [\n    {\n      aggregate: 'MIN',\n      column: {\n        column_name: column,\n        id: 1,\n        type_generic: GenericDataType.Numeric\n      },\n      expressionType: 'SIMPLE',\n      hasCustomLabel: true,\n      label: 'min'\n    },\n    {\n      aggregate: 'MAX',\n      column: {\n        column_name: column,\n        id: 2,\n        type_generic: GenericDataType.Numeric\n      },\n      expressionType: 'SIMPLE',\n      hasCustomLabel: true,\n      label: 'max'\n    }]\n\n  }]\n  );\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(buildQuery, \"buildQuery\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/filters/components/Range/buildQuery.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["buildQueryContext","GenericDataType","buildQuery","formData","groupby","column","baseQueryObject","columns","metrics","aggregate","column_name","id","type_generic","Numeric","expressionType","hasCustomLabel","label","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/filters/components/Range/buildQuery.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  buildQueryContext,\n  GenericDataType,\n  QueryFormData,\n} from '@superset-ui/core';\n\n/**\n * The buildQuery function is used to create an instance of QueryContext that's\n * sent to the chart data endpoint. In addition to containing information of which\n * datasource to use, it specifies the type (e.g. full payload, samples, query) and\n * format (e.g. CSV or JSON) of the result and whether or not to force refresh the data from\n * the datasource as opposed to using a cached copy of the data, if available.\n *\n * More importantly though, QueryContext contains a property `queries`, which is an array of\n * QueryObjects specifying individual data requests to be made. A QueryObject specifies which\n * columns, metrics and filters, among others, to use during the query. Usually it will be enough\n * to specify just one query based on the baseQueryObject, but for some more advanced use cases\n * it is possible to define post processing operations in the QueryObject, or multiple queries\n * if a viz needs multiple different result sets.\n */\nexport default function buildQuery(formData: QueryFormData) {\n  const { groupby } = formData;\n  const [column = ''] = groupby || [];\n  // @ts-ignore (need update interface Column )\n  return buildQueryContext(formData, baseQueryObject => [\n    {\n      ...baseQueryObject,\n      columns: [],\n      metrics: [\n        {\n          aggregate: 'MIN',\n          column: {\n            column_name: column,\n            id: 1,\n            type_generic: GenericDataType.Numeric,\n          },\n          expressionType: 'SIMPLE',\n          hasCustomLabel: true,\n          label: 'min',\n        },\n        {\n          aggregate: 'MAX',\n          column: {\n            column_name: column,\n            id: 2,\n            type_generic: GenericDataType.Numeric,\n          },\n          expressionType: 'SIMPLE',\n          hasCustomLabel: true,\n          label: 'max',\n        },\n      ],\n    },\n  ]);\n}\n"],"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAkBA,SACEA,iBAAiB,EACjBC,eAAe,QAEV,mBAAmB;AAE1B;;;;;;;;;;;;;;AAcA,eAAc,SAAUC,UAAUA,CAACC,QAAuB;EACxD,MAAM,EAAEC,OAAO,EAAE,GAAGD,QAAQ;EAC5B,MAAM,CAACE,MAAM,GAAG,EAAE,CAAC,GAAGD,OAAO,IAAI,EAAE;EACnC;EACA,OAAOJ,iBAAiB,CAACG,QAAQ,EAAE,CAAAG,eAAe,KAAI;EACpD;IACE,GAAGA,eAAe;IAClBC,OAAO,EAAE,EAAE;IACXC,OAAO,EAAE;IACP;MACEC,SAAS,EAAE,KAAK;MAChBJ,MAAM,EAAE;QACNK,WAAW,EAAEL,MAAM;QACnBM,EAAE,EAAE,CAAC;QACLC,YAAY,EAAEX,eAAe,CAACY;OAC/B;MACDC,cAAc,EAAE,QAAQ;MACxBC,cAAc,EAAE,IAAI;MACpBC,KAAK,EAAE;KACR;IACD;MACEP,SAAS,EAAE,KAAK;MAChBJ,MAAM,EAAE;QACNK,WAAW,EAAEL,MAAM;QACnBM,EAAE,EAAE,CAAC;QACLC,YAAY,EAAEX,eAAe,CAACY;OAC/B;MACDC,cAAc,EAAE,QAAQ;MACxBC,cAAc,EAAE,IAAI;MACpBC,KAAK,EAAE;KACR;;GAEJ;EACF,CAAC;AACJ,CAAC,mBAAAC,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAC,OAAA,GAAAC,SAAA,MAAAH,cAAA,WAAAA,cAAA,CAAAI,QAAA,CAlCuBnB,UAAU,6IAAAoB,WAAA,UAAAJ,oBAAA,mBAAAA,oBAAA,CAAAI,WAAA,GAAAF,SAAA,CAAAE,WAAA,IAAAA,WAAA,CAAAC,MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}