{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { sharedControls } from '@superset-ui/chart-controls';\nimport { t, validateNonEmpty } from '@superset-ui/core';\nimport React from 'react';\nimport { CodeEditor } from '../../components/CodeEditor/CodeEditor';\nimport { ControlHeader } from '../../components/ControlHeader/controlHeader';\nimport { debounceFunc } from '../../consts';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst HandlebarsTemplateControl = (props) => {\n  const val = String(props != null && props.value ? props == null ? void 0 : props.value : props != null && props.default ? props == null ? void 0 : props.default : '');\n  return ___EmotionJSX(\"div\", null,\n  ___EmotionJSX(ControlHeader, null, props.label),\n  ___EmotionJSX(CodeEditor, { theme: \"dark\", value: val, onChange: (source) => {\n      debounceFunc(props.onChange, source || '');\n    } })\n  );\n};\nexport const handlebarsTemplateControlSetItem = {\n  name: 'handlebarsTemplate',\n  config: {\n    ...sharedControls.entity,\n    type: HandlebarsTemplateControl,\n    label: t('Handlebars Template'),\n    description: t('A handlebars template that is applied to the data'),\n    default: `<ul class=\"data-list\">\n  {{#each data}}\n    <li>{{stringify this}}</li>\n  {{/each}}\n</ul>`,\n    isInt: false,\n    renderTrigger: true,\n    validators: [validateNonEmpty],\n    mapStateToProps: ({ controls }) => {var _controls$handlebars_;return {\n        value: controls == null ? void 0 : (_controls$handlebars_ = controls.handlebars_template) == null ? void 0 : _controls$handlebars_.value\n      };}\n  }\n};;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(HandlebarsTemplateControl, \"HandlebarsTemplateControl\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-handlebars/src/plugin/controls/handlebarTemplate.tsx\");reactHotLoader.register(handlebarsTemplateControlSetItem, \"handlebarsTemplateControlSetItem\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-handlebars/src/plugin/controls/handlebarTemplate.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["sharedControls","t","validateNonEmpty","React","CodeEditor","ControlHeader","debounceFunc","jsx","___EmotionJSX","HandlebarsTemplateControl","props","val","String","value","default","label","theme","onChange","source","handlebarsTemplateControlSetItem","name","config","entity","type","description","isInt","renderTrigger","validators","mapStateToProps","controls","_controls$handlebars_","handlebars_template","reactHotLoader","reactHotLoaderGlobal","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-handlebars/src/plugin/controls/handlebarTemplate.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  ControlSetItem,\n  CustomControlConfig,\n  sharedControls,\n} from '@superset-ui/chart-controls';\nimport { t, validateNonEmpty } from '@superset-ui/core';\nimport React from 'react';\nimport { CodeEditor } from '../../components/CodeEditor/CodeEditor';\nimport { ControlHeader } from '../../components/ControlHeader/controlHeader';\nimport { debounceFunc } from '../../consts';\n\ninterface HandlebarsCustomControlProps {\n  value: string;\n}\n\nconst HandlebarsTemplateControl = (\n  props: CustomControlConfig<HandlebarsCustomControlProps>,\n) => {\n  const val = String(\n    props?.value ? props?.value : props?.default ? props?.default : '',\n  );\n\n  return (\n    <div>\n      <ControlHeader>{props.label}</ControlHeader>\n      <CodeEditor\n        theme=\"dark\"\n        value={val}\n        onChange={source => {\n          debounceFunc(props.onChange, source || '');\n        }}\n      />\n    </div>\n  );\n};\n\nexport const handlebarsTemplateControlSetItem: ControlSetItem = {\n  name: 'handlebarsTemplate',\n  config: {\n    ...sharedControls.entity,\n    type: HandlebarsTemplateControl,\n    label: t('Handlebars Template'),\n    description: t('A handlebars template that is applied to the data'),\n    default: `<ul class=\"data-list\">\n  {{#each data}}\n    <li>{{stringify this}}</li>\n  {{/each}}\n</ul>`,\n    isInt: false,\n    renderTrigger: true,\n\n    validators: [validateNonEmpty],\n    mapStateToProps: ({ controls }) => ({\n      value: controls?.handlebars_template?.value,\n    }),\n  },\n};\n"],"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAkBA,SAGEA,cAAc,QACT,6BAA6B;AACpC,SAASC,CAAC,EAAEC,gBAAgB,QAAQ,mBAAmB;AACvD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,UAAU,QAAQ,wCAAwC;AACnE,SAASC,aAAa,QAAQ,8CAA8C;AAC5E,SAASC,YAAY,QAAQ,cAAc,CAAC,SAAAC,GAAA,IAAAC,aAAA;AAM5C,MAAMC,yBAAyB,GAAGA,CAChCC,KAAwD,KACtD;EACF,MAAMC,GAAG,GAAGC,MAAM,CAChBF,KAAK,YAALA,KAAK,CAAEG,KAAK,GAAGH,KAAK,oBAALA,KAAK,CAAEG,KAAK,GAAGH,KAAK,YAALA,KAAK,CAAEI,OAAO,GAAGJ,KAAK,oBAALA,KAAK,CAAEI,OAAO,GAAG,EAAE,CACnE;EAED,OACEN,aAAA;EACEA,aAAA,CAACH,aAAa,QAAEK,KAAK,CAACK,KAAqB,CAC3C;EAAAP,aAAA,CAACJ,UAAU,IACTY,KAAK,EAAC,MAAM,EACZH,KAAK,EAAEF,GAAI,EACXM,QAAQ,EAAEA,CAAAC,MAAM,KAAG;MACjBZ,YAAY,CAACI,KAAK,CAACO,QAAQ,EAAEC,MAAM,IAAI,EAAE,CAAC;IAC5C,CAAE;EAED,CAAC;AAEV,CAAC;AAED,OAAO,MAAMC,gCAAgC,GAAmB;EAC9DC,IAAI,EAAE,oBAAoB;EAC1BC,MAAM,EAAE;IACN,GAAGrB,cAAc,CAACsB,MAAM;IACxBC,IAAI,EAAEd,yBAAyB;IAC/BM,KAAK,EAAEd,CAAC,CAAC,qBAAqB,CAAC;IAC/BuB,WAAW,EAAEvB,CAAC,CAAC,mDAAmD,CAAC;IACnEa,OAAO,EAAE;;;;MAIP;IACFW,KAAK,EAAE,KAAK;IACZC,aAAa,EAAE,IAAI;IAEnBC,UAAU,EAAE,CAACzB,gBAAgB,CAAC;IAC9B0B,eAAe,EAAEA,CAAC,EAAEC,QAAQ,EAAE,UAAAC,qBAAA,QAAM;QAClCjB,KAAK,EAAEgB,QAAQ,qBAAAC,qBAAA,GAARD,QAAQ,CAAEE,mBAAmB,qBAA7BD,qBAAA,CAA+BjB;OACvC;;CAEJ,CAAC,mBAAAmB,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAnB,OAAA,GAAAoB,SAAA,MAAAF,cAAA,WAAAA,cAAA,CAAAG,QAAA,CAzCI1B,yBAAyB,mKAAAuB,cAAA,CAAAG,QAAA,CAqBlBhB,gCAAgC,kMAAAiB,WAAA,UAAAH,oBAAA,mBAAAA,oBAAA,CAAAG,WAAA,GAAAF,SAAA,CAAAE,WAAA,IAAAA,WAAA,CAAAC,MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}