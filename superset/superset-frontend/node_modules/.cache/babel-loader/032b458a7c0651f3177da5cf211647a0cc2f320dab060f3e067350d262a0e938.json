{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { isSafari } from './common';\n// Use the new Clipboard API if the browser supports it\nconst copyTextWithClipboardApi = async (getText) => {\n  // Safari (WebKit) does not support delayed generation of clipboard.\n  // This means that writing to the clipboard, from the moment the user\n  // interacts with the app, must be instantaneous.\n  // However, neither writeText nor write accepts a Promise, so\n  // we need to create a ClipboardItem that accepts said Promise to\n  // delay the text generation, as needed.\n  // Source: https://bugs.webkit.org/show_bug.cgi?id=222262P\n  if (isSafari()) {\n    try {\n      const clipboardItem = new ClipboardItem({\n        'text/plain': getText()\n      });\n      await navigator.clipboard.write([clipboardItem]);\n    }\n    catch {\n      // Fallback to default clipboard API implementation\n      const text = await getText();\n      await navigator.clipboard.writeText(text);\n    }\n  } else\n  {\n    // For Blink, the above method won't work, but we can use the\n    // default (intended) API, since the delayed generation of the\n    // clipboard is now supported.\n    // Source: https://bugs.chromium.org/p/chromium/issues/detail?id=1014310\n    const text = await getText();\n    await navigator.clipboard.writeText(text);\n  }\n};\nconst copyTextToClipboard = (getText) => copyTextWithClipboardApi(getText)\n// If the Clipboard API is not supported, fallback to the older method.\n.catch(() => getText().then((text) => new Promise((resolve, reject) => {\n  const selection = document.getSelection();\n  if (selection) {\n    selection.removeAllRanges();\n    const range = document.createRange();\n    const span = document.createElement('span');\n    span.textContent = text;\n    span.style.position = 'fixed';\n    span.style.top = '0';\n    span.style.clip = 'rect(0, 0, 0, 0)';\n    span.style.whiteSpace = 'pre';\n    document.body.appendChild(span);\n    range.selectNode(span);\n    selection.addRange(range);\n    try {\n      if (!document.execCommand('copy')) {\n        reject();\n      }\n    }\n    catch (err) {\n      reject();\n    }\n    document.body.removeChild(span);\n    if (selection.removeRange) {\n      selection.removeRange(range);\n    } else\n    {\n      selection.removeAllRanges();\n    }\n  }\n  resolve();\n})));const _default =\ncopyTextToClipboard;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(copyTextWithClipboardApi, \"copyTextWithClipboardApi\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/utils/copy.ts\");reactHotLoader.register(copyTextToClipboard, \"copyTextToClipboard\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/utils/copy.ts\");reactHotLoader.register(_default, \"default\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/utils/copy.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["isSafari","copyTextWithClipboardApi","getText","clipboardItem","ClipboardItem","navigator","clipboard","write","text","writeText","copyTextToClipboard","catch","then","Promise","resolve","reject","selection","document","getSelection","removeAllRanges","range","createRange","span","createElement","textContent","style","position","top","clip","whiteSpace","body","appendChild","selectNode","addRange","execCommand","err","removeChild","removeRange","_default","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/utils/copy.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { isSafari } from './common';\n\n// Use the new Clipboard API if the browser supports it\nconst copyTextWithClipboardApi = async (getText: () => Promise<string>) => {\n  // Safari (WebKit) does not support delayed generation of clipboard.\n  // This means that writing to the clipboard, from the moment the user\n  // interacts with the app, must be instantaneous.\n  // However, neither writeText nor write accepts a Promise, so\n  // we need to create a ClipboardItem that accepts said Promise to\n  // delay the text generation, as needed.\n  // Source: https://bugs.webkit.org/show_bug.cgi?id=222262P\n  if (isSafari()) {\n    try {\n      const clipboardItem = new ClipboardItem({\n        'text/plain': getText(),\n      });\n      await navigator.clipboard.write([clipboardItem]);\n    } catch {\n      // Fallback to default clipboard API implementation\n      const text = await getText();\n      await navigator.clipboard.writeText(text);\n    }\n  } else {\n    // For Blink, the above method won't work, but we can use the\n    // default (intended) API, since the delayed generation of the\n    // clipboard is now supported.\n    // Source: https://bugs.chromium.org/p/chromium/issues/detail?id=1014310\n    const text = await getText();\n    await navigator.clipboard.writeText(text);\n  }\n};\n\nconst copyTextToClipboard = (getText: () => Promise<string>) =>\n  copyTextWithClipboardApi(getText)\n    // If the Clipboard API is not supported, fallback to the older method.\n    .catch(() =>\n      getText().then(\n        text =>\n          new Promise<void>((resolve, reject) => {\n            const selection: Selection | null = document.getSelection();\n            if (selection) {\n              selection.removeAllRanges();\n              const range = document.createRange();\n              const span = document.createElement('span');\n              span.textContent = text;\n              span.style.position = 'fixed';\n              span.style.top = '0';\n              span.style.clip = 'rect(0, 0, 0, 0)';\n              span.style.whiteSpace = 'pre';\n\n              document.body.appendChild(span);\n              range.selectNode(span);\n              selection.addRange(range);\n\n              try {\n                if (!document.execCommand('copy')) {\n                  reject();\n                }\n              } catch (err) {\n                reject();\n              }\n\n              document.body.removeChild(span);\n              if (selection.removeRange) {\n                selection.removeRange(range);\n              } else {\n                selection.removeAllRanges();\n              }\n            }\n\n            resolve();\n          }),\n      ),\n    );\n\nexport default copyTextToClipboard;\n"],"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAmBA,SAASA,QAAQ,QAAQ,UAAU;AAEnC;AACA,MAAMC,wBAAwB,GAAG,MAAAA,CAAOC,OAA8B,KAAI;EACxE;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAIF,QAAQ,EAAE,EAAE;IACd,IAAI;MACF,MAAMG,aAAa,GAAG,IAAIC,aAAa,CAAC;QACtC,YAAY,EAAEF,OAAO;OACtB,CAAC;MACF,MAAMG,SAAS,CAACC,SAAS,CAACC,KAAK,CAAC,CAACJ,aAAa,CAAC,CAAC;;IAChD,MAAM;MACN;MACA,MAAMK,IAAI,GAAG,MAAMN,OAAO,EAAE;MAC5B,MAAMG,SAAS,CAACC,SAAS,CAACG,SAAS,CAACD,IAAI,CAAC;;GAE5C;EAAM;IACL;IACA;IACA;IACA;IACA,MAAMA,IAAI,GAAG,MAAMN,OAAO,EAAE;IAC5B,MAAMG,SAAS,CAACC,SAAS,CAACG,SAAS,CAACD,IAAI,CAAC;;AAE7C,CAAC;AAED,MAAME,mBAAmB,GAAGA,CAACR,OAA8B,KACzDD,wBAAwB,CAACC,OAAO;AAC9B;AAAA,CACCS,KAAK,CAAC,MACLT,OAAO,EAAE,CAACU,IAAI,CACZ,CAAAJ,IAAI,KACF,IAAIK,OAAO,CAAO,CAACC,OAAO,EAAEC,MAAM,KAAI;EACpC,MAAMC,SAAS,GAAqBC,QAAQ,CAACC,YAAY,EAAE;EAC3D,IAAIF,SAAS,EAAE;IACbA,SAAS,CAACG,eAAe,EAAE;IAC3B,MAAMC,KAAK,GAAGH,QAAQ,CAACI,WAAW,EAAE;IACpC,MAAMC,IAAI,GAAGL,QAAQ,CAACM,aAAa,CAAC,MAAM,CAAC;IAC3CD,IAAI,CAACE,WAAW,GAAGhB,IAAI;IACvBc,IAAI,CAACG,KAAK,CAACC,QAAQ,GAAG,OAAO;IAC7BJ,IAAI,CAACG,KAAK,CAACE,GAAG,GAAG,GAAG;IACpBL,IAAI,CAACG,KAAK,CAACG,IAAI,GAAG,kBAAkB;IACpCN,IAAI,CAACG,KAAK,CAACI,UAAU,GAAG,KAAK;IAE7BZ,QAAQ,CAACa,IAAI,CAACC,WAAW,CAACT,IAAI,CAAC;IAC/BF,KAAK,CAACY,UAAU,CAACV,IAAI,CAAC;IACtBN,SAAS,CAACiB,QAAQ,CAACb,KAAK,CAAC;IAEzB,IAAI;MACF,IAAI,CAACH,QAAQ,CAACiB,WAAW,CAAC,MAAM,CAAC,EAAE;QACjCnB,MAAM,EAAE;;;IAEV,OAAOoB,GAAG,EAAE;MACZpB,MAAM,EAAE;;IAGVE,QAAQ,CAACa,IAAI,CAACM,WAAW,CAACd,IAAI,CAAC;IAC/B,IAAIN,SAAS,CAACqB,WAAW,EAAE;MACzBrB,SAAS,CAACqB,WAAW,CAACjB,KAAK,CAAC;KAC7B;IAAM;MACLJ,SAAS,CAACG,eAAe,EAAE;;;EAI/BL,OAAO,EAAE;AACX,CAAC,CAAC,CACL,CACF,CAAC,MAAAwB,QAAA;AAES5B,mBAAmB,CAAlC,eAAA4B,QAAA,CAAmC,mBAAAC,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAC,OAAA,GAAAC,SAAA,MAAAH,cAAA,WAAAA,cAAA,CAAAI,QAAA,CAxE7B1C,wBAAwB,0GAAAsC,cAAA,CAAAI,QAAA,CA6BxBjC,mBAAmB,qGAAA6B,cAAA,CAAAI,QAAA,CAAAL,QAAA,iHAAAM,WAAA,UAAAJ,oBAAA,mBAAAA,oBAAA,CAAAI,WAAA,GAAAF,SAAA,CAAAE,WAAA,IAAAA,WAAA,CAAAC,MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}