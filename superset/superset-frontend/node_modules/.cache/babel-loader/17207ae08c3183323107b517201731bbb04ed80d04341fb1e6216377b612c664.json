{"ast":null,"code":"import _isEmpty from \"lodash/isEmpty\";import _debounce from \"lodash/debounce\";import _sortBy from \"lodash/sortBy\";import _isEqual from \"lodash/isEqual\";import _uniq from \"lodash/uniq\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useCallback, useMemo, useState, useRef } from 'react';\n\nimport { styled, SLOW_DEBOUNCE, t, css, useTheme } from '@superset-ui/core';\nimport { useDispatch } from 'react-redux';\nimport { AntdForm } from 'src/components';\nimport Icons from 'src/components/Icons';\nimport ErrorBoundary from 'src/components/ErrorBoundary';\nimport { StyledModal } from 'src/components/Modal';\nimport { testWithId } from 'src/utils/testUtils';\nimport { updateCascadeParentIds } from 'src/dashboard/actions/nativeFilters';\nimport useEffectEvent from 'src/hooks/useEffectEvent';\nimport { useFilterConfigMap, useFilterConfiguration } from '../state';\nimport FilterConfigurePane from './FilterConfigurePane';\nimport FiltersConfigForm, { FilterPanels } from './FiltersConfigForm/FiltersConfigForm';\nimport Footer from './Footer/Footer';\nimport { useOpenModal, useRemoveCurrentFilter } from './state';\nimport { createHandleSave, createHandleRemoveItem, generateFilterId, getFilterIds, validateForm, NATIVE_FILTER_DIVIDER_PREFIX, hasCircularDependency } from './utils';\nimport DividerConfigForm from './DividerConfigForm';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst MODAL_MARGIN = 16;\nconst MIN_WIDTH = 880;\nconst StyledModalWrapper = styled(StyledModal)`\n  min-width: ${MIN_WIDTH}px;\n  width: ${({ expanded }) => expanded ? '100%' : MIN_WIDTH} !important;\n\n  @media (max-width: ${MIN_WIDTH + MODAL_MARGIN * 2}px) {\n    width: 100% !important;\n    min-width: auto;\n  }\n\n  .ant-modal-body {\n    padding: 0px;\n  }\n\n  ${({ expanded }) => expanded &&\ncss`\n      height: 100%;\n\n      .ant-modal-body {\n        flex: 1 1 auto;\n      }\n      .ant-modal-content {\n        height: 100%;\n      }\n    `}\n`;\nexport const StyledModalBody = styled.div`\n  display: flex;\n  height: ${({ expanded }) => expanded ? '100%' : '700px'};\n  flex-direction: row;\n  flex: 1;\n  .filters-list {\n    width: ${({ theme }) => theme.gridUnit * 50}px;\n    overflow: auto;\n  }\n`;\nexport const StyledForm = styled(AntdForm)`\n  width: 100%;\n`;\nexport const StyledExpandButtonWrapper = styled.div`\n  margin-left: ${({ theme }) => theme.gridUnit * 4}px;\n`;\nexport const FILTERS_CONFIG_MODAL_TEST_ID = 'filters-config-modal';\nexport const getFiltersConfigModalTestId = testWithId(FILTERS_CONFIG_MODAL_TEST_ID);\nexport const ALLOW_DEPENDENCIES = [\n'filter_range',\n'filter_select',\n'filter_time'];\n\nconst DEFAULT_EMPTY_FILTERS = [];\nconst DEFAULT_REMOVED_FILTERS = {};\nconst DEFAULT_FORM_VALUES = {\n  filters: {}\n};\n/**\n * This is the modal to configure all the dashboard-native filters.\n * Manages modal-level state, such as what filters are in the list,\n * and which filter is currently being edited.\n *\n * Calls the `save` callback with the new FilterConfiguration object\n * when the user saves the filters.\n */\nfunction FiltersConfigModal({ isOpen, initialFilterId, createNewOnOpen, onSave, onCancel }) {\n  const dispatch = useDispatch();\n  const theme = useTheme();\n  const [form] = AntdForm.useForm();\n  const configFormRef = useRef();\n  // the filter config from redux state, this does not change until modal is closed.\n  const filterConfig = useFilterConfiguration();\n  const filterConfigMap = useFilterConfigMap();\n  // new filter ids belong to filters have been added during\n  // this configuration session, and only exist in the form state until we submit.\n  const [newFilterIds, setNewFilterIds] = useState(DEFAULT_EMPTY_FILTERS);\n  // store ids of filters that have been removed with the time they were removed\n  // so that we can disappear them after a few secs.\n  // filters are still kept in state until form is submitted.\n  const [removedFilters, setRemovedFilters] = useState(DEFAULT_REMOVED_FILTERS);\n  const [saveAlertVisible, setSaveAlertVisible] = useState(false);\n  // The full ordered set of ((original + new) - completely removed) filter ids\n  // Use this as the canonical list of what filters are being configured!\n  // This includes filter ids that are pending removal, so check for that.\n  const filterIds = useMemo(() => _uniq([...getFilterIds(filterConfig), ...newFilterIds]).filter((id) => {var _removedFilters$id;return !removedFilters[id] || ((_removedFilters$id = removedFilters[id]) == null ? void 0 : _removedFilters$id.isPending);}), [filterConfig, newFilterIds, removedFilters]);\n  // open the first filter in the list to start\n  const initialCurrentFilterId = initialFilterId != null ? initialFilterId : filterIds[0];\n  const [currentFilterId, setCurrentFilterId] = useState(initialCurrentFilterId);\n  const [erroredFilters, setErroredFilters] = useState(DEFAULT_EMPTY_FILTERS);\n  // the form values are managed by the antd form, but we copy them to here\n  // so that we can display them (e.g. filter titles in the tab headers)\n  const [formValues, setFormValues] = useState(DEFAULT_FORM_VALUES);\n  const unsavedFiltersIds = newFilterIds.filter((id) => !removedFilters[id]);\n  // brings back a filter that was previously removed (\"Undo\")\n  const restoreFilter = useCallback((id) => {\n    const removal = removedFilters[id];\n    // gotta clear the removal timeout to prevent the filter from getting deleted\n    if (removal != null && removal.isPending)\n    clearTimeout(removal.timerId);\n    setRemovedFilters((current) => ({ ...current, [id]: null }));\n  }, [removedFilters]);\n  const initialFilterOrder = useMemo(() => Object.keys(filterConfigMap), [filterConfigMap]);\n  // State for tracking the re-ordering of filters\n  const [orderedFilters, setOrderedFilters] = useState(initialFilterOrder);\n  // State for rendered filter to improve performance\n  const [renderedFilters, setRenderedFilters] = useState([\n  initialCurrentFilterId]\n  );\n  const getActiveFilterPanelKey = (filterId) => [\n  `${filterId}-${FilterPanels.configuration.key}`,\n  `${filterId}-${FilterPanels.settings.key}`];\n\n  const [activeFilterPanelKey, setActiveFilterPanelKey] = useState(getActiveFilterPanelKey(initialCurrentFilterId));\n  const handleTabChange = (filterId) => {\n    setCurrentFilterId(filterId);\n    setActiveFilterPanelKey(getActiveFilterPanelKey(filterId));\n  };\n  // generates a new filter id and appends it to the newFilterIds\n  const addFilter = useCallback((type) => {\n    const newFilterId = generateFilterId(type);\n    setNewFilterIds([...newFilterIds, newFilterId]);\n    setCurrentFilterId(newFilterId);\n    setSaveAlertVisible(false);\n    setOrderedFilters([...orderedFilters, newFilterId]);\n    setActiveFilterPanelKey(getActiveFilterPanelKey(newFilterId));\n  }, [\n  newFilterIds,\n  orderedFilters,\n  setCurrentFilterId,\n  setOrderedFilters,\n  setNewFilterIds]\n  );\n  useOpenModal(isOpen, addFilter, createNewOnOpen);\n  useRemoveCurrentFilter(removedFilters, currentFilterId, orderedFilters, setCurrentFilterId);\n  const handleRemoveItem = createHandleRemoveItem(setRemovedFilters, setOrderedFilters, setSaveAlertVisible);\n  // After this, it should be as if the modal was just opened fresh.\n  // Called when the modal is closed.\n  const resetForm = (isSaving = false) => {\n    setNewFilterIds(DEFAULT_EMPTY_FILTERS);\n    setCurrentFilterId(initialCurrentFilterId);\n    setRemovedFilters(DEFAULT_REMOVED_FILTERS);\n    setSaveAlertVisible(false);\n    setFormValues(DEFAULT_FORM_VALUES);\n    setErroredFilters(DEFAULT_EMPTY_FILTERS);\n    if (filterIds.length > 0) {\n      setActiveFilterPanelKey(getActiveFilterPanelKey(filterIds[0]));\n    }\n    if (!isSaving) {\n      setOrderedFilters(initialFilterOrder);\n    }\n    setRenderedFilters([initialCurrentFilterId]);\n    form.resetFields(['filters']);\n    form.setFieldsValue({ changed: false });\n  };\n  const getFilterTitle = useCallback((id) => {\n    const formValue = formValues.filters[id];\n    const config = filterConfigMap[id];\n    return formValue && 'name' in formValue && formValue.name ||\n    formValue && 'title' in formValue && formValue.title ||\n    config && 'name' in config && config.name ||\n    config && 'title' in config && config.title ||\n    t('[untitled]');\n  }, [filterConfigMap, formValues.filters]);\n  const canBeUsedAsDependency = useCallback((filterId) => {var _form$getFieldValue;\n    if (removedFilters[filterId]) {\n      return false;\n    }\n    const component = ((_form$getFieldValue = form.getFieldValue('filters')) == null ? void 0 : _form$getFieldValue[filterId]) || filterConfigMap[filterId];\n    return component &&\n    'filterType' in component &&\n    ALLOW_DEPENDENCIES.includes(component.filterType);\n  }, [filterConfigMap, form, removedFilters]);\n  const getAvailableFilters = useCallback((filterId) => filterIds.\n  filter((id) => id !== filterId).\n  filter((id) => canBeUsedAsDependency(id)).\n  map((id) => {var _filterConfigMap$id;return {\n      label: getFilterTitle(id),\n      value: id,\n      type: (_filterConfigMap$id = filterConfigMap[id]) == null ? void 0 : _filterConfigMap$id.filterType\n    };}), [canBeUsedAsDependency, filterIds, getFilterTitle]);\n  const cleanDeletedParents = (values) => {\n    const updatedFilterConfigMap = Object.keys(filterConfigMap).reduce((acc, key) => {var _filter$cascadeParent;\n      const filter = filterConfigMap[key];\n      const cascadeParentIds = (_filter$cascadeParent = filter.cascadeParentIds) == null ? void 0 : _filter$cascadeParent.filter((id) => canBeUsedAsDependency(id));\n      if (cascadeParentIds) {\n        dispatch(updateCascadeParentIds(key, cascadeParentIds));\n      }\n      return {\n        ...acc,\n        [key]: {\n          ...filter,\n          cascadeParentIds\n        }\n      };\n    }, {});\n    const filters = values == null ? void 0 : values.filters;\n    if (filters) {\n      Object.keys(filters).forEach((key) => {\n        const filter = filters[key];\n        if (!('dependencies' in filter)) {\n          return;\n        }\n        const { dependencies } = filter;\n        if (dependencies) {\n          filter.dependencies = dependencies.filter((id) => canBeUsedAsDependency(id));\n        }\n      });\n    }\n    return updatedFilterConfigMap;\n  };\n  const handleErroredFilters = useCallback(() => {\n    // managing left pane errored filters indicators\n    const formValidationFields = form.getFieldsError();\n    const erroredFiltersIds = [];\n    formValidationFields.forEach((field) => {\n      const filterId = field.name[1];\n      if (field.errors.length > 0 && !erroredFiltersIds.includes(filterId)) {\n        erroredFiltersIds.push(filterId);\n      }\n    });\n    // no form validation issues found, resets errored filters\n    if (!erroredFiltersIds.length && erroredFilters.length > 0) {\n      setErroredFilters(DEFAULT_EMPTY_FILTERS);\n      return;\n    }\n    // form validation issues found, sets errored filters\n    if (erroredFiltersIds.length > 0 &&\n    !_isEqual(_sortBy(erroredFilters), _sortBy(erroredFiltersIds))) {\n      setErroredFilters(erroredFiltersIds);\n    }\n  }, [form, erroredFilters]);\n  const handleSave = async () => {\n    const values = await validateForm(form, currentFilterId, setCurrentFilterId);\n    handleErroredFilters();\n    if (values) {\n      const updatedFilterConfigMap = cleanDeletedParents(values);\n      createHandleSave(updatedFilterConfigMap, orderedFilters, removedFilters, onSave, values)();\n      resetForm(true);\n    } else\n    {var _configFormRef$curren;\n      (_configFormRef$curren = configFormRef.current) == null ? void 0 : _configFormRef$curren.changeTab == null ? void 0 : _configFormRef$curren.changeTab('configuration');\n    }\n  };\n  const handleConfirmCancel = () => {\n    resetForm();\n    onCancel();\n  };\n  const handleCancel = () => {\n    const changed = form.getFieldValue('changed');\n    const didChangeOrder = orderedFilters.length !== initialFilterOrder.length ||\n    orderedFilters.some((val, index) => val !== initialFilterOrder[index]);\n    if (unsavedFiltersIds.length > 0 ||\n    form.isFieldsTouched() ||\n    changed ||\n    didChangeOrder) {\n      setSaveAlertVisible(true);\n    } else\n    {\n      handleConfirmCancel();\n    }\n  };\n  const handleRearrange = (dragIndex, targetIndex) => {\n    const newOrderedFilter = [...orderedFilters];\n    const removed = newOrderedFilter.splice(dragIndex, 1)[0];\n    newOrderedFilter.splice(targetIndex, 0, removed);\n    setOrderedFilters(newOrderedFilter);\n  };\n  const buildDependencyMap = useCallback(() => {\n    const dependencyMap = new Map();\n    const filters = form.getFieldValue('filters');\n    if (filters) {\n      Object.keys(filters).forEach((key) => {\n        const formItem = filters[key];\n        const configItem = filterConfigMap[key];\n        let array = [];\n        if (formItem && 'dependencies' in formItem) {\n          array = [...formItem.dependencies];\n        } else\n        if (configItem != null && configItem.cascadeParentIds) {\n          array = [...configItem.cascadeParentIds];\n        }\n        dependencyMap.set(key, array);\n      });\n    }\n    return dependencyMap;\n  }, [filterConfigMap, form]);\n  const validateDependencies = useCallback(() => {\n    const dependencyMap = buildDependencyMap();\n    filterIds.\n    filter((id) => !removedFilters[id]).\n    forEach((filterId) => {\n      const result = hasCircularDependency(dependencyMap, filterId);\n      const field = {\n        name: ['filters', filterId, 'dependencies'],\n        errors: result ? [t('Cyclic dependency detected')] : []\n      };\n      form.setFields([field]);\n    });\n    handleErroredFilters();\n  }, [\n  buildDependencyMap,\n  filterIds,\n  form,\n  handleErroredFilters,\n  removedFilters]\n  );\n  const getDependencySuggestion = useCallback((filterId) => {\n    const dependencyMap = buildDependencyMap();\n    const possibleDependencies = orderedFilters.filter((key) => key !== filterId && canBeUsedAsDependency(key));\n    const found = possibleDependencies.find((filter) => {\n      const dependencies = dependencyMap.get(filterId) || [];\n      dependencies.push(filter);\n      if (hasCircularDependency(dependencyMap, filterId)) {\n        dependencies.pop();\n        return false;\n      }\n      return true;\n    });\n    return found || possibleDependencies[0];\n  }, [buildDependencyMap, canBeUsedAsDependency, orderedFilters]);\n  const [expanded, setExpanded] = useState(false);\n  const toggleExpand = useEffectEvent(() => {\n    setExpanded(!expanded);\n  });\n  const ToggleIcon = expanded ?\n  Icons.FullscreenExitOutlined :\n  Icons.FullscreenOutlined;\n  const handleValuesChange = useMemo(() => _debounce((changes, values) => {\n    const didChangeFilterName = changes.filters &&\n    Object.values(changes.filters).some((filter) => filter.name && filter.name !== null);\n    const didChangeSectionTitle = changes.filters &&\n    Object.values(changes.filters).some((filter) => filter.title && filter.title !== null);\n    if (didChangeFilterName || didChangeSectionTitle) {\n      // we only need to set this if a name/title changed\n      setFormValues(values);\n    }\n    setSaveAlertVisible(false);\n    handleErroredFilters();\n  }, SLOW_DEBOUNCE), [handleErroredFilters]);\n  useEffect(() => {\n    if (!_isEmpty(removedFilters)) {\n      setErroredFilters((prevErroredFilters) => prevErroredFilters.filter((f) => !removedFilters[f]));\n    }\n  }, [removedFilters]);\n  useEffect(() => {\n    if (!renderedFilters.includes(currentFilterId)) {\n      setRenderedFilters([...renderedFilters, currentFilterId]);\n    }\n  }, [currentFilterId]);\n  const handleActiveFilterPanelChange = useCallback((key) => setActiveFilterPanelKey(key), [setActiveFilterPanelKey]);\n  const formList = useMemo(() => orderedFilters.map((id) => {\n    if (!renderedFilters.includes(id))\n    return null;\n    const isDivider = id.startsWith(NATIVE_FILTER_DIVIDER_PREFIX);\n    const isActive = currentFilterId === id;\n    return ___EmotionJSX(\"div\", { key: id, style: {\n        height: '100%',\n        overflowY: 'auto',\n        display: isActive ? '' : 'none'\n      } },\n    isDivider ? ___EmotionJSX(DividerConfigForm, { componentId: id, divider: filterConfigMap[id] }) : ___EmotionJSX(FiltersConfigForm, { ref: configFormRef, form: form, filterId: id, filterToEdit: filterConfigMap[id], removedFilters: removedFilters, restoreFilter: restoreFilter, getAvailableFilters: getAvailableFilters, key: id, activeFilterPanelKeys: activeFilterPanelKey, handleActiveFilterPanelChange: handleActiveFilterPanelChange, isActive: isActive, setErroredFilters: setErroredFilters, validateDependencies: validateDependencies, getDependencySuggestion: getDependencySuggestion })\n    );\n  }), [\n  renderedFilters,\n  orderedFilters,\n  currentFilterId,\n  filterConfigMap,\n  form,\n  removedFilters,\n  restoreFilter,\n  getAvailableFilters,\n  activeFilterPanelKey,\n  validateDependencies,\n  getDependencySuggestion,\n  handleActiveFilterPanelChange]\n  );\n  return ___EmotionJSX(StyledModalWrapper, { visible: isOpen, maskClosable: false, title: t('Add and edit filters'), expanded: expanded, destroyOnClose: true, onCancel: handleCancel, onOk: handleSave, centered: true, \"data-test\": \"filter-modal\", footer: ___EmotionJSX(\"div\", { css: css`\n            display: flex;\n            justify-content: flex-end;\n            align-items: flex-end;\n          ` },\n    ___EmotionJSX(Footer, { onDismiss: () => setSaveAlertVisible(false), onCancel: handleCancel, handleSave: handleSave, canSave: !erroredFilters.length, saveAlertVisible: saveAlertVisible, onConfirmCancel: handleConfirmCancel }),\n    ___EmotionJSX(StyledExpandButtonWrapper, null,\n    ___EmotionJSX(ToggleIcon, { iconSize: \"l\", iconColor: theme.colors.grayscale.dark2, onClick: toggleExpand })\n    )\n    ) },\n  ___EmotionJSX(ErrorBoundary, null,\n  ___EmotionJSX(StyledModalBody, { expanded: expanded },\n  ___EmotionJSX(StyledForm, { form: form, onValuesChange: handleValuesChange, layout: \"vertical\" },\n  ___EmotionJSX(FilterConfigurePane, { erroredFilters: erroredFilters, onRemove: handleRemoveItem, onAdd: addFilter, onChange: handleTabChange, getFilterTitle: getFilterTitle, currentFilterId: currentFilterId, removedFilters: removedFilters, restoreFilter: restoreFilter, onRearrange: handleRearrange, filters: orderedFilters },\n  formList\n  )\n  )\n  )\n  )\n  );\n}__signature__(FiltersConfigModal, \"useDispatch{dispatch}\\nuseTheme{theme}\\nuseForm{[form]}\\nuseRef{configFormRef}\\nuseFilterConfiguration{filterConfig}\\nuseFilterConfigMap{filterConfigMap}\\nuseState{[newFilterIds, setNewFilterIds](DEFAULT_EMPTY_FILTERS)}\\nuseState{[removedFilters, setRemovedFilters](DEFAULT_REMOVED_FILTERS)}\\nuseState{[saveAlertVisible, setSaveAlertVisible](false)}\\nuseMemo{filterIds}\\nuseState{[currentFilterId, setCurrentFilterId](initialCurrentFilterId)}\\nuseState{[erroredFilters, setErroredFilters](DEFAULT_EMPTY_FILTERS)}\\nuseState{[formValues, setFormValues](DEFAULT_FORM_VALUES)}\\nuseCallback{restoreFilter}\\nuseMemo{initialFilterOrder}\\nuseState{[orderedFilters, setOrderedFilters](initialFilterOrder)}\\nuseState{[renderedFilters, setRenderedFilters]([\\n        initialCurrentFilterId,\\n    ])}\\nuseState{[activeFilterPanelKey, setActiveFilterPanelKey](getActiveFilterPanelKey(initialCurrentFilterId))}\\nuseCallback{addFilter}\\nuseOpenModal{}\\nuseRemoveCurrentFilter{}\\nuseCallback{getFilterTitle}\\nuseCallback{canBeUsedAsDependency}\\nuseCallback{getAvailableFilters}\\nuseCallback{handleErroredFilters}\\nuseCallback{buildDependencyMap}\\nuseCallback{validateDependencies}\\nuseCallback{getDependencySuggestion}\\nuseState{[expanded, setExpanded](false)}\\nuseEffectEvent{toggleExpand}\\nuseMemo{handleValuesChange}\\nuseEffect{}\\nuseEffect{}\\nuseCallback{handleActiveFilterPanelChange}\\nuseMemo{formList}\", () => [useDispatch, useTheme, useFilterConfiguration, useFilterConfigMap, useOpenModal, useRemoveCurrentFilter, useEffectEvent]);const _default = /*#__PURE__*/\nReact.memo(FiltersConfigModal);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(MODAL_MARGIN, \"MODAL_MARGIN\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigModal.tsx\");reactHotLoader.register(MIN_WIDTH, \"MIN_WIDTH\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigModal.tsx\");reactHotLoader.register(StyledModalWrapper, \"StyledModalWrapper\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigModal.tsx\");reactHotLoader.register(StyledModalBody, \"StyledModalBody\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigModal.tsx\");reactHotLoader.register(StyledForm, \"StyledForm\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigModal.tsx\");reactHotLoader.register(StyledExpandButtonWrapper, \"StyledExpandButtonWrapper\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigModal.tsx\");reactHotLoader.register(FILTERS_CONFIG_MODAL_TEST_ID, \"FILTERS_CONFIG_MODAL_TEST_ID\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigModal.tsx\");reactHotLoader.register(getFiltersConfigModalTestId, \"getFiltersConfigModalTestId\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigModal.tsx\");reactHotLoader.register(ALLOW_DEPENDENCIES, \"ALLOW_DEPENDENCIES\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigModal.tsx\");reactHotLoader.register(DEFAULT_EMPTY_FILTERS, \"DEFAULT_EMPTY_FILTERS\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigModal.tsx\");reactHotLoader.register(DEFAULT_REMOVED_FILTERS, \"DEFAULT_REMOVED_FILTERS\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigModal.tsx\");reactHotLoader.register(DEFAULT_FORM_VALUES, \"DEFAULT_FORM_VALUES\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigModal.tsx\");reactHotLoader.register(FiltersConfigModal, \"FiltersConfigModal\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigModal.tsx\");reactHotLoader.register(_default, \"default\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigModal.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["React","useEffect","useCallback","useMemo","useState","useRef","styled","SLOW_DEBOUNCE","t","css","useTheme","useDispatch","AntdForm","Icons","ErrorBoundary","StyledModal","testWithId","updateCascadeParentIds","useEffectEvent","useFilterConfigMap","useFilterConfiguration","FilterConfigurePane","FiltersConfigForm","FilterPanels","Footer","useOpenModal","useRemoveCurrentFilter","createHandleSave","createHandleRemoveItem","generateFilterId","getFilterIds","validateForm","NATIVE_FILTER_DIVIDER_PREFIX","hasCircularDependency","DividerConfigForm","jsx","___EmotionJSX","MODAL_MARGIN","MIN_WIDTH","StyledModalWrapper","expanded","StyledModalBody","div","theme","gridUnit","StyledForm","StyledExpandButtonWrapper","FILTERS_CONFIG_MODAL_TEST_ID","getFiltersConfigModalTestId","ALLOW_DEPENDENCIES","DEFAULT_EMPTY_FILTERS","DEFAULT_REMOVED_FILTERS","DEFAULT_FORM_VALUES","filters","FiltersConfigModal","isOpen","initialFilterId","createNewOnOpen","onSave","onCancel","dispatch","form","useForm","configFormRef","filterConfig","filterConfigMap","newFilterIds","setNewFilterIds","removedFilters","setRemovedFilters","saveAlertVisible","setSaveAlertVisible","filterIds","_uniq","filter","id","_removedFilters$id","isPending","initialCurrentFilterId","currentFilterId","setCurrentFilterId","erroredFilters","setErroredFilters","formValues","setFormValues","unsavedFiltersIds","restoreFilter","removal","clearTimeout","timerId","current","initialFilterOrder","Object","keys","orderedFilters","setOrderedFilters","renderedFilters","setRenderedFilters","getActiveFilterPanelKey","filterId","configuration","key","settings","activeFilterPanelKey","setActiveFilterPanelKey","handleTabChange","addFilter","type","newFilterId","handleRemoveItem","resetForm","isSaving","length","resetFields","setFieldsValue","changed","getFilterTitle","formValue","config","name","title","canBeUsedAsDependency","_form$getFieldValue","component","getFieldValue","includes","filterType","getAvailableFilters","map","_filterConfigMap$id","label","value","cleanDeletedParents","values","updatedFilterConfigMap","reduce","acc","_filter$cascadeParent","cascadeParentIds","forEach","dependencies","handleErroredFilters","formValidationFields","getFieldsError","erroredFiltersIds","field","errors","push","_isEqual","_sortBy","handleSave","_configFormRef$curren","changeTab","handleConfirmCancel","handleCancel","didChangeOrder","some","val","index","isFieldsTouched","handleRearrange","dragIndex","targetIndex","newOrderedFilter","removed","splice","buildDependencyMap","dependencyMap","Map","formItem","configItem","array","set","validateDependencies","result","setFields","getDependencySuggestion","possibleDependencies","found","find","get","pop","setExpanded","toggleExpand","ToggleIcon","FullscreenExitOutlined","FullscreenOutlined","handleValuesChange","_debounce","changes","didChangeFilterName","didChangeSectionTitle","_isEmpty","prevErroredFilters","f","handleActiveFilterPanelChange","formList","isDivider","startsWith","isActive","style","height","overflowY","display","componentId","divider","ref","filterToEdit","activeFilterPanelKeys","visible","maskClosable","destroyOnClose","onOk","centered","footer","onDismiss","canSave","onConfirmCancel","iconSize","iconColor","colors","grayscale","dark2","onClick","onValuesChange","layout","onRemove","onAdd","onChange","onRearrange","__signature__","_default","memo","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigModal.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, {\n  useEffect,\n  useCallback,\n  useMemo,\n  useState,\n  useRef,\n} from 'react';\nimport { uniq, isEqual, sortBy, debounce, isEmpty } from 'lodash';\nimport {\n  Filter,\n  FilterConfiguration,\n  NativeFilterType,\n  Divider,\n  styled,\n  SLOW_DEBOUNCE,\n  t,\n  css,\n  useTheme,\n} from '@superset-ui/core';\nimport { useDispatch } from 'react-redux';\nimport { AntdForm } from 'src/components';\nimport Icons from 'src/components/Icons';\nimport ErrorBoundary from 'src/components/ErrorBoundary';\nimport { StyledModal } from 'src/components/Modal';\nimport { testWithId } from 'src/utils/testUtils';\nimport { updateCascadeParentIds } from 'src/dashboard/actions/nativeFilters';\nimport useEffectEvent from 'src/hooks/useEffectEvent';\nimport { useFilterConfigMap, useFilterConfiguration } from '../state';\nimport FilterConfigurePane from './FilterConfigurePane';\nimport FiltersConfigForm, {\n  FilterPanels,\n} from './FiltersConfigForm/FiltersConfigForm';\nimport Footer from './Footer/Footer';\nimport { useOpenModal, useRemoveCurrentFilter } from './state';\nimport { FilterRemoval, NativeFiltersForm } from './types';\nimport {\n  createHandleSave,\n  createHandleRemoveItem,\n  generateFilterId,\n  getFilterIds,\n  validateForm,\n  NATIVE_FILTER_DIVIDER_PREFIX,\n  hasCircularDependency,\n} from './utils';\nimport DividerConfigForm from './DividerConfigForm';\n\nconst MODAL_MARGIN = 16;\nconst MIN_WIDTH = 880;\n\nconst StyledModalWrapper = styled(StyledModal)<{ expanded: boolean }>`\n  min-width: ${MIN_WIDTH}px;\n  width: ${({ expanded }) => (expanded ? '100%' : MIN_WIDTH)} !important;\n\n  @media (max-width: ${MIN_WIDTH + MODAL_MARGIN * 2}px) {\n    width: 100% !important;\n    min-width: auto;\n  }\n\n  .ant-modal-body {\n    padding: 0px;\n  }\n\n  ${({ expanded }) =>\n    expanded &&\n    css`\n      height: 100%;\n\n      .ant-modal-body {\n        flex: 1 1 auto;\n      }\n      .ant-modal-content {\n        height: 100%;\n      }\n    `}\n`;\n\nexport const StyledModalBody = styled.div<{ expanded: boolean }>`\n  display: flex;\n  height: ${({ expanded }) => (expanded ? '100%' : '700px')};\n  flex-direction: row;\n  flex: 1;\n  .filters-list {\n    width: ${({ theme }) => theme.gridUnit * 50}px;\n    overflow: auto;\n  }\n`;\n\nexport const StyledForm = styled(AntdForm)`\n  width: 100%;\n`;\n\nexport const StyledExpandButtonWrapper = styled.div`\n  margin-left: ${({ theme }) => theme.gridUnit * 4}px;\n`;\n\nexport const FILTERS_CONFIG_MODAL_TEST_ID = 'filters-config-modal';\nexport const getFiltersConfigModalTestId = testWithId(\n  FILTERS_CONFIG_MODAL_TEST_ID,\n);\n\nexport interface FiltersConfigModalProps {\n  isOpen: boolean;\n  initialFilterId?: string;\n  createNewOnOpen?: boolean;\n  onSave: (filterConfig: FilterConfiguration) => Promise<void>;\n  onCancel: () => void;\n}\nexport const ALLOW_DEPENDENCIES = [\n  'filter_range',\n  'filter_select',\n  'filter_time',\n];\n\nconst DEFAULT_EMPTY_FILTERS: string[] = [];\nconst DEFAULT_REMOVED_FILTERS: Record<string, FilterRemoval> = {};\nconst DEFAULT_FORM_VALUES: NativeFiltersForm = {\n  filters: {},\n};\n\n/**\n * This is the modal to configure all the dashboard-native filters.\n * Manages modal-level state, such as what filters are in the list,\n * and which filter is currently being edited.\n *\n * Calls the `save` callback with the new FilterConfiguration object\n * when the user saves the filters.\n */\nfunction FiltersConfigModal({\n  isOpen,\n  initialFilterId,\n  createNewOnOpen,\n  onSave,\n  onCancel,\n}: FiltersConfigModalProps) {\n  const dispatch = useDispatch();\n  const theme = useTheme();\n\n  const [form] = AntdForm.useForm<NativeFiltersForm>();\n\n  const configFormRef = useRef<any>();\n\n  // the filter config from redux state, this does not change until modal is closed.\n  const filterConfig = useFilterConfiguration();\n  const filterConfigMap = useFilterConfigMap();\n\n  // new filter ids belong to filters have been added during\n  // this configuration session, and only exist in the form state until we submit.\n  const [newFilterIds, setNewFilterIds] = useState<string[]>(\n    DEFAULT_EMPTY_FILTERS,\n  );\n\n  // store ids of filters that have been removed with the time they were removed\n  // so that we can disappear them after a few secs.\n  // filters are still kept in state until form is submitted.\n  const [removedFilters, setRemovedFilters] = useState<\n    Record<string, FilterRemoval>\n  >(DEFAULT_REMOVED_FILTERS);\n\n  const [saveAlertVisible, setSaveAlertVisible] = useState<boolean>(false);\n\n  // The full ordered set of ((original + new) - completely removed) filter ids\n  // Use this as the canonical list of what filters are being configured!\n  // This includes filter ids that are pending removal, so check for that.\n  const filterIds = useMemo(\n    () =>\n      uniq([...getFilterIds(filterConfig), ...newFilterIds]).filter(\n        id => !removedFilters[id] || removedFilters[id]?.isPending,\n      ),\n    [filterConfig, newFilterIds, removedFilters],\n  );\n\n  // open the first filter in the list to start\n  const initialCurrentFilterId = initialFilterId ?? filterIds[0];\n  const [currentFilterId, setCurrentFilterId] = useState(\n    initialCurrentFilterId,\n  );\n  const [erroredFilters, setErroredFilters] = useState<string[]>(\n    DEFAULT_EMPTY_FILTERS,\n  );\n\n  // the form values are managed by the antd form, but we copy them to here\n  // so that we can display them (e.g. filter titles in the tab headers)\n  const [formValues, setFormValues] =\n    useState<NativeFiltersForm>(DEFAULT_FORM_VALUES);\n\n  const unsavedFiltersIds = newFilterIds.filter(id => !removedFilters[id]);\n  // brings back a filter that was previously removed (\"Undo\")\n  const restoreFilter = useCallback(\n    (id: string) => {\n      const removal = removedFilters[id];\n      // gotta clear the removal timeout to prevent the filter from getting deleted\n      if (removal?.isPending) clearTimeout(removal.timerId);\n      setRemovedFilters(current => ({ ...current, [id]: null }));\n    },\n    [removedFilters],\n  );\n  const initialFilterOrder = useMemo(\n    () => Object.keys(filterConfigMap),\n    [filterConfigMap],\n  );\n\n  // State for tracking the re-ordering of filters\n  const [orderedFilters, setOrderedFilters] =\n    useState<string[]>(initialFilterOrder);\n\n  // State for rendered filter to improve performance\n  const [renderedFilters, setRenderedFilters] = useState<string[]>([\n    initialCurrentFilterId,\n  ]);\n\n  const getActiveFilterPanelKey = (filterId: string) => [\n    `${filterId}-${FilterPanels.configuration.key}`,\n    `${filterId}-${FilterPanels.settings.key}`,\n  ];\n\n  const [activeFilterPanelKey, setActiveFilterPanelKey] = useState<\n    string | string[]\n  >(getActiveFilterPanelKey(initialCurrentFilterId));\n\n  const handleTabChange = (filterId: string) => {\n    setCurrentFilterId(filterId);\n    setActiveFilterPanelKey(getActiveFilterPanelKey(filterId));\n  };\n\n  // generates a new filter id and appends it to the newFilterIds\n  const addFilter = useCallback(\n    (type: NativeFilterType) => {\n      const newFilterId = generateFilterId(type);\n      setNewFilterIds([...newFilterIds, newFilterId]);\n      setCurrentFilterId(newFilterId);\n      setSaveAlertVisible(false);\n      setOrderedFilters([...orderedFilters, newFilterId]);\n      setActiveFilterPanelKey(getActiveFilterPanelKey(newFilterId));\n    },\n    [\n      newFilterIds,\n      orderedFilters,\n      setCurrentFilterId,\n      setOrderedFilters,\n      setNewFilterIds,\n    ],\n  );\n\n  useOpenModal(isOpen, addFilter, createNewOnOpen);\n\n  useRemoveCurrentFilter(\n    removedFilters,\n    currentFilterId,\n    orderedFilters,\n    setCurrentFilterId,\n  );\n\n  const handleRemoveItem = createHandleRemoveItem(\n    setRemovedFilters,\n    setOrderedFilters,\n    setSaveAlertVisible,\n  );\n\n  // After this, it should be as if the modal was just opened fresh.\n  // Called when the modal is closed.\n  const resetForm = (isSaving = false) => {\n    setNewFilterIds(DEFAULT_EMPTY_FILTERS);\n    setCurrentFilterId(initialCurrentFilterId);\n    setRemovedFilters(DEFAULT_REMOVED_FILTERS);\n    setSaveAlertVisible(false);\n    setFormValues(DEFAULT_FORM_VALUES);\n    setErroredFilters(DEFAULT_EMPTY_FILTERS);\n    if (filterIds.length > 0) {\n      setActiveFilterPanelKey(getActiveFilterPanelKey(filterIds[0]));\n    }\n    if (!isSaving) {\n      setOrderedFilters(initialFilterOrder);\n    }\n    setRenderedFilters([initialCurrentFilterId]);\n    form.resetFields(['filters']);\n    form.setFieldsValue({ changed: false });\n  };\n\n  const getFilterTitle = useCallback(\n    (id: string) => {\n      const formValue = formValues.filters[id];\n      const config = filterConfigMap[id];\n      return (\n        (formValue && 'name' in formValue && formValue.name) ||\n        (formValue && 'title' in formValue && formValue.title) ||\n        (config && 'name' in config && config.name) ||\n        (config && 'title' in config && config.title) ||\n        t('[untitled]')\n      );\n    },\n    [filterConfigMap, formValues.filters],\n  );\n\n  const canBeUsedAsDependency = useCallback(\n    (filterId: string) => {\n      if (removedFilters[filterId]) {\n        return false;\n      }\n      const component =\n        form.getFieldValue('filters')?.[filterId] || filterConfigMap[filterId];\n      return (\n        component &&\n        'filterType' in component &&\n        ALLOW_DEPENDENCIES.includes(component.filterType)\n      );\n    },\n    [filterConfigMap, form, removedFilters],\n  );\n\n  const getAvailableFilters = useCallback(\n    (filterId: string) =>\n      filterIds\n        .filter(id => id !== filterId)\n        .filter(id => canBeUsedAsDependency(id))\n        .map(id => ({\n          label: getFilterTitle(id),\n          value: id,\n          type: filterConfigMap[id]?.filterType,\n        })),\n    [canBeUsedAsDependency, filterIds, getFilterTitle],\n  );\n\n  const cleanDeletedParents = (values: NativeFiltersForm | null) => {\n    const updatedFilterConfigMap = Object.keys(filterConfigMap).reduce(\n      (acc, key) => {\n        const filter = filterConfigMap[key];\n        const cascadeParentIds = filter.cascadeParentIds?.filter(id =>\n          canBeUsedAsDependency(id),\n        );\n        if (cascadeParentIds) {\n          dispatch(updateCascadeParentIds(key, cascadeParentIds));\n        }\n        return {\n          ...acc,\n          [key]: {\n            ...filter,\n            cascadeParentIds,\n          },\n        };\n      },\n      {},\n    );\n\n    const filters = values?.filters;\n    if (filters) {\n      Object.keys(filters).forEach(key => {\n        const filter = filters[key];\n        if (!('dependencies' in filter)) {\n          return;\n        }\n        const { dependencies } = filter;\n        if (dependencies) {\n          filter.dependencies = dependencies.filter(id =>\n            canBeUsedAsDependency(id),\n          );\n        }\n      });\n    }\n    return updatedFilterConfigMap;\n  };\n\n  const handleErroredFilters = useCallback(() => {\n    // managing left pane errored filters indicators\n    const formValidationFields = form.getFieldsError();\n    const erroredFiltersIds: string[] = [];\n\n    formValidationFields.forEach(field => {\n      const filterId = field.name[1] as string;\n      if (field.errors.length > 0 && !erroredFiltersIds.includes(filterId)) {\n        erroredFiltersIds.push(filterId);\n      }\n    });\n\n    // no form validation issues found, resets errored filters\n    if (!erroredFiltersIds.length && erroredFilters.length > 0) {\n      setErroredFilters(DEFAULT_EMPTY_FILTERS);\n      return;\n    }\n    // form validation issues found, sets errored filters\n    if (\n      erroredFiltersIds.length > 0 &&\n      !isEqual(sortBy(erroredFilters), sortBy(erroredFiltersIds))\n    ) {\n      setErroredFilters(erroredFiltersIds);\n    }\n  }, [form, erroredFilters]);\n\n  const handleSave = async () => {\n    const values: NativeFiltersForm | null = await validateForm(\n      form,\n      currentFilterId,\n      setCurrentFilterId,\n    );\n\n    handleErroredFilters();\n\n    if (values) {\n      const updatedFilterConfigMap = cleanDeletedParents(values);\n      createHandleSave(\n        updatedFilterConfigMap,\n        orderedFilters,\n        removedFilters,\n        onSave,\n        values,\n      )();\n      resetForm(true);\n    } else {\n      configFormRef.current?.changeTab?.('configuration');\n    }\n  };\n\n  const handleConfirmCancel = () => {\n    resetForm();\n    onCancel();\n  };\n\n  const handleCancel = () => {\n    const changed = form.getFieldValue('changed');\n    const didChangeOrder =\n      orderedFilters.length !== initialFilterOrder.length ||\n      orderedFilters.some((val, index) => val !== initialFilterOrder[index]);\n    if (\n      unsavedFiltersIds.length > 0 ||\n      form.isFieldsTouched() ||\n      changed ||\n      didChangeOrder\n    ) {\n      setSaveAlertVisible(true);\n    } else {\n      handleConfirmCancel();\n    }\n  };\n  const handleRearrange = (dragIndex: number, targetIndex: number) => {\n    const newOrderedFilter = [...orderedFilters];\n    const removed = newOrderedFilter.splice(dragIndex, 1)[0];\n    newOrderedFilter.splice(targetIndex, 0, removed);\n    setOrderedFilters(newOrderedFilter);\n  };\n\n  const buildDependencyMap = useCallback(() => {\n    const dependencyMap = new Map<string, string[]>();\n    const filters = form.getFieldValue('filters');\n    if (filters) {\n      Object.keys(filters).forEach(key => {\n        const formItem = filters[key];\n        const configItem = filterConfigMap[key];\n        let array: string[] = [];\n        if (formItem && 'dependencies' in formItem) {\n          array = [...formItem.dependencies];\n        } else if (configItem?.cascadeParentIds) {\n          array = [...configItem.cascadeParentIds];\n        }\n        dependencyMap.set(key, array);\n      });\n    }\n    return dependencyMap;\n  }, [filterConfigMap, form]);\n\n  const validateDependencies = useCallback(() => {\n    const dependencyMap = buildDependencyMap();\n    filterIds\n      .filter(id => !removedFilters[id])\n      .forEach(filterId => {\n        const result = hasCircularDependency(dependencyMap, filterId);\n        const field = {\n          name: ['filters', filterId, 'dependencies'],\n          errors: result ? [t('Cyclic dependency detected')] : [],\n        };\n        form.setFields([field]);\n      });\n    handleErroredFilters();\n  }, [\n    buildDependencyMap,\n    filterIds,\n    form,\n    handleErroredFilters,\n    removedFilters,\n  ]);\n\n  const getDependencySuggestion = useCallback(\n    (filterId: string) => {\n      const dependencyMap = buildDependencyMap();\n      const possibleDependencies = orderedFilters.filter(\n        key => key !== filterId && canBeUsedAsDependency(key),\n      );\n      const found = possibleDependencies.find(filter => {\n        const dependencies = dependencyMap.get(filterId) || [];\n        dependencies.push(filter);\n        if (hasCircularDependency(dependencyMap, filterId)) {\n          dependencies.pop();\n          return false;\n        }\n        return true;\n      });\n      return found || possibleDependencies[0];\n    },\n    [buildDependencyMap, canBeUsedAsDependency, orderedFilters],\n  );\n\n  const [expanded, setExpanded] = useState(false);\n  const toggleExpand = useEffectEvent(() => {\n    setExpanded(!expanded);\n  });\n  const ToggleIcon = expanded\n    ? Icons.FullscreenExitOutlined\n    : Icons.FullscreenOutlined;\n\n  const handleValuesChange = useMemo(\n    () =>\n      debounce((changes: any, values: NativeFiltersForm) => {\n        const didChangeFilterName =\n          changes.filters &&\n          Object.values(changes.filters).some(\n            (filter: any) => filter.name && filter.name !== null,\n          );\n        const didChangeSectionTitle =\n          changes.filters &&\n          Object.values(changes.filters).some(\n            (filter: any) => filter.title && filter.title !== null,\n          );\n        if (didChangeFilterName || didChangeSectionTitle) {\n          // we only need to set this if a name/title changed\n          setFormValues(values);\n        }\n        setSaveAlertVisible(false);\n        handleErroredFilters();\n      }, SLOW_DEBOUNCE),\n    [handleErroredFilters],\n  );\n\n  useEffect(() => {\n    if (!isEmpty(removedFilters)) {\n      setErroredFilters(prevErroredFilters =>\n        prevErroredFilters.filter(f => !removedFilters[f]),\n      );\n    }\n  }, [removedFilters]);\n\n  useEffect(() => {\n    if (!renderedFilters.includes(currentFilterId)) {\n      setRenderedFilters([...renderedFilters, currentFilterId]);\n    }\n  }, [currentFilterId]);\n\n  const handleActiveFilterPanelChange = useCallback(\n    key => setActiveFilterPanelKey(key),\n    [setActiveFilterPanelKey],\n  );\n\n  const formList = useMemo(\n    () =>\n      orderedFilters.map(id => {\n        if (!renderedFilters.includes(id)) return null;\n        const isDivider = id.startsWith(NATIVE_FILTER_DIVIDER_PREFIX);\n        const isActive = currentFilterId === id;\n        return (\n          <div\n            key={id}\n            style={{\n              height: '100%',\n              overflowY: 'auto',\n              display: isActive ? '' : 'none',\n            }}\n          >\n            {isDivider ? (\n              <DividerConfigForm\n                componentId={id}\n                divider={filterConfigMap[id] as Divider}\n              />\n            ) : (\n              <FiltersConfigForm\n                ref={configFormRef}\n                form={form}\n                filterId={id}\n                filterToEdit={filterConfigMap[id] as Filter}\n                removedFilters={removedFilters}\n                restoreFilter={restoreFilter}\n                getAvailableFilters={getAvailableFilters}\n                key={id}\n                activeFilterPanelKeys={activeFilterPanelKey}\n                handleActiveFilterPanelChange={handleActiveFilterPanelChange}\n                isActive={isActive}\n                setErroredFilters={setErroredFilters}\n                validateDependencies={validateDependencies}\n                getDependencySuggestion={getDependencySuggestion}\n              />\n            )}\n          </div>\n        );\n      }),\n    [\n      renderedFilters,\n      orderedFilters,\n      currentFilterId,\n      filterConfigMap,\n      form,\n      removedFilters,\n      restoreFilter,\n      getAvailableFilters,\n      activeFilterPanelKey,\n      validateDependencies,\n      getDependencySuggestion,\n      handleActiveFilterPanelChange,\n    ],\n  );\n\n  return (\n    <StyledModalWrapper\n      visible={isOpen}\n      maskClosable={false}\n      title={t('Add and edit filters')}\n      expanded={expanded}\n      destroyOnClose\n      onCancel={handleCancel}\n      onOk={handleSave}\n      centered\n      data-test=\"filter-modal\"\n      footer={\n        <div\n          css={css`\n            display: flex;\n            justify-content: flex-end;\n            align-items: flex-end;\n          `}\n        >\n          <Footer\n            onDismiss={() => setSaveAlertVisible(false)}\n            onCancel={handleCancel}\n            handleSave={handleSave}\n            canSave={!erroredFilters.length}\n            saveAlertVisible={saveAlertVisible}\n            onConfirmCancel={handleConfirmCancel}\n          />\n          <StyledExpandButtonWrapper>\n            <ToggleIcon\n              iconSize=\"l\"\n              iconColor={theme.colors.grayscale.dark2}\n              onClick={toggleExpand}\n            />\n          </StyledExpandButtonWrapper>\n        </div>\n      }\n    >\n      <ErrorBoundary>\n        <StyledModalBody expanded={expanded}>\n          <StyledForm\n            form={form}\n            onValuesChange={handleValuesChange}\n            layout=\"vertical\"\n          >\n            <FilterConfigurePane\n              erroredFilters={erroredFilters}\n              onRemove={handleRemoveItem}\n              onAdd={addFilter}\n              onChange={handleTabChange}\n              getFilterTitle={getFilterTitle}\n              currentFilterId={currentFilterId}\n              removedFilters={removedFilters}\n              restoreFilter={restoreFilter}\n              onRearrange={handleRearrange}\n              filters={orderedFilters}\n            >\n              {formList}\n            </FilterConfigurePane>\n          </StyledForm>\n        </StyledModalBody>\n      </ErrorBoundary>\n    </StyledModalWrapper>\n  );\n}\n\nexport default React.memo(FiltersConfigModal);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}