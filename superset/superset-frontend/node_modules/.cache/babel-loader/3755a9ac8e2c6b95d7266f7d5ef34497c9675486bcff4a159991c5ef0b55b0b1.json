{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { utcFormat, timeFormat } from 'd3-time-format';\nimport { utcUtils, localTimeUtils } from '../utils/d3Time';\nimport TimeFormatter from '../TimeFormatter';\nexport default function createMultiFormatter({ id, label, description, formats = {}, useLocalTime = false }) {\n  const { millisecond = '.%L', second = ':%S', minute = '%I:%M', hour = '%I %p', day = '%a %d', week = '%b %d', month = '%B', year = '%Y' } = formats;\n  const format = useLocalTime ? timeFormat : utcFormat;\n  const formatMillisecond = format(millisecond);\n  const formatSecond = format(second);\n  const formatMinute = format(minute);\n  const formatHour = format(hour);\n  const formatDay = format(day);\n  const formatFirstDayOfWeek = format(week);\n  const formatMonth = format(month);\n  const formatYear = format(year);\n  const { hasMillisecond, hasSecond, hasMinute, hasHour, isNotFirstDayOfMonth, isNotFirstDayOfWeek, isNotFirstMonth } = useLocalTime ? localTimeUtils : utcUtils;\n  function multiFormatFunc(date) {\n    if (hasMillisecond(date)) {\n      return formatMillisecond;\n    }\n    if (hasSecond(date)) {\n      return formatSecond;\n    }\n    if (hasMinute(date)) {\n      return formatMinute;\n    }\n    if (hasHour(date)) {\n      return formatHour;\n    }\n    if (isNotFirstDayOfMonth(date)) {\n      return isNotFirstDayOfWeek(date) ? formatDay : formatFirstDayOfWeek;\n    }\n    if (isNotFirstMonth(date)) {\n      return formatMonth;\n    }\n    return formatYear;\n  }\n  return new TimeFormatter({\n    description,\n    formatFunc: (date) => multiFormatFunc(date)(date),\n    id,\n    label,\n    useLocalTime\n  });\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(createMultiFormatter, \"createMultiFormatter\", \"/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/time-format/factories/createMultiFormatter.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["utcFormat","timeFormat","utcUtils","localTimeUtils","TimeFormatter","createMultiFormatter","id","label","description","formats","useLocalTime","millisecond","second","minute","hour","day","week","month","year","format","formatMillisecond","formatSecond","formatMinute","formatHour","formatDay","formatFirstDayOfWeek","formatMonth","formatYear","hasMillisecond","hasSecond","hasMinute","hasHour","isNotFirstDayOfMonth","isNotFirstDayOfWeek","isNotFirstMonth","multiFormatFunc","date","formatFunc","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/time-format/factories/createMultiFormatter.ts"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { utcFormat, timeFormat } from 'd3-time-format';\nimport { utcUtils, localTimeUtils } from '../utils/d3Time';\nimport TimeFormatter from '../TimeFormatter';\n\ntype FormatsByStep = Partial<{\n  millisecond: string;\n  second: string;\n  minute: string;\n  hour: string;\n  day: string;\n  week: string;\n  month: string;\n  year: string;\n}>;\n\nexport default function createMultiFormatter({\n  id,\n  label,\n  description,\n  formats = {},\n  useLocalTime = false,\n}: {\n  id: string;\n  label?: string;\n  description?: string;\n  formats?: FormatsByStep;\n  useLocalTime?: boolean;\n}) {\n  const {\n    millisecond = '.%L',\n    second = ':%S',\n    minute = '%I:%M',\n    hour = '%I %p',\n    day = '%a %d',\n    week = '%b %d',\n    month = '%B',\n    year = '%Y',\n  } = formats;\n\n  const format = useLocalTime ? timeFormat : utcFormat;\n\n  const formatMillisecond = format(millisecond);\n  const formatSecond = format(second);\n  const formatMinute = format(minute);\n  const formatHour = format(hour);\n  const formatDay = format(day);\n  const formatFirstDayOfWeek = format(week);\n  const formatMonth = format(month);\n  const formatYear = format(year);\n\n  const {\n    hasMillisecond,\n    hasSecond,\n    hasMinute,\n    hasHour,\n    isNotFirstDayOfMonth,\n    isNotFirstDayOfWeek,\n    isNotFirstMonth,\n  } = useLocalTime ? localTimeUtils : utcUtils;\n\n  function multiFormatFunc(date: Date) {\n    if (hasMillisecond(date)) {\n      return formatMillisecond;\n    }\n    if (hasSecond(date)) {\n      return formatSecond;\n    }\n    if (hasMinute(date)) {\n      return formatMinute;\n    }\n    if (hasHour(date)) {\n      return formatHour;\n    }\n    if (isNotFirstDayOfMonth(date)) {\n      return isNotFirstDayOfWeek(date) ? formatDay : formatFirstDayOfWeek;\n    }\n    if (isNotFirstMonth(date)) {\n      return formatMonth;\n    }\n\n    return formatYear;\n  }\n\n  return new TimeFormatter({\n    description,\n    formatFunc: (date: Date) => multiFormatFunc(date)(date),\n    id,\n    label,\n    useLocalTime,\n  });\n}\n"],"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAmBA,SAASA,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;AACtD,SAASC,QAAQ,EAAEC,cAAc,QAAQ,iBAAiB;AAC1D,OAAOC,aAAa,MAAM,kBAAkB;AAa5C,eAAc,SAAUC,oBAAoBA,CAAC,EAC3CC,EAAE,EACFC,KAAK,EACLC,WAAW,EACXC,OAAO,GAAG,EAAE,EACZC,YAAY,GAAG,KAAK,EAOrB;EACC,MAAM,EACJC,WAAW,GAAG,KAAK,EACnBC,MAAM,GAAG,KAAK,EACdC,MAAM,GAAG,OAAO,EAChBC,IAAI,GAAG,OAAO,EACdC,GAAG,GAAG,OAAO,EACbC,IAAI,GAAG,OAAO,EACdC,KAAK,GAAG,IAAI,EACZC,IAAI,GAAG,IAAI,EACZ,GAAGT,OAAO;EAEX,MAAMU,MAAM,GAAGT,YAAY,GAAGT,UAAU,GAAGD,SAAS;EAEpD,MAAMoB,iBAAiB,GAAGD,MAAM,CAACR,WAAW,CAAC;EAC7C,MAAMU,YAAY,GAAGF,MAAM,CAACP,MAAM,CAAC;EACnC,MAAMU,YAAY,GAAGH,MAAM,CAACN,MAAM,CAAC;EACnC,MAAMU,UAAU,GAAGJ,MAAM,CAACL,IAAI,CAAC;EAC/B,MAAMU,SAAS,GAAGL,MAAM,CAACJ,GAAG,CAAC;EAC7B,MAAMU,oBAAoB,GAAGN,MAAM,CAACH,IAAI,CAAC;EACzC,MAAMU,WAAW,GAAGP,MAAM,CAACF,KAAK,CAAC;EACjC,MAAMU,UAAU,GAAGR,MAAM,CAACD,IAAI,CAAC;EAE/B,MAAM,EACJU,cAAc,EACdC,SAAS,EACTC,SAAS,EACTC,OAAO,EACPC,oBAAoB,EACpBC,mBAAmB,EACnBC,eAAe,EAChB,GAAGxB,YAAY,GAAGP,cAAc,GAAGD,QAAQ;EAE5C,SAASiC,eAAeA,CAACC,IAAU;IACjC,IAAIR,cAAc,CAACQ,IAAI,CAAC,EAAE;MACxB,OAAOhB,iBAAiB;;IAE1B,IAAIS,SAAS,CAACO,IAAI,CAAC,EAAE;MACnB,OAAOf,YAAY;;IAErB,IAAIS,SAAS,CAACM,IAAI,CAAC,EAAE;MACnB,OAAOd,YAAY;;IAErB,IAAIS,OAAO,CAACK,IAAI,CAAC,EAAE;MACjB,OAAOb,UAAU;;IAEnB,IAAIS,oBAAoB,CAACI,IAAI,CAAC,EAAE;MAC9B,OAAOH,mBAAmB,CAACG,IAAI,CAAC,GAAGZ,SAAS,GAAGC,oBAAoB;;IAErE,IAAIS,eAAe,CAACE,IAAI,CAAC,EAAE;MACzB,OAAOV,WAAW;;IAGpB,OAAOC,UAAU;EACnB;EAEA,OAAO,IAAIvB,aAAa,CAAC;IACvBI,WAAW;IACX6B,UAAU,EAAEA,CAACD,IAAU,KAAKD,eAAe,CAACC,IAAI,CAAC,CAACA,IAAI,CAAC;IACvD9B,EAAE;IACFC,KAAK;IACLG;GACD,CAAC;AACJ,CAAC,mBAAA4B,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAC,OAAA,GAAAC,SAAA,MAAAH,cAAA,WAAAA,cAAA,CAAAI,QAAA,CA3EuBrC,oBAAoB,wLAAAsC,WAAA,UAAAJ,oBAAA,mBAAAA,oBAAA,CAAAI,WAAA,GAAAF,SAAA,CAAAE,WAAA,IAAAA,WAAA,CAAAC,MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}