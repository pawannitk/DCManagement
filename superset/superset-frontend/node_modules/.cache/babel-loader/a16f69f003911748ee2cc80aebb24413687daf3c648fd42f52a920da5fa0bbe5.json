{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { addAlpha, css, styled, t } from '@superset-ui/core';\nimport { EmptyStateBig } from 'src/components/EmptyState';\nimport { componentShape } from '../util/propShapes';\nimport DashboardComponent from '../containers/DashboardComponent';\nimport { Droppable } from './dnd/DragDroppable';\nimport { GRID_GUTTER_SIZE, GRID_COLUMN_COUNT } from '../util/constants';\nimport { TAB_TYPE } from '../util/componentTypes';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  depth: PropTypes.number.isRequired,\n  editMode: PropTypes.bool,\n  gridComponent: componentShape,\n  handleComponentDrop: PropTypes.func.isRequired,\n  isComponentVisible: PropTypes.bool.isRequired,\n  resizeComponent: PropTypes.func.isRequired,\n  setDirectPathToChild: PropTypes.func.isRequired,\n  width: PropTypes.number.isRequired,\n  dashboardId: PropTypes.number\n};\n\nconst defaultProps = {};\n\nconst renderDraggableContent = (dropProps) =>\ndropProps.dropIndicatorProps && ___EmotionJSX(\"div\", dropProps.dropIndicatorProps);\n\nconst DashboardEmptyStateContainer = styled.div`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n`;\n\nconst GridContent = styled.div`\n  ${({ theme, editMode }) => css`\n    display: flex;\n    flex-direction: column;\n\n    /* gutters between rows */\n    & > div:not(:last-child):not(.empty-droptarget) {\n      ${!editMode && `margin-bottom: ${theme.gridUnit * 4}px`};\n    }\n\n    .empty-droptarget {\n      width: 100%;\n      height: ${theme.gridUnit * 4}px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      border-radius: ${theme.gridUnit}px;\n      overflow: hidden;\n\n      &:before {\n        content: '';\n        display: block;\n        width: calc(100% - ${theme.gridUnit * 2}px);\n        height: calc(100% - ${theme.gridUnit * 2}px);\n        border: 1px dashed transparent;\n        border-radius: ${theme.gridUnit}px;\n        opacity: 0.5;\n      }\n    }\n\n    & > .empty-droptarget:first-child {\n      height: ${theme.gridUnit * 4}px;\n      margin-top: ${theme.gridUnit * -4}px;\n    }\n\n    & > .empty-droptarget:last-child {\n      height: ${theme.gridUnit * 24}px;\n    }\n\n    & > .empty-droptarget.empty-droptarget--full:only-child {\n      height: 80vh;\n    }\n  `}\n`;\n\nconst GridColumnGuide = styled.div`\n  ${({ theme }) => css`\n    // /* Editing guides */\n    &.grid-column-guide {\n      position: absolute;\n      top: 0;\n      min-height: 100%;\n      background-color: ${addAlpha(\n  theme.colors.primary.base,\n  parseFloat(theme.opacity.light) / 100\n)};\n      pointer-events: none;\n      box-shadow: inset 0 0 0 1px\n        ${addAlpha(\n  theme.colors.primary.base,\n  parseFloat(theme.opacity.mediumHeavy) / 100\n)};\n    }\n  `};\n`;\n\nclass DashboardGrid extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isResizing: false\n    };\n\n    this.handleResizeStart = this.handleResizeStart.bind(this);\n    this.handleResizeStop = this.handleResizeStop.bind(this);\n    this.handleTopDropTargetDrop = this.handleTopDropTargetDrop.bind(this);\n    this.getRowGuidePosition = this.getRowGuidePosition.bind(this);\n    this.setGridRef = this.setGridRef.bind(this);\n    this.handleChangeTab = this.handleChangeTab.bind(this);\n  }\n\n  getRowGuidePosition(resizeRef) {\n    if (resizeRef && this.grid) {\n      return (\n        resizeRef.getBoundingClientRect().bottom -\n        this.grid.getBoundingClientRect().top -\n        2);\n\n    }\n    return null;\n  }\n\n  setGridRef(ref) {\n    this.grid = ref;\n  }\n\n  handleResizeStart() {\n    this.setState(() => ({\n      isResizing: true\n    }));\n  }\n\n  handleResizeStop({ id, widthMultiple: width, heightMultiple: height }) {\n    this.props.resizeComponent({ id, width, height });\n\n    this.setState(() => ({\n      isResizing: false\n    }));\n  }\n\n  handleTopDropTargetDrop(dropResult) {\n    if (dropResult) {\n      this.props.handleComponentDrop({\n        ...dropResult,\n        destination: {\n          ...dropResult.destination,\n          // force appending as the first child if top drop target\n          index: 0\n        }\n      });\n    }\n  }\n\n  handleChangeTab({ pathToTabIndex }) {\n    this.props.setDirectPathToChild(pathToTabIndex);\n  }\n\n  render() {var _gridComponent$childr, _gridComponent$childr2, _gridComponent$childr3, _gridComponent$childr4;\n    const {\n      gridComponent,\n      handleComponentDrop,\n      depth,\n      width,\n      isComponentVisible,\n      editMode,\n      canEdit,\n      setEditMode,\n      dashboardId\n    } = this.props;\n    const columnPlusGutterWidth =\n    (width + GRID_GUTTER_SIZE) / GRID_COLUMN_COUNT;\n\n    const columnWidth = columnPlusGutterWidth - GRID_GUTTER_SIZE;\n    const { isResizing } = this.state;\n\n    const shouldDisplayEmptyState = (gridComponent == null ? void 0 : (_gridComponent$childr = gridComponent.children) == null ? void 0 : _gridComponent$childr.length) === 0;\n    const shouldDisplayTopLevelTabEmptyState =\n    shouldDisplayEmptyState && gridComponent.type === TAB_TYPE;\n\n    const dashboardEmptyState = editMode &&\n    ___EmotionJSX(EmptyStateBig, {\n      title: t('Drag and drop components and charts to the dashboard'),\n      description: t(\n        'You can create a new chart or use existing ones from the panel on the right'\n      ),\n      buttonText:\n      ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(\"i\", { className: \"fa fa-plus\" }),\n      t('Create a new chart')\n      ),\n\n      buttonAction: () => {\n        window.open(\n          `/chart/add?dashboard_id=${dashboardId}`,\n          '_blank',\n          'noopener noreferrer'\n        );\n      },\n      image: \"chart.svg\" }\n    );\n\n\n    const topLevelTabEmptyState = editMode ?\n    ___EmotionJSX(EmptyStateBig, {\n      title: t('Drag and drop components to this tab'),\n      description: t(\n        `You can create a new chart or use existing ones from the panel on the right`\n      ),\n      buttonText:\n      ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(\"i\", { className: \"fa fa-plus\" }),\n      t('Create a new chart')\n      ),\n\n      buttonAction: () => {\n        window.open(\n          `/chart/add?dashboard_id=${dashboardId}`,\n          '_blank',\n          'noopener noreferrer'\n        );\n      },\n      image: \"chart.svg\" }\n    ) :\n\n    ___EmotionJSX(EmptyStateBig, {\n      title: t('There are no components added to this tab'),\n      description:\n      canEdit && t('You can add the components in the edit mode.'),\n\n      buttonText: canEdit && t('Edit the dashboard'),\n      buttonAction:\n      canEdit && (\n      () => {\n        setEditMode(true);\n      }),\n\n      image: \"chart.svg\" }\n    );\n\n\n    return width < 100 ? null :\n    ___EmotionJSX(React.Fragment, null,\n    shouldDisplayEmptyState &&\n    ___EmotionJSX(DashboardEmptyStateContainer, null,\n    shouldDisplayTopLevelTabEmptyState ?\n    topLevelTabEmptyState :\n    dashboardEmptyState\n    ),\n\n    ___EmotionJSX(\"div\", { className: \"dashboard-grid\", ref: this.setGridRef },\n    ___EmotionJSX(GridContent, {\n      className: \"grid-content\",\n      \"data-test\": \"grid-content\",\n      editMode: editMode },\n\n\n    editMode &&\n    ___EmotionJSX(Droppable, {\n      component: gridComponent,\n      depth: depth,\n      parentComponent: null,\n      index: 0,\n      orientation: \"column\",\n      onDrop: this.handleTopDropTargetDrop,\n      className: classNames({\n        'empty-droptarget': true,\n        'empty-droptarget--full':\n        (gridComponent == null ? void 0 : (_gridComponent$childr2 = gridComponent.children) == null ? void 0 : _gridComponent$childr2.length) === 0\n      }),\n      editMode: true,\n      dropToChild: (gridComponent == null ? void 0 : (_gridComponent$childr3 = gridComponent.children) == null ? void 0 : _gridComponent$childr3.length) === 0 },\n\n    renderDraggableContent\n    ),\n\n    gridComponent == null ? void 0 : (_gridComponent$childr4 = gridComponent.children) == null ? void 0 : _gridComponent$childr4.map((id, index) =>\n    ___EmotionJSX(React.Fragment, { key: id },\n    ___EmotionJSX(DashboardComponent, {\n      id: id,\n      parentId: gridComponent.id,\n      depth: depth + 1,\n      index: index,\n      availableColumnCount: GRID_COLUMN_COUNT,\n      columnWidth: columnWidth,\n      isComponentVisible: isComponentVisible,\n      onResizeStart: this.handleResizeStart,\n      onResize: this.handleResize,\n      onResizeStop: this.handleResizeStop,\n      onChangeTab: this.handleChangeTab }\n    ),\n\n    editMode &&\n    ___EmotionJSX(Droppable, {\n      component: gridComponent,\n      depth: depth,\n      parentComponent: null,\n      index: index + 1,\n      orientation: \"column\",\n      onDrop: handleComponentDrop,\n      className: \"empty-droptarget\",\n      editMode: true },\n\n    renderDraggableContent\n    )\n\n    )\n    ),\n    isResizing &&\n    Array(GRID_COLUMN_COUNT).\n    fill(null).\n    map((_, i) =>\n    ___EmotionJSX(GridColumnGuide, {\n      key: `grid-column-${i}`,\n      className: \"grid-column-guide\",\n      style: {\n        left: i * GRID_GUTTER_SIZE + i * columnWidth,\n        width: columnWidth\n      } }\n    )\n    )\n    )\n    )\n    );\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\nDashboardGrid.propTypes = propTypes;\nDashboardGrid.defaultProps = defaultProps;const _default =\n\nDashboardGrid;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(propTypes, \"propTypes\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/components/DashboardGrid.jsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/components/DashboardGrid.jsx\");reactHotLoader.register(renderDraggableContent, \"renderDraggableContent\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/components/DashboardGrid.jsx\");reactHotLoader.register(DashboardEmptyStateContainer, \"DashboardEmptyStateContainer\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/components/DashboardGrid.jsx\");reactHotLoader.register(GridContent, \"GridContent\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/components/DashboardGrid.jsx\");reactHotLoader.register(GridColumnGuide, \"GridColumnGuide\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/components/DashboardGrid.jsx\");reactHotLoader.register(DashboardGrid, \"DashboardGrid\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/components/DashboardGrid.jsx\");reactHotLoader.register(_default, \"default\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/components/DashboardGrid.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["React","PropTypes","classNames","addAlpha","css","styled","t","EmptyStateBig","componentShape","DashboardComponent","Droppable","GRID_GUTTER_SIZE","GRID_COLUMN_COUNT","TAB_TYPE","jsx","___EmotionJSX","propTypes","depth","number","isRequired","editMode","bool","gridComponent","handleComponentDrop","func","isComponentVisible","resizeComponent","setDirectPathToChild","width","dashboardId","defaultProps","renderDraggableContent","dropProps","dropIndicatorProps","DashboardEmptyStateContainer","div","GridContent","theme","gridUnit","GridColumnGuide","colors","primary","base","parseFloat","opacity","light","mediumHeavy","DashboardGrid","PureComponent","constructor","props","state","isResizing","handleResizeStart","bind","handleResizeStop","handleTopDropTargetDrop","getRowGuidePosition","setGridRef","handleChangeTab","resizeRef","grid","getBoundingClientRect","bottom","top","ref","setState","id","widthMultiple","heightMultiple","height","dropResult","destination","index","pathToTabIndex","render","_gridComponent$childr","_gridComponent$childr2","_gridComponent$childr3","_gridComponent$childr4","canEdit","setEditMode","columnPlusGutterWidth","columnWidth","shouldDisplayEmptyState","children","length","shouldDisplayTopLevelTabEmptyState","type","dashboardEmptyState","title","description","buttonText","Fragment","className","buttonAction","window","open","image","topLevelTabEmptyState","component","parentComponent","orientation","onDrop","dropToChild","map","key","parentId","availableColumnCount","onResizeStart","onResize","handleResize","onResizeStop","onChangeTab","Array","fill","_","i","style","left","__reactstandin__regenerateByEval","code","eval","_default","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/components/DashboardGrid.jsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { addAlpha, css, styled, t } from '@superset-ui/core';\nimport { EmptyStateBig } from 'src/components/EmptyState';\nimport { componentShape } from '../util/propShapes';\nimport DashboardComponent from '../containers/DashboardComponent';\nimport { Droppable } from './dnd/DragDroppable';\nimport { GRID_GUTTER_SIZE, GRID_COLUMN_COUNT } from '../util/constants';\nimport { TAB_TYPE } from '../util/componentTypes';\n\nconst propTypes = {\n  depth: PropTypes.number.isRequired,\n  editMode: PropTypes.bool,\n  gridComponent: componentShape,\n  handleComponentDrop: PropTypes.func.isRequired,\n  isComponentVisible: PropTypes.bool.isRequired,\n  resizeComponent: PropTypes.func.isRequired,\n  setDirectPathToChild: PropTypes.func.isRequired,\n  width: PropTypes.number.isRequired,\n  dashboardId: PropTypes.number,\n};\n\nconst defaultProps = {};\n\nconst renderDraggableContent = dropProps =>\n  dropProps.dropIndicatorProps && <div {...dropProps.dropIndicatorProps} />;\n\nconst DashboardEmptyStateContainer = styled.div`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n`;\n\nconst GridContent = styled.div`\n  ${({ theme, editMode }) => css`\n    display: flex;\n    flex-direction: column;\n\n    /* gutters between rows */\n    & > div:not(:last-child):not(.empty-droptarget) {\n      ${!editMode && `margin-bottom: ${theme.gridUnit * 4}px`};\n    }\n\n    .empty-droptarget {\n      width: 100%;\n      height: ${theme.gridUnit * 4}px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      border-radius: ${theme.gridUnit}px;\n      overflow: hidden;\n\n      &:before {\n        content: '';\n        display: block;\n        width: calc(100% - ${theme.gridUnit * 2}px);\n        height: calc(100% - ${theme.gridUnit * 2}px);\n        border: 1px dashed transparent;\n        border-radius: ${theme.gridUnit}px;\n        opacity: 0.5;\n      }\n    }\n\n    & > .empty-droptarget:first-child {\n      height: ${theme.gridUnit * 4}px;\n      margin-top: ${theme.gridUnit * -4}px;\n    }\n\n    & > .empty-droptarget:last-child {\n      height: ${theme.gridUnit * 24}px;\n    }\n\n    & > .empty-droptarget.empty-droptarget--full:only-child {\n      height: 80vh;\n    }\n  `}\n`;\n\nconst GridColumnGuide = styled.div`\n  ${({ theme }) => css`\n    // /* Editing guides */\n    &.grid-column-guide {\n      position: absolute;\n      top: 0;\n      min-height: 100%;\n      background-color: ${addAlpha(\n        theme.colors.primary.base,\n        parseFloat(theme.opacity.light) / 100,\n      )};\n      pointer-events: none;\n      box-shadow: inset 0 0 0 1px\n        ${addAlpha(\n          theme.colors.primary.base,\n          parseFloat(theme.opacity.mediumHeavy) / 100,\n        )};\n    }\n  `};\n`;\n\nclass DashboardGrid extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isResizing: false,\n    };\n\n    this.handleResizeStart = this.handleResizeStart.bind(this);\n    this.handleResizeStop = this.handleResizeStop.bind(this);\n    this.handleTopDropTargetDrop = this.handleTopDropTargetDrop.bind(this);\n    this.getRowGuidePosition = this.getRowGuidePosition.bind(this);\n    this.setGridRef = this.setGridRef.bind(this);\n    this.handleChangeTab = this.handleChangeTab.bind(this);\n  }\n\n  getRowGuidePosition(resizeRef) {\n    if (resizeRef && this.grid) {\n      return (\n        resizeRef.getBoundingClientRect().bottom -\n        this.grid.getBoundingClientRect().top -\n        2\n      );\n    }\n    return null;\n  }\n\n  setGridRef(ref) {\n    this.grid = ref;\n  }\n\n  handleResizeStart() {\n    this.setState(() => ({\n      isResizing: true,\n    }));\n  }\n\n  handleResizeStop({ id, widthMultiple: width, heightMultiple: height }) {\n    this.props.resizeComponent({ id, width, height });\n\n    this.setState(() => ({\n      isResizing: false,\n    }));\n  }\n\n  handleTopDropTargetDrop(dropResult) {\n    if (dropResult) {\n      this.props.handleComponentDrop({\n        ...dropResult,\n        destination: {\n          ...dropResult.destination,\n          // force appending as the first child if top drop target\n          index: 0,\n        },\n      });\n    }\n  }\n\n  handleChangeTab({ pathToTabIndex }) {\n    this.props.setDirectPathToChild(pathToTabIndex);\n  }\n\n  render() {\n    const {\n      gridComponent,\n      handleComponentDrop,\n      depth,\n      width,\n      isComponentVisible,\n      editMode,\n      canEdit,\n      setEditMode,\n      dashboardId,\n    } = this.props;\n    const columnPlusGutterWidth =\n      (width + GRID_GUTTER_SIZE) / GRID_COLUMN_COUNT;\n\n    const columnWidth = columnPlusGutterWidth - GRID_GUTTER_SIZE;\n    const { isResizing } = this.state;\n\n    const shouldDisplayEmptyState = gridComponent?.children?.length === 0;\n    const shouldDisplayTopLevelTabEmptyState =\n      shouldDisplayEmptyState && gridComponent.type === TAB_TYPE;\n\n    const dashboardEmptyState = editMode && (\n      <EmptyStateBig\n        title={t('Drag and drop components and charts to the dashboard')}\n        description={t(\n          'You can create a new chart or use existing ones from the panel on the right',\n        )}\n        buttonText={\n          <>\n            <i className=\"fa fa-plus\" />\n            {t('Create a new chart')}\n          </>\n        }\n        buttonAction={() => {\n          window.open(\n            `/chart/add?dashboard_id=${dashboardId}`,\n            '_blank',\n            'noopener noreferrer',\n          );\n        }}\n        image=\"chart.svg\"\n      />\n    );\n\n    const topLevelTabEmptyState = editMode ? (\n      <EmptyStateBig\n        title={t('Drag and drop components to this tab')}\n        description={t(\n          `You can create a new chart or use existing ones from the panel on the right`,\n        )}\n        buttonText={\n          <>\n            <i className=\"fa fa-plus\" />\n            {t('Create a new chart')}\n          </>\n        }\n        buttonAction={() => {\n          window.open(\n            `/chart/add?dashboard_id=${dashboardId}`,\n            '_blank',\n            'noopener noreferrer',\n          );\n        }}\n        image=\"chart.svg\"\n      />\n    ) : (\n      <EmptyStateBig\n        title={t('There are no components added to this tab')}\n        description={\n          canEdit && t('You can add the components in the edit mode.')\n        }\n        buttonText={canEdit && t('Edit the dashboard')}\n        buttonAction={\n          canEdit &&\n          (() => {\n            setEditMode(true);\n          })\n        }\n        image=\"chart.svg\"\n      />\n    );\n\n    return width < 100 ? null : (\n      <>\n        {shouldDisplayEmptyState && (\n          <DashboardEmptyStateContainer>\n            {shouldDisplayTopLevelTabEmptyState\n              ? topLevelTabEmptyState\n              : dashboardEmptyState}\n          </DashboardEmptyStateContainer>\n        )}\n        <div className=\"dashboard-grid\" ref={this.setGridRef}>\n          <GridContent\n            className=\"grid-content\"\n            data-test=\"grid-content\"\n            editMode={editMode}\n          >\n            {/* make the area above components droppable */}\n            {editMode && (\n              <Droppable\n                component={gridComponent}\n                depth={depth}\n                parentComponent={null}\n                index={0}\n                orientation=\"column\"\n                onDrop={this.handleTopDropTargetDrop}\n                className={classNames({\n                  'empty-droptarget': true,\n                  'empty-droptarget--full':\n                    gridComponent?.children?.length === 0,\n                })}\n                editMode\n                dropToChild={gridComponent?.children?.length === 0}\n              >\n                {renderDraggableContent}\n              </Droppable>\n            )}\n            {gridComponent?.children?.map((id, index) => (\n              <React.Fragment key={id}>\n                <DashboardComponent\n                  id={id}\n                  parentId={gridComponent.id}\n                  depth={depth + 1}\n                  index={index}\n                  availableColumnCount={GRID_COLUMN_COUNT}\n                  columnWidth={columnWidth}\n                  isComponentVisible={isComponentVisible}\n                  onResizeStart={this.handleResizeStart}\n                  onResize={this.handleResize}\n                  onResizeStop={this.handleResizeStop}\n                  onChangeTab={this.handleChangeTab}\n                />\n                {/* make the area below components droppable */}\n                {editMode && (\n                  <Droppable\n                    component={gridComponent}\n                    depth={depth}\n                    parentComponent={null}\n                    index={index + 1}\n                    orientation=\"column\"\n                    onDrop={handleComponentDrop}\n                    className=\"empty-droptarget\"\n                    editMode\n                  >\n                    {renderDraggableContent}\n                  </Droppable>\n                )}\n              </React.Fragment>\n            ))}\n            {isResizing &&\n              Array(GRID_COLUMN_COUNT)\n                .fill(null)\n                .map((_, i) => (\n                  <GridColumnGuide\n                    key={`grid-column-${i}`}\n                    className=\"grid-column-guide\"\n                    style={{\n                      left: i * GRID_GUTTER_SIZE + i * columnWidth,\n                      width: columnWidth,\n                    }}\n                  />\n                ))}\n          </GridContent>\n        </div>\n      </>\n    );\n  }\n}\n\nDashboardGrid.propTypes = propTypes;\nDashboardGrid.defaultProps = defaultProps;\n\nexport default DashboardGrid;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}