{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { CategoricalColorNamespace, getColumnLabel, getMetricLabel, getNumberFormatter, getTimeFormatter, NumberFormats, t, getValueFormatter, tooltipHtml } from '@superset-ui/core';\nimport { DEFAULT_FORM_DATA as DEFAULT_PIE_FORM_DATA, EchartsPieLabelType } from './types';\nimport { DEFAULT_LEGEND_FORM_DATA, OpacityEnum } from '../constants';\nimport { extractGroupbyLabel, getChartPadding, getColtypesMapping, getLegendProps, sanitizeHtml } from '../utils/series';\nimport { defaultGrid } from '../defaults';\nimport { convertInteger } from '../utils/convertInteger';\nimport { getDefaultTooltip } from '../utils/tooltip';\nconst percentFormatter = getNumberFormatter(NumberFormats.PERCENT_2_POINT);\nexport function parseParams({ params, numberFormatter, sanitizeName = false }) {\n  const { name: rawName = '', value, percent } = params;\n  const name = sanitizeName ? sanitizeHtml(rawName) : rawName;\n  const formattedValue = numberFormatter(value);\n  const formattedPercent = percentFormatter(percent / 100);\n  return [name, formattedValue, formattedPercent];\n}\nfunction getTotalValuePadding({ chartPadding, donut, width, height }) {\n  const padding = {\n    top: donut ? 'middle' : '0',\n    left: 'center'\n  };\n  const LEGEND_HEIGHT = 15;\n  const LEGEND_WIDTH = 215;\n  if (chartPadding.top) {\n    padding.top = donut ?\n    `${50 + (chartPadding.top - LEGEND_HEIGHT) / height / 2 * 100}%` :\n    `${(chartPadding.top + LEGEND_HEIGHT) / height * 100}%`;\n  }\n  if (chartPadding.bottom) {\n    padding.top = donut ?\n    `${50 - (chartPadding.bottom + LEGEND_HEIGHT) / height / 2 * 100}%` :\n    '0';\n  }\n  if (chartPadding.left) {\n    padding.left = `${50 + (chartPadding.left - LEGEND_WIDTH) / width / 2 * 100}%`;\n  }\n  if (chartPadding.right) {\n    padding.left = `${50 - (chartPadding.right + LEGEND_WIDTH) / width / 2 * 100}%`;\n  }\n  return padding;\n}\nexport default function transformProps(chartProps) {\n  const { formData, height, hooks, filterState, queriesData, width, theme, inContextMenu, emitCrossFilters, datasource } = chartProps;\n  const { columnFormats = {}, currencyFormats = {} } = datasource;\n  const { data = [] } = queriesData[0];\n  const coltypeMapping = getColtypesMapping(queriesData[0]);\n  const { colorScheme, donut, groupby, innerRadius, labelsOutside, labelLine, labelType, legendMargin, legendOrientation, legendType, metric = '', numberFormat, currencyFormat, dateFormat, outerRadius, showLabels, showLegend, showLabelsThreshold, sliceId, showTotal, roseType } = {\n    ...DEFAULT_LEGEND_FORM_DATA,\n    ...DEFAULT_PIE_FORM_DATA,\n    ...formData\n  };\n  const refs = {};\n  const metricLabel = getMetricLabel(metric);\n  const groupbyLabels = groupby.map(getColumnLabel);\n  const minShowLabelAngle = (showLabelsThreshold || 0) * 3.6;\n  const keys = data.map((datum) => extractGroupbyLabel({\n    datum,\n    groupby: groupbyLabels,\n    coltypeMapping,\n    timeFormatter: getTimeFormatter(dateFormat)\n  }));\n  const labelMap = data.reduce((acc, datum) => {\n    const label = extractGroupbyLabel({\n      datum,\n      groupby: groupbyLabels,\n      coltypeMapping,\n      timeFormatter: getTimeFormatter(dateFormat)\n    });\n    return {\n      ...acc,\n      [label]: groupbyLabels.map((col) => datum[col])\n    };\n  }, {});\n  const { setDataMask = () => {}, onContextMenu } = hooks;\n  const colorFn = CategoricalColorNamespace.getScale(colorScheme);\n  const numberFormatter = getValueFormatter(metric, currencyFormats, columnFormats, numberFormat, currencyFormat);\n  let totalValue = 0;\n  const transformedData = data.map((datum) => {\n    const name = extractGroupbyLabel({\n      datum,\n      groupby: groupbyLabels,\n      coltypeMapping,\n      timeFormatter: getTimeFormatter(dateFormat)\n    });\n    const isFiltered = filterState.selectedValues && !filterState.selectedValues.includes(name);\n    const value = datum[metricLabel];\n    if (typeof value === 'number' || typeof value === 'string') {\n      totalValue += convertInteger(value);\n    }\n    return {\n      value,\n      name,\n      itemStyle: {\n        color: colorFn(name, sliceId),\n        opacity: isFiltered ?\n        OpacityEnum.SemiTransparent :\n        OpacityEnum.NonTransparent\n      }\n    };\n  });\n  const selectedValues = (filterState.selectedValues || []).reduce((acc, selectedValue) => {\n    const index = transformedData.findIndex(({ name }) => name === selectedValue);\n    return {\n      ...acc,\n      [index]: selectedValue\n    };\n  }, {});\n  const formatter = (params) => {\n    const [name, formattedValue, formattedPercent] = parseParams({\n      params,\n      numberFormatter\n    });\n    switch (labelType) {\n      case EchartsPieLabelType.Key:\n        return name;\n      case EchartsPieLabelType.Value:\n        return formattedValue;\n      case EchartsPieLabelType.Percent:\n        return formattedPercent;\n      case EchartsPieLabelType.KeyValue:\n        return `${name}: ${formattedValue}`;\n      case EchartsPieLabelType.KeyValuePercent:\n        return `${name}: ${formattedValue} (${formattedPercent})`;\n      case EchartsPieLabelType.KeyPercent:\n        return `${name}: ${formattedPercent}`;\n      case EchartsPieLabelType.ValuePercent:\n        return `${formattedValue} (${formattedPercent})`;\n      default:\n        return name;\n    }\n  };\n  const defaultLabel = {\n    formatter,\n    show: showLabels,\n    color: theme.colors.grayscale.dark2\n  };\n  const chartPadding = getChartPadding(showLegend, legendOrientation, legendMargin);\n  const series = [\n  {\n    type: 'pie',\n    ...chartPadding,\n    animation: false,\n    roseType: roseType || undefined,\n    radius: [`${donut ? innerRadius : 0}%`, `${outerRadius}%`],\n    center: ['50%', '50%'],\n    avoidLabelOverlap: true,\n    labelLine: labelsOutside && labelLine ? { show: true } : { show: false },\n    minShowLabelAngle,\n    label: labelsOutside ?\n    {\n      ...defaultLabel,\n      position: 'outer',\n      alignTo: 'none',\n      bleedMargin: 5\n    } :\n    {\n      ...defaultLabel,\n      position: 'inner'\n    },\n    emphasis: {\n      label: {\n        show: true,\n        fontWeight: 'bold',\n        backgroundColor: theme.colors.grayscale.light5\n      }\n    },\n    data: transformedData\n  }];\n\n  const echartOptions = {\n    grid: {\n      ...defaultGrid\n    },\n    tooltip: {\n      ...getDefaultTooltip(refs),\n      show: !inContextMenu,\n      trigger: 'item',\n      formatter: (params) => {\n        const [name, formattedValue, formattedPercent] = parseParams({\n          params,\n          numberFormatter,\n          sanitizeName: true\n        });\n        return tooltipHtml([[metricLabel, formattedValue, formattedPercent]], name);\n      }\n    },\n    legend: {\n      ...getLegendProps(legendType, legendOrientation, showLegend, theme),\n      data: keys\n    },\n    graphic: showTotal ?\n    {\n      type: 'text',\n      ...getTotalValuePadding({ chartPadding, donut, width, height }),\n      style: {\n        text: t('Total: %s', numberFormatter(totalValue)),\n        fontSize: 16,\n        fontWeight: 'bold'\n      },\n      z: 10\n    } :\n    null,\n    series\n  };\n  return {\n    formData,\n    width,\n    height,\n    echartOptions,\n    setDataMask,\n    labelMap,\n    groupby,\n    selectedValues,\n    onContextMenu,\n    refs,\n    emitCrossFilters,\n    coltypeMapping\n  };\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(percentFormatter, \"percentFormatter\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-echarts/src/Pie/transformProps.ts\");reactHotLoader.register(parseParams, \"parseParams\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-echarts/src/Pie/transformProps.ts\");reactHotLoader.register(getTotalValuePadding, \"getTotalValuePadding\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-echarts/src/Pie/transformProps.ts\");reactHotLoader.register(transformProps, \"transformProps\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-echarts/src/Pie/transformProps.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["CategoricalColorNamespace","getColumnLabel","getMetricLabel","getNumberFormatter","getTimeFormatter","NumberFormats","t","getValueFormatter","tooltipHtml","DEFAULT_FORM_DATA","DEFAULT_PIE_FORM_DATA","EchartsPieLabelType","DEFAULT_LEGEND_FORM_DATA","OpacityEnum","extractGroupbyLabel","getChartPadding","getColtypesMapping","getLegendProps","sanitizeHtml","defaultGrid","convertInteger","getDefaultTooltip","percentFormatter","PERCENT_2_POINT","parseParams","params","numberFormatter","sanitizeName","name","rawName","value","percent","formattedValue","formattedPercent","getTotalValuePadding","chartPadding","donut","width","height","padding","top","left","LEGEND_HEIGHT","LEGEND_WIDTH","bottom","right","transformProps","chartProps","formData","hooks","filterState","queriesData","theme","inContextMenu","emitCrossFilters","datasource","columnFormats","currencyFormats","data","coltypeMapping","colorScheme","groupby","innerRadius","labelsOutside","labelLine","labelType","legendMargin","legendOrientation","legendType","metric","numberFormat","currencyFormat","dateFormat","outerRadius","showLabels","showLegend","showLabelsThreshold","sliceId","showTotal","roseType","refs","metricLabel","groupbyLabels","map","minShowLabelAngle","keys","datum","timeFormatter","labelMap","reduce","acc","label","col","setDataMask","onContextMenu","colorFn","getScale","totalValue","transformedData","isFiltered","selectedValues","includes","itemStyle","color","opacity","SemiTransparent","NonTransparent","selectedValue","index","findIndex","formatter","Key","Value","Percent","KeyValue","KeyValuePercent","KeyPercent","ValuePercent","defaultLabel","show","colors","grayscale","dark2","series","type","animation","undefined","radius","center","avoidLabelOverlap","position","alignTo","bleedMargin","emphasis","fontWeight","backgroundColor","light5","echartOptions","grid","tooltip","trigger","legend","graphic","style","text","fontSize","z","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-echarts/src/Pie/transformProps.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  CategoricalColorNamespace,\n  getColumnLabel,\n  getMetricLabel,\n  getNumberFormatter,\n  getTimeFormatter,\n  NumberFormats,\n  t,\n  ValueFormatter,\n  getValueFormatter,\n  tooltipHtml,\n} from '@superset-ui/core';\nimport { CallbackDataParams } from 'echarts/types/src/util/types';\nimport { EChartsCoreOption, PieSeriesOption } from 'echarts';\nimport {\n  DEFAULT_FORM_DATA as DEFAULT_PIE_FORM_DATA,\n  EchartsPieChartProps,\n  EchartsPieFormData,\n  EchartsPieLabelType,\n  PieChartTransformedProps,\n} from './types';\nimport { DEFAULT_LEGEND_FORM_DATA, OpacityEnum } from '../constants';\nimport {\n  extractGroupbyLabel,\n  getChartPadding,\n  getColtypesMapping,\n  getLegendProps,\n  sanitizeHtml,\n} from '../utils/series';\nimport { defaultGrid } from '../defaults';\nimport { convertInteger } from '../utils/convertInteger';\nimport { getDefaultTooltip } from '../utils/tooltip';\nimport { Refs } from '../types';\n\nconst percentFormatter = getNumberFormatter(NumberFormats.PERCENT_2_POINT);\n\nexport function parseParams({\n  params,\n  numberFormatter,\n  sanitizeName = false,\n}: {\n  params: Pick<CallbackDataParams, 'name' | 'value' | 'percent'>;\n  numberFormatter: ValueFormatter;\n  sanitizeName?: boolean;\n}): string[] {\n  const { name: rawName = '', value, percent } = params;\n  const name = sanitizeName ? sanitizeHtml(rawName) : rawName;\n  const formattedValue = numberFormatter(value as number);\n  const formattedPercent = percentFormatter((percent as number) / 100);\n  return [name, formattedValue, formattedPercent];\n}\n\nfunction getTotalValuePadding({\n  chartPadding,\n  donut,\n  width,\n  height,\n}: {\n  chartPadding: {\n    bottom: number;\n    left: number;\n    right: number;\n    top: number;\n  };\n  donut: boolean;\n  width: number;\n  height: number;\n}) {\n  const padding: {\n    left?: string;\n    top?: string;\n  } = {\n    top: donut ? 'middle' : '0',\n    left: 'center',\n  };\n  const LEGEND_HEIGHT = 15;\n  const LEGEND_WIDTH = 215;\n  if (chartPadding.top) {\n    padding.top = donut\n      ? `${50 + ((chartPadding.top - LEGEND_HEIGHT) / height / 2) * 100}%`\n      : `${((chartPadding.top + LEGEND_HEIGHT) / height) * 100}%`;\n  }\n  if (chartPadding.bottom) {\n    padding.top = donut\n      ? `${50 - ((chartPadding.bottom + LEGEND_HEIGHT) / height / 2) * 100}%`\n      : '0';\n  }\n  if (chartPadding.left) {\n    padding.left = `${\n      50 + ((chartPadding.left - LEGEND_WIDTH) / width / 2) * 100\n    }%`;\n  }\n  if (chartPadding.right) {\n    padding.left = `${\n      50 - ((chartPadding.right + LEGEND_WIDTH) / width / 2) * 100\n    }%`;\n  }\n  return padding;\n}\n\nexport default function transformProps(\n  chartProps: EchartsPieChartProps,\n): PieChartTransformedProps {\n  const {\n    formData,\n    height,\n    hooks,\n    filterState,\n    queriesData,\n    width,\n    theme,\n    inContextMenu,\n    emitCrossFilters,\n    datasource,\n  } = chartProps;\n  const { columnFormats = {}, currencyFormats = {} } = datasource;\n  const { data = [] } = queriesData[0];\n  const coltypeMapping = getColtypesMapping(queriesData[0]);\n\n  const {\n    colorScheme,\n    donut,\n    groupby,\n    innerRadius,\n    labelsOutside,\n    labelLine,\n    labelType,\n    legendMargin,\n    legendOrientation,\n    legendType,\n    metric = '',\n    numberFormat,\n    currencyFormat,\n    dateFormat,\n    outerRadius,\n    showLabels,\n    showLegend,\n    showLabelsThreshold,\n    sliceId,\n    showTotal,\n    roseType,\n  }: EchartsPieFormData = {\n    ...DEFAULT_LEGEND_FORM_DATA,\n    ...DEFAULT_PIE_FORM_DATA,\n    ...formData,\n  };\n  const refs: Refs = {};\n  const metricLabel = getMetricLabel(metric);\n  const groupbyLabels = groupby.map(getColumnLabel);\n  const minShowLabelAngle = (showLabelsThreshold || 0) * 3.6;\n\n  const keys = data.map(datum =>\n    extractGroupbyLabel({\n      datum,\n      groupby: groupbyLabels,\n      coltypeMapping,\n      timeFormatter: getTimeFormatter(dateFormat),\n    }),\n  );\n  const labelMap = data.reduce((acc: Record<string, string[]>, datum) => {\n    const label = extractGroupbyLabel({\n      datum,\n      groupby: groupbyLabels,\n      coltypeMapping,\n      timeFormatter: getTimeFormatter(dateFormat),\n    });\n    return {\n      ...acc,\n      [label]: groupbyLabels.map(col => datum[col] as string),\n    };\n  }, {});\n\n  const { setDataMask = () => {}, onContextMenu } = hooks;\n\n  const colorFn = CategoricalColorNamespace.getScale(colorScheme as string);\n  const numberFormatter = getValueFormatter(\n    metric,\n    currencyFormats,\n    columnFormats,\n    numberFormat,\n    currencyFormat,\n  );\n\n  let totalValue = 0;\n\n  const transformedData: PieSeriesOption[] = data.map(datum => {\n    const name = extractGroupbyLabel({\n      datum,\n      groupby: groupbyLabels,\n      coltypeMapping,\n      timeFormatter: getTimeFormatter(dateFormat),\n    });\n\n    const isFiltered =\n      filterState.selectedValues && !filterState.selectedValues.includes(name);\n    const value = datum[metricLabel];\n\n    if (typeof value === 'number' || typeof value === 'string') {\n      totalValue += convertInteger(value);\n    }\n\n    return {\n      value,\n      name,\n      itemStyle: {\n        color: colorFn(name, sliceId),\n        opacity: isFiltered\n          ? OpacityEnum.SemiTransparent\n          : OpacityEnum.NonTransparent,\n      },\n    };\n  });\n\n  const selectedValues = (filterState.selectedValues || []).reduce(\n    (acc: Record<string, number>, selectedValue: string) => {\n      const index = transformedData.findIndex(\n        ({ name }) => name === selectedValue,\n      );\n      return {\n        ...acc,\n        [index]: selectedValue,\n      };\n    },\n    {},\n  );\n\n  const formatter = (params: CallbackDataParams) => {\n    const [name, formattedValue, formattedPercent] = parseParams({\n      params,\n      numberFormatter,\n    });\n    switch (labelType) {\n      case EchartsPieLabelType.Key:\n        return name;\n      case EchartsPieLabelType.Value:\n        return formattedValue;\n      case EchartsPieLabelType.Percent:\n        return formattedPercent;\n      case EchartsPieLabelType.KeyValue:\n        return `${name}: ${formattedValue}`;\n      case EchartsPieLabelType.KeyValuePercent:\n        return `${name}: ${formattedValue} (${formattedPercent})`;\n      case EchartsPieLabelType.KeyPercent:\n        return `${name}: ${formattedPercent}`;\n      case EchartsPieLabelType.ValuePercent:\n        return `${formattedValue} (${formattedPercent})`;\n      default:\n        return name;\n    }\n  };\n\n  const defaultLabel = {\n    formatter,\n    show: showLabels,\n    color: theme.colors.grayscale.dark2,\n  };\n\n  const chartPadding = getChartPadding(\n    showLegend,\n    legendOrientation,\n    legendMargin,\n  );\n\n  const series: PieSeriesOption[] = [\n    {\n      type: 'pie',\n      ...chartPadding,\n      animation: false,\n      roseType: roseType || undefined,\n      radius: [`${donut ? innerRadius : 0}%`, `${outerRadius}%`],\n      center: ['50%', '50%'],\n      avoidLabelOverlap: true,\n      labelLine: labelsOutside && labelLine ? { show: true } : { show: false },\n      minShowLabelAngle,\n      label: labelsOutside\n        ? {\n            ...defaultLabel,\n            position: 'outer',\n            alignTo: 'none',\n            bleedMargin: 5,\n          }\n        : {\n            ...defaultLabel,\n            position: 'inner',\n          },\n      emphasis: {\n        label: {\n          show: true,\n          fontWeight: 'bold',\n          backgroundColor: theme.colors.grayscale.light5,\n        },\n      },\n      data: transformedData,\n    },\n  ];\n\n  const echartOptions: EChartsCoreOption = {\n    grid: {\n      ...defaultGrid,\n    },\n    tooltip: {\n      ...getDefaultTooltip(refs),\n      show: !inContextMenu,\n      trigger: 'item',\n      formatter: (params: any) => {\n        const [name, formattedValue, formattedPercent] = parseParams({\n          params,\n          numberFormatter,\n          sanitizeName: true,\n        });\n        return tooltipHtml(\n          [[metricLabel, formattedValue, formattedPercent]],\n          name,\n        );\n      },\n    },\n    legend: {\n      ...getLegendProps(legendType, legendOrientation, showLegend, theme),\n      data: keys,\n    },\n    graphic: showTotal\n      ? {\n          type: 'text',\n          ...getTotalValuePadding({ chartPadding, donut, width, height }),\n          style: {\n            text: t('Total: %s', numberFormatter(totalValue)),\n            fontSize: 16,\n            fontWeight: 'bold',\n          },\n          z: 10,\n        }\n      : null,\n    series,\n  };\n\n  return {\n    formData,\n    width,\n    height,\n    echartOptions,\n    setDataMask,\n    labelMap,\n    groupby,\n    selectedValues,\n    onContextMenu,\n    refs,\n    emitCrossFilters,\n    coltypeMapping,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}