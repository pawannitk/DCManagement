{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { TimeGranularity } from '../types';\nimport createTime from './createTime';\nconst MS_IN_SECOND = 1000;\nconst MS_IN_MINUTE = 60 * MS_IN_SECOND;\nconst MS_IN_HOUR = 60 * MS_IN_MINUTE;\nfunction deductOneMs(time) {\n  return new Date(time.getTime() - 1);\n}\nfunction computeEndTimeFromGranularity(time, granularity, useLocalTime) {\n  const date = useLocalTime ? time.getDate() : time.getUTCDate();\n  const month = useLocalTime ? time.getMonth() : time.getUTCMonth();\n  const year = useLocalTime ? time.getFullYear() : time.getUTCFullYear();\n  const mode = useLocalTime ? 'local' : 'utc';\n  switch (granularity) {\n    case TimeGranularity.SECOND:\n      return new Date(time.getTime() + MS_IN_SECOND - 1);\n    case TimeGranularity.MINUTE:\n      return new Date(time.getTime() + MS_IN_MINUTE - 1);\n    case TimeGranularity.FIVE_MINUTES:\n      return new Date(time.getTime() + MS_IN_MINUTE * 5 - 1);\n    case TimeGranularity.TEN_MINUTES:\n      return new Date(time.getTime() + MS_IN_MINUTE * 10 - 1);\n    case TimeGranularity.FIFTEEN_MINUTES:\n      return new Date(time.getTime() + MS_IN_MINUTE * 15 - 1);\n    case TimeGranularity.THIRTY_MINUTES:\n      return new Date(time.getTime() + MS_IN_MINUTE * 30 - 1);\n    case TimeGranularity.HOUR:\n      return new Date(time.getTime() + MS_IN_HOUR - 1);\n    // For the day granularity and above, using Date overflow is better than adding timestamp\n    // because it will also handle daylight saving.\n    case TimeGranularity.WEEK:\n    case TimeGranularity.WEEK_STARTING_SUNDAY:\n    case TimeGranularity.WEEK_STARTING_MONDAY:\n      return deductOneMs(createTime(mode, year, month, date + 7));\n    case TimeGranularity.MONTH:\n      return deductOneMs(createTime(mode, year, month + 1));\n    case TimeGranularity.QUARTER:\n      return deductOneMs(createTime(mode, year, (Math.floor(month / 3) + 1) * 3));\n    case TimeGranularity.YEAR:\n      return deductOneMs(createTime(mode, year + 1));\n    // For the WEEK_ENDING_XXX cases,\n    // currently assume \"time\" returned from database is supposed to be the end time\n    // (in contrast to all other granularities that the returned time is start time).\n    // However, the returned \"time\" is at 00:00:00.000, so have to add 23:59:59.999.\n    case TimeGranularity.WEEK_ENDING_SATURDAY:\n    case TimeGranularity.WEEK_ENDING_SUNDAY:\n    case TimeGranularity.DATE:\n    case TimeGranularity.DAY:\n    default:\n      return deductOneMs(createTime(mode, year, month, date + 1));\n  }\n}\nexport default function createTimeRangeFromGranularity(time, granularity, useLocalTime = false) {\n  const endTime = computeEndTimeFromGranularity(time, granularity, useLocalTime);\n  if (granularity === TimeGranularity.WEEK_ENDING_SATURDAY ||\n  granularity === TimeGranularity.WEEK_ENDING_SUNDAY) {\n    const date = useLocalTime ? time.getDate() : time.getUTCDate();\n    const month = useLocalTime ? time.getMonth() : time.getUTCMonth();\n    const year = useLocalTime ? time.getFullYear() : time.getUTCFullYear();\n    const startTime = createTime(useLocalTime ? 'local' : 'utc', year, month, date - 6);\n    return [startTime, endTime];\n  }\n  return [time, endTime];\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(MS_IN_SECOND, \"MS_IN_SECOND\", \"/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/time-format/utils/createTimeRangeFromGranularity.ts\");reactHotLoader.register(MS_IN_MINUTE, \"MS_IN_MINUTE\", \"/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/time-format/utils/createTimeRangeFromGranularity.ts\");reactHotLoader.register(MS_IN_HOUR, \"MS_IN_HOUR\", \"/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/time-format/utils/createTimeRangeFromGranularity.ts\");reactHotLoader.register(deductOneMs, \"deductOneMs\", \"/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/time-format/utils/createTimeRangeFromGranularity.ts\");reactHotLoader.register(computeEndTimeFromGranularity, \"computeEndTimeFromGranularity\", \"/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/time-format/utils/createTimeRangeFromGranularity.ts\");reactHotLoader.register(createTimeRangeFromGranularity, \"createTimeRangeFromGranularity\", \"/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/time-format/utils/createTimeRangeFromGranularity.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["TimeGranularity","createTime","MS_IN_SECOND","MS_IN_MINUTE","MS_IN_HOUR","deductOneMs","time","Date","getTime","computeEndTimeFromGranularity","granularity","useLocalTime","date","getDate","getUTCDate","month","getMonth","getUTCMonth","year","getFullYear","getUTCFullYear","mode","SECOND","MINUTE","FIVE_MINUTES","TEN_MINUTES","FIFTEEN_MINUTES","THIRTY_MINUTES","HOUR","WEEK","WEEK_STARTING_SUNDAY","WEEK_STARTING_MONDAY","MONTH","QUARTER","Math","floor","YEAR","WEEK_ENDING_SATURDAY","WEEK_ENDING_SUNDAY","DATE","DAY","createTimeRangeFromGranularity","endTime","startTime","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/time-format/utils/createTimeRangeFromGranularity.ts"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { TimeGranularity } from '../types';\nimport createTime from './createTime';\n\nconst MS_IN_SECOND = 1000;\nconst MS_IN_MINUTE = 60 * MS_IN_SECOND;\nconst MS_IN_HOUR = 60 * MS_IN_MINUTE;\n\nfunction deductOneMs(time: Date) {\n  return new Date(time.getTime() - 1);\n}\n\nfunction computeEndTimeFromGranularity(\n  time: Date,\n  granularity: TimeGranularity,\n  useLocalTime: boolean,\n) {\n  const date = useLocalTime ? time.getDate() : time.getUTCDate();\n  const month = useLocalTime ? time.getMonth() : time.getUTCMonth();\n  const year = useLocalTime ? time.getFullYear() : time.getUTCFullYear();\n  const mode = useLocalTime ? 'local' : 'utc';\n\n  switch (granularity) {\n    case TimeGranularity.SECOND:\n      return new Date(time.getTime() + MS_IN_SECOND - 1);\n    case TimeGranularity.MINUTE:\n      return new Date(time.getTime() + MS_IN_MINUTE - 1);\n    case TimeGranularity.FIVE_MINUTES:\n      return new Date(time.getTime() + MS_IN_MINUTE * 5 - 1);\n    case TimeGranularity.TEN_MINUTES:\n      return new Date(time.getTime() + MS_IN_MINUTE * 10 - 1);\n    case TimeGranularity.FIFTEEN_MINUTES:\n      return new Date(time.getTime() + MS_IN_MINUTE * 15 - 1);\n    case TimeGranularity.THIRTY_MINUTES:\n      return new Date(time.getTime() + MS_IN_MINUTE * 30 - 1);\n    case TimeGranularity.HOUR:\n      return new Date(time.getTime() + MS_IN_HOUR - 1);\n    // For the day granularity and above, using Date overflow is better than adding timestamp\n    // because it will also handle daylight saving.\n    case TimeGranularity.WEEK:\n    case TimeGranularity.WEEK_STARTING_SUNDAY:\n    case TimeGranularity.WEEK_STARTING_MONDAY:\n      return deductOneMs(createTime(mode, year, month, date + 7));\n    case TimeGranularity.MONTH:\n      return deductOneMs(createTime(mode, year, month + 1));\n    case TimeGranularity.QUARTER:\n      return deductOneMs(\n        createTime(mode, year, (Math.floor(month / 3) + 1) * 3),\n      );\n    case TimeGranularity.YEAR:\n      return deductOneMs(createTime(mode, year + 1));\n    // For the WEEK_ENDING_XXX cases,\n    // currently assume \"time\" returned from database is supposed to be the end time\n    // (in contrast to all other granularities that the returned time is start time).\n    // However, the returned \"time\" is at 00:00:00.000, so have to add 23:59:59.999.\n    case TimeGranularity.WEEK_ENDING_SATURDAY:\n    case TimeGranularity.WEEK_ENDING_SUNDAY:\n    case TimeGranularity.DATE:\n    case TimeGranularity.DAY:\n    default:\n      return deductOneMs(createTime(mode, year, month, date + 1));\n  }\n}\n\nexport default function createTimeRangeFromGranularity(\n  time: Date,\n  granularity: TimeGranularity,\n  useLocalTime = false,\n) {\n  const endTime = computeEndTimeFromGranularity(\n    time,\n    granularity,\n    useLocalTime,\n  );\n\n  if (\n    granularity === TimeGranularity.WEEK_ENDING_SATURDAY ||\n    granularity === TimeGranularity.WEEK_ENDING_SUNDAY\n  ) {\n    const date = useLocalTime ? time.getDate() : time.getUTCDate();\n    const month = useLocalTime ? time.getMonth() : time.getUTCMonth();\n    const year = useLocalTime ? time.getFullYear() : time.getUTCFullYear();\n    const startTime = createTime(\n      useLocalTime ? 'local' : 'utc',\n      year,\n      month,\n      date - 6,\n    );\n    return [startTime, endTime];\n  }\n\n  return [time, endTime];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}