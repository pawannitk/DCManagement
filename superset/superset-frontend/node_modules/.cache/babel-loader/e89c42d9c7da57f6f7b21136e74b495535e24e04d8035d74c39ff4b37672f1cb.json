{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /* eslint-disable camelcase */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitationsxw\n * under the License.\n */\nimport { ComparisonType } from '@superset-ui/core';\nimport { getMetricOffsetsMap, isTimeComparison } from './utils';\nexport const timeCompareOperator = (formData, queryObject) => {\n  const comparisonType = formData.comparison_type;\n  const metricOffsetMap = getMetricOffsetsMap(formData, queryObject);\n  if (isTimeComparison(formData, queryObject) &&\n  comparisonType !== ComparisonType.Values) {\n    return {\n      operation: 'compare',\n      options: {\n        source_columns: Array.from(metricOffsetMap.values()),\n        compare_columns: Array.from(metricOffsetMap.keys()),\n        compare_type: comparisonType,\n        drop_original_columns: true\n      }\n    };\n  }\n  return undefined;\n};;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(timeCompareOperator, \"timeCompareOperator\", \"/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-chart-controls/src/operators/timeCompareOperator.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["ComparisonType","getMetricOffsetsMap","isTimeComparison","timeCompareOperator","formData","queryObject","comparisonType","comparison_type","metricOffsetMap","Values","operation","options","source_columns","Array","from","values","compare_columns","keys","compare_type","drop_original_columns","undefined","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-chart-controls/src/operators/timeCompareOperator.ts"],"sourcesContent":["/* eslint-disable camelcase */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitationsxw\n * under the License.\n */\nimport { ComparisonType, PostProcessingCompare } from '@superset-ui/core';\nimport { getMetricOffsetsMap, isTimeComparison } from './utils';\nimport { PostProcessingFactory } from './types';\n\nexport const timeCompareOperator: PostProcessingFactory<\n  PostProcessingCompare\n> = (formData, queryObject) => {\n  const comparisonType = formData.comparison_type;\n  const metricOffsetMap = getMetricOffsetsMap(formData, queryObject);\n\n  if (\n    isTimeComparison(formData, queryObject) &&\n    comparisonType !== ComparisonType.Values\n  ) {\n    return {\n      operation: 'compare',\n      options: {\n        source_columns: Array.from(metricOffsetMap.values()),\n        compare_columns: Array.from(metricOffsetMap.keys()),\n        compare_type: comparisonType,\n        drop_original_columns: true,\n      },\n    };\n  }\n\n  return undefined;\n};\n"],"mappings":"wSAAA;AACA;;;;;;;;;;;;;;;;;;AAkBA,SAASA,cAAc,QAA+B,mBAAmB;AACzE,SAASC,mBAAmB,EAAEC,gBAAgB,QAAQ,SAAS;AAG/D,OAAO,MAAMC,mBAAmB,GAE5BA,CAACC,QAAQ,EAAEC,WAAW,KAAI;EAC5B,MAAMC,cAAc,GAAGF,QAAQ,CAACG,eAAe;EAC/C,MAAMC,eAAe,GAAGP,mBAAmB,CAACG,QAAQ,EAAEC,WAAW,CAAC;EAElE,IACEH,gBAAgB,CAACE,QAAQ,EAAEC,WAAW,CAAC;EACvCC,cAAc,KAAKN,cAAc,CAACS,MAAM,EACxC;IACA,OAAO;MACLC,SAAS,EAAE,SAAS;MACpBC,OAAO,EAAE;QACPC,cAAc,EAAEC,KAAK,CAACC,IAAI,CAACN,eAAe,CAACO,MAAM,EAAE,CAAC;QACpDC,eAAe,EAAEH,KAAK,CAACC,IAAI,CAACN,eAAe,CAACS,IAAI,EAAE,CAAC;QACnDC,YAAY,EAAEZ,cAAc;QAC5Ba,qBAAqB,EAAE;;KAE1B;;EAGH,OAAOC,SAAS;AAClB,CAAC,CAAC,mBAAAC,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAC,OAAA,GAAAH,SAAA,MAAAC,cAAA,WAAAA,cAAA,CAAAG,QAAA,CAtBWrB,mBAAmB,oLAAAsB,WAAA,UAAAH,oBAAA,mBAAAA,oBAAA,CAAAG,WAAA,GAAAL,SAAA,CAAAK,WAAA,IAAAA,WAAA,CAAAC,MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}