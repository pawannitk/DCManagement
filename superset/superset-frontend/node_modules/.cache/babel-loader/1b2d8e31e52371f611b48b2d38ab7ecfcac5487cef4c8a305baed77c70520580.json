{"ast":null,"code":"import _omit from \"lodash/omit\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};\n\nimport { ensureIsArray, getChartControlPanelRegistry } from '@superset-ui/core';\nimport { getStandardizedControls, isStandardizedFormData } from '@superset-ui/chart-controls';\nimport { getControlsState } from 'src/explore/store';\nimport { getFormDataFromControls } from './getFormDataFromControls';\nexport const sharedMetricsKey = [\n'metric',\n'metrics',\n'metric_2',\n'size',\n'x',\n'y',\n'secondary_metric' // via sharedControls, scalar\n];\nexport const sharedColumnsKey = [\n'groupby',\n'columns',\n'groupbyColumns',\n'groupbyRows',\n'entity',\n'series',\n'series_columns' // via sharedControls, array\n];\nexport const publicControls = [\n// time section\n'granularity_sqla',\n'time_grain_sqla',\n'time_range',\n// filters\n'adhoc_filters',\n// subquery limit(series limit)\n'limit',\n// order by clause\n'timeseries_limit_metric',\n'series_limit_metric',\n// desc or asc in order by clause\n'order_desc',\n// outer query limit\n'row_limit',\n// x asxs column\n'x_axis',\n// advanced analytics - rolling window\n'rolling_type',\n'rolling_periods',\n'min_periods',\n// advanced analytics - time comparison\n'time_compare',\n'comparison_type',\n// advanced analytics - resample\n'resample_rule',\n'resample_method' // via sections.advancedAnalytics\n];\nexport class StandardizedFormData {\n\n  constructor(sourceFormData) {var _formData$standardize, _mfd$slice$0$;this.sfd = void 0;\n    /*\n     * Support form_data for smooth switching between different viz\n     * */\n    const formData = Object.freeze(sourceFormData);\n    // generates an ordered map, the key is viz_type and the value is form_data. the last item is current viz.\n    const mfd = formData == null ? void 0 : (_formData$standardize = formData.standardizedFormData) == null ? void 0 : _formData$standardize.memorizedFormData;\n    const vizType = formData.viz_type;\n    let memorizedFormData = new Map();\n    let controls;\n    if (Array.isArray(mfd) &&\n    mfd.length > 0 &&\n    formData.datasource === ((_mfd$slice$0$ = mfd.slice(-1)[0][1]) == null ? void 0 : _mfd$slice$0$.datasource)) {\n      memorizedFormData = new Map(formData.standardizedFormData.memorizedFormData);\n      if (memorizedFormData.has(vizType)) {\n        memorizedFormData.delete(vizType);\n      }\n      memorizedFormData.set(vizType, formData);\n      controls = StandardizedFormData.getStandardizedControls(formData);\n    } else\n    {\n      // reset the `memorizedFormData` if a request between different datasource.\n      const restFormData = _omit(formData, 'standardizedFormData');\n      memorizedFormData.set(vizType, restFormData);\n      controls = StandardizedFormData.getStandardizedControls(restFormData);\n    }\n    this.sfd = {\n      controls,\n      memorizedFormData\n    };\n  }\n  static getStandardizedControls(formData) {\n    // 1. initial StandardizedControls\n    const controls = {\n      metrics: [],\n      columns: []\n    };\n    // 2. collect current sharedControls\n    Object.entries(formData).forEach(([key, value]) => {\n      if (sharedMetricsKey.includes(key)) {\n        controls.metrics.push(...ensureIsArray(value));\n      }\n      if (sharedColumnsKey.includes(key)) {\n        controls.columns.push(...ensureIsArray(value));\n      }\n    });\n    // 3. append inherit sharedControls\n    if (isStandardizedFormData(formData)) {\n      const { metrics, columns } = formData.standardizedFormData.controls;\n      controls.metrics.push(...metrics);\n      controls.columns.push(...columns);\n    }\n    return controls;\n  }\n  getLatestFormData(vizType) {\n    if (this.has(vizType)) {\n      return this.get(vizType);\n    }\n    return this.memorizedFormData.slice(-1)[0][1];\n  }\n  get standardizedControls() {\n    return this.sfd.controls;\n  }\n  get memorizedFormData() {\n    return Array.from(this.sfd.memorizedFormData.entries());\n  }\n  serialize() {\n    return {\n      controls: this.standardizedControls,\n      memorizedFormData: this.memorizedFormData\n    };\n  }\n  has(vizType) {\n    return this.sfd.memorizedFormData.has(vizType);\n  }\n  get(vizType) {\n    return this.sfd.memorizedFormData.get(vizType);\n  }\n  transform(targetVizType, exploreState) {\n    /*\n     * Transfrom form_data between different viz. Return new form_data and controlsState.\n     * 1. get memorized form_data by viz type or get previous form_data\n     * 2. collect public control values\n     * 3. generate initial targetControlsState\n     * 4. attach `standardizedFormData` to the initial form_data\n     * 5. call formDataOverrides to transform initial form_data if the plugin was defined\n     * 6. use final form_data to generate controlsState\n     * 7. to refresh validator message\n     * */\n    const latestFormData = this.getLatestFormData(targetVizType);\n    const publicFormData = {};\n    publicControls.forEach((key) => {\n      if (key in exploreState.form_data) {\n        publicFormData[key] = exploreState.form_data[key];\n      }\n    });\n    const targetControlsState = getControlsState(exploreState, {\n      ...latestFormData,\n      ...publicFormData,\n      viz_type: targetVizType\n    });\n    const targetFormData = {\n      ...getFormDataFromControls(targetControlsState),\n      standardizedFormData: this.serialize()\n    };\n    let rv = {\n      formData: targetFormData,\n      controlsState: targetControlsState\n    };\n    const controlPanel = getChartControlPanelRegistry().get(targetVizType);\n    if (controlPanel != null && controlPanel.formDataOverrides) {\n      getStandardizedControls().setStandardizedControls(targetFormData);\n      const transformed = {\n        ...controlPanel.formDataOverrides(targetFormData),\n        standardizedFormData: {\n          controls: { ...getStandardizedControls().controls },\n          memorizedFormData: this.memorizedFormData\n        }\n      };\n      getStandardizedControls().clear();\n      rv = {\n        formData: transformed,\n        controlsState: getControlsState(exploreState, transformed)\n      };\n    }\n    // refresh validator message\n    rv.controlsState = getControlsState({ ...exploreState, controls: rv.controlsState }, rv.formData);\n    return rv;\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(sharedMetricsKey, \"sharedMetricsKey\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/controlUtils/standardizedFormData.ts\");reactHotLoader.register(sharedColumnsKey, \"sharedColumnsKey\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/controlUtils/standardizedFormData.ts\");reactHotLoader.register(publicControls, \"publicControls\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/controlUtils/standardizedFormData.ts\");reactHotLoader.register(StandardizedFormData, \"StandardizedFormData\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/controlUtils/standardizedFormData.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["enterModule","reactHotLoaderGlobal","undefined","module","__signature__","default","signature","a","ensureIsArray","getChartControlPanelRegistry","getStandardizedControls","isStandardizedFormData","getControlsState","getFormDataFromControls","sharedMetricsKey","sharedColumnsKey","publicControls","StandardizedFormData","constructor","sourceFormData","_formData$standardize","_mfd$slice$0$","sfd","formData","Object","freeze","mfd","standardizedFormData","memorizedFormData","vizType","viz_type","Map","controls","Array","isArray","length","datasource","slice","has","delete","set","restFormData","_omit","metrics","columns","entries","forEach","key","value","includes","push","getLatestFormData","get","standardizedControls","from","serialize","transform","targetVizType","exploreState","latestFormData","publicFormData","form_data","targetControlsState","targetFormData","rv","controlsState","controlPanel","formDataOverrides","setStandardizedControls","transformed","clear","__reactstandin__regenerateByEval","code","eval","reactHotLoader","register","leaveModule"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/controlUtils/standardizedFormData.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { omit } from 'lodash';\nimport {\n  ensureIsArray,\n  getChartControlPanelRegistry,\n  QueryFormColumn,\n  QueryFormData,\n  QueryFormMetric,\n} from '@superset-ui/core';\nimport {\n  ControlStateMapping,\n  getStandardizedControls,\n  isStandardizedFormData,\n  StandardizedControls,\n  StandardizedFormDataInterface,\n} from '@superset-ui/chart-controls';\nimport { getControlsState } from 'src/explore/store';\nimport { getFormDataFromControls } from './getFormDataFromControls';\n\nexport const sharedMetricsKey = [\n  'metric', // via sharedControls, scalar\n  'metrics', // via sharedControls, array\n  'metric_2', // via sharedControls, scalar\n  'size', // via sharedControls, scalar\n  'x', // via sharedControls, scalar\n  'y', // via sharedControls, scalar\n  'secondary_metric', // via sharedControls, scalar\n];\nexport const sharedColumnsKey = [\n  'groupby', // via sharedControls, array\n  'columns', // via sharedControls, array\n  'groupbyColumns', // via pivot table v2, array\n  'groupbyRows', // via pivot table v2, array\n  'entity', // via sharedControls, scalar\n  'series', // via sharedControls, scalar\n  'series_columns', // via sharedControls, array\n];\n\nexport const publicControls = [\n  // time section\n  'granularity_sqla', // via sharedControls\n  'time_grain_sqla', // via sharedControls\n  'time_range', // via sharedControls\n  // filters\n  'adhoc_filters', // via sharedControls\n  // subquery limit(series limit)\n  'limit', // via sharedControls\n  // order by clause\n  'timeseries_limit_metric', // via sharedControls\n  'series_limit_metric', // via sharedControls\n  // desc or asc in order by clause\n  'order_desc', // via sharedControls\n  // outer query limit\n  'row_limit', // via sharedControls\n  // x asxs column\n  'x_axis', // via sharedControls\n  // advanced analytics - rolling window\n  'rolling_type', // via sections.advancedAnalytics\n  'rolling_periods', // via sections.advancedAnalytics\n  'min_periods', // via sections.advancedAnalytics\n  // advanced analytics - time comparison\n  'time_compare', // via sections.advancedAnalytics\n  'comparison_type', // via sections.advancedAnalytics\n  // advanced analytics - resample\n  'resample_rule', // via sections.advancedAnalytics\n  'resample_method', // via sections.advancedAnalytics\n];\n\nexport class StandardizedFormData {\n  private sfd: StandardizedFormDataInterface;\n\n  constructor(sourceFormData: QueryFormData) {\n    /*\n     * Support form_data for smooth switching between different viz\n     * */\n    const formData = Object.freeze(sourceFormData);\n\n    // generates an ordered map, the key is viz_type and the value is form_data. the last item is current viz.\n    const mfd = formData?.standardizedFormData?.memorizedFormData;\n    const vizType = formData.viz_type;\n    let memorizedFormData = new Map<string, QueryFormData>();\n    let controls: StandardizedControls;\n    if (\n      Array.isArray(mfd) &&\n      mfd.length > 0 &&\n      formData.datasource === mfd.slice(-1)[0][1]?.datasource\n    ) {\n      memorizedFormData = new Map(\n        formData.standardizedFormData.memorizedFormData,\n      );\n      if (memorizedFormData.has(vizType)) {\n        memorizedFormData.delete(vizType);\n      }\n      memorizedFormData.set(vizType, formData);\n      controls = StandardizedFormData.getStandardizedControls(formData);\n    } else {\n      // reset the `memorizedFormData` if a request between different datasource.\n      const restFormData = omit(\n        formData,\n        'standardizedFormData',\n      ) as QueryFormData;\n      memorizedFormData.set(vizType, restFormData);\n      controls = StandardizedFormData.getStandardizedControls(restFormData);\n    }\n\n    this.sfd = {\n      controls,\n      memorizedFormData,\n    };\n  }\n\n  static getStandardizedControls(\n    formData: QueryFormData,\n  ): StandardizedControls {\n    // 1. initial StandardizedControls\n    const controls: StandardizedControls = {\n      metrics: [],\n      columns: [],\n    };\n\n    // 2. collect current sharedControls\n    Object.entries(formData).forEach(([key, value]) => {\n      if (sharedMetricsKey.includes(key)) {\n        controls.metrics.push(...ensureIsArray<QueryFormMetric>(value));\n      }\n      if (sharedColumnsKey.includes(key)) {\n        controls.columns.push(...ensureIsArray<QueryFormColumn>(value));\n      }\n    });\n\n    // 3. append inherit sharedControls\n    if (isStandardizedFormData(formData)) {\n      const { metrics, columns } = formData.standardizedFormData.controls;\n      controls.metrics.push(...metrics);\n      controls.columns.push(...columns);\n    }\n\n    return controls;\n  }\n\n  private getLatestFormData(vizType: string): QueryFormData {\n    if (this.has(vizType)) {\n      return this.get(vizType);\n    }\n    return this.memorizedFormData.slice(-1)[0][1];\n  }\n\n  private get standardizedControls() {\n    return this.sfd.controls;\n  }\n\n  private get memorizedFormData() {\n    return Array.from(this.sfd.memorizedFormData.entries());\n  }\n\n  serialize() {\n    return {\n      controls: this.standardizedControls,\n      memorizedFormData: this.memorizedFormData,\n    };\n  }\n\n  has(vizType: string): boolean {\n    return this.sfd.memorizedFormData.has(vizType);\n  }\n\n  get(vizType: string): QueryFormData {\n    return this.sfd.memorizedFormData.get(vizType) as QueryFormData;\n  }\n\n  transform(\n    targetVizType: string,\n    exploreState: Record<string, any>,\n  ): {\n    formData: QueryFormData;\n    controlsState: ControlStateMapping;\n  } {\n    /*\n     * Transfrom form_data between different viz. Return new form_data and controlsState.\n     * 1. get memorized form_data by viz type or get previous form_data\n     * 2. collect public control values\n     * 3. generate initial targetControlsState\n     * 4. attach `standardizedFormData` to the initial form_data\n     * 5. call formDataOverrides to transform initial form_data if the plugin was defined\n     * 6. use final form_data to generate controlsState\n     * 7. to refresh validator message\n     * */\n    const latestFormData = this.getLatestFormData(targetVizType);\n    const publicFormData = {};\n    publicControls.forEach(key => {\n      if (key in exploreState.form_data) {\n        publicFormData[key] = exploreState.form_data[key];\n      }\n    });\n    const targetControlsState = getControlsState(exploreState, {\n      ...latestFormData,\n      ...publicFormData,\n      viz_type: targetVizType,\n    });\n    const targetFormData = {\n      ...getFormDataFromControls(targetControlsState),\n      standardizedFormData: this.serialize(),\n    };\n\n    let rv = {\n      formData: targetFormData,\n      controlsState: targetControlsState,\n    };\n\n    const controlPanel = getChartControlPanelRegistry().get(targetVizType);\n    if (controlPanel?.formDataOverrides) {\n      getStandardizedControls().setStandardizedControls(targetFormData);\n      const transformed = {\n        ...controlPanel.formDataOverrides(targetFormData),\n        standardizedFormData: {\n          controls: { ...getStandardizedControls().controls },\n          memorizedFormData: this.memorizedFormData,\n        },\n      };\n      getStandardizedControls().clear();\n      rv = {\n        formData: transformed,\n        controlsState: getControlsState(exploreState, transformed),\n      };\n    }\n\n    // refresh validator message\n    rv.controlsState = getControlsState(\n      { ...exploreState, controls: rv.controlsState },\n      rv.formData,\n    );\n    return rv;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}