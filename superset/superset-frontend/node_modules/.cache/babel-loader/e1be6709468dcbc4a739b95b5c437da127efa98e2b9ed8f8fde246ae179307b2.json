{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { CategoricalColorNamespace, getColumnLabel, getMetricLabel, getNumberFormatter, getValueFormatter, NumberFormats, tooltipHtml } from '@superset-ui/core';\nimport { DEFAULT_FORM_DATA as DEFAULT_FUNNEL_FORM_DATA, EchartsFunnelLabelTypeType, PercentCalcType } from './types';\nimport { extractGroupbyLabel, getChartPadding, getColtypesMapping, getLegendProps, sanitizeHtml } from '../utils/series';\nimport { defaultGrid } from '../defaults';\nimport { DEFAULT_LEGEND_FORM_DATA, OpacityEnum } from '../constants';\nimport { getDefaultTooltip } from '../utils/tooltip';\nconst percentFormatter = getNumberFormatter(NumberFormats.PERCENT_2_POINT);\nexport function parseParams({ params, numberFormatter, percentCalculationType = PercentCalcType.FirstStep, sanitizeName = false }) {\n  const { name: rawName = '', value, percent: totalPercent, data } = params;\n  const name = sanitizeName ? sanitizeHtml(rawName) : rawName;\n  const formattedValue = numberFormatter(value);\n  const { firstStepPercent, prevStepPercent } = data;\n  let percent;\n  if (percentCalculationType === PercentCalcType.Total) {\n    percent = (totalPercent != null ? totalPercent : 0) / 100;\n  } else\n  if (percentCalculationType === PercentCalcType.PreviousStep) {\n    percent = prevStepPercent != null ? prevStepPercent : 0;\n  } else\n  {\n    percent = firstStepPercent != null ? firstStepPercent : 0;\n  }\n  const formattedPercent = percentFormatter(percent);\n  return [name, formattedValue, formattedPercent];\n}\nexport default function transformProps(chartProps) {\n  const { formData, height, hooks, filterState, queriesData, width, theme, emitCrossFilters, datasource } = chartProps;\n  const data = queriesData[0].data || [];\n  const coltypeMapping = getColtypesMapping(queriesData[0]);\n  const { colorScheme, groupby, orient, sort, gap, labelLine, labelType, tooltipLabelType, legendMargin, legendOrientation, legendType, metric = '', numberFormat, currencyFormat, showLabels, inContextMenu, showTooltipLabels, showLegend, sliceId, percentCalculationType } = {\n    ...DEFAULT_LEGEND_FORM_DATA,\n    ...DEFAULT_FUNNEL_FORM_DATA,\n    ...formData\n  };\n  const { currencyFormats = {}, columnFormats = {} } = datasource;\n  const refs = {};\n  const metricLabel = getMetricLabel(metric);\n  const groupbyLabels = groupby.map(getColumnLabel);\n  const keys = data.map((datum) => extractGroupbyLabel({ datum, groupby: groupbyLabels, coltypeMapping: {} }));\n  const labelMap = data.reduce((acc, datum) => {\n    const label = extractGroupbyLabel({\n      datum,\n      groupby: groupbyLabels,\n      coltypeMapping: {}\n    });\n    return {\n      ...acc,\n      [label]: groupbyLabels.map((col) => datum[col])\n    };\n  }, {});\n  const { setDataMask = () => {}, onContextMenu } = hooks;\n  const colorFn = CategoricalColorNamespace.getScale(colorScheme);\n  const numberFormatter = getValueFormatter(metric, currencyFormats, columnFormats, numberFormat, currencyFormat);\n  const transformedData = data.map((datum, index) => {\n    const name = extractGroupbyLabel({\n      datum,\n      groupby: groupbyLabels,\n      coltypeMapping: {}\n    });\n    const value = datum[metricLabel];\n    const isFiltered = filterState.selectedValues && !filterState.selectedValues.includes(name);\n    const firstStepPercent = value / data[0][metricLabel];\n    const prevStepPercent = index === 0 ? 1 : value / data[index - 1][metricLabel];\n    return {\n      value,\n      name,\n      itemStyle: {\n        color: colorFn(name, sliceId),\n        opacity: isFiltered ?\n        OpacityEnum.SemiTransparent :\n        OpacityEnum.NonTransparent\n      },\n      firstStepPercent,\n      prevStepPercent\n    };\n  });\n  const selectedValues = (filterState.selectedValues || []).reduce((acc, selectedValue) => {\n    const index = transformedData.findIndex(({ name }) => name === selectedValue);\n    return {\n      ...acc,\n      [index]: selectedValue\n    };\n  }, {});\n  const formatter = (params) => {\n    const [name, formattedValue, formattedPercent] = parseParams({\n      params,\n      numberFormatter,\n      percentCalculationType\n    });\n    switch (labelType) {\n      case EchartsFunnelLabelTypeType.Key:\n        return name;\n      case EchartsFunnelLabelTypeType.Value:\n        return formattedValue;\n      case EchartsFunnelLabelTypeType.Percent:\n        return formattedPercent;\n      case EchartsFunnelLabelTypeType.KeyValue:\n        return `${name}: ${formattedValue}`;\n      case EchartsFunnelLabelTypeType.KeyValuePercent:\n        return `${name}: ${formattedValue} (${formattedPercent})`;\n      case EchartsFunnelLabelTypeType.KeyPercent:\n        return `${name}: ${formattedPercent}`;\n      case EchartsFunnelLabelTypeType.ValuePercent:\n        return `${formattedValue} (${formattedPercent})`;\n      default:\n        return name;\n    }\n  };\n  const defaultLabel = {\n    formatter,\n    show: showLabels,\n    color: theme.colors.grayscale.dark2\n  };\n  const series = [\n  {\n    type: 'funnel',\n    ...getChartPadding(showLegend, legendOrientation, legendMargin),\n    animation: true,\n    minSize: '0%',\n    maxSize: '100%',\n    sort,\n    orient,\n    gap,\n    funnelAlign: 'center',\n    labelLine: { show: !!labelLine },\n    label: {\n      ...defaultLabel,\n      position: labelLine ? 'outer' : 'inner',\n      textBorderColor: 'transparent'\n    },\n    emphasis: {\n      label: {\n        show: true,\n        fontWeight: 'bold'\n      }\n    },\n    // @ts-ignore\n    data: transformedData\n  }];\n\n  const echartOptions = {\n    grid: {\n      ...defaultGrid\n    },\n    tooltip: {\n      ...getDefaultTooltip(refs),\n      show: !inContextMenu && showTooltipLabels,\n      trigger: 'item',\n      formatter: (params) => {\n        const [name, formattedValue, formattedPercent] = parseParams({\n          params,\n          numberFormatter,\n          percentCalculationType\n        });\n        const row = [];\n        const enumName = EchartsFunnelLabelTypeType[tooltipLabelType];\n        const title = enumName.includes('Key') ? name : undefined;\n        if (enumName.includes('Value') || enumName.includes('Percent')) {\n          row.push(metricLabel);\n        }\n        if (enumName.includes('Value')) {\n          row.push(formattedValue);\n        }\n        if (enumName.includes('Percent')) {\n          row.push(formattedPercent);\n        }\n        return tooltipHtml([row], title);\n      }\n    },\n    legend: {\n      ...getLegendProps(legendType, legendOrientation, showLegend, theme),\n      data: keys\n    },\n    series\n  };\n  return {\n    formData,\n    width,\n    height,\n    echartOptions,\n    setDataMask,\n    emitCrossFilters,\n    labelMap,\n    groupby,\n    selectedValues,\n    onContextMenu,\n    refs,\n    coltypeMapping\n  };\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(percentFormatter, \"percentFormatter\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-echarts/src/Funnel/transformProps.ts\");reactHotLoader.register(parseParams, \"parseParams\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-echarts/src/Funnel/transformProps.ts\");reactHotLoader.register(transformProps, \"transformProps\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-echarts/src/Funnel/transformProps.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["CategoricalColorNamespace","getColumnLabel","getMetricLabel","getNumberFormatter","getValueFormatter","NumberFormats","tooltipHtml","DEFAULT_FORM_DATA","DEFAULT_FUNNEL_FORM_DATA","EchartsFunnelLabelTypeType","PercentCalcType","extractGroupbyLabel","getChartPadding","getColtypesMapping","getLegendProps","sanitizeHtml","defaultGrid","DEFAULT_LEGEND_FORM_DATA","OpacityEnum","getDefaultTooltip","percentFormatter","PERCENT_2_POINT","parseParams","params","numberFormatter","percentCalculationType","FirstStep","sanitizeName","name","rawName","value","percent","totalPercent","data","formattedValue","firstStepPercent","prevStepPercent","Total","PreviousStep","formattedPercent","transformProps","chartProps","formData","height","hooks","filterState","queriesData","width","theme","emitCrossFilters","datasource","coltypeMapping","colorScheme","groupby","orient","sort","gap","labelLine","labelType","tooltipLabelType","legendMargin","legendOrientation","legendType","metric","numberFormat","currencyFormat","showLabels","inContextMenu","showTooltipLabels","showLegend","sliceId","currencyFormats","columnFormats","refs","metricLabel","groupbyLabels","map","keys","datum","labelMap","reduce","acc","label","col","setDataMask","onContextMenu","colorFn","getScale","transformedData","index","isFiltered","selectedValues","includes","itemStyle","color","opacity","SemiTransparent","NonTransparent","selectedValue","findIndex","formatter","Key","Value","Percent","KeyValue","KeyValuePercent","KeyPercent","ValuePercent","defaultLabel","show","colors","grayscale","dark2","series","type","animation","minSize","maxSize","funnelAlign","position","textBorderColor","emphasis","fontWeight","echartOptions","grid","tooltip","trigger","row","enumName","title","undefined","push","legend","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-echarts/src/Funnel/transformProps.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  CategoricalColorNamespace,\n  DataRecord,\n  getColumnLabel,\n  getMetricLabel,\n  getNumberFormatter,\n  getValueFormatter,\n  NumberFormats,\n  tooltipHtml,\n  ValueFormatter,\n} from '@superset-ui/core';\nimport { CallbackDataParams } from 'echarts/types/src/util/types';\nimport { EChartsCoreOption, FunnelSeriesOption } from 'echarts';\nimport {\n  DEFAULT_FORM_DATA as DEFAULT_FUNNEL_FORM_DATA,\n  EchartsFunnelChartProps,\n  EchartsFunnelFormData,\n  EchartsFunnelLabelTypeType,\n  FunnelChartTransformedProps,\n  PercentCalcType,\n} from './types';\nimport {\n  extractGroupbyLabel,\n  getChartPadding,\n  getColtypesMapping,\n  getLegendProps,\n  sanitizeHtml,\n} from '../utils/series';\nimport { defaultGrid } from '../defaults';\nimport { DEFAULT_LEGEND_FORM_DATA, OpacityEnum } from '../constants';\nimport { getDefaultTooltip } from '../utils/tooltip';\nimport { Refs } from '../types';\n\nconst percentFormatter = getNumberFormatter(NumberFormats.PERCENT_2_POINT);\n\nexport function parseParams({\n  params,\n  numberFormatter,\n  percentCalculationType = PercentCalcType.FirstStep,\n  sanitizeName = false,\n}: {\n  params: Pick<CallbackDataParams, 'name' | 'value' | 'percent' | 'data'>;\n  numberFormatter: ValueFormatter;\n  percentCalculationType?: PercentCalcType;\n  sanitizeName?: boolean;\n}) {\n  const { name: rawName = '', value, percent: totalPercent, data } = params;\n  const name = sanitizeName ? sanitizeHtml(rawName) : rawName;\n  const formattedValue = numberFormatter(value as number);\n  const { firstStepPercent, prevStepPercent } = data as {\n    firstStepPercent: number;\n    prevStepPercent: number;\n  };\n  let percent;\n\n  if (percentCalculationType === PercentCalcType.Total) {\n    percent = (totalPercent ?? 0) / 100;\n  } else if (percentCalculationType === PercentCalcType.PreviousStep) {\n    percent = prevStepPercent ?? 0;\n  } else {\n    percent = firstStepPercent ?? 0;\n  }\n  const formattedPercent = percentFormatter(percent);\n  return [name, formattedValue, formattedPercent];\n}\n\nexport default function transformProps(\n  chartProps: EchartsFunnelChartProps,\n): FunnelChartTransformedProps {\n  const {\n    formData,\n    height,\n    hooks,\n    filterState,\n    queriesData,\n    width,\n    theme,\n    emitCrossFilters,\n    datasource,\n  } = chartProps;\n  const data: DataRecord[] = queriesData[0].data || [];\n  const coltypeMapping = getColtypesMapping(queriesData[0]);\n  const {\n    colorScheme,\n    groupby,\n    orient,\n    sort,\n    gap,\n    labelLine,\n    labelType,\n    tooltipLabelType,\n    legendMargin,\n    legendOrientation,\n    legendType,\n    metric = '',\n    numberFormat,\n    currencyFormat,\n    showLabels,\n    inContextMenu,\n    showTooltipLabels,\n    showLegend,\n    sliceId,\n    percentCalculationType,\n  }: EchartsFunnelFormData = {\n    ...DEFAULT_LEGEND_FORM_DATA,\n    ...DEFAULT_FUNNEL_FORM_DATA,\n    ...formData,\n  };\n  const { currencyFormats = {}, columnFormats = {} } = datasource;\n  const refs: Refs = {};\n  const metricLabel = getMetricLabel(metric);\n  const groupbyLabels = groupby.map(getColumnLabel);\n  const keys = data.map(datum =>\n    extractGroupbyLabel({ datum, groupby: groupbyLabels, coltypeMapping: {} }),\n  );\n  const labelMap = data.reduce((acc: Record<string, string[]>, datum) => {\n    const label = extractGroupbyLabel({\n      datum,\n      groupby: groupbyLabels,\n      coltypeMapping: {},\n    });\n    return {\n      ...acc,\n      [label]: groupbyLabels.map(col => datum[col] as string),\n    };\n  }, {});\n\n  const { setDataMask = () => {}, onContextMenu } = hooks;\n\n  const colorFn = CategoricalColorNamespace.getScale(colorScheme as string);\n  const numberFormatter = getValueFormatter(\n    metric,\n    currencyFormats,\n    columnFormats,\n    numberFormat,\n    currencyFormat,\n  );\n\n  const transformedData: {\n    value: number;\n    name: string;\n    itemStyle: { color: string; opacity: OpacityEnum };\n  }[] = data.map((datum, index) => {\n    const name = extractGroupbyLabel({\n      datum,\n      groupby: groupbyLabels,\n      coltypeMapping: {},\n    });\n    const value = datum[metricLabel] as number;\n    const isFiltered =\n      filterState.selectedValues && !filterState.selectedValues.includes(name);\n    const firstStepPercent = value / (data[0][metricLabel] as number);\n    const prevStepPercent =\n      index === 0 ? 1 : value / (data[index - 1][metricLabel] as number);\n    return {\n      value,\n      name,\n      itemStyle: {\n        color: colorFn(name, sliceId),\n        opacity: isFiltered\n          ? OpacityEnum.SemiTransparent\n          : OpacityEnum.NonTransparent,\n      },\n      firstStepPercent,\n      prevStepPercent,\n    };\n  });\n\n  const selectedValues = (filterState.selectedValues || []).reduce(\n    (acc: Record<string, number>, selectedValue: string) => {\n      const index = transformedData.findIndex(\n        ({ name }) => name === selectedValue,\n      );\n      return {\n        ...acc,\n        [index]: selectedValue,\n      };\n    },\n    {},\n  );\n\n  const formatter = (params: CallbackDataParams) => {\n    const [name, formattedValue, formattedPercent] = parseParams({\n      params,\n      numberFormatter,\n      percentCalculationType,\n    });\n    switch (labelType) {\n      case EchartsFunnelLabelTypeType.Key:\n        return name;\n      case EchartsFunnelLabelTypeType.Value:\n        return formattedValue;\n      case EchartsFunnelLabelTypeType.Percent:\n        return formattedPercent;\n      case EchartsFunnelLabelTypeType.KeyValue:\n        return `${name}: ${formattedValue}`;\n      case EchartsFunnelLabelTypeType.KeyValuePercent:\n        return `${name}: ${formattedValue} (${formattedPercent})`;\n      case EchartsFunnelLabelTypeType.KeyPercent:\n        return `${name}: ${formattedPercent}`;\n      case EchartsFunnelLabelTypeType.ValuePercent:\n        return `${formattedValue} (${formattedPercent})`;\n      default:\n        return name;\n    }\n  };\n\n  const defaultLabel = {\n    formatter,\n    show: showLabels,\n    color: theme.colors.grayscale.dark2,\n  };\n\n  const series: FunnelSeriesOption[] = [\n    {\n      type: 'funnel',\n      ...getChartPadding(showLegend, legendOrientation, legendMargin),\n      animation: true,\n      minSize: '0%',\n      maxSize: '100%',\n      sort,\n      orient,\n      gap,\n      funnelAlign: 'center',\n      labelLine: { show: !!labelLine },\n      label: {\n        ...defaultLabel,\n        position: labelLine ? 'outer' : 'inner',\n        textBorderColor: 'transparent',\n      },\n      emphasis: {\n        label: {\n          show: true,\n          fontWeight: 'bold',\n        },\n      },\n      // @ts-ignore\n      data: transformedData,\n    },\n  ];\n\n  const echartOptions: EChartsCoreOption = {\n    grid: {\n      ...defaultGrid,\n    },\n    tooltip: {\n      ...getDefaultTooltip(refs),\n      show: !inContextMenu && showTooltipLabels,\n      trigger: 'item',\n      formatter: (params: any) => {\n        const [name, formattedValue, formattedPercent] = parseParams({\n          params,\n          numberFormatter,\n          percentCalculationType,\n        });\n        const row = [];\n        const enumName = EchartsFunnelLabelTypeType[tooltipLabelType];\n        const title = enumName.includes('Key') ? name : undefined;\n        if (enumName.includes('Value') || enumName.includes('Percent')) {\n          row.push(metricLabel);\n        }\n        if (enumName.includes('Value')) {\n          row.push(formattedValue);\n        }\n        if (enumName.includes('Percent')) {\n          row.push(formattedPercent);\n        }\n        return tooltipHtml([row], title);\n      },\n    },\n    legend: {\n      ...getLegendProps(legendType, legendOrientation, showLegend, theme),\n      data: keys,\n    },\n    series,\n  };\n\n  return {\n    formData,\n    width,\n    height,\n    echartOptions,\n    setDataMask,\n    emitCrossFilters,\n    labelMap,\n    groupby,\n    selectedValues,\n    onContextMenu,\n    refs,\n    coltypeMapping,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}