{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport JsonModal, { safeJsonObjectParse } from 'src/components/JsonModal';\nimport { t, safeHtmlSpan } from '@superset-ui/core';\nimport { NULL_STRING } from './useCellContentParser';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport const renderResultCell = ({ cellData, getCellContent, columnKey, allowHTML = true }) => {var _getCellContent;\n  const cellNode = (_getCellContent = getCellContent == null ? void 0 : getCellContent({ cellData, columnKey })) != null ? _getCellContent : String(cellData);\n  if (cellData === null) {\n    return ___EmotionJSX(\"i\", { className: \"text-muted\" }, NULL_STRING);\n  }\n  const jsonObject = safeJsonObjectParse(cellData);\n  if (jsonObject) {\n    return ___EmotionJSX(JsonModal, { modalTitle: t('Cell content'), jsonObject: jsonObject, jsonValue: cellData });\n  }\n  if (allowHTML && typeof cellData === 'string') {\n    return safeHtmlSpan(cellNode);\n  }\n  return cellNode;\n};;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(renderResultCell, \"renderResultCell\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/FilterableTable/utils.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["React","JsonModal","safeJsonObjectParse","t","safeHtmlSpan","NULL_STRING","jsx","___EmotionJSX","renderResultCell","cellData","getCellContent","columnKey","allowHTML","_getCellContent","cellNode","String","className","jsonObject","modalTitle","jsonValue","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/components/FilterableTable/utils.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport JsonModal, { safeJsonObjectParse } from 'src/components/JsonModal';\nimport { t, safeHtmlSpan } from '@superset-ui/core';\nimport { NULL_STRING, CellDataType } from './useCellContentParser';\n\ntype CellParams = {\n  cellData: CellDataType;\n  columnKey: string;\n};\n\ntype Params = CellParams & {\n  allowHTML?: boolean;\n  getCellContent?: (args: CellParams) => string;\n};\n\nexport const renderResultCell = ({\n  cellData,\n  getCellContent,\n  columnKey,\n  allowHTML = true,\n}: Params) => {\n  const cellNode =\n    getCellContent?.({ cellData, columnKey }) ?? String(cellData);\n  if (cellData === null) {\n    return <i className=\"text-muted\">{NULL_STRING}</i>;\n  }\n  const jsonObject = safeJsonObjectParse(cellData);\n  if (jsonObject) {\n    return (\n      <JsonModal\n        modalTitle={t('Cell content')}\n        jsonObject={jsonObject}\n        jsonValue={cellData}\n      />\n    );\n  }\n  if (allowHTML && typeof cellData === 'string') {\n    return safeHtmlSpan(cellNode);\n  }\n  return cellNode;\n};\n"],"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,IAAIC,mBAAmB,QAAQ,0BAA0B;AACzE,SAASC,CAAC,EAAEC,YAAY,QAAQ,mBAAmB;AACnD,SAASC,WAAW,QAAsB,wBAAwB,CAAC,SAAAC,GAAA,IAAAC,aAAA;AAYnE,OAAO,MAAMC,gBAAgB,GAAGA,CAAC,EAC/BC,QAAQ,EACRC,cAAc,EACdC,SAAS,EACTC,SAAS,GAAG,IAAI,EACT,KAAI,KAAAC,eAAA;EACX,MAAMC,QAAQ,IAAAD,eAAA,GACZH,cAAc,oBAAdA,cAAc,CAAG,EAAED,QAAQ,EAAEE,SAAS,EAAE,CAAC,YAAAE,eAAA,GAAIE,MAAM,CAACN,QAAQ,CAAC;EAC/D,IAAIA,QAAQ,KAAK,IAAI,EAAE;IACrB,OAAOF,aAAA,QAAGS,SAAS,EAAC,YAAY,IAAEX,WAAe,CAAC;;EAEpD,MAAMY,UAAU,GAAGf,mBAAmB,CAACO,QAAQ,CAAC;EAChD,IAAIQ,UAAU,EAAE;IACd,OACEV,aAAA,CAACN,SAAS,IACRiB,UAAU,EAAEf,CAAC,CAAC,cAAc,CAAE,EAC9Bc,UAAU,EAAEA,UAAW,EACvBE,SAAS,EAAEV,QAAS,GACpB;;EAGN,IAAIG,SAAS,IAAI,OAAOH,QAAQ,KAAK,QAAQ,EAAE;IAC7C,OAAOL,YAAY,CAACU,QAAQ,CAAC;;EAE/B,OAAOA,QAAQ;AACjB,CAAC,CAAC,mBAAAM,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAC,OAAA,GAAAC,SAAA,MAAAH,cAAA,WAAAA,cAAA,CAAAI,QAAA,CAzBWhB,gBAAgB,iJAAAiB,WAAA,UAAAJ,oBAAA,mBAAAA,oBAAA,CAAAI,WAAA,GAAAF,SAAA,CAAAE,WAAA,IAAAA,WAAA,CAAAC,MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}