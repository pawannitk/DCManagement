{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport ScreenPass from '../passes/screen-pass';\nimport { normalizeShaderModule } from '@luma.gl/core';\nexport default class PostProcessEffect {\n  constructor(module, props = {}) {\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"props\", void 0);\n\n    _defineProperty(this, \"module\", void 0);\n\n    _defineProperty(this, \"passes\", void 0);\n\n    this.id = \"\".concat(module.name, \"-pass\");\n    this.props = props;\n    normalizeShaderModule(module);\n    this.module = module;\n  }\n\n  setProps(props) {\n    this.props = props;\n  }\n\n  preRender() {}\n\n  postRender(gl, params) {\n    const passes = this.passes || createPasses(gl, this.module, this.id);\n    this.passes = passes;\n    const {\n      target\n    } = params;\n    let inputBuffer = params.inputBuffer;\n    let outputBuffer = params.swapBuffer;\n\n    for (let index = 0; index < this.passes.length; index++) {\n      if (target && index === this.passes.length - 1) {\n        outputBuffer = target;\n      }\n\n      this.passes[index].render({\n        inputBuffer,\n        outputBuffer,\n        moduleSettings: this.props\n      });\n      const switchBuffer = outputBuffer;\n      outputBuffer = inputBuffer;\n      inputBuffer = switchBuffer;\n    }\n\n    return inputBuffer;\n  }\n\n  cleanup() {\n    if (this.passes) {\n      for (const pass of this.passes) {\n        pass.delete();\n      }\n\n      this.passes = undefined;\n    }\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\n\nfunction createPasses(gl, module, id) {\n  if (!module.passes) {\n    const fs = getFragmentShaderForRenderPass(module);\n    const pass = new ScreenPass(gl, {\n      id,\n      module,\n      fs\n    });\n    return [pass];\n  }\n\n  return module.passes.map((pass, index) => {\n    const fs = getFragmentShaderForRenderPass(module, pass);\n    const idn = \"\".concat(id, \"-\").concat(index);\n    return new ScreenPass(gl, {\n      id: idn,\n      module,\n      fs\n    });\n  });\n}\n\nconst FILTER_FS_TEMPLATE = (func) => \"uniform sampler2D texture;\\nuniform vec2 texSize;\\n\\nvarying vec2 position;\\nvarying vec2 coordinate;\\nvarying vec2 uv;\\n\\nvoid main() {\\n  vec2 texCoord = coordinate;\\n\\n  gl_FragColor = texture2D(texture, texCoord);\\n  gl_FragColor = \".concat(func, \"(gl_FragColor, texSize, texCoord);\\n}\\n\");\n\nconst SAMPLER_FS_TEMPLATE = (func) => \"uniform sampler2D texture;\\nuniform vec2 texSize;\\n\\nvarying vec2 position;\\nvarying vec2 coordinate;\\nvarying vec2 uv;\\n\\nvoid main() {\\n  vec2 texCoord = coordinate;\\n\\n  gl_FragColor = \".concat(func, \"(texture, texSize, texCoord);\\n}\\n\");\n\nfunction getFragmentShaderForRenderPass(module, pass = module) {\n  if (pass.filter) {\n    const func = typeof pass.filter === 'string' ? pass.filter : \"\".concat(module.name, \"_filterColor\");\n    return FILTER_FS_TEMPLATE(func);\n  }\n\n  if (pass.sampler) {\n    const func = typeof pass.sampler === 'string' ? pass.sampler : \"\".concat(module.name, \"_sampleColor\");\n    return SAMPLER_FS_TEMPLATE(func);\n  }\n\n  return null;\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(PostProcessEffect, \"PostProcessEffect\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/core/dist/esm/effects/post-process-effect.js\");reactHotLoader.register(createPasses, \"createPasses\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/core/dist/esm/effects/post-process-effect.js\");reactHotLoader.register(FILTER_FS_TEMPLATE, \"FILTER_FS_TEMPLATE\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/core/dist/esm/effects/post-process-effect.js\");reactHotLoader.register(SAMPLER_FS_TEMPLATE, \"SAMPLER_FS_TEMPLATE\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/core/dist/esm/effects/post-process-effect.js\");reactHotLoader.register(getFragmentShaderForRenderPass, \"getFragmentShaderForRenderPass\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/core/dist/esm/effects/post-process-effect.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["ScreenPass","normalizeShaderModule","PostProcessEffect","constructor","module","props","_defineProperty","id","concat","name","setProps","preRender","postRender","gl","params","passes","createPasses","target","inputBuffer","outputBuffer","swapBuffer","index","length","render","moduleSettings","switchBuffer","cleanup","pass","delete","undefined","__reactstandin__regenerateByEval","key","code","eval","fs","getFragmentShaderForRenderPass","map","idn","FILTER_FS_TEMPLATE","func","SAMPLER_FS_TEMPLATE","filter","sampler","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule"],"sources":["../../../src/effects/post-process-effect.ts"],"sourcesContent":["import ScreenPass from '../passes/screen-pass';\nimport {normalizeShaderModule} from '@luma.gl/core';\n\nimport type {Effect, PostRenderOptions} from '../lib/effect';\nimport type {Framebuffer} from '@luma.gl/webgl';\nimport type {ShaderModule} from '../types/types';\n\nexport default class PostProcessEffect implements Effect {\n  id: string;\n  props: any;\n  module: ShaderModule;\n  passes?: ScreenPass[];\n\n  constructor(module: ShaderModule, props: any = {}) {\n    this.id = `${module.name}-pass`;\n    this.props = props;\n    normalizeShaderModule(module);\n    this.module = module;\n  }\n\n  setProps(props: any) {\n    this.props = props;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  preRender(): void {}\n\n  postRender(gl: WebGLRenderingContext, params: PostRenderOptions): Framebuffer {\n    const passes = this.passes || createPasses(gl, this.module, this.id);\n    this.passes = passes;\n\n    const {target} = params;\n    let inputBuffer = params.inputBuffer;\n    let outputBuffer = params.swapBuffer;\n\n    for (let index = 0; index < this.passes.length; index++) {\n      if (target && index === this.passes.length - 1) {\n        outputBuffer = target;\n      }\n      this.passes[index].render({inputBuffer, outputBuffer, moduleSettings: this.props});\n      const switchBuffer = outputBuffer;\n      outputBuffer = inputBuffer;\n      inputBuffer = switchBuffer;\n    }\n    return inputBuffer;\n  }\n\n  cleanup(): void {\n    if (this.passes) {\n      for (const pass of this.passes) {\n        pass.delete();\n      }\n      this.passes = undefined;\n    }\n  }\n}\n\nfunction createPasses(gl: WebGLRenderingContext, module: ShaderModule, id: string): ScreenPass[] {\n  if (!module.passes) {\n    const fs = getFragmentShaderForRenderPass(module);\n    const pass = new ScreenPass(gl, {\n      id,\n      module,\n      fs\n    });\n    return [pass];\n  }\n\n  return module.passes.map((pass, index) => {\n    const fs = getFragmentShaderForRenderPass(module, pass);\n    const idn = `${id}-${index}`;\n\n    return new ScreenPass(gl, {\n      id: idn,\n      module,\n      fs\n    });\n  });\n}\n\nconst FILTER_FS_TEMPLATE = func => `\\\nuniform sampler2D texture;\nuniform vec2 texSize;\n\nvarying vec2 position;\nvarying vec2 coordinate;\nvarying vec2 uv;\n\nvoid main() {\n  vec2 texCoord = coordinate;\n\n  gl_FragColor = texture2D(texture, texCoord);\n  gl_FragColor = ${func}(gl_FragColor, texSize, texCoord);\n}\n`;\n\nconst SAMPLER_FS_TEMPLATE = func => `\\\nuniform sampler2D texture;\nuniform vec2 texSize;\n\nvarying vec2 position;\nvarying vec2 coordinate;\nvarying vec2 uv;\n\nvoid main() {\n  vec2 texCoord = coordinate;\n\n  gl_FragColor = ${func}(texture, texSize, texCoord);\n}\n`;\n\nfunction getFragmentShaderForRenderPass(module, pass = module) {\n  if (pass.filter) {\n    const func = typeof pass.filter === 'string' ? pass.filter : `${module.name}_filterColor`;\n    return FILTER_FS_TEMPLATE(func);\n  }\n\n  if (pass.sampler) {\n    const func = typeof pass.sampler === 'string' ? pass.sampler : `${module.name}_sampleColor`;\n    return SAMPLER_FS_TEMPLATE(func);\n  }\n\n  // console.error(`${module.name} no fragment shader generated`);\n  return null;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}