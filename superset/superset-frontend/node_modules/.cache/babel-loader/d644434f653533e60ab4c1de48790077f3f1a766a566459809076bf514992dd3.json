{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nexport var LocalStorageKeys;\n(function (LocalStorageKeys) {\n  /**\n   * START LEGACY LOCAL STORAGE KEYS\n   *\n   * Do not follow the patterns here for key names. Keys should instead be namespaced to avoid\n   * collisions.\n   *\n   * TODO: Update all local storage keys to follow the new pattern. This is a breaking change,\n   * and therefore should be done in a major release.\n   */\n  LocalStorageKeys[\"Database\"] = \"db\";\n  LocalStorageKeys[\"ChartSplitSizes\"] = \"chart_split_sizes\";\n  LocalStorageKeys[\"ControlsWidth\"] = \"controls_width\";\n  LocalStorageKeys[\"DatasourceWidth\"] = \"datasource_width\";\n  LocalStorageKeys[\"IsDatapanelOpen\"] = \"is_datapanel_open\";\n  LocalStorageKeys[\"HomepageChartFilter\"] = \"homepage_chart_filter\";\n  LocalStorageKeys[\"HomepageDashboardFilter\"] = \"homepage_dashboard_filter\";\n  LocalStorageKeys[\"HomepageCollapseState\"] = \"homepage_collapse_state\";\n  LocalStorageKeys[\"HomepageActivityFilter\"] = \"homepage_activity_filter\";\n  LocalStorageKeys[\"DatasetnameSetSuccessful\"] = \"datasetname_set_successful\";\n  /** END LEGACY LOCAL STORAGE KEYS */\n  /**\n   * New local storage keys should be namespaced to avoid collisions. Keys should be named in the\n   * form [namespace]__[key].\n   *\n   * Example:\n   * sqllab__is_autocomplete_enabled\n   */\n  LocalStorageKeys[\"SqllabIsAutocompleteEnabled\"] = \"sqllab__is_autocomplete_enabled\";\n  LocalStorageKeys[\"SqllabIsRenderHtmlEnabled\"] = \"sqllab__is_render_html_enabled\";\n  LocalStorageKeys[\"ExploreDataTableOriginalFormattedTimeColumns\"] = \"explore__data_table_original_formatted_time_columns\";\n  LocalStorageKeys[\"DashboardCustomFilterBarWidths\"] = \"dashboard__custom_filter_bar_widths\";\n  LocalStorageKeys[\"DashboardExploreContext\"] = \"dashboard__explore_context\";\n  LocalStorageKeys[\"DashboardEditorShowOnlyMyCharts\"] = \"dashboard__editor_show_only_my_charts\";\n  LocalStorageKeys[\"CommonResizableSidebarWidths\"] = \"common__resizable_sidebar_widths\";\n})(LocalStorageKeys || (LocalStorageKeys = {}));\n/*\n * This function should not be used directly, as it doesn't provide any type safety or any\n * guarantees that the globally namespaced localstorage key is correct.\n *\n * Instead, use getItem and setItem. Any legacy uses should be updated/migrated in future\n * Superset versions (as they may require breaking changes).\n * */\nexport function dangerouslyGetItemDoNotUse(key, defaultValue) {\n  try {\n    const value = localStorage.getItem(key);\n    if (value === null) {\n      return defaultValue;\n    }\n    return JSON.parse(value);\n  }\n  catch {\n    return defaultValue;\n  }\n}\n/*\n * This function should not be used directly, as it doesn't provide any type safety or any\n * guarantees that the globally namespaced localstorage key is correct.\n *\n * Instead, use getItem and setItem. Any legacy uses should be updated/migrated in future\n * Superset versions (as they may require breaking changes).\n * */\nexport function dangerouslySetItemDoNotUse(key, value) {\n  try {\n    localStorage.setItem(key, JSON.stringify(value));\n  }\n  catch {\n\n    // Catch in case localStorage is unavailable\n  }}\nexport function getItem(key, defaultValue) {\n  return dangerouslyGetItemDoNotUse(key, defaultValue);\n}\nexport function setItem(key, value) {\n  dangerouslySetItemDoNotUse(key, value);\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(LocalStorageKeys, \"LocalStorageKeys\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/utils/localStorageHelpers.ts\");reactHotLoader.register(dangerouslyGetItemDoNotUse, \"dangerouslyGetItemDoNotUse\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/utils/localStorageHelpers.ts\");reactHotLoader.register(dangerouslySetItemDoNotUse, \"dangerouslySetItemDoNotUse\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/utils/localStorageHelpers.ts\");reactHotLoader.register(getItem, \"getItem\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/utils/localStorageHelpers.ts\");reactHotLoader.register(setItem, \"setItem\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/utils/localStorageHelpers.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["LocalStorageKeys","dangerouslyGetItemDoNotUse","key","defaultValue","value","localStorage","getItem","JSON","parse","dangerouslySetItemDoNotUse","setItem","stringify","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/utils/localStorageHelpers.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { TableTab } from 'src/views/CRUD/types';\nimport { DashboardContextForExplore } from 'src/types/DashboardContextForExplore';\n\nexport enum LocalStorageKeys {\n  /**\n   * START LEGACY LOCAL STORAGE KEYS\n   *\n   * Do not follow the patterns here for key names. Keys should instead be namespaced to avoid\n   * collisions.\n   *\n   * TODO: Update all local storage keys to follow the new pattern. This is a breaking change,\n   * and therefore should be done in a major release.\n   */\n  Database = 'db',\n  ChartSplitSizes = 'chart_split_sizes',\n  ControlsWidth = 'controls_width',\n  DatasourceWidth = 'datasource_width',\n  IsDatapanelOpen = 'is_datapanel_open',\n  HomepageChartFilter = 'homepage_chart_filter',\n  HomepageDashboardFilter = 'homepage_dashboard_filter',\n  HomepageCollapseState = 'homepage_collapse_state',\n  HomepageActivityFilter = 'homepage_activity_filter',\n  DatasetnameSetSuccessful = 'datasetname_set_successful',\n  /** END LEGACY LOCAL STORAGE KEYS */\n\n  /**\n   * New local storage keys should be namespaced to avoid collisions. Keys should be named in the\n   * form [namespace]__[key].\n   *\n   * Example:\n   * sqllab__is_autocomplete_enabled\n   */\n  SqllabIsAutocompleteEnabled = 'sqllab__is_autocomplete_enabled',\n  SqllabIsRenderHtmlEnabled = 'sqllab__is_render_html_enabled',\n  ExploreDataTableOriginalFormattedTimeColumns = 'explore__data_table_original_formatted_time_columns',\n  DashboardCustomFilterBarWidths = 'dashboard__custom_filter_bar_widths',\n  DashboardExploreContext = 'dashboard__explore_context',\n  DashboardEditorShowOnlyMyCharts = 'dashboard__editor_show_only_my_charts',\n  CommonResizableSidebarWidths = 'common__resizable_sidebar_widths',\n}\n\nexport type LocalStorageValues = {\n  db: object | null;\n  chart_split_sizes: [number, number];\n  controls_width: number;\n  datasource_width: number;\n  is_datapanel_open: boolean;\n  homepage_chart_filter: TableTab;\n  homepage_dashboard_filter: TableTab;\n  homepage_collapse_state: string[];\n  datasetname_set_successful: boolean;\n  homepage_activity_filter: TableTab | null;\n  sqllab__is_autocomplete_enabled: boolean;\n  sqllab__is_render_html_enabled: boolean;\n  explore__data_table_original_formatted_time_columns: Record<string, string[]>;\n  dashboard__custom_filter_bar_widths: Record<string, number>;\n  dashboard__explore_context: Record<string, DashboardContextForExplore>;\n  dashboard__editor_show_only_my_charts: boolean;\n  common__resizable_sidebar_widths: Record<string, number>;\n};\n\n/*\n * This function should not be used directly, as it doesn't provide any type safety or any\n * guarantees that the globally namespaced localstorage key is correct.\n *\n * Instead, use getItem and setItem. Any legacy uses should be updated/migrated in future\n * Superset versions (as they may require breaking changes).\n * */\nexport function dangerouslyGetItemDoNotUse(\n  key: string,\n  defaultValue: any,\n): any {\n  try {\n    const value = localStorage.getItem(key);\n    if (value === null) {\n      return defaultValue;\n    }\n    return JSON.parse(value);\n  } catch {\n    return defaultValue;\n  }\n}\n\n/*\n * This function should not be used directly, as it doesn't provide any type safety or any\n * guarantees that the globally namespaced localstorage key is correct.\n *\n * Instead, use getItem and setItem. Any legacy uses should be updated/migrated in future\n * Superset versions (as they may require breaking changes).\n * */\nexport function dangerouslySetItemDoNotUse(key: string, value: any): void {\n  try {\n    localStorage.setItem(key, JSON.stringify(value));\n  } catch {\n    // Catch in case localStorage is unavailable\n  }\n}\n\nexport function getItem<K extends LocalStorageKeys>(\n  key: K,\n  defaultValue: LocalStorageValues[K],\n): LocalStorageValues[K] {\n  return dangerouslyGetItemDoNotUse(key, defaultValue);\n}\n\nexport function setItem<K extends LocalStorageKeys>(\n  key: K,\n  value: LocalStorageValues[K],\n): void {\n  dangerouslySetItemDoNotUse(key, value);\n}\n"],"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAsBA,WAAYA,gBAoCX;AApCD,WAAYA,gBAAgB;EAC1B;;;;;;;;;EASAA,gBAAA,mBAAe;EACfA,gBAAA,yCAAqC;EACrCA,gBAAA,oCAAgC;EAChCA,gBAAA,wCAAoC;EACpCA,gBAAA,yCAAqC;EACrCA,gBAAA,iDAA6C;EAC7CA,gBAAA,yDAAqD;EACrDA,gBAAA,qDAAiD;EACjDA,gBAAA,uDAAmD;EACnDA,gBAAA,2DAAuD;EACvD;EAEA;;;;;;;EAOAA,gBAAA,mEAA+D;EAC/DA,gBAAA,gEAA4D;EAC5DA,gBAAA,wGAAoG;EACpGA,gBAAA,0EAAsE;EACtEA,gBAAA,0DAAsD;EACtDA,gBAAA,6EAAyE;EACzEA,gBAAA,qEAAiE;AACnE,CAAC,EApCWA,gBAAgB,KAAhBA,gBAAgB;AA0D5B;;;;;;;AAOA,OAAM,SAAUC,0BAA0BA,CACxCC,GAAW,EACXC,YAAiB;EAEjB,IAAI;IACF,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAACJ,GAAG,CAAC;IACvC,IAAIE,KAAK,KAAK,IAAI,EAAE;MAClB,OAAOD,YAAY;;IAErB,OAAOI,IAAI,CAACC,KAAK,CAACJ,KAAK,CAAC;;EACxB,MAAM;IACN,OAAOD,YAAY;;AAEvB;AAEA;;;;;;;AAOA,OAAM,SAAUM,0BAA0BA,CAACP,GAAW,EAAEE,KAAU;EAChE,IAAI;IACFC,YAAY,CAACK,OAAO,CAACR,GAAG,EAAEK,IAAI,CAACI,SAAS,CAACP,KAAK,CAAC,CAAC;;EAChD,MAAM;;IACN;EAAA,CAEJ;AAEA,OAAM,SAAUE,OAAOA,CACrBJ,GAAM,EACNC,YAAmC;EAEnC,OAAOF,0BAA0B,CAACC,GAAG,EAAEC,YAAY,CAAC;AACtD;AAEA,OAAM,SAAUO,OAAOA,CACrBR,GAAM,EACNE,KAA4B;EAE5BK,0BAA0B,CAACP,GAAG,EAAEE,KAAK,CAAC;AACxC,CAAC,mBAAAQ,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAC,OAAA,GAAAC,SAAA,MAAAH,cAAA,WAAAA,cAAA,CAAAI,QAAA,CA3GWhB,gBAoCX,iHAAAY,cAAA,CAAAI,QAAA,CA6Bef,0BAA0B,2HAAAW,cAAA,CAAAI,QAAA,CAsB1BP,0BAA0B,2HAAAG,cAAA,CAAAI,QAAA,CAQ1BV,OAAO,wGAAAM,cAAA,CAAAI,QAAA,CAOPN,OAAO,gIAAAO,WAAA,UAAAJ,oBAAA,mBAAAA,oBAAA,CAAAI,WAAA,GAAAF,SAAA,CAAAE,WAAA,IAAAA,WAAA,CAAAC,MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}