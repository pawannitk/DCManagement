{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport rison from 'rison';\nimport { SupersetClient, t, getClientErrorObject } from '@superset-ui/core';\nimport { addDangerToast } from 'src/components/MessageToasts/actions';\nconst FETCH_SLICES_PAGE_SIZE = 200;\nexport function getDatasourceParameter(datasourceId, datasourceType) {\n  return `${datasourceId}__${datasourceType}`;\n}\nexport const ADD_SLICES = 'ADD_SLICES';\nfunction addSlices(slices) {\n  return { type: ADD_SLICES, payload: { slices } };\n}\nexport const SET_SLICES = 'SET_SLICES';\nfunction setSlices(slices) {\n  return { type: SET_SLICES, payload: { slices } };\n}\nexport const FETCH_ALL_SLICES_STARTED = 'FETCH_ALL_SLICES_STARTED';\nfunction fetchAllSlicesStarted() {\n  return { type: FETCH_ALL_SLICES_STARTED };\n}\nexport const FETCH_ALL_SLICES_FAILED = 'FETCH_ALL_SLICES_FAILED';\nfunction fetchAllSlicesFailed(error) {\n  return { type: FETCH_ALL_SLICES_FAILED, payload: { error } };\n}\nconst parseResult = (result) => result.reduce((slices, slice) => {\n  let form_data = JSON.parse(slice.params);\n  form_data = {\n    ...form_data,\n    // force using datasource stored in relational table prop\n    datasource: getDatasourceParameter(slice.datasource_id, slice.datasource_type) ||\n    form_data.datasource\n  };\n  return {\n    ...slices,\n    [slice.id]: {\n      slice_id: slice.id,\n      slice_url: slice.url,\n      slice_name: slice.slice_name,\n      form_data,\n      datasource_name: slice.datasource_name_text,\n      datasource_url: slice.datasource_url,\n      datasource_id: slice.datasource_id,\n      datasource_type: slice.datasource_type,\n      changed_on: new Date(slice.changed_on_utc).getTime(),\n      description: slice.description,\n      description_markdown: slice.description_markeddown,\n      viz_type: slice.viz_type,\n      modified: slice.changed_on_delta_humanized,\n      changed_on_humanized: slice.changed_on_delta_humanized,\n      thumbnail_url: slice.thumbnail_url,\n      owners: slice.owners,\n      created_by: slice.created_by\n    }\n  };\n}, {});\nexport function updateSlices(slices) {\n  return (dispatch) => {\n    dispatch(setSlices(slices));\n  };\n}\nexport function fetchSlices(userId, filter_value, sortColumn = 'changed_on') {\n  return (dispatch) => {\n    dispatch(fetchAllSlicesStarted());\n    const filters = filter_value ?\n    [{ col: 'slice_name', opr: 'chart_all_text', value: filter_value }] :\n    [];\n    if (userId) {\n      filters.push({ col: 'owners', opr: 'rel_m_m', value: userId });\n    }\n    return SupersetClient.get({\n      endpoint: `/api/v1/chart/?q=${rison.encode({\n        columns: [\n        'changed_on_delta_humanized',\n        'changed_on_utc',\n        'datasource_id',\n        'datasource_type',\n        'datasource_url',\n        'datasource_name_text',\n        'description_markeddown',\n        'description',\n        'id',\n        'params',\n        'slice_name',\n        'thumbnail_url',\n        'url',\n        'viz_type',\n        'owners.id',\n        'created_by.id'],\n\n        filters,\n        page_size: FETCH_SLICES_PAGE_SIZE,\n        order_column: sortColumn === 'changed_on' ?\n        'changed_on_delta_humanized' :\n        sortColumn,\n        order_direction: sortColumn === 'changed_on' ? 'desc' : 'asc'\n      })}`\n    }).\n    then(({ json }) => {\n      const { result } = json;\n      const slices = parseResult(result);\n      return dispatch(addSlices(slices));\n    }).\n    catch((errorResponse) => getClientErrorObject(errorResponse).then(({ error }) => {\n      dispatch(fetchAllSlicesFailed(error || t('Could not fetch all saved charts')));\n      dispatch(addDangerToast(t('Sorry there was an error fetching saved charts: ') + error));\n    }));\n  };\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(FETCH_SLICES_PAGE_SIZE, \"FETCH_SLICES_PAGE_SIZE\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/actions/sliceEntities.ts\");reactHotLoader.register(getDatasourceParameter, \"getDatasourceParameter\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/actions/sliceEntities.ts\");reactHotLoader.register(ADD_SLICES, \"ADD_SLICES\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/actions/sliceEntities.ts\");reactHotLoader.register(addSlices, \"addSlices\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/actions/sliceEntities.ts\");reactHotLoader.register(SET_SLICES, \"SET_SLICES\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/actions/sliceEntities.ts\");reactHotLoader.register(setSlices, \"setSlices\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/actions/sliceEntities.ts\");reactHotLoader.register(FETCH_ALL_SLICES_STARTED, \"FETCH_ALL_SLICES_STARTED\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/actions/sliceEntities.ts\");reactHotLoader.register(fetchAllSlicesStarted, \"fetchAllSlicesStarted\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/actions/sliceEntities.ts\");reactHotLoader.register(FETCH_ALL_SLICES_FAILED, \"FETCH_ALL_SLICES_FAILED\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/actions/sliceEntities.ts\");reactHotLoader.register(fetchAllSlicesFailed, \"fetchAllSlicesFailed\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/actions/sliceEntities.ts\");reactHotLoader.register(parseResult, \"parseResult\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/actions/sliceEntities.ts\");reactHotLoader.register(updateSlices, \"updateSlices\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/actions/sliceEntities.ts\");reactHotLoader.register(fetchSlices, \"fetchSlices\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/actions/sliceEntities.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["rison","SupersetClient","t","getClientErrorObject","addDangerToast","FETCH_SLICES_PAGE_SIZE","getDatasourceParameter","datasourceId","datasourceType","ADD_SLICES","addSlices","slices","type","payload","SET_SLICES","setSlices","FETCH_ALL_SLICES_STARTED","fetchAllSlicesStarted","FETCH_ALL_SLICES_FAILED","fetchAllSlicesFailed","error","parseResult","result","reduce","slice","form_data","JSON","parse","params","datasource","datasource_id","datasource_type","id","slice_id","slice_url","url","slice_name","datasource_name","datasource_name_text","datasource_url","changed_on","Date","changed_on_utc","getTime","description","description_markdown","description_markeddown","viz_type","modified","changed_on_delta_humanized","changed_on_humanized","thumbnail_url","owners","created_by","updateSlices","dispatch","fetchSlices","userId","filter_value","sortColumn","filters","col","opr","value","push","get","endpoint","encode","columns","page_size","order_column","order_direction","then","json","catch","errorResponse","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/actions/sliceEntities.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport rison from 'rison';\nimport {\n  DatasourceType,\n  SupersetClient,\n  t,\n  getClientErrorObject,\n} from '@superset-ui/core';\nimport { addDangerToast } from 'src/components/MessageToasts/actions';\nimport { Dispatch } from 'redux';\nimport { Slice } from '../types';\n\nconst FETCH_SLICES_PAGE_SIZE = 200;\n\nexport function getDatasourceParameter(\n  datasourceId: number,\n  datasourceType: DatasourceType,\n) {\n  return `${datasourceId}__${datasourceType}`;\n}\n\nexport const ADD_SLICES = 'ADD_SLICES';\nfunction addSlices(slices: { [id: number]: Slice }) {\n  return { type: ADD_SLICES, payload: { slices } };\n}\n\nexport const SET_SLICES = 'SET_SLICES';\nfunction setSlices(slices: { [id: number]: Slice }) {\n  return { type: SET_SLICES, payload: { slices } };\n}\n\nexport const FETCH_ALL_SLICES_STARTED = 'FETCH_ALL_SLICES_STARTED';\nfunction fetchAllSlicesStarted() {\n  return { type: FETCH_ALL_SLICES_STARTED };\n}\n\nexport const FETCH_ALL_SLICES_FAILED = 'FETCH_ALL_SLICES_FAILED';\nfunction fetchAllSlicesFailed(error: string) {\n  return { type: FETCH_ALL_SLICES_FAILED, payload: { error } };\n}\n\nconst parseResult = (result: any[]) =>\n  result.reduce((slices, slice: any) => {\n    let form_data = JSON.parse(slice.params);\n    form_data = {\n      ...form_data,\n      // force using datasource stored in relational table prop\n      datasource:\n        getDatasourceParameter(slice.datasource_id, slice.datasource_type) ||\n        form_data.datasource,\n    };\n    return {\n      ...slices,\n      [slice.id]: {\n        slice_id: slice.id,\n        slice_url: slice.url,\n        slice_name: slice.slice_name,\n        form_data,\n        datasource_name: slice.datasource_name_text,\n        datasource_url: slice.datasource_url,\n        datasource_id: slice.datasource_id,\n        datasource_type: slice.datasource_type,\n        changed_on: new Date(slice.changed_on_utc).getTime(),\n        description: slice.description,\n        description_markdown: slice.description_markeddown,\n        viz_type: slice.viz_type,\n        modified: slice.changed_on_delta_humanized,\n        changed_on_humanized: slice.changed_on_delta_humanized,\n        thumbnail_url: slice.thumbnail_url,\n        owners: slice.owners,\n        created_by: slice.created_by,\n      },\n    };\n  }, {});\n\nexport function updateSlices(slices: { [id: number]: Slice }) {\n  return (dispatch: Dispatch) => {\n    dispatch(setSlices(slices));\n  };\n}\n\nexport function fetchSlices(\n  userId?: number,\n  filter_value?: string,\n  sortColumn = 'changed_on',\n) {\n  return (dispatch: Dispatch) => {\n    dispatch(fetchAllSlicesStarted());\n\n    const filters: {\n      col: string;\n      opr: string;\n      value: string | number;\n    }[] = filter_value\n      ? [{ col: 'slice_name', opr: 'chart_all_text', value: filter_value }]\n      : [];\n\n    if (userId) {\n      filters.push({ col: 'owners', opr: 'rel_m_m', value: userId });\n    }\n\n    return SupersetClient.get({\n      endpoint: `/api/v1/chart/?q=${rison.encode({\n        columns: [\n          'changed_on_delta_humanized',\n          'changed_on_utc',\n          'datasource_id',\n          'datasource_type',\n          'datasource_url',\n          'datasource_name_text',\n          'description_markeddown',\n          'description',\n          'id',\n          'params',\n          'slice_name',\n          'thumbnail_url',\n          'url',\n          'viz_type',\n          'owners.id',\n          'created_by.id',\n        ],\n        filters,\n        page_size: FETCH_SLICES_PAGE_SIZE,\n        order_column:\n          sortColumn === 'changed_on'\n            ? 'changed_on_delta_humanized'\n            : sortColumn,\n        order_direction: sortColumn === 'changed_on' ? 'desc' : 'asc',\n      })}`,\n    })\n      .then(({ json }) => {\n        const { result } = json;\n        const slices = parseResult(result);\n        return dispatch(addSlices(slices));\n      })\n      .catch(errorResponse =>\n        getClientErrorObject(errorResponse).then(({ error }) => {\n          dispatch(\n            fetchAllSlicesFailed(\n              error || t('Could not fetch all saved charts'),\n            ),\n          );\n          dispatch(\n            addDangerToast(\n              t('Sorry there was an error fetching saved charts: ') + error,\n            ),\n          );\n        }),\n      );\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}