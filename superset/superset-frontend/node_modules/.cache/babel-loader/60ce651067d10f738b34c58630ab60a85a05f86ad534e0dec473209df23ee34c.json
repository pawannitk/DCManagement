{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useState } from 'react';\nimport FormItem from 'src/components/Form/FormItem';\nimport { Select } from 'src/components';\nimport { isFeatureEnabled, FeatureFlag, isDefined, styled, SupersetClient, t } from '@superset-ui/core';\nimport { Operators, OPERATORS_OPTIONS, HAVING_OPERATORS, MULTI_OPERATORS, CUSTOM_OPERATORS, DISABLE_INPUT_OPERATORS, OPERATOR_ENUM_TO_OPERATOR_TYPE } from 'src/explore/constants';\nimport FilterDefinitionOption from 'src/explore/components/controls/MetricControl/FilterDefinitionOption';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { Input } from 'src/components/Input';\nimport { optionLabel } from 'src/utils/common';\nimport { isTemporalColumn } from '@superset-ui/chart-controls';\nimport useAdvancedDataTypes from './useAdvancedDataTypes';\nimport { useDatePickerInAdhocFilter } from '../utils';\nimport { useDefaultTimeFilter } from '../../DateFilterControl/utils';\nimport { Clauses, ExpressionTypes } from '../types';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst StyledInput = styled(Input)`\n  margin-bottom: ${({ theme }) => theme.gridUnit * 4}px;\n`;\nexport const StyledFormItem = styled(FormItem)`\n  &.ant-row.ant-form-item {\n    margin: 0;\n  }\n`;\nconst SelectWithLabel = styled(Select)`\n  .ant-select-selector::after {\n    content: ${({ labelText }) => labelText || '\\\\A0'};\n    display: inline-block;\n    white-space: nowrap;\n    color: ${({ theme }) => theme.colors.grayscale.light1};\n    width: max-content;\n  }\n`;\nexport const useSimpleTabFilterProps = (props) => {\n  const defaultTimeFilter = useDefaultTimeFilter();\n  const isOperatorRelevant = (operator, subject) => {var _props$datasource$col;\n    const column = (_props$datasource$col = props.datasource.columns) == null ? void 0 : _props$datasource$col.find((col) => col.column_name === subject);\n    const isColumnBoolean = !!column && (column.type === 'BOOL' || column.type === 'BOOLEAN');\n    const isColumnNumber = !!column && (column.type === 'INT' || column.type === 'INTEGER');\n    const isColumnFunction = !!column && !!column.expression;\n    if (operator && operator === Operators.LatestPartition) {\n      const { partitionColumn } = props;\n      return partitionColumn && subject && subject === partitionColumn;\n    }\n    if (operator && operator === Operators.TemporalRange) {\n      // hide the TEMPORAL_RANGE operator\n      return false;\n    }\n    if (operator === Operators.IsTrue || operator === Operators.IsFalse) {\n      return isColumnBoolean || isColumnNumber || isColumnFunction;\n    }\n    if (isColumnBoolean) {\n      return operator === Operators.IsNull || operator === Operators.IsNotNull;\n    }\n    return props.adhocFilter.clause !== Clauses.Having ||\n    HAVING_OPERATORS.indexOf(operator) !== -1;\n  };\n  const onSubjectChange = (id) => {\n    const option = props.options.find((option) => 'column_name' in option && option.column_name === id ||\n    'optionName' in option && option.optionName === id);\n    let subject = '';\n    let clause;\n    // infer the new clause based on what subject was selected.\n    if (option && 'column_name' in option) {\n      subject = option.column_name;\n      clause = Clauses.Where;\n    } else\n    if (option && 'saved_metric_name' in option) {\n      subject = option.saved_metric_name;\n      clause = Clauses.Having;\n    } else\n    if (option != null && option.label) {\n      subject = option.label;\n      clause = Clauses.Having;\n    }\n    let { operator, operatorId, comparator } = props.adhocFilter;\n    operator =\n    operator && operatorId && isOperatorRelevant(operatorId, subject) ?\n    OPERATOR_ENUM_TO_OPERATOR_TYPE[operatorId].operation :\n    null;\n    if (!isDefined(operator)) {\n      // if operator is `null`, use the `IN` and reset the comparator.\n      operator = Operators.In;\n      operatorId = Operators.In;\n      comparator = undefined;\n    }\n    if (isTemporalColumn(id, props.datasource)) {\n      subject = id;\n      operator = Operators.TemporalRange;\n      operatorId = Operators.TemporalRange;\n      comparator = defaultTimeFilter;\n    }\n    props.onChange(props.adhocFilter.duplicateWith({\n      subject,\n      clause,\n      operator,\n      expressionType: ExpressionTypes.Simple,\n      operatorId,\n      comparator\n    }));\n  };\n  const onOperatorChange = (operatorId) => {\n    const currentComparator = props.adhocFilter.comparator;\n    let newComparator;\n    // convert between list of comparators and individual comparators\n    // (e.g. `in ('North America', 'Africa')` to `== 'North America'`)\n    if (MULTI_OPERATORS.has(operatorId)) {\n      newComparator = Array.isArray(currentComparator) ?\n      currentComparator :\n      [currentComparator].filter((element) => element);\n    } else\n    {\n      newComparator = Array.isArray(currentComparator) ?\n      currentComparator[0] :\n      currentComparator;\n    }\n    if (operatorId === Operators.IsTrue || operatorId === Operators.IsFalse) {\n      newComparator = Operators.IsTrue === operatorId;\n    }\n    if (operatorId && CUSTOM_OPERATORS.has(operatorId)) {\n      props.onChange(props.adhocFilter.duplicateWith({\n        subject: props.adhocFilter.subject,\n        clause: Clauses.Where,\n        operatorId,\n        operator: OPERATOR_ENUM_TO_OPERATOR_TYPE[operatorId].operation,\n        expressionType: ExpressionTypes.Sql,\n        datasource: props.datasource\n      }));\n    } else\n    {\n      props.onChange(props.adhocFilter.duplicateWith({\n        operatorId,\n        operator: OPERATOR_ENUM_TO_OPERATOR_TYPE[operatorId].operation,\n        comparator: newComparator,\n        expressionType: ExpressionTypes.Simple\n      }));\n    }\n  };\n  const onComparatorChange = (comparator) => {\n    props.onChange(props.adhocFilter.duplicateWith({\n      comparator,\n      expressionType: ExpressionTypes.Simple\n    }));\n  };\n  const clearOperator = () => {\n    props.onChange(props.adhocFilter.duplicateWith({\n      operatorId: undefined,\n      operator: undefined\n    }));\n  };\n  const onDatePickerChange = (columnName, timeRange) => {\n    props.onChange(props.adhocFilter.duplicateWith({\n      subject: columnName,\n      operator: Operators.TemporalRange,\n      comparator: timeRange,\n      expressionType: ExpressionTypes.Simple\n    }));\n  };\n  return {\n    onSubjectChange,\n    onOperatorChange,\n    onComparatorChange,\n    isOperatorRelevant,\n    clearOperator,\n    onDatePickerChange\n  };\n};__signature__(useSimpleTabFilterProps, \"useDefaultTimeFilter{defaultTimeFilter}\", () => [useDefaultTimeFilter]);\nconst AdhocFilterEditPopoverSimpleTabContent = (props) => {var _props$operators, _props$operators2;\n  const { onSubjectChange, onOperatorChange, isOperatorRelevant, onComparatorChange, onDatePickerChange } = useSimpleTabFilterProps(props);\n  const [suggestions, setSuggestions] = useState([]);\n  const [comparator, setComparator] = useState(props.adhocFilter.comparator);\n  const [loadingComparatorSuggestions, setLoadingComparatorSuggestions] = useState(false);\n  const { advancedDataTypesState, subjectAdvancedDataType, fetchAdvancedDataTypeValueCallback, fetchSubjectAdvancedDataType } = useAdvancedDataTypes(props.validHandler);\n  // TODO: This does not need to exist, just use the advancedTypeOperatorList list\n  const isOperatorRelevantWrapper = (operator, subject) => subjectAdvancedDataType ?\n  isOperatorRelevant(operator, subject) &&\n  advancedDataTypesState.advancedDataTypeOperatorList.includes(operator) :\n  isOperatorRelevant(operator, subject);\n  const onInputComparatorChange = (event) => {\n    const { value } = event.target;\n    setComparator(value);\n    onComparatorChange(value);\n  };\n  const renderSubjectOptionLabel = (option) => ___EmotionJSX(FilterDefinitionOption, { option: option });\n  const getOptionsRemaining = () => {var _ref;\n    // if select is multi/value is array, we show the options not selected\n    const valuesFromSuggestionsLength = Array.isArray(comparator) ?\n    comparator.filter((v) => suggestions.includes(v)).length :\n    0;\n    return (_ref = (suggestions == null ? void 0 : suggestions.length) - valuesFromSuggestionsLength) != null ? _ref : 0;\n  };\n  const createSuggestionsPlaceholder = () => {\n    const optionsRemaining = getOptionsRemaining();\n    const placeholder = t('%s option(s)', optionsRemaining);\n    return optionsRemaining ? placeholder : '';\n  };\n  const handleSubjectChange = (subject) => {\n    setComparator(undefined);\n    onSubjectChange(subject);\n  };\n  let columns = props.options;\n  const { subject, operator, operatorId } = props.adhocFilter;\n  const subjectSelectProps = {\n    ariaLabel: t('Select subject'),\n    value: subject != null ? subject : undefined,\n    onChange: handleSubjectChange,\n    notFoundContent: t('No such column found. To filter on a metric, try the Custom SQL tab.'),\n    autoFocus: !subject,\n    placeholder: ''\n  };\n  subjectSelectProps.placeholder =\n  props.adhocFilter.clause === Clauses.Where ?\n  t('%s column(s)', columns.length) :\n  t('To filter on a metric, use Custom SQL tab.');\n  columns = props.options.filter((option) => 'column_name' in option && option.column_name);\n  const operatorSelectProps = {\n    placeholder: t('%s operator(s)', ((_props$operators = props.operators) != null ? _props$operators : OPERATORS_OPTIONS).filter((op) => isOperatorRelevantWrapper(op, subject)).length),\n    value: operatorId,\n    onChange: onOperatorChange,\n    autoFocus: !!subjectSelectProps.value && !operator,\n    ariaLabel: t('Select operator')\n  };\n  const shouldFocusComparator = !!subjectSelectProps.value && !!operatorSelectProps.value;\n  const comparatorSelectProps = {\n    allowClear: true,\n    allowNewOptions: true,\n    ariaLabel: t('Comparator option'),\n    mode: MULTI_OPERATORS.has(operatorId) ?\n    'multiple' :\n    'single',\n    loading: loadingComparatorSuggestions,\n    value: comparator,\n    onChange: onComparatorChange,\n    notFoundContent: t('Type a value here'),\n    disabled: DISABLE_INPUT_OPERATORS.includes(operatorId),\n    placeholder: createSuggestionsPlaceholder(),\n    autoFocus: shouldFocusComparator\n  };\n  const labelText = comparator && comparator.length > 0 && createSuggestionsPlaceholder();\n  const datePicker = useDatePickerInAdhocFilter({\n    columnName: props.adhocFilter.subject,\n    timeRange: props.adhocFilter.operator === Operators.TemporalRange ?\n    props.adhocFilter.comparator :\n    undefined,\n    datasource: props.datasource,\n    onChange: onDatePickerChange\n  });\n  useEffect(() => {\n    const refreshComparatorSuggestions = () => {\n      const { datasource } = props;\n      const col = props.adhocFilter.subject;\n      const having = props.adhocFilter.clause === Clauses.Having;\n      if (col && datasource && datasource.filter_select && !having) {\n        const controller = new AbortController();\n        const { signal } = controller;\n        if (loadingComparatorSuggestions) {\n          controller.abort();\n        }\n        setLoadingComparatorSuggestions(true);\n        SupersetClient.get({\n          signal,\n          endpoint: `/api/v1/datasource/${datasource.type}/${datasource.id}/column/${col}/values/`\n        }).\n        then(({ json }) => {\n          setSuggestions(json.result.map((suggestion) => ({\n            value: suggestion,\n            label: optionLabel(suggestion)\n          })));\n          setLoadingComparatorSuggestions(false);\n        }).\n        catch(() => {\n          setSuggestions([]);\n          setLoadingComparatorSuggestions(false);\n        });\n      }\n    };\n    if (!datePicker) {\n      refreshComparatorSuggestions();\n    }\n  }, [props.adhocFilter.subject]);\n  useEffect(() => {\n    if (isFeatureEnabled(FeatureFlag.EnableAdvancedDataTypes)) {\n      fetchSubjectAdvancedDataType(props);\n    }\n  }, [props.adhocFilter.subject]);\n  useEffect(() => {\n    if (isFeatureEnabled(FeatureFlag.EnableAdvancedDataTypes)) {\n      fetchAdvancedDataTypeValueCallback(comparator === undefined ? '' : comparator, advancedDataTypesState, subjectAdvancedDataType);\n    }\n  }, [comparator, subjectAdvancedDataType, fetchAdvancedDataTypeValueCallback]);\n  useEffect(() => {\n    if (isFeatureEnabled(FeatureFlag.EnableAdvancedDataTypes)) {\n      setComparator(props.adhocFilter.comparator);\n    }\n  }, [props.adhocFilter.comparator]);\n  // another name for columns, just for following previous naming.\n  const subjectComponent = ___EmotionJSX(Select, _extends({ css: (theme) => ({\n      marginTop: theme.gridUnit * 4,\n      marginBottom: theme.gridUnit * 4\n    }), \"data-test\": \"select-element\", options: columns.map((column) => ({\n      value: 'column_name' in column && column.column_name ||\n      'optionName' in column && column.optionName ||\n      '',\n      label: 'saved_metric_name' in column && column.saved_metric_name ||\n      'column_name' in column && column.column_name ||\n      'label' in column && column.label,\n      key: 'id' in column && column.id ||\n      'optionName' in column && column.optionName ||\n      undefined,\n      customLabel: renderSubjectOptionLabel(column)\n    })) }, subjectSelectProps));\n  const operatorsAndOperandComponent = ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(Select, _extends({ css: (theme) => ({ marginBottom: theme.gridUnit * 4 }), options: ((_props$operators2 = props.operators) != null ? _props$operators2 : OPERATORS_OPTIONS).\n    filter((op) => isOperatorRelevantWrapper(op, subject)).\n    map((option, index) => ({\n      value: option,\n      label: OPERATOR_ENUM_TO_OPERATOR_TYPE[option].display,\n      key: option,\n      order: index\n    })) }, operatorSelectProps)),\n  MULTI_OPERATORS.has(operatorId) || suggestions.length > 0 ? ___EmotionJSX(Tooltip, { title: advancedDataTypesState.errorMessage ||\n    advancedDataTypesState.parsedAdvancedDataType },\n  ___EmotionJSX(SelectWithLabel, _extends({ labelText: labelText, options: suggestions }, comparatorSelectProps))\n  ) : ___EmotionJSX(Tooltip, { title: advancedDataTypesState.errorMessage ||\n    advancedDataTypesState.parsedAdvancedDataType },\n  ___EmotionJSX(StyledInput, { \"data-test\": \"adhoc-filter-simple-value\", name: \"filter-value\", ref: (ref) => {\n      if (ref && shouldFocusComparator) {\n        ref.focus();\n      }\n    }, onChange: onInputComparatorChange, value: comparator, placeholder: t('Filter value (case sensitive)'), disabled: DISABLE_INPUT_OPERATORS.includes(operatorId) })\n  )\n  );\n  return ___EmotionJSX(React.Fragment, null,\n  subjectComponent,\n  datePicker != null ? datePicker : operatorsAndOperandComponent\n  );\n};__signature__(AdhocFilterEditPopoverSimpleTabContent, \"useSimpleTabFilterProps{{ onSubjectChange, onOperatorChange, isOperatorRelevant, onComparatorChange, onDatePickerChange, }}\\nuseState{[suggestions, setSuggestions]([])}\\nuseState{[comparator, setComparator](props.adhocFilter.comparator)}\\nuseState{[loadingComparatorSuggestions, setLoadingComparatorSuggestions](false)}\\nuseAdvancedDataTypes{{ advancedDataTypesState, subjectAdvancedDataType, fetchAdvancedDataTypeValueCallback, fetchSubjectAdvancedDataType, }}\\nuseDatePickerInAdhocFilter{datePicker}\\nuseEffect{}\\nuseEffect{}\\nuseEffect{}\\nuseEffect{}\", () => [useSimpleTabFilterProps, useAdvancedDataTypes, useDatePickerInAdhocFilter]);const _default =\nAdhocFilterEditPopoverSimpleTabContent;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(StyledInput, \"StyledInput\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilterEditPopoverSimpleTabContent/index.tsx\");reactHotLoader.register(StyledFormItem, \"StyledFormItem\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilterEditPopoverSimpleTabContent/index.tsx\");reactHotLoader.register(SelectWithLabel, \"SelectWithLabel\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilterEditPopoverSimpleTabContent/index.tsx\");reactHotLoader.register(useSimpleTabFilterProps, \"useSimpleTabFilterProps\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilterEditPopoverSimpleTabContent/index.tsx\");reactHotLoader.register(AdhocFilterEditPopoverSimpleTabContent, \"AdhocFilterEditPopoverSimpleTabContent\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilterEditPopoverSimpleTabContent/index.tsx\");reactHotLoader.register(_default, \"default\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilterEditPopoverSimpleTabContent/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["React","useEffect","useState","FormItem","Select","isFeatureEnabled","FeatureFlag","isDefined","styled","SupersetClient","t","Operators","OPERATORS_OPTIONS","HAVING_OPERATORS","MULTI_OPERATORS","CUSTOM_OPERATORS","DISABLE_INPUT_OPERATORS","OPERATOR_ENUM_TO_OPERATOR_TYPE","FilterDefinitionOption","Tooltip","Input","optionLabel","isTemporalColumn","useAdvancedDataTypes","useDatePickerInAdhocFilter","useDefaultTimeFilter","Clauses","ExpressionTypes","jsx","___EmotionJSX","StyledInput","theme","gridUnit","StyledFormItem","SelectWithLabel","labelText","colors","grayscale","light1","useSimpleTabFilterProps","props","defaultTimeFilter","isOperatorRelevant","operator","subject","_props$datasource$col","column","datasource","columns","find","col","column_name","isColumnBoolean","type","isColumnNumber","isColumnFunction","expression","LatestPartition","partitionColumn","TemporalRange","IsTrue","IsFalse","IsNull","IsNotNull","adhocFilter","clause","Having","indexOf","onSubjectChange","id","option","options","optionName","Where","saved_metric_name","label","operatorId","comparator","operation","In","undefined","onChange","duplicateWith","expressionType","Simple","onOperatorChange","currentComparator","newComparator","has","Array","isArray","filter","element","Sql","onComparatorChange","clearOperator","onDatePickerChange","columnName","timeRange","__signature__","AdhocFilterEditPopoverSimpleTabContent","_props$operators","_props$operators2","suggestions","setSuggestions","setComparator","loadingComparatorSuggestions","setLoadingComparatorSuggestions","advancedDataTypesState","subjectAdvancedDataType","fetchAdvancedDataTypeValueCallback","fetchSubjectAdvancedDataType","validHandler","isOperatorRelevantWrapper","advancedDataTypeOperatorList","includes","onInputComparatorChange","event","value","target","renderSubjectOptionLabel","getOptionsRemaining","_ref","valuesFromSuggestionsLength","v","length","createSuggestionsPlaceholder","optionsRemaining","placeholder","handleSubjectChange","subjectSelectProps","ariaLabel","notFoundContent","autoFocus","operatorSelectProps","operators","op","shouldFocusComparator","comparatorSelectProps","allowClear","allowNewOptions","mode","loading","disabled","datePicker","refreshComparatorSuggestions","having","filter_select","controller","AbortController","signal","abort","get","endpoint","then","json","result","map","suggestion","catch","EnableAdvancedDataTypes","subjectComponent","_extends","css","marginTop","marginBottom","key","customLabel","operatorsAndOperandComponent","Fragment","index","display","order","title","errorMessage","parsedAdvancedDataType","name","ref","focus","_default","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilterEditPopoverSimpleTabContent/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useState } from 'react';\nimport FormItem from 'src/components/Form/FormItem';\nimport { Select } from 'src/components';\nimport {\n  isFeatureEnabled,\n  FeatureFlag,\n  isDefined,\n  styled,\n  SupersetClient,\n  SupersetTheme,\n  t,\n} from '@superset-ui/core';\nimport {\n  Operators,\n  OPERATORS_OPTIONS,\n  HAVING_OPERATORS,\n  MULTI_OPERATORS,\n  CUSTOM_OPERATORS,\n  DISABLE_INPUT_OPERATORS,\n  AGGREGATES,\n  OPERATOR_ENUM_TO_OPERATOR_TYPE,\n} from 'src/explore/constants';\nimport FilterDefinitionOption from 'src/explore/components/controls/MetricControl/FilterDefinitionOption';\nimport AdhocFilter from 'src/explore/components/controls/FilterControl/AdhocFilter';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { Input } from 'src/components/Input';\nimport { optionLabel } from 'src/utils/common';\nimport {\n  ColumnMeta,\n  Dataset,\n  isTemporalColumn,\n} from '@superset-ui/chart-controls';\nimport useAdvancedDataTypes from './useAdvancedDataTypes';\nimport { useDatePickerInAdhocFilter } from '../utils';\nimport { useDefaultTimeFilter } from '../../DateFilterControl/utils';\nimport { Clauses, ExpressionTypes } from '../types';\n\nconst StyledInput = styled(Input)`\n  margin-bottom: ${({ theme }) => theme.gridUnit * 4}px;\n`;\n\nexport const StyledFormItem = styled(FormItem)`\n  &.ant-row.ant-form-item {\n    margin: 0;\n  }\n`;\n\nconst SelectWithLabel = styled(Select)<{ labelText: string }>`\n  .ant-select-selector::after {\n    content: ${({ labelText }) => labelText || '\\\\A0'};\n    display: inline-block;\n    white-space: nowrap;\n    color: ${({ theme }) => theme.colors.grayscale.light1};\n    width: max-content;\n  }\n`;\n\nexport interface SimpleExpressionType {\n  expressionType: keyof typeof ExpressionTypes;\n  column: ColumnMeta;\n  aggregate: keyof typeof AGGREGATES;\n  label: string;\n}\nexport interface SQLExpressionType {\n  expressionType: keyof typeof ExpressionTypes;\n  sqlExpression: string;\n  label: string;\n}\n\nexport interface MetricColumnType {\n  saved_metric_name: string;\n}\n\nexport type ColumnType =\n  | ColumnMeta\n  | SimpleExpressionType\n  | SQLExpressionType\n  | MetricColumnType;\n\nexport interface Props {\n  adhocFilter: AdhocFilter;\n  onChange: (filter: AdhocFilter) => void;\n  options: ColumnType[];\n  datasource: Dataset;\n  partitionColumn: string;\n  operators?: Operators[];\n  validHandler: (isValid: boolean) => void;\n}\n\nexport interface AdvancedDataTypesState {\n  parsedAdvancedDataType: string;\n  advancedDataTypeOperatorList: string[];\n  errorMessage: string;\n}\n\nexport const useSimpleTabFilterProps = (props: Props) => {\n  const defaultTimeFilter = useDefaultTimeFilter();\n\n  const isOperatorRelevant = (operator: Operators, subject: string) => {\n    const column = props.datasource.columns?.find(\n      col => col.column_name === subject,\n    );\n    const isColumnBoolean =\n      !!column && (column.type === 'BOOL' || column.type === 'BOOLEAN');\n    const isColumnNumber =\n      !!column && (column.type === 'INT' || column.type === 'INTEGER');\n    const isColumnFunction = !!column && !!column.expression;\n\n    if (operator && operator === Operators.LatestPartition) {\n      const { partitionColumn } = props;\n      return partitionColumn && subject && subject === partitionColumn;\n    }\n    if (operator && operator === Operators.TemporalRange) {\n      // hide the TEMPORAL_RANGE operator\n      return false;\n    }\n    if (operator === Operators.IsTrue || operator === Operators.IsFalse) {\n      return isColumnBoolean || isColumnNumber || isColumnFunction;\n    }\n    if (isColumnBoolean) {\n      return operator === Operators.IsNull || operator === Operators.IsNotNull;\n    }\n    return (\n      props.adhocFilter.clause !== Clauses.Having ||\n      HAVING_OPERATORS.indexOf(operator) !== -1\n    );\n  };\n  const onSubjectChange = (id: string) => {\n    const option = props.options.find(\n      option =>\n        ('column_name' in option && option.column_name === id) ||\n        ('optionName' in option && option.optionName === id),\n    );\n    let subject = '';\n    let clause;\n    // infer the new clause based on what subject was selected.\n    if (option && 'column_name' in option) {\n      subject = option.column_name;\n      clause = Clauses.Where;\n    } else if (option && 'saved_metric_name' in option) {\n      subject = option.saved_metric_name;\n      clause = Clauses.Having;\n    } else if (option?.label) {\n      subject = option.label;\n      clause = Clauses.Having;\n    }\n    let { operator, operatorId, comparator } = props.adhocFilter;\n    operator =\n      operator && operatorId && isOperatorRelevant(operatorId, subject)\n        ? OPERATOR_ENUM_TO_OPERATOR_TYPE[operatorId].operation\n        : null;\n    if (!isDefined(operator)) {\n      // if operator is `null`, use the `IN` and reset the comparator.\n      operator = Operators.In;\n      operatorId = Operators.In;\n      comparator = undefined;\n    }\n\n    if (isTemporalColumn(id, props.datasource)) {\n      subject = id;\n      operator = Operators.TemporalRange;\n      operatorId = Operators.TemporalRange;\n      comparator = defaultTimeFilter;\n    }\n\n    props.onChange(\n      props.adhocFilter.duplicateWith({\n        subject,\n        clause,\n        operator,\n        expressionType: ExpressionTypes.Simple,\n        operatorId,\n        comparator,\n      }),\n    );\n  };\n  const onOperatorChange = (operatorId: Operators) => {\n    const currentComparator = props.adhocFilter.comparator;\n    let newComparator;\n    // convert between list of comparators and individual comparators\n    // (e.g. `in ('North America', 'Africa')` to `== 'North America'`)\n    if (MULTI_OPERATORS.has(operatorId)) {\n      newComparator = Array.isArray(currentComparator)\n        ? currentComparator\n        : [currentComparator].filter(element => element);\n    } else {\n      newComparator = Array.isArray(currentComparator)\n        ? currentComparator[0]\n        : currentComparator;\n    }\n    if (operatorId === Operators.IsTrue || operatorId === Operators.IsFalse) {\n      newComparator = Operators.IsTrue === operatorId;\n    }\n    if (operatorId && CUSTOM_OPERATORS.has(operatorId)) {\n      props.onChange(\n        props.adhocFilter.duplicateWith({\n          subject: props.adhocFilter.subject,\n          clause: Clauses.Where,\n          operatorId,\n          operator: OPERATOR_ENUM_TO_OPERATOR_TYPE[operatorId].operation,\n          expressionType: ExpressionTypes.Sql,\n          datasource: props.datasource,\n        }),\n      );\n    } else {\n      props.onChange(\n        props.adhocFilter.duplicateWith({\n          operatorId,\n          operator: OPERATOR_ENUM_TO_OPERATOR_TYPE[operatorId].operation,\n          comparator: newComparator,\n          expressionType: ExpressionTypes.Simple,\n        }),\n      );\n    }\n  };\n  const onComparatorChange = (comparator: string) => {\n    props.onChange(\n      props.adhocFilter.duplicateWith({\n        comparator,\n        expressionType: ExpressionTypes.Simple,\n      }),\n    );\n  };\n  const clearOperator = (): void => {\n    props.onChange(\n      props.adhocFilter.duplicateWith({\n        operatorId: undefined,\n        operator: undefined,\n      }),\n    );\n  };\n  const onDatePickerChange = (columnName: string, timeRange: string) => {\n    props.onChange(\n      props.adhocFilter.duplicateWith({\n        subject: columnName,\n        operator: Operators.TemporalRange,\n        comparator: timeRange,\n        expressionType: ExpressionTypes.Simple,\n      }),\n    );\n  };\n  return {\n    onSubjectChange,\n    onOperatorChange,\n    onComparatorChange,\n    isOperatorRelevant,\n    clearOperator,\n    onDatePickerChange,\n  };\n};\n\nconst AdhocFilterEditPopoverSimpleTabContent: React.FC<Props> = props => {\n  const {\n    onSubjectChange,\n    onOperatorChange,\n    isOperatorRelevant,\n    onComparatorChange,\n    onDatePickerChange,\n  } = useSimpleTabFilterProps(props);\n  const [suggestions, setSuggestions] = useState<\n    Record<'label' | 'value', any>[]\n  >([]);\n  const [comparator, setComparator] = useState(props.adhocFilter.comparator);\n  const [loadingComparatorSuggestions, setLoadingComparatorSuggestions] =\n    useState(false);\n\n  const {\n    advancedDataTypesState,\n    subjectAdvancedDataType,\n    fetchAdvancedDataTypeValueCallback,\n    fetchSubjectAdvancedDataType,\n  } = useAdvancedDataTypes(props.validHandler);\n  // TODO: This does not need to exist, just use the advancedTypeOperatorList list\n  const isOperatorRelevantWrapper = (operator: Operators, subject: string) =>\n    subjectAdvancedDataType\n      ? isOperatorRelevant(operator, subject) &&\n        advancedDataTypesState.advancedDataTypeOperatorList.includes(operator)\n      : isOperatorRelevant(operator, subject);\n  const onInputComparatorChange = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    const { value } = event.target;\n    setComparator(value);\n    onComparatorChange(value);\n  };\n\n  const renderSubjectOptionLabel = (option: ColumnType) => (\n    <FilterDefinitionOption option={option} />\n  );\n\n  const getOptionsRemaining = () => {\n    // if select is multi/value is array, we show the options not selected\n    const valuesFromSuggestionsLength = Array.isArray(comparator)\n      ? comparator.filter(v => suggestions.includes(v)).length\n      : 0;\n    return suggestions?.length - valuesFromSuggestionsLength ?? 0;\n  };\n  const createSuggestionsPlaceholder = () => {\n    const optionsRemaining = getOptionsRemaining();\n    const placeholder = t('%s option(s)', optionsRemaining);\n    return optionsRemaining ? placeholder : '';\n  };\n\n  const handleSubjectChange = (subject: string) => {\n    setComparator(undefined);\n    onSubjectChange(subject);\n  };\n\n  let columns = props.options;\n  const { subject, operator, operatorId } = props.adhocFilter;\n\n  const subjectSelectProps = {\n    ariaLabel: t('Select subject'),\n    value: subject ?? undefined,\n    onChange: handleSubjectChange,\n    notFoundContent: t(\n      'No such column found. To filter on a metric, try the Custom SQL tab.',\n    ),\n    autoFocus: !subject,\n    placeholder: '',\n  };\n\n  subjectSelectProps.placeholder =\n    props.adhocFilter.clause === Clauses.Where\n      ? t('%s column(s)', columns.length)\n      : t('To filter on a metric, use Custom SQL tab.');\n  columns = props.options.filter(\n    option => 'column_name' in option && option.column_name,\n  );\n\n  const operatorSelectProps = {\n    placeholder: t(\n      '%s operator(s)',\n      (props.operators ?? OPERATORS_OPTIONS).filter(op =>\n        isOperatorRelevantWrapper(op, subject),\n      ).length,\n    ),\n    value: operatorId,\n    onChange: onOperatorChange,\n    autoFocus: !!subjectSelectProps.value && !operator,\n    ariaLabel: t('Select operator'),\n  };\n\n  const shouldFocusComparator =\n    !!subjectSelectProps.value && !!operatorSelectProps.value;\n\n  const comparatorSelectProps = {\n    allowClear: true,\n    allowNewOptions: true,\n    ariaLabel: t('Comparator option'),\n    mode: MULTI_OPERATORS.has(operatorId)\n      ? ('multiple' as const)\n      : ('single' as const),\n    loading: loadingComparatorSuggestions,\n    value: comparator,\n    onChange: onComparatorChange,\n    notFoundContent: t('Type a value here'),\n    disabled: DISABLE_INPUT_OPERATORS.includes(operatorId),\n    placeholder: createSuggestionsPlaceholder(),\n    autoFocus: shouldFocusComparator,\n  };\n\n  const labelText =\n    comparator && comparator.length > 0 && createSuggestionsPlaceholder();\n\n  const datePicker = useDatePickerInAdhocFilter({\n    columnName: props.adhocFilter.subject,\n    timeRange:\n      props.adhocFilter.operator === Operators.TemporalRange\n        ? props.adhocFilter.comparator\n        : undefined,\n    datasource: props.datasource,\n    onChange: onDatePickerChange,\n  });\n\n  useEffect(() => {\n    const refreshComparatorSuggestions = () => {\n      const { datasource } = props;\n      const col = props.adhocFilter.subject;\n      const having = props.adhocFilter.clause === Clauses.Having;\n\n      if (col && datasource && datasource.filter_select && !having) {\n        const controller = new AbortController();\n        const { signal } = controller;\n        if (loadingComparatorSuggestions) {\n          controller.abort();\n        }\n        setLoadingComparatorSuggestions(true);\n        SupersetClient.get({\n          signal,\n          endpoint: `/api/v1/datasource/${datasource.type}/${datasource.id}/column/${col}/values/`,\n        })\n          .then(({ json }) => {\n            setSuggestions(\n              json.result.map(\n                (suggestion: null | number | boolean | string) => ({\n                  value: suggestion,\n                  label: optionLabel(suggestion),\n                }),\n              ),\n            );\n            setLoadingComparatorSuggestions(false);\n          })\n          .catch(() => {\n            setSuggestions([]);\n            setLoadingComparatorSuggestions(false);\n          });\n      }\n    };\n    if (!datePicker) {\n      refreshComparatorSuggestions();\n    }\n  }, [props.adhocFilter.subject]);\n\n  useEffect(() => {\n    if (isFeatureEnabled(FeatureFlag.EnableAdvancedDataTypes)) {\n      fetchSubjectAdvancedDataType(props);\n    }\n  }, [props.adhocFilter.subject]);\n\n  useEffect(() => {\n    if (isFeatureEnabled(FeatureFlag.EnableAdvancedDataTypes)) {\n      fetchAdvancedDataTypeValueCallback(\n        comparator === undefined ? '' : comparator,\n        advancedDataTypesState,\n        subjectAdvancedDataType,\n      );\n    }\n  }, [comparator, subjectAdvancedDataType, fetchAdvancedDataTypeValueCallback]);\n\n  useEffect(() => {\n    if (isFeatureEnabled(FeatureFlag.EnableAdvancedDataTypes)) {\n      setComparator(props.adhocFilter.comparator);\n    }\n  }, [props.adhocFilter.comparator]);\n\n  // another name for columns, just for following previous naming.\n  const subjectComponent = (\n    <Select\n      css={(theme: SupersetTheme) => ({\n        marginTop: theme.gridUnit * 4,\n        marginBottom: theme.gridUnit * 4,\n      })}\n      data-test=\"select-element\"\n      options={columns.map(column => ({\n        value:\n          ('column_name' in column && column.column_name) ||\n          ('optionName' in column && column.optionName) ||\n          '',\n        label:\n          ('saved_metric_name' in column && column.saved_metric_name) ||\n          ('column_name' in column && column.column_name) ||\n          ('label' in column && column.label),\n        key:\n          ('id' in column && column.id) ||\n          ('optionName' in column && column.optionName) ||\n          undefined,\n        customLabel: renderSubjectOptionLabel(column),\n      }))}\n      {...subjectSelectProps}\n    />\n  );\n\n  const operatorsAndOperandComponent = (\n    <>\n      <Select\n        css={(theme: SupersetTheme) => ({ marginBottom: theme.gridUnit * 4 })}\n        options={(props.operators ?? OPERATORS_OPTIONS)\n          .filter(op => isOperatorRelevantWrapper(op, subject))\n          .map((option, index) => ({\n            value: option,\n            label: OPERATOR_ENUM_TO_OPERATOR_TYPE[option].display,\n            key: option,\n            order: index,\n          }))}\n        {...operatorSelectProps}\n      />\n      {MULTI_OPERATORS.has(operatorId) || suggestions.length > 0 ? (\n        <Tooltip\n          title={\n            advancedDataTypesState.errorMessage ||\n            advancedDataTypesState.parsedAdvancedDataType\n          }\n        >\n          <SelectWithLabel\n            labelText={labelText}\n            options={suggestions}\n            {...comparatorSelectProps}\n          />\n        </Tooltip>\n      ) : (\n        <Tooltip\n          title={\n            advancedDataTypesState.errorMessage ||\n            advancedDataTypesState.parsedAdvancedDataType\n          }\n        >\n          <StyledInput\n            data-test=\"adhoc-filter-simple-value\"\n            name=\"filter-value\"\n            ref={ref => {\n              if (ref && shouldFocusComparator) {\n                ref.focus();\n              }\n            }}\n            onChange={onInputComparatorChange}\n            value={comparator}\n            placeholder={t('Filter value (case sensitive)')}\n            disabled={DISABLE_INPUT_OPERATORS.includes(operatorId)}\n          />\n        </Tooltip>\n      )}\n    </>\n  );\n  return (\n    <>\n      {subjectComponent}\n      {datePicker ?? operatorsAndOperandComponent}\n    </>\n  );\n};\n\nexport default AdhocFilterEditPopoverSimpleTabContent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}