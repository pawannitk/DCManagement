{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with work for additional information\n * regarding copyright ownership.  The ASF licenses file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { logging, SupersetClient, t } from '@superset-ui/core';\nimport { isColumnMeta, isTemporalColumn } from '@superset-ui/chart-controls';\nimport Modal from 'src/components/Modal';\nimport { OPERATOR_ENUM_TO_OPERATOR_TYPE, Operators } from 'src/explore/constants';\nimport AdhocFilterPopoverTrigger from 'src/explore/components/controls/FilterControl/AdhocFilterPopoverTrigger';\nimport DndSelectLabel from 'src/explore/components/controls/DndColumnSelectControl/DndSelectLabel';\nimport AdhocFilter from 'src/explore/components/controls/FilterControl/AdhocFilter';\nimport AdhocMetric from 'src/explore/components/controls/MetricControl/AdhocMetric';\nimport { isSavedMetric } from 'src/explore/components/DatasourcePanel/types';\nimport { DndItemType } from 'src/explore/components/DndItemType';\nimport { toQueryString } from 'src/utils/urlUtils';\nimport DndAdhocFilterOption from './DndAdhocFilterOption';\nimport { useDefaultTimeFilter } from '../DateFilterControl/utils';\nimport { Clauses, ExpressionTypes } from '../FilterControl/types';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst { warning } = Modal;\nconst EMPTY_OBJECT = {};\nconst DND_ACCEPTED_TYPES = [\nDndItemType.Column,\nDndItemType.Metric,\nDndItemType.MetricOption,\nDndItemType.AdhocMetricOption];\n\nconst isDictionaryForAdhocFilter = (value) => !(value instanceof AdhocFilter) && (value == null ? void 0 : value.expressionType);\nconst DndFilterSelect = (props) => {var _props$value;\n  const { datasource, onChange = () => {}, name: controlName, canDelete } = props;\n  const extra = useMemo(() => {\n    let extra = {};\n    if (datasource != null && datasource.extra) {\n      try {\n        extra = JSON.parse(datasource.extra);\n      }\n      catch {} // eslint-disable-line no-empty\n    }\n    return extra;\n  }, [datasource == null ? void 0 : datasource.extra]);\n  const propsValues = Array.from((_props$value = props.value) != null ? _props$value : []);\n  const [values, setValues] = useState(propsValues.map((filter) => isDictionaryForAdhocFilter(filter) ? new AdhocFilter(filter) : filter));\n  const [partitionColumn, setPartitionColumn] = useState(undefined);\n  const [newFilterPopoverVisible, setNewFilterPopoverVisible] = useState(false);\n  const [droppedItem, setDroppedItem] = useState({});\n  const optionsForSelect = (columns, formData) => {\n    const options = [\n    ...columns,\n    ...[...((formData == null ? void 0 : formData.metrics) || []), formData == null ? void 0 : formData.metric].map((metric) => metric && (\n    typeof metric === 'string' ?\n    { saved_metric_name: metric } :\n    new AdhocMetric(metric)))].\n    filter((option) => option);\n    return options.\n    reduce((results, option) => {\n      if ('saved_metric_name' in option && option.saved_metric_name) {\n        results.push({\n          ...option,\n          filterOptionName: option.saved_metric_name\n        });\n      } else\n      if ('column_name' in option && option.column_name) {\n        results.push({\n          ...option,\n          filterOptionName: `_col_${option.column_name}`\n        });\n      } else\n      if (option instanceof AdhocMetric) {\n        results.push({\n          ...option,\n          filterOptionName: `_adhocmetric_${option.label}`\n        });\n      }\n      return results;\n    }, []).\n    sort((a, b) => {var _localeCompare, _ref;return (_localeCompare = (_ref = a.saved_metric_name || a.column_name || a.label) == null ? void 0 : _ref.localeCompare(b.saved_metric_name || b.column_name || b.label || '')) != null ? _localeCompare : 0;});\n  };\n  const [options, setOptions] = useState(optionsForSelect(props.columns, props.formData));\n  const availableColumnSet = useMemo(() => new Set(options.map(({ column_name, filterOptionName }) => column_name != null ? column_name : filterOptionName)), [options]);\n  useEffect(() => {\n    if (datasource && datasource.type === 'table') {var _datasource$database;\n      const dbId = (_datasource$database = datasource.database) == null ? void 0 : _datasource$database.id;\n      const { datasource_name: name, catalog, schema, is_sqllab_view: isSqllabView } = datasource;\n      if (!isSqllabView && dbId && name && schema) {\n        SupersetClient.get({\n          endpoint: `/api/v1/database/${dbId}/table_metadata/extra/${toQueryString({\n            name,\n            catalog,\n            schema\n          })}`\n        }).\n        then(({ json }) => {\n          if (json != null && json.partitions) {\n            const { partitions } = json;\n            // for now only show latest_partition option\n            // when table datasource has only 1 partition key.\n            if (partitions != null && partitions.cols &&\n            Object.keys(partitions.cols).length === 1) {\n              setPartitionColumn(partitions.cols[0]);\n            }\n          }\n        }).\n        catch((error) => {\n          logging.error('fetch extra_table_metadata:', error.statusText);\n        });\n      }\n    }\n  }, [datasource]);\n  useEffect(() => {\n    setOptions(optionsForSelect(props.columns, props.formData));\n  }, [props.columns, props.formData]);\n  useEffect(() => {\n    setValues((props.value || []).map((filter) => isDictionaryForAdhocFilter(filter) ? new AdhocFilter(filter) : filter));\n  }, [props.value]);\n  const removeValue = useCallback((index) => {\n    const valuesCopy = [...values];\n    valuesCopy.splice(index, 1);\n    setValues(valuesCopy);\n    onChange(valuesCopy);\n  }, [onChange, values]);\n  const onClickClose = useCallback((index) => {\n    const result = canDelete == null ? void 0 : canDelete(values[index], values);\n    if (typeof result === 'string') {\n      warning({ title: t('Warning'), content: result });\n      return;\n    }\n    if (result === true) {\n      removeValue(index);\n    }\n  }, [canDelete, removeValue, values]);\n  const onShiftOptions = useCallback((dragIndex, hoverIndex) => {\n    const newValues = [...values];\n    [newValues[hoverIndex], newValues[dragIndex]] = [\n    newValues[dragIndex],\n    newValues[hoverIndex]];\n\n    setValues(newValues);\n  }, [values]);\n  const getMetricExpression = useCallback((savedMetricName) => {var _props$savedMetrics$f;return (_props$savedMetrics$f = props.savedMetrics.find((savedMetric) => savedMetric.metric_name === savedMetricName)) == null ? void 0 : _props$savedMetrics$f.expression;}, [props.savedMetrics]);\n  const mapOption = useCallback((option) => {\n    // already a AdhocFilter, skip\n    if (option instanceof AdhocFilter) {\n      return option;\n    }\n    const filterOptions = option;\n    // via datasource saved metric\n    if (filterOptions.saved_metric_name) {\n      return new AdhocFilter({\n        expressionType: ExpressionTypes.Sql,\n        subject: getMetricExpression(filterOptions.saved_metric_name),\n        operator: OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.GreaterThan].operation,\n        operatorId: Operators.GreaterThan,\n        comparator: 0,\n        clause: Clauses.Having\n      });\n    }\n    // has a custom label, meaning it's custom column\n    if (filterOptions.label) {\n      return new AdhocFilter({\n        expressionType: ExpressionTypes.Sql,\n        subject: new AdhocMetric(option).translateToSql(),\n        operator: OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.GreaterThan].operation,\n        operatorId: Operators.GreaterThan,\n        comparator: 0,\n        clause: Clauses.Having\n      });\n    }\n    // add a new filter item\n    if (filterOptions.column_name) {\n      return new AdhocFilter({\n        expressionType: ExpressionTypes.Simple,\n        subject: filterOptions.column_name,\n        operator: OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.Equals].operation,\n        operatorId: Operators.Equals,\n        comparator: '',\n        clause: Clauses.Where,\n        isNew: true\n      });\n    }\n    return null;\n  }, [datasource.type, getMetricExpression]);\n  const onFilterEdit = useCallback((changedFilter) => {\n    onChange(values.map((value) => {\n      if (value.filterOptionName === changedFilter.filterOptionName) {\n        return changedFilter;\n      }\n      return value;\n    }));\n  }, [onChange, values]);\n  const onNewFilter = useCallback((newFilter) => {\n    const mappedOption = mapOption(newFilter);\n    if (mappedOption) {\n      const newValues = [...values, mappedOption];\n      setValues(newValues);\n      onChange(newValues);\n    }\n  }, [mapOption, onChange, values]);\n  const togglePopover = useCallback((visible) => {\n    setNewFilterPopoverVisible(visible);\n  }, []);\n  const closePopover = useCallback(() => {\n    togglePopover(false);\n  }, [togglePopover]);\n  const valuesRenderer = useCallback(() => values.map((adhocFilter, index) => ___EmotionJSX(DndAdhocFilterOption, { index: index, adhocFilter: adhocFilter, options: options, datasource: datasource, onFilterEdit: onFilterEdit, partitionColumn: partitionColumn, onClickClose: onClickClose, onShiftOptions: onShiftOptions })), [\n  onClickClose,\n  onFilterEdit,\n  onShiftOptions,\n  options,\n  partitionColumn,\n  datasource,\n  values]\n  );\n  const handleClickGhostButton = useCallback(() => {\n    setDroppedItem({});\n    togglePopover(true);\n  }, [togglePopover]);\n  const defaultTimeFilter = useDefaultTimeFilter();\n  const adhocFilter = useMemo(() => {\n    if (isSavedMetric(droppedItem)) {\n      return new AdhocFilter({\n        expressionType: ExpressionTypes.Sql,\n        clause: Clauses.Having,\n        sqlExpression: droppedItem == null ? void 0 : droppedItem.expression\n      });\n    }\n    if (droppedItem instanceof AdhocMetric) {\n      return new AdhocFilter({\n        expressionType: ExpressionTypes.Sql,\n        clause: Clauses.Having,\n        sqlExpression: droppedItem == null ? void 0 : droppedItem.translateToSql()\n      });\n    }\n    const config = {\n      subject: droppedItem == null ? void 0 : droppedItem.column_name\n    };\n    if (config.subject) {\n      config.operator = OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.In].operation;\n      config.operatorId = Operators.In;\n    }\n    if (isColumnMeta(droppedItem) &&\n    isTemporalColumn(droppedItem == null ? void 0 : droppedItem.column_name, props.datasource)) {\n      config.operator = Operators.TemporalRange;\n      config.operatorId = Operators.TemporalRange;\n      config.comparator = defaultTimeFilter;\n    }\n    return new AdhocFilter(config);\n  }, [droppedItem]);\n  const canDrop = useCallback((item) => {\n    if (extra.disallow_adhoc_metrics && (\n    item.type !== DndItemType.Column ||\n    !availableColumnSet.has(item.value.column_name))) {\n      return false;\n    }\n    if (item.type === DndItemType.Column) {\n      const columnName = item.value.column_name;\n      return availableColumnSet.has(columnName);\n    }\n    return true;\n  }, [availableColumnSet, extra]);\n  const handleDrop = useCallback((item) => {\n    setDroppedItem(item.value);\n    togglePopover(true);\n  }, [controlName, togglePopover]);\n  return ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(DndSelectLabel, _extends({ onDrop: handleDrop, canDrop: canDrop, valuesRenderer: valuesRenderer, accept: DND_ACCEPTED_TYPES, ghostButtonText: t('Drop columns/metrics here or click'), onClickGhostButton: handleClickGhostButton }, props)),\n  ___EmotionJSX(AdhocFilterPopoverTrigger, { adhocFilter: adhocFilter, options: options, datasource: datasource, onFilterEdit: onNewFilter, partitionColumn: partitionColumn, isControlledComponent: true, visible: newFilterPopoverVisible, togglePopover: togglePopover, closePopover: closePopover, requireSave: !!droppedItem })\n  );\n};__signature__(DndFilterSelect, \"useMemo{extra}\\nuseState{[values, setValues](propsValues.map((filter) => isDictionaryForAdhocFilter(filter) ? new AdhocFilter(filter) : filter))}\\nuseState{[partitionColumn, setPartitionColumn](undefined)}\\nuseState{[newFilterPopoverVisible, setNewFilterPopoverVisible](false)}\\nuseState{[droppedItem, setDroppedItem]({})}\\nuseState{[options, setOptions](optionsForSelect(props.columns, props.formData))}\\nuseMemo{availableColumnSet}\\nuseEffect{}\\nuseEffect{}\\nuseEffect{}\\nuseCallback{removeValue}\\nuseCallback{onClickClose}\\nuseCallback{onShiftOptions}\\nuseCallback{getMetricExpression}\\nuseCallback{mapOption}\\nuseCallback{onFilterEdit}\\nuseCallback{onNewFilter}\\nuseCallback{togglePopover}\\nuseCallback{closePopover}\\nuseCallback{valuesRenderer}\\nuseCallback{handleClickGhostButton}\\nuseDefaultTimeFilter{defaultTimeFilter}\\nuseMemo{adhocFilter}\\nuseCallback{canDrop}\\nuseCallback{handleDrop}\", () => [useDefaultTimeFilter]);\nexport { DndFilterSelect };;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(warning, \"warning\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndFilterSelect.tsx\");reactHotLoader.register(EMPTY_OBJECT, \"EMPTY_OBJECT\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndFilterSelect.tsx\");reactHotLoader.register(DND_ACCEPTED_TYPES, \"DND_ACCEPTED_TYPES\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndFilterSelect.tsx\");reactHotLoader.register(isDictionaryForAdhocFilter, \"isDictionaryForAdhocFilter\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndFilterSelect.tsx\");reactHotLoader.register(DndFilterSelect, \"DndFilterSelect\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndFilterSelect.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["React","useCallback","useEffect","useMemo","useState","logging","SupersetClient","t","isColumnMeta","isTemporalColumn","Modal","OPERATOR_ENUM_TO_OPERATOR_TYPE","Operators","AdhocFilterPopoverTrigger","DndSelectLabel","AdhocFilter","AdhocMetric","isSavedMetric","DndItemType","toQueryString","DndAdhocFilterOption","useDefaultTimeFilter","Clauses","ExpressionTypes","jsx","___EmotionJSX","warning","EMPTY_OBJECT","DND_ACCEPTED_TYPES","Column","Metric","MetricOption","AdhocMetricOption","isDictionaryForAdhocFilter","value","expressionType","DndFilterSelect","props","_props$value","datasource","onChange","name","controlName","canDelete","extra","JSON","parse","propsValues","Array","from","values","setValues","map","filter","partitionColumn","setPartitionColumn","undefined","newFilterPopoverVisible","setNewFilterPopoverVisible","droppedItem","setDroppedItem","optionsForSelect","columns","formData","options","metrics","metric","saved_metric_name","option","reduce","results","push","filterOptionName","column_name","label","sort","a","b","_localeCompare","_ref","localeCompare","setOptions","availableColumnSet","Set","type","_datasource$database","dbId","database","id","datasource_name","catalog","schema","is_sqllab_view","isSqllabView","get","endpoint","then","json","partitions","cols","Object","keys","length","catch","error","statusText","removeValue","index","valuesCopy","splice","onClickClose","result","title","content","onShiftOptions","dragIndex","hoverIndex","newValues","getMetricExpression","savedMetricName","_props$savedMetrics$f","savedMetrics","find","savedMetric","metric_name","expression","mapOption","filterOptions","Sql","subject","operator","GreaterThan","operation","operatorId","comparator","clause","Having","translateToSql","Simple","Equals","Where","isNew","onFilterEdit","changedFilter","onNewFilter","newFilter","mappedOption","togglePopover","visible","closePopover","valuesRenderer","adhocFilter","handleClickGhostButton","defaultTimeFilter","sqlExpression","config","In","TemporalRange","canDrop","item","disallow_adhoc_metrics","has","columnName","handleDrop","Fragment","_extends","onDrop","accept","ghostButtonText","onClickGhostButton","isControlledComponent","requireSave","__signature__","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndFilterSelect.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with work for additional information\n * regarding copyright ownership.  The ASF licenses file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport {\n  logging,\n  Metric,\n  QueryFormData,\n  QueryFormMetric,\n  SupersetClient,\n  t,\n} from '@superset-ui/core';\nimport {\n  ColumnMeta,\n  isColumnMeta,\n  isTemporalColumn,\n} from '@superset-ui/chart-controls';\nimport Modal from 'src/components/Modal';\nimport {\n  OPERATOR_ENUM_TO_OPERATOR_TYPE,\n  Operators,\n} from 'src/explore/constants';\nimport { Datasource, OptionSortType } from 'src/explore/types';\nimport { OptionValueType } from 'src/explore/components/controls/DndColumnSelectControl/types';\nimport AdhocFilterPopoverTrigger from 'src/explore/components/controls/FilterControl/AdhocFilterPopoverTrigger';\nimport DndSelectLabel from 'src/explore/components/controls/DndColumnSelectControl/DndSelectLabel';\nimport AdhocFilter from 'src/explore/components/controls/FilterControl/AdhocFilter';\nimport AdhocMetric from 'src/explore/components/controls/MetricControl/AdhocMetric';\nimport {\n  DatasourcePanelDndItem,\n  DndItemValue,\n  isSavedMetric,\n} from 'src/explore/components/DatasourcePanel/types';\nimport { DndItemType } from 'src/explore/components/DndItemType';\nimport { ControlComponentProps } from 'src/explore/components/Control';\nimport { toQueryString } from 'src/utils/urlUtils';\nimport DndAdhocFilterOption from './DndAdhocFilterOption';\nimport { useDefaultTimeFilter } from '../DateFilterControl/utils';\nimport { Clauses, ExpressionTypes } from '../FilterControl/types';\n\nconst { warning } = Modal;\n\nconst EMPTY_OBJECT = {};\nconst DND_ACCEPTED_TYPES = [\n  DndItemType.Column,\n  DndItemType.Metric,\n  DndItemType.MetricOption,\n  DndItemType.AdhocMetricOption,\n];\n\nconst isDictionaryForAdhocFilter = (value: OptionValueType) =>\n  !(value instanceof AdhocFilter) && value?.expressionType;\n\nexport interface DndFilterSelectProps\n  extends ControlComponentProps<OptionValueType[]> {\n  columns: ColumnMeta[];\n  savedMetrics: Metric[];\n  selectedMetrics: QueryFormMetric[];\n  datasource: Datasource;\n  canDelete?: (\n    valueToBeDeleted: OptionValueType,\n    values: OptionValueType[],\n  ) => true | string;\n}\n\nconst DndFilterSelect = (props: DndFilterSelectProps) => {\n  const {\n    datasource,\n    onChange = () => {},\n    name: controlName,\n    canDelete,\n  } = props;\n\n  const extra = useMemo<{ disallow_adhoc_metrics?: boolean }>(() => {\n    let extra = {};\n    if (datasource?.extra) {\n      try {\n        extra = JSON.parse(datasource.extra);\n      } catch {} // eslint-disable-line no-empty\n    }\n    return extra;\n  }, [datasource?.extra]);\n\n  const propsValues = Array.from(props.value ?? []);\n  const [values, setValues] = useState(\n    propsValues.map((filter: OptionValueType) =>\n      isDictionaryForAdhocFilter(filter) ? new AdhocFilter(filter) : filter,\n    ),\n  );\n  const [partitionColumn, setPartitionColumn] = useState(undefined);\n  const [newFilterPopoverVisible, setNewFilterPopoverVisible] = useState(false);\n  const [droppedItem, setDroppedItem] = useState<\n    DndItemValue | typeof EMPTY_OBJECT\n  >({});\n\n  const optionsForSelect = (\n    columns: ColumnMeta[],\n    formData: QueryFormData | null | undefined,\n  ) => {\n    const options: OptionSortType[] = [\n      ...columns,\n      ...[...(formData?.metrics || []), formData?.metric].map(\n        metric =>\n          metric &&\n          (typeof metric === 'string'\n            ? { saved_metric_name: metric }\n            : new AdhocMetric(metric)),\n      ),\n    ].filter(option => option);\n\n    return options\n      .reduce(\n        (\n          results: (OptionSortType & { filterOptionName: string })[],\n          option,\n        ) => {\n          if ('saved_metric_name' in option && option.saved_metric_name) {\n            results.push({\n              ...option,\n              filterOptionName: option.saved_metric_name,\n            });\n          } else if ('column_name' in option && option.column_name) {\n            results.push({\n              ...option,\n              filterOptionName: `_col_${option.column_name}`,\n            });\n          } else if (option instanceof AdhocMetric) {\n            results.push({\n              ...option,\n              filterOptionName: `_adhocmetric_${option.label}`,\n            });\n          }\n          return results;\n        },\n        [],\n      )\n      .sort(\n        (a: OptionSortType, b: OptionSortType) =>\n          (a.saved_metric_name || a.column_name || a.label)?.localeCompare(\n            b.saved_metric_name || b.column_name || b.label || '',\n          ) ?? 0,\n      );\n  };\n  const [options, setOptions] = useState(\n    optionsForSelect(props.columns, props.formData),\n  );\n\n  const availableColumnSet = useMemo(\n    () =>\n      new Set(\n        options.map(\n          ({ column_name, filterOptionName }) =>\n            column_name ?? filterOptionName,\n        ),\n      ),\n    [options],\n  );\n\n  useEffect(() => {\n    if (datasource && datasource.type === 'table') {\n      const dbId = datasource.database?.id;\n      const {\n        datasource_name: name,\n        catalog,\n        schema,\n        is_sqllab_view: isSqllabView,\n      } = datasource;\n\n      if (!isSqllabView && dbId && name && schema) {\n        SupersetClient.get({\n          endpoint: `/api/v1/database/${dbId}/table_metadata/extra/${toQueryString(\n            {\n              name,\n              catalog,\n              schema,\n            },\n          )}`,\n        })\n          .then(({ json }: { json: Record<string, any> }) => {\n            if (json?.partitions) {\n              const { partitions } = json;\n              // for now only show latest_partition option\n              // when table datasource has only 1 partition key.\n              if (\n                partitions?.cols &&\n                Object.keys(partitions.cols).length === 1\n              ) {\n                setPartitionColumn(partitions.cols[0]);\n              }\n            }\n          })\n          .catch((error: Record<string, any>) => {\n            logging.error('fetch extra_table_metadata:', error.statusText);\n          });\n      }\n    }\n  }, [datasource]);\n\n  useEffect(() => {\n    setOptions(optionsForSelect(props.columns, props.formData));\n  }, [props.columns, props.formData]);\n\n  useEffect(() => {\n    setValues(\n      (props.value || []).map((filter: OptionValueType) =>\n        isDictionaryForAdhocFilter(filter) ? new AdhocFilter(filter) : filter,\n      ),\n    );\n  }, [props.value]);\n\n  const removeValue = useCallback(\n    (index: number) => {\n      const valuesCopy = [...values];\n      valuesCopy.splice(index, 1);\n      setValues(valuesCopy);\n      onChange(valuesCopy);\n    },\n    [onChange, values],\n  );\n\n  const onClickClose = useCallback(\n    (index: number) => {\n      const result = canDelete?.(values[index], values);\n      if (typeof result === 'string') {\n        warning({ title: t('Warning'), content: result });\n        return;\n      }\n      if (result === true) {\n        removeValue(index);\n      }\n    },\n    [canDelete, removeValue, values],\n  );\n\n  const onShiftOptions = useCallback(\n    (dragIndex: number, hoverIndex: number) => {\n      const newValues = [...values];\n      [newValues[hoverIndex], newValues[dragIndex]] = [\n        newValues[dragIndex],\n        newValues[hoverIndex],\n      ];\n      setValues(newValues);\n    },\n    [values],\n  );\n\n  const getMetricExpression = useCallback(\n    (savedMetricName: string) =>\n      props.savedMetrics.find(\n        (savedMetric: Metric) => savedMetric.metric_name === savedMetricName,\n      )?.expression,\n    [props.savedMetrics],\n  );\n\n  const mapOption = useCallback(\n    (option: OptionValueType) => {\n      // already a AdhocFilter, skip\n      if (option instanceof AdhocFilter) {\n        return option;\n      }\n      const filterOptions = option as Record<string, any>;\n      // via datasource saved metric\n      if (filterOptions.saved_metric_name) {\n        return new AdhocFilter({\n          expressionType: ExpressionTypes.Sql,\n          subject: getMetricExpression(filterOptions.saved_metric_name),\n          operator:\n            OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.GreaterThan].operation,\n          operatorId: Operators.GreaterThan,\n          comparator: 0,\n          clause: Clauses.Having,\n        });\n      }\n      // has a custom label, meaning it's custom column\n      if (filterOptions.label) {\n        return new AdhocFilter({\n          expressionType: ExpressionTypes.Sql,\n          subject: new AdhocMetric(option).translateToSql(),\n          operator:\n            OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.GreaterThan].operation,\n          operatorId: Operators.GreaterThan,\n          comparator: 0,\n          clause: Clauses.Having,\n        });\n      }\n      // add a new filter item\n      if (filterOptions.column_name) {\n        return new AdhocFilter({\n          expressionType: ExpressionTypes.Simple,\n          subject: filterOptions.column_name,\n          operator: OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.Equals].operation,\n          operatorId: Operators.Equals,\n          comparator: '',\n          clause: Clauses.Where,\n          isNew: true,\n        });\n      }\n      return null;\n    },\n    [datasource.type, getMetricExpression],\n  );\n\n  const onFilterEdit = useCallback(\n    (changedFilter: AdhocFilter) => {\n      onChange(\n        values.map((value: AdhocFilter) => {\n          if (value.filterOptionName === changedFilter.filterOptionName) {\n            return changedFilter;\n          }\n          return value;\n        }),\n      );\n    },\n    [onChange, values],\n  );\n\n  const onNewFilter = useCallback(\n    (newFilter: AdhocFilter) => {\n      const mappedOption = mapOption(newFilter);\n      if (mappedOption) {\n        const newValues = [...values, mappedOption];\n        setValues(newValues);\n        onChange(newValues);\n      }\n    },\n    [mapOption, onChange, values],\n  );\n\n  const togglePopover = useCallback((visible: boolean) => {\n    setNewFilterPopoverVisible(visible);\n  }, []);\n\n  const closePopover = useCallback(() => {\n    togglePopover(false);\n  }, [togglePopover]);\n\n  const valuesRenderer = useCallback(\n    () =>\n      values.map((adhocFilter: AdhocFilter, index: number) => (\n        <DndAdhocFilterOption\n          index={index}\n          adhocFilter={adhocFilter}\n          options={options}\n          datasource={datasource}\n          onFilterEdit={onFilterEdit}\n          partitionColumn={partitionColumn}\n          onClickClose={onClickClose}\n          onShiftOptions={onShiftOptions}\n        />\n      )),\n    [\n      onClickClose,\n      onFilterEdit,\n      onShiftOptions,\n      options,\n      partitionColumn,\n      datasource,\n      values,\n    ],\n  );\n\n  const handleClickGhostButton = useCallback(() => {\n    setDroppedItem({});\n    togglePopover(true);\n  }, [togglePopover]);\n\n  const defaultTimeFilter = useDefaultTimeFilter();\n  const adhocFilter = useMemo(() => {\n    if (isSavedMetric(droppedItem)) {\n      return new AdhocFilter({\n        expressionType: ExpressionTypes.Sql,\n        clause: Clauses.Having,\n        sqlExpression: droppedItem?.expression,\n      });\n    }\n    if (droppedItem instanceof AdhocMetric) {\n      return new AdhocFilter({\n        expressionType: ExpressionTypes.Sql,\n        clause: Clauses.Having,\n        sqlExpression: (droppedItem as AdhocMetric)?.translateToSql(),\n      });\n    }\n    const config: Partial<AdhocFilter> = {\n      subject: (droppedItem as ColumnMeta)?.column_name,\n    };\n    if (config.subject) {\n      config.operator = OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.In].operation;\n      config.operatorId = Operators.In;\n    }\n    if (\n      isColumnMeta(droppedItem) &&\n      isTemporalColumn(droppedItem?.column_name, props.datasource)\n    ) {\n      config.operator = Operators.TemporalRange;\n      config.operatorId = Operators.TemporalRange;\n      config.comparator = defaultTimeFilter;\n    }\n    return new AdhocFilter(config);\n  }, [droppedItem]);\n\n  const canDrop = useCallback(\n    (item: DatasourcePanelDndItem) => {\n      if (\n        extra.disallow_adhoc_metrics &&\n        (item.type !== DndItemType.Column ||\n          !availableColumnSet.has((item.value as ColumnMeta).column_name))\n      ) {\n        return false;\n      }\n\n      if (item.type === DndItemType.Column) {\n        const columnName = (item.value as ColumnMeta).column_name;\n        return availableColumnSet.has(columnName);\n      }\n      return true;\n    },\n    [availableColumnSet, extra],\n  );\n\n  const handleDrop = useCallback(\n    (item: DatasourcePanelDndItem) => {\n      setDroppedItem(item.value);\n      togglePopover(true);\n    },\n    [controlName, togglePopover],\n  );\n\n  return (\n    <>\n      <DndSelectLabel\n        onDrop={handleDrop}\n        canDrop={canDrop}\n        valuesRenderer={valuesRenderer}\n        accept={DND_ACCEPTED_TYPES}\n        ghostButtonText={t('Drop columns/metrics here or click')}\n        onClickGhostButton={handleClickGhostButton}\n        {...props}\n      />\n      <AdhocFilterPopoverTrigger\n        adhocFilter={adhocFilter}\n        options={options}\n        datasource={datasource}\n        onFilterEdit={onNewFilter}\n        partitionColumn={partitionColumn}\n        isControlledComponent\n        visible={newFilterPopoverVisible}\n        togglePopover={togglePopover}\n        closePopover={closePopover}\n        requireSave={!!droppedItem}\n      />\n    </>\n  );\n};\n\nexport { DndFilterSelect };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}