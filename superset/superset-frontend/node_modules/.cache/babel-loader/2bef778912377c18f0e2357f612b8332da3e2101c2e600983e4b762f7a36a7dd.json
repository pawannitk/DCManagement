{"ast":null,"code":"import _isString from \"lodash/isString\";import _isEmpty from \"lodash/isEmpty\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useState } from 'react';\nimport { Radio } from 'src/components/Radio';\nimport { AsyncSelect } from 'src/components';\nimport { Input } from 'src/components/Input';\nimport StyledModal from 'src/components/Modal';\nimport Button from 'src/components/Button';\nimport { styled, t, SupersetClient } from '@superset-ui/core';\nimport { useSelector, useDispatch } from 'react-redux';\nimport moment from 'moment';\nimport rison from 'rison';\nimport { createDatasource } from 'src/SqlLab/actions/sqlLab';\nimport { addDangerToast } from 'src/components/MessageToasts/actions';\nimport { DatasetRadioState, EXPLORE_CHART_DEFAULT } from 'src/SqlLab/types';\nimport { mountExploreUrl } from 'src/explore/exploreUtils';\nimport { postFormData } from 'src/explore/exploreUtils/formData';\nimport { URL_PARAMS } from 'src/constants';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst Styles = styled.div`\n  .sdm-body {\n    margin: 0 8px;\n  }\n  .sdm-input {\n    margin-left: 45px;\n    width: 401px;\n  }\n  .sdm-autocomplete {\n    width: 401px;\n    align-self: center;\n  }\n  .sdm-radio {\n    display: block;\n    height: 30px;\n    margin: 10px 0px;\n    line-height: 30px;\n  }\n  .sdm-overwrite-msg {\n    margin: 7px;\n  }\n  .sdm-overwrite-container {\n    flex: 1 1 auto;\n    display: flex;\n  }\n`;\nconst updateDataset = async (dbId, datasetId, sql, columns, owners, overrideColumns) => {\n  const endpoint = `api/v1/dataset/${datasetId}?override_columns=${overrideColumns}`;\n  const headers = { 'Content-Type': 'application/json' };\n  const body = JSON.stringify({\n    sql,\n    columns,\n    owners,\n    database_id: dbId\n  });\n  const data = await SupersetClient.put({\n    endpoint,\n    headers,\n    body\n  });\n  return data.json.result;\n};\nconst UNTITLED = t('Untitled Dataset');\nexport const SaveDatasetModal = ({ visible, onHide, buttonTextOnSave, buttonTextOnOverwrite, modalDescription, datasource, openWindow = true, formData = {} }) => {\n  const defaultVizType = useSelector((state) => {var _state$common, _state$common$conf;return ((_state$common = state.common) == null ? void 0 : (_state$common$conf = _state$common.conf) == null ? void 0 : _state$common$conf.DEFAULT_VIZ_TYPE) || 'table';});\n  const getDefaultDatasetName = () => `${(datasource == null ? void 0 : datasource.name) || UNTITLED} ${moment().format('L HH:mm:ss')}`;\n  const [datasetName, setDatasetName] = useState(getDefaultDatasetName());\n  const [newOrOverwrite, setNewOrOverwrite] = useState(DatasetRadioState.SaveNew);\n  const [shouldOverwriteDataset, setShouldOverwriteDataset] = useState(false);\n  const [datasetToOverwrite, setDatasetToOverwrite] = useState({});\n  const [selectedDatasetToOverwrite, setSelectedDatasetToOverwrite] = useState(undefined);\n  const [loading, setLoading] = useState(false);\n  const user = useSelector((state) => state.user);\n  const dispatch = useDispatch();\n  const createWindow = (url) => {\n    if (openWindow) {\n      window.open(url, '_blank', 'noreferrer');\n    } else\n    {\n      window.location.href = url;\n    }\n  };\n  const formDataWithDefaults = {\n    ...EXPLORE_CHART_DEFAULT,\n    ...(formData || {})\n  };\n  const handleOverwriteDataset = async () => {var _datasource$columns, _datasetToOverwrite$o, _datasource$columns2;\n    // if user wants to overwrite a dataset we need to prompt them\n    if (!shouldOverwriteDataset) {\n      setShouldOverwriteDataset(true);\n      return;\n    }\n    setLoading(true);\n    const [, key] = await Promise.all([\n    updateDataset(datasource == null ? void 0 : datasource.dbId, datasetToOverwrite == null ? void 0 : datasetToOverwrite.datasetid, datasource == null ? void 0 : datasource.sql, datasource == null ? void 0 : (_datasource$columns = datasource.columns) == null ? void 0 : _datasource$columns.map((d) => ({\n      column_name: d.column_name,\n      type: d.type,\n      is_dttm: d.is_dttm\n    })), datasetToOverwrite == null ? void 0 : (_datasetToOverwrite$o = datasetToOverwrite.owners) == null ? void 0 : _datasetToOverwrite$o.map((o) => o.id), true),\n    postFormData(datasetToOverwrite.datasetid, 'table', {\n      ...formDataWithDefaults,\n      datasource: `${datasetToOverwrite.datasetid}__table`,\n      ...(defaultVizType === 'table' && {\n        all_columns: datasource == null ? void 0 : (_datasource$columns2 = datasource.columns) == null ? void 0 : _datasource$columns2.map((column) => column.column_name)\n      })\n    })]\n    );\n    setLoading(false);\n    const url = mountExploreUrl(null, {\n      [URL_PARAMS.formDataKey.name]: key\n    });\n    createWindow(url);\n    setShouldOverwriteDataset(false);\n    setDatasetName(getDefaultDatasetName());\n    onHide();\n  };\n  const loadDatasetOverwriteOptions = useCallback(async (input = '') => {\n    const { userId } = user;\n    const queryParams = rison.encode({\n      filters: [\n      {\n        col: 'table_name',\n        opr: 'ct',\n        value: input\n      },\n      {\n        col: 'owners',\n        opr: 'rel_m_m',\n        value: userId\n      }],\n\n      order_column: 'changed_on_delta_humanized',\n      order_direction: 'desc'\n    });\n    return SupersetClient.get({\n      endpoint: `/api/v1/dataset/?q=${queryParams}`\n    }).then((response) => ({\n      data: response.json.result.map((r) => ({\n        value: r.table_name,\n        label: r.table_name,\n        datasetid: r.id,\n        owners: r.owners\n      })),\n      totalCount: response.json.count\n    }));\n  }, [user]);\n  const handleSaveInDataset = () => {var _datasource$columns3, _datasource$database;\n    setLoading(true);\n    const selectedColumns = (_datasource$columns3 = datasource == null ? void 0 : datasource.columns) != null ? _datasource$columns3 : [];\n    // The filters param is only used to test jinja templates.\n    // Remove the special filters entry from the templateParams\n    // before saving the dataset.\n    let templateParams;\n    if (_isString(datasource == null ? void 0 : datasource.templateParams)) {\n      const p = JSON.parse(datasource.templateParams);\n      /* eslint-disable-next-line no-underscore-dangle */\n      if (p._filters) {\n        /* eslint-disable-next-line no-underscore-dangle */\n        delete p._filters;\n        // eslint-disable-next-line no-param-reassign\n        templateParams = JSON.stringify(p);\n      }\n    }\n    dispatch(createDatasource({\n      sql: datasource.sql,\n      dbId: datasource.dbId || (datasource == null ? void 0 : (_datasource$database = datasource.database) == null ? void 0 : _datasource$database.id),\n      catalog: datasource == null ? void 0 : datasource.catalog,\n      schema: datasource == null ? void 0 : datasource.schema,\n      templateParams,\n      datasourceName: datasetName\n    })).\n    then((data) => postFormData(data.id, 'table', {\n      ...formDataWithDefaults,\n      datasource: `${data.id}__table`,\n      ...(defaultVizType === 'table' && {\n        all_columns: selectedColumns.map((column) => column.column_name)\n      })\n    })).\n    then((key) => {\n      setLoading(false);\n      const url = mountExploreUrl(null, {\n        [URL_PARAMS.formDataKey.name]: key\n      });\n      createWindow(url);\n      setDatasetName(getDefaultDatasetName());\n      onHide();\n    }).\n    catch(() => {\n      setLoading(false);\n      addDangerToast(t('An error occurred saving dataset'));\n    });\n  };\n  const handleOverwriteDatasetOption = (value, option) => {\n    setDatasetToOverwrite(option);\n    setSelectedDatasetToOverwrite(value);\n  };\n  const handleDatasetNameChange = (e) => {\n    // @ts-expect-error\n    setDatasetName(e.target.value);\n  };\n  const handleOverwriteCancel = () => {\n    setShouldOverwriteDataset(false);\n    setDatasetToOverwrite({});\n  };\n  const disableSaveAndExploreBtn = newOrOverwrite === DatasetRadioState.SaveNew &&\n  datasetName.length === 0 ||\n  newOrOverwrite === DatasetRadioState.OverwriteDataset &&\n  _isEmpty(selectedDatasetToOverwrite);\n  const filterAutocompleteOption = (inputValue, option) => option.value.toLowerCase().includes(inputValue.toLowerCase());\n  return ___EmotionJSX(StyledModal, { show: visible, title: t('Save or Overwrite Dataset'), onHide: onHide, footer: ___EmotionJSX(React.Fragment, null,\n    newOrOverwrite === DatasetRadioState.SaveNew && ___EmotionJSX(Button, { disabled: disableSaveAndExploreBtn, buttonStyle: \"primary\", onClick: handleSaveInDataset, loading: loading },\n    buttonTextOnSave\n    ),\n    newOrOverwrite === DatasetRadioState.OverwriteDataset && ___EmotionJSX(React.Fragment, null,\n    shouldOverwriteDataset && ___EmotionJSX(Button, { onClick: handleOverwriteCancel }, t('Back')),\n    ___EmotionJSX(Button, { className: \"md\", buttonStyle: \"primary\", onClick: handleOverwriteDataset, disabled: disableSaveAndExploreBtn, loading: loading },\n    buttonTextOnOverwrite\n    )\n    )\n    ) },\n  ___EmotionJSX(Styles, null,\n  !shouldOverwriteDataset && ___EmotionJSX(\"div\", { className: \"sdm-body\" },\n  modalDescription && ___EmotionJSX(\"div\", { className: \"sdm-prompt\" }, modalDescription),\n  ___EmotionJSX(Radio.Group, { onChange: (e) => {\n      setNewOrOverwrite(Number(e.target.value));\n    }, value: newOrOverwrite },\n  ___EmotionJSX(Radio, { className: \"sdm-radio\", value: 1 },\n  t('Save as new'),\n  ___EmotionJSX(Input, { className: \"sdm-input\", value: datasetName, onChange: handleDatasetNameChange, disabled: newOrOverwrite !== 1 })\n  ),\n  ___EmotionJSX(\"div\", { className: \"sdm-overwrite-container\" },\n  ___EmotionJSX(Radio, { className: \"sdm-radio\", value: 2 },\n  t('Overwrite existing')\n  ),\n  ___EmotionJSX(\"div\", { className: \"sdm-autocomplete\" },\n  ___EmotionJSX(AsyncSelect, { allowClear: true, showSearch: true, placeholder: t('Select or type dataset name'), ariaLabel: t('Existing dataset'), onChange: handleOverwriteDatasetOption, options: (input) => loadDatasetOverwriteOptions(input), value: selectedDatasetToOverwrite, filterOption: filterAutocompleteOption, disabled: newOrOverwrite !== 2, getPopupContainer: () => document.body })\n  )\n  )\n  )\n  ),\n  shouldOverwriteDataset && ___EmotionJSX(\"div\", { className: \"sdm-overwrite-msg\" },\n  t('Are you sure you want to overwrite this dataset?')\n  )\n  )\n  );\n};__signature__(SaveDatasetModal, \"useSelector{defaultVizType}\\nuseState{[datasetName, setDatasetName](getDefaultDatasetName())}\\nuseState{[newOrOverwrite, setNewOrOverwrite](DatasetRadioState.SaveNew)}\\nuseState{[shouldOverwriteDataset, setShouldOverwriteDataset](false)}\\nuseState{[datasetToOverwrite, setDatasetToOverwrite]({})}\\nuseState{[selectedDatasetToOverwrite, setSelectedDatasetToOverwrite](undefined)}\\nuseState{[loading, setLoading](false)}\\nuseSelector{user}\\nuseDispatch{dispatch}\\nuseCallback{loadDatasetOverwriteOptions}\", () => [useSelector, useSelector, useDispatch]);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(Styles, \"Styles\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/SaveDatasetModal/index.tsx\");reactHotLoader.register(updateDataset, \"updateDataset\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/SaveDatasetModal/index.tsx\");reactHotLoader.register(UNTITLED, \"UNTITLED\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/SaveDatasetModal/index.tsx\");reactHotLoader.register(SaveDatasetModal, \"SaveDatasetModal\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/SaveDatasetModal/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["React","useCallback","useState","Radio","AsyncSelect","Input","StyledModal","Button","styled","t","SupersetClient","useSelector","useDispatch","moment","rison","createDatasource","addDangerToast","DatasetRadioState","EXPLORE_CHART_DEFAULT","mountExploreUrl","postFormData","URL_PARAMS","jsx","___EmotionJSX","Styles","div","updateDataset","dbId","datasetId","sql","columns","owners","overrideColumns","endpoint","headers","body","JSON","stringify","database_id","data","put","json","result","UNTITLED","SaveDatasetModal","visible","onHide","buttonTextOnSave","buttonTextOnOverwrite","modalDescription","datasource","openWindow","formData","defaultVizType","state","_state$common","_state$common$conf","common","conf","DEFAULT_VIZ_TYPE","getDefaultDatasetName","name","format","datasetName","setDatasetName","newOrOverwrite","setNewOrOverwrite","SaveNew","shouldOverwriteDataset","setShouldOverwriteDataset","datasetToOverwrite","setDatasetToOverwrite","selectedDatasetToOverwrite","setSelectedDatasetToOverwrite","undefined","loading","setLoading","user","dispatch","createWindow","url","window","open","location","href","formDataWithDefaults","handleOverwriteDataset","_datasource$columns","_datasetToOverwrite$o","_datasource$columns2","key","Promise","all","datasetid","map","d","column_name","type","is_dttm","o","id","all_columns","column","formDataKey","loadDatasetOverwriteOptions","input","userId","queryParams","encode","filters","col","opr","value","order_column","order_direction","get","then","response","r","table_name","label","totalCount","count","handleSaveInDataset","_datasource$columns3","_datasource$database","selectedColumns","templateParams","_isString","p","parse","_filters","database","catalog","schema","datasourceName","catch","handleOverwriteDatasetOption","option","handleDatasetNameChange","e","target","handleOverwriteCancel","disableSaveAndExploreBtn","length","OverwriteDataset","_isEmpty","filterAutocompleteOption","inputValue","toLowerCase","includes","show","title","footer","Fragment","disabled","buttonStyle","onClick","className","Group","onChange","Number","allowClear","showSearch","placeholder","ariaLabel","options","filterOption","getPopupContainer","document","__signature__","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/SaveDatasetModal/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useCallback, useState } from 'react';\nimport { Radio } from 'src/components/Radio';\nimport { RadioChangeEvent, AsyncSelect } from 'src/components';\nimport { Input } from 'src/components/Input';\nimport StyledModal from 'src/components/Modal';\nimport Button from 'src/components/Button';\nimport {\n  styled,\n  t,\n  SupersetClient,\n  JsonResponse,\n  JsonObject,\n  QueryResponse,\n  QueryFormData,\n} from '@superset-ui/core';\nimport { useSelector, useDispatch } from 'react-redux';\nimport moment from 'moment';\nimport rison from 'rison';\nimport { createDatasource } from 'src/SqlLab/actions/sqlLab';\nimport { addDangerToast } from 'src/components/MessageToasts/actions';\nimport { UserWithPermissionsAndRoles as User } from 'src/types/bootstrapTypes';\nimport {\n  DatasetRadioState,\n  EXPLORE_CHART_DEFAULT,\n  DatasetOwner,\n  SqlLabRootState,\n} from 'src/SqlLab/types';\nimport { mountExploreUrl } from 'src/explore/exploreUtils';\nimport { postFormData } from 'src/explore/exploreUtils/formData';\nimport { URL_PARAMS } from 'src/constants';\nimport { SelectValue } from 'antd/lib/select';\nimport { isEmpty, isString } from 'lodash';\n\ninterface QueryDatabase {\n  id?: number;\n}\n\nexport type ExploreQuery = QueryResponse & {\n  database?: QueryDatabase | null | undefined;\n};\n\nexport interface ISimpleColumn {\n  column_name?: string | null;\n  name?: string | null;\n  type?: string | null;\n  is_dttm?: boolean | null;\n}\n\nexport type Database = {\n  backend: string;\n  id: number;\n  parameter: object;\n};\n\nexport interface ISaveableDatasource {\n  columns: ISimpleColumn[];\n  name: string;\n  dbId: number;\n  sql: string;\n  templateParams?: string | object | null;\n  catalog?: string | null;\n  schema?: string | null;\n  database?: Database;\n}\n\ninterface SaveDatasetModalProps {\n  visible: boolean;\n  onHide: () => void;\n  buttonTextOnSave: string;\n  buttonTextOnOverwrite: string;\n  modalDescription?: string;\n  datasource: ISaveableDatasource;\n  openWindow?: boolean;\n  formData?: Omit<QueryFormData, 'datasource'>;\n}\n\nconst Styles = styled.div`\n  .sdm-body {\n    margin: 0 8px;\n  }\n  .sdm-input {\n    margin-left: 45px;\n    width: 401px;\n  }\n  .sdm-autocomplete {\n    width: 401px;\n    align-self: center;\n  }\n  .sdm-radio {\n    display: block;\n    height: 30px;\n    margin: 10px 0px;\n    line-height: 30px;\n  }\n  .sdm-overwrite-msg {\n    margin: 7px;\n  }\n  .sdm-overwrite-container {\n    flex: 1 1 auto;\n    display: flex;\n  }\n`;\n\nconst updateDataset = async (\n  dbId: number,\n  datasetId: number,\n  sql: string,\n  columns: Array<Record<string, any>>,\n  owners: [number],\n  overrideColumns: boolean,\n) => {\n  const endpoint = `api/v1/dataset/${datasetId}?override_columns=${overrideColumns}`;\n  const headers = { 'Content-Type': 'application/json' };\n  const body = JSON.stringify({\n    sql,\n    columns,\n    owners,\n    database_id: dbId,\n  });\n\n  const data: JsonResponse = await SupersetClient.put({\n    endpoint,\n    headers,\n    body,\n  });\n  return data.json.result;\n};\n\nconst UNTITLED = t('Untitled Dataset');\n\nexport const SaveDatasetModal = ({\n  visible,\n  onHide,\n  buttonTextOnSave,\n  buttonTextOnOverwrite,\n  modalDescription,\n  datasource,\n  openWindow = true,\n  formData = {},\n}: SaveDatasetModalProps) => {\n  const defaultVizType = useSelector<SqlLabRootState, string>(\n    state => state.common?.conf?.DEFAULT_VIZ_TYPE || 'table',\n  );\n\n  const getDefaultDatasetName = () =>\n    `${datasource?.name || UNTITLED} ${moment().format('L HH:mm:ss')}`;\n  const [datasetName, setDatasetName] = useState(getDefaultDatasetName());\n  const [newOrOverwrite, setNewOrOverwrite] = useState(\n    DatasetRadioState.SaveNew,\n  );\n  const [shouldOverwriteDataset, setShouldOverwriteDataset] = useState(false);\n  const [datasetToOverwrite, setDatasetToOverwrite] = useState<\n    Record<string, any>\n  >({});\n  const [selectedDatasetToOverwrite, setSelectedDatasetToOverwrite] = useState<\n    SelectValue | undefined\n  >(undefined);\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const user = useSelector<SqlLabRootState, User>(state => state.user);\n  const dispatch = useDispatch<(dispatch: any) => Promise<JsonObject>>();\n\n  const createWindow = (url: string) => {\n    if (openWindow) {\n      window.open(url, '_blank', 'noreferrer');\n    } else {\n      window.location.href = url;\n    }\n  };\n  const formDataWithDefaults = {\n    ...EXPLORE_CHART_DEFAULT,\n    ...(formData || {}),\n  };\n  const handleOverwriteDataset = async () => {\n    // if user wants to overwrite a dataset we need to prompt them\n    if (!shouldOverwriteDataset) {\n      setShouldOverwriteDataset(true);\n      return;\n    }\n    setLoading(true);\n\n    const [, key] = await Promise.all([\n      updateDataset(\n        datasource?.dbId,\n        datasetToOverwrite?.datasetid,\n        datasource?.sql,\n        datasource?.columns?.map(\n          (d: { column_name: string; type: string; is_dttm: boolean }) => ({\n            column_name: d.column_name,\n            type: d.type,\n            is_dttm: d.is_dttm,\n          }),\n        ),\n        datasetToOverwrite?.owners?.map((o: DatasetOwner) => o.id),\n        true,\n      ),\n      postFormData(datasetToOverwrite.datasetid, 'table', {\n        ...formDataWithDefaults,\n        datasource: `${datasetToOverwrite.datasetid}__table`,\n        ...(defaultVizType === 'table' && {\n          all_columns: datasource?.columns?.map(column => column.column_name),\n        }),\n      }),\n    ]);\n    setLoading(false);\n\n    const url = mountExploreUrl(null, {\n      [URL_PARAMS.formDataKey.name]: key,\n    });\n    createWindow(url);\n\n    setShouldOverwriteDataset(false);\n    setDatasetName(getDefaultDatasetName());\n    onHide();\n  };\n\n  const loadDatasetOverwriteOptions = useCallback(\n    async (input = '') => {\n      const { userId } = user;\n      const queryParams = rison.encode({\n        filters: [\n          {\n            col: 'table_name',\n            opr: 'ct',\n            value: input,\n          },\n          {\n            col: 'owners',\n            opr: 'rel_m_m',\n            value: userId,\n          },\n        ],\n        order_column: 'changed_on_delta_humanized',\n        order_direction: 'desc',\n      });\n\n      return SupersetClient.get({\n        endpoint: `/api/v1/dataset/?q=${queryParams}`,\n      }).then(response => ({\n        data: response.json.result.map(\n          (r: { table_name: string; id: number; owners: [DatasetOwner] }) => ({\n            value: r.table_name,\n            label: r.table_name,\n            datasetid: r.id,\n            owners: r.owners,\n          }),\n        ),\n        totalCount: response.json.count,\n      }));\n    },\n    [user],\n  );\n\n  const handleSaveInDataset = () => {\n    setLoading(true);\n    const selectedColumns = datasource?.columns ?? [];\n\n    // The filters param is only used to test jinja templates.\n    // Remove the special filters entry from the templateParams\n    // before saving the dataset.\n    let templateParams;\n    if (isString(datasource?.templateParams)) {\n      const p = JSON.parse(datasource.templateParams);\n      /* eslint-disable-next-line no-underscore-dangle */\n      if (p._filters) {\n        /* eslint-disable-next-line no-underscore-dangle */\n        delete p._filters;\n        // eslint-disable-next-line no-param-reassign\n        templateParams = JSON.stringify(p);\n      }\n    }\n\n    dispatch(\n      createDatasource({\n        sql: datasource.sql,\n        dbId: datasource.dbId || datasource?.database?.id,\n        catalog: datasource?.catalog,\n        schema: datasource?.schema,\n        templateParams,\n        datasourceName: datasetName,\n      }),\n    )\n      .then((data: { id: number }) =>\n        postFormData(data.id, 'table', {\n          ...formDataWithDefaults,\n          datasource: `${data.id}__table`,\n          ...(defaultVizType === 'table' && {\n            all_columns: selectedColumns.map(column => column.column_name),\n          }),\n        }),\n      )\n      .then((key: string) => {\n        setLoading(false);\n        const url = mountExploreUrl(null, {\n          [URL_PARAMS.formDataKey.name]: key,\n        });\n        createWindow(url);\n        setDatasetName(getDefaultDatasetName());\n        onHide();\n      })\n      .catch(() => {\n        setLoading(false);\n        addDangerToast(t('An error occurred saving dataset'));\n      });\n  };\n\n  const handleOverwriteDatasetOption = (value: SelectValue, option: any) => {\n    setDatasetToOverwrite(option);\n    setSelectedDatasetToOverwrite(value);\n  };\n\n  const handleDatasetNameChange = (e: React.FormEvent<HTMLInputElement>) => {\n    // @ts-expect-error\n    setDatasetName(e.target.value);\n  };\n\n  const handleOverwriteCancel = () => {\n    setShouldOverwriteDataset(false);\n    setDatasetToOverwrite({});\n  };\n\n  const disableSaveAndExploreBtn =\n    (newOrOverwrite === DatasetRadioState.SaveNew &&\n      datasetName.length === 0) ||\n    (newOrOverwrite === DatasetRadioState.OverwriteDataset &&\n      isEmpty(selectedDatasetToOverwrite));\n\n  const filterAutocompleteOption = (\n    inputValue: string,\n    option: { value: string; datasetid: number },\n  ) => option.value.toLowerCase().includes(inputValue.toLowerCase());\n\n  return (\n    <StyledModal\n      show={visible}\n      title={t('Save or Overwrite Dataset')}\n      onHide={onHide}\n      footer={\n        <>\n          {newOrOverwrite === DatasetRadioState.SaveNew && (\n            <Button\n              disabled={disableSaveAndExploreBtn}\n              buttonStyle=\"primary\"\n              onClick={handleSaveInDataset}\n              loading={loading}\n            >\n              {buttonTextOnSave}\n            </Button>\n          )}\n          {newOrOverwrite === DatasetRadioState.OverwriteDataset && (\n            <>\n              {shouldOverwriteDataset && (\n                <Button onClick={handleOverwriteCancel}>{t('Back')}</Button>\n              )}\n              <Button\n                className=\"md\"\n                buttonStyle=\"primary\"\n                onClick={handleOverwriteDataset}\n                disabled={disableSaveAndExploreBtn}\n                loading={loading}\n              >\n                {buttonTextOnOverwrite}\n              </Button>\n            </>\n          )}\n        </>\n      }\n    >\n      <Styles>\n        {!shouldOverwriteDataset && (\n          <div className=\"sdm-body\">\n            {modalDescription && (\n              <div className=\"sdm-prompt\">{modalDescription}</div>\n            )}\n            <Radio.Group\n              onChange={(e: RadioChangeEvent) => {\n                setNewOrOverwrite(Number(e.target.value));\n              }}\n              value={newOrOverwrite}\n            >\n              <Radio className=\"sdm-radio\" value={1}>\n                {t('Save as new')}\n                <Input\n                  className=\"sdm-input\"\n                  value={datasetName}\n                  onChange={handleDatasetNameChange}\n                  disabled={newOrOverwrite !== 1}\n                />\n              </Radio>\n              <div className=\"sdm-overwrite-container\">\n                <Radio className=\"sdm-radio\" value={2}>\n                  {t('Overwrite existing')}\n                </Radio>\n                <div className=\"sdm-autocomplete\">\n                  <AsyncSelect\n                    allowClear\n                    showSearch\n                    placeholder={t('Select or type dataset name')}\n                    ariaLabel={t('Existing dataset')}\n                    onChange={handleOverwriteDatasetOption}\n                    options={input => loadDatasetOverwriteOptions(input)}\n                    value={selectedDatasetToOverwrite}\n                    filterOption={filterAutocompleteOption}\n                    disabled={newOrOverwrite !== 2}\n                    getPopupContainer={() => document.body}\n                  />\n                </div>\n              </div>\n            </Radio.Group>\n          </div>\n        )}\n        {shouldOverwriteDataset && (\n          <div className=\"sdm-overwrite-msg\">\n            {t('Are you sure you want to overwrite this dataset?')}\n          </div>\n        )}\n      </Styles>\n    </StyledModal>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}