{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { getClientErrorObject, SupersetClient, t } from '@superset-ui/core';\nimport Modal from 'src/components/Modal';\nimport Button from 'src/components/Button';\nimport { Switch } from 'src/components/Switch';\nimport Collapse from 'src/components/Collapse';\nimport { AntdForm, AsyncSelect, Col, Row, Select, Upload } from 'src/components';\nimport { UploadOutlined } from '@ant-design/icons';\nimport { Input, InputNumber } from 'src/components/Input';\nimport rison from 'rison';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { antdCollapseStyles, antDModalNoPaddingStyles, antDModalStyles, formStyles, StyledFormItem, StyledSwitchContainer } from './styles';\nimport ColumnsPreview from './ColumnsPreview';\nimport StyledFormItemWithTip from './StyledFormItemWithTip';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst CSVSpecificFields = [\n'delimiter',\n'skip_initial_space',\n'skip_blank_lines',\n'day_first',\n'column_data_types',\n'column_dates',\n'decimal_character',\n'null_values',\n'index_column',\n'header_row',\n'rows_to_read',\n'skip_rows'];\n\nconst ExcelSpecificFields = [\n'sheet_name',\n'column_dates',\n'decimal_character',\n'null_values',\n'index_column',\n'header_row',\n'rows_to_read',\n'skip_rows'];\n\nconst ColumnarSpecificFields = [];\nconst NonNullFields = ['rows_to_read', 'index_column'];\nconst AllSpecificFields = [\n...CSVSpecificFields,\n...ExcelSpecificFields,\n...ColumnarSpecificFields];\n\nconst UploadTypeToSpecificFields = {\n  csv: CSVSpecificFields,\n  excel: ExcelSpecificFields,\n  columnar: ColumnarSpecificFields\n};\nconst isFieldATypeSpecificField = (field, type) => UploadTypeToSpecificFields[type].includes(field);\nconst defaultUploadInfo = {\n  table_name: '',\n  schema: '',\n  sheet_name: undefined,\n  delimiter: ',',\n  already_exists: 'fail',\n  skip_initial_space: false,\n  skip_blank_lines: false,\n  day_first: false,\n  decimal_character: '.',\n  null_values: [],\n  header_row: '0',\n  rows_to_read: null,\n  skip_rows: '0',\n  column_dates: [],\n  index_column: null,\n  dataframe_index: false,\n  index_label: '',\n  columns_read: [],\n  column_data_types: ''\n};\n// Allowed extensions to accept for file upload, users can always override this\n// by selecting all file extensions on the OS file picker. Also \".txt\" will\n// allow all files to be selected.\nconst allowedExtensionsToAccept = {\n  csv: '.csv, .tsv',\n  excel: '.xls, .xlsx',\n  columnar: '.parquet, .zip'\n};\nexport const validateUploadFileExtension = (file, allowedExtensions) => {\n  const extensionMatch = file.name.match(/.+\\.([^.]+)$/);\n  if (!extensionMatch) {\n    return false;\n  }\n  const fileType = extensionMatch[1];\n  return allowedExtensions.includes(fileType);\n};\nconst SwitchContainer = ({ label, dataTest, children, ...switchProps }) => ___EmotionJSX(StyledSwitchContainer, null,\n___EmotionJSX(Switch, _extends({ \"data-test\": dataTest }, switchProps)),\n___EmotionJSX(\"div\", { className: \"switch-label\" }, label),\nchildren\n);\nconst UploadDataModal = ({ addDangerToast, addSuccessToast, onHide, show, allowedExtensions, type = 'csv' }) => {\n  const [form] = AntdForm.useForm();\n  const [currentDatabaseId, setCurrentDatabaseId] = useState(0);\n  const [fileList, setFileList] = useState([]);\n  const [columns, setColumns] = React.useState([]);\n  const [sheetNames, setSheetNames] = React.useState([]);\n  const [sheetsColumnNames, setSheetsColumnNames] = React.useState([]);\n  const [delimiter, setDelimiter] = useState(',');\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentSchema, setCurrentSchema] = useState();\n  const [currentDataframeIndex, setCurrentDataframeIndex] = useState(false);\n  const [previewUploadedFile, setPreviewUploadedFile] = useState(true);\n  const [fileLoading, setFileLoading] = useState(false);\n  const createTypeToEndpointMap = (databaseId) => ({\n    csv: `/api/v1/database/${databaseId}/csv_upload/`,\n    excel: `/api/v1/database/${databaseId}/excel_upload/`,\n    columnar: `/api/v1/database/${databaseId}/columnar_upload/`\n  });\n  const typeToFileMetadataEndpoint = {\n    csv: '/api/v1/database/csv_metadata/',\n    excel: '/api/v1/database/excel_metadata/',\n    columnar: '/api/v1/database/columnar_metadata/'\n  };\n  const nullValuesOptions = [\n  {\n    value: '\"\"',\n    label: 'Empty Strings \"\"'\n  },\n  {\n    value: 'None',\n    label: 'None'\n  },\n  {\n    value: 'nan',\n    label: 'nan'\n  },\n  {\n    value: 'null',\n    label: 'null'\n  },\n  {\n    value: 'N/A',\n    label: 'N/A'\n  }];\n\n  const delimiterOptions = [\n  {\n    value: ',',\n    label: 'Comma \",\"'\n  },\n  {\n    value: ';',\n    label: 'Semicolon \";\"'\n  },\n  {\n    value: '\\t',\n    label: 'Tab \"\\\\t\"'\n  },\n  {\n    value: '|',\n    label: 'Pipe'\n  }];\n\n  const tableAlreadyExistsOptions = [\n  {\n    value: 'fail',\n    label: 'Fail'\n  },\n  {\n    value: 'replace',\n    label: 'Replace'\n  },\n  {\n    value: 'append',\n    label: 'Append'\n  }];\n\n  const onChangePreviewUploadedFile = (value) => {\n    setPreviewUploadedFile(value);\n  };\n  const onChangeDatabase = (database) => {\n    setCurrentDatabaseId(database == null ? void 0 : database.value);\n    setCurrentSchema(undefined);\n    form.setFieldsValue({ schema: undefined });\n  };\n  const onChangeSchema = (schema) => {\n    setCurrentSchema(schema == null ? void 0 : schema.value);\n  };\n  const onChangeDelimiter = (value) => {\n    setDelimiter(value);\n  };\n  const clearModal = () => {\n    setFileList([]);\n    setColumns([]);\n    setCurrentSchema('');\n    setCurrentDatabaseId(0);\n    setSheetNames([]);\n    setIsLoading(false);\n    setDelimiter(',');\n    setPreviewUploadedFile(true);\n    setFileLoading(false);\n    setSheetsColumnNames([]);\n    form.resetFields();\n  };\n  const loadDatabaseOptions = useMemo(() => (input = '', page, pageSize) => {\n    const query = rison.encode_uri({\n      filters: [\n      {\n        col: 'allow_file_upload',\n        opr: 'eq',\n        value: true\n      }],\n\n      page,\n      page_size: pageSize\n    });\n    return SupersetClient.get({\n      endpoint: `/api/v1/database/?q=${query}`\n    }).then((response) => {\n      const list = response.json.result.map((item) => ({\n        value: item.id,\n        label: item.database_name\n      }));\n      return { data: list, totalCount: response.json.count };\n    });\n  }, []);\n  const loadSchemaOptions = useMemo(() => (input = '', page, pageSize) => {\n    if (!currentDatabaseId) {\n      return Promise.resolve({ data: [], totalCount: 0 });\n    }\n    return SupersetClient.get({\n      endpoint: `/api/v1/database/${currentDatabaseId}/schemas/`\n    }).then((response) => {\n      const list = response.json.result.map((item) => ({\n        value: item,\n        label: item\n      }));\n      return { data: list, totalCount: response.json.count };\n    });\n  }, [currentDatabaseId]);\n  const loadFileMetadata = (file) => {\n    const fields = form.getFieldsValue();\n    const mergedValues = { ...defaultUploadInfo, ...fields };\n    const formData = new FormData();\n    formData.append('file', file);\n    if (type === 'csv') {\n      formData.append('delimiter', mergedValues.delimiter);\n    }\n    setFileLoading(true);\n    return SupersetClient.post({\n      endpoint: typeToFileMetadataEndpoint[type],\n      body: formData,\n      headers: { Accept: 'application/json' }\n    }).\n    then((response) => {\n      const { items } = response.json.result;\n      if (items && type !== 'excel') {\n        setColumns(items[0].column_names);\n      } else\n      {\n        const { allSheetNames, sheetColumnNamesMap } = items.reduce((acc, item) => {\n          acc.allSheetNames.push(item.sheet_name);\n          acc.sheetColumnNamesMap[item.sheet_name] = item.column_names;\n          return acc;\n        }, { allSheetNames: [], sheetColumnNamesMap: {} });\n        setColumns(items[0].column_names);\n        setSheetNames(allSheetNames);\n        form.setFieldsValue({ sheet_name: allSheetNames[0] });\n        setSheetsColumnNames(sheetColumnNamesMap);\n      }\n    }).\n    catch((response) => getClientErrorObject(response).then((error) => {\n      addDangerToast(error.error || 'Error');\n      setColumns([]);\n      form.setFieldsValue({ sheet_name: undefined });\n      setSheetNames([]);\n    })).\n    finally(() => {\n      setFileLoading(false);\n    });\n  };\n  const getAllFieldsNotInType = () => {\n    const specificFields = UploadTypeToSpecificFields[type] || [];\n    return [...AllSpecificFields].filter((field) => !specificFields.includes(field));\n  };\n  const appendFormData = (formData, data) => {\n    const allFieldsNotInType = getAllFieldsNotInType();\n    Object.entries(data).forEach(([key, value]) => {\n      if (!(allFieldsNotInType.includes(key) ||\n      NonNullFields.includes(key) && (\n      value === undefined || value === null))) {\n        formData.append(key, value);\n      }\n    });\n  };\n  const onClose = () => {\n    clearModal();\n    onHide();\n  };\n  const onFinish = () => {var _fileList$;\n    const fields = form.getFieldsValue();\n    delete fields.database;\n    fields.schema = currentSchema;\n    const mergedValues = { ...defaultUploadInfo, ...fields };\n    const formData = new FormData();\n    const file = (_fileList$ = fileList[0]) == null ? void 0 : _fileList$.originFileObj;\n    if (file) {\n      formData.append('file', file);\n    }\n    appendFormData(formData, mergedValues);\n    setIsLoading(true);\n    const endpoint = createTypeToEndpointMap(currentDatabaseId)[type];\n    return SupersetClient.post({\n      endpoint,\n      body: formData,\n      headers: { Accept: 'application/json' }\n    }).\n    then(() => {\n      addSuccessToast(t('Data Imported'));\n      setIsLoading(false);\n      onClose();\n    }).\n    catch((response) => getClientErrorObject(response).then((error) => {\n      addDangerToast(error.error || 'Error');\n    })).\n    finally(() => {\n      setIsLoading(false);\n    });\n  };\n  const onRemoveFile = (removedFile) => {\n    setFileList(fileList.filter((file) => file.uid !== removedFile.uid));\n    setColumns([]);\n    setSheetNames([]);\n    form.setFieldsValue({ sheet_name: undefined });\n    return false;\n  };\n  const onSheetNameChange = (value) => {var _sheetsColumnNames$va;\n    setColumns((_sheetsColumnNames$va = sheetsColumnNames[value]) != null ? _sheetsColumnNames$va : []);\n  };\n  const columnsToOptions = () => columns.map((column) => ({\n    value: column,\n    label: column\n  }));\n  const sheetNamesToOptions = () => sheetNames.map((sheetName) => ({\n    value: sheetName,\n    label: sheetName\n  }));\n  const onChangeFile = async (info) => {\n    setFileList([\n    {\n      ...info.file,\n      status: 'done'\n    }]\n    );\n    if (!previewUploadedFile) {\n      return;\n    }\n    await loadFileMetadata(info.file.originFileObj);\n  };\n  useEffect(() => {\n    if (columns.length > 0 &&\n    fileList[0].originFileObj &&\n    fileList[0].originFileObj instanceof File) {\n      if (!previewUploadedFile) {\n        return;\n      }\n      loadFileMetadata(fileList[0].originFileObj).then((r) => r);\n    }\n  }, [delimiter]);\n  const validateUpload = (_, value) => {\n    if (fileList.length === 0) {\n      return Promise.reject(t('Uploading a file is required'));\n    }\n    if (!validateUploadFileExtension(fileList[0], allowedExtensions)) {\n      return Promise.reject(t('Upload a file with a valid extension. Valid: [%s]', allowedExtensions.join(',')));\n    }\n    return Promise.resolve();\n  };\n  const validateDatabase = (_, value) => {\n    if (!currentDatabaseId) {\n      return Promise.reject(t('Selecting a database is required'));\n    }\n    return Promise.resolve();\n  };\n  const uploadTitles = {\n    csv: t('CSV Upload'),\n    excel: t('Excel Upload'),\n    columnar: t('Columnar Upload')\n  };\n  const UploadTitle = () => {\n    const title = uploadTitles[type] || t('Upload');\n    return ___EmotionJSX(\"h4\", null, title);\n  };\n  return ___EmotionJSX(Modal, { css: (theme) => [\n    antDModalNoPaddingStyles,\n    antDModalStyles(theme),\n    formStyles(theme)],\n    primaryButtonLoading: isLoading, name: \"database\", \"data-test\": \"upload-modal\", onHandledPrimaryAction: form.submit, onHide: onClose, width: \"500px\", primaryButtonName: \"Upload\", centered: true, show: show, title: ___EmotionJSX(UploadTitle, null) },\n  ___EmotionJSX(AntdForm, { form: form, onFinish: onFinish, \"data-test\": \"dashboard-edit-properties-form\", layout: \"vertical\", initialValues: defaultUploadInfo },\n  ___EmotionJSX(Collapse, { expandIconPosition: \"right\", accordion: true, defaultActiveKey: \"general\", css: (theme) => antdCollapseStyles(theme) },\n  ___EmotionJSX(Collapse.Panel, { header: ___EmotionJSX(\"div\", null,\n    ___EmotionJSX(\"h4\", null, t('General information')),\n    ___EmotionJSX(\"p\", { className: \"helper\" }, t('Upload a file to a database.'))\n    ), key: \"general\" },\n  ___EmotionJSX(Row, null,\n  ___EmotionJSX(Col, { span: 12 },\n  ___EmotionJSX(StyledFormItem, { label: t('%(type)s File', { type }), name: \"file\", required: true, rules: [{ validator: validateUpload }] },\n  ___EmotionJSX(Upload, { name: \"modelFile\", id: \"modelFile\", \"data-test\": \"model-file-input\", accept: allowedExtensionsToAccept[type], fileList: fileList, onChange: onChangeFile, onRemove: onRemoveFile\n    // upload is handled by hook\n    , customRequest: () => {} },\n  ___EmotionJSX(Button, { \"aria-label\": t('Select'), icon: ___EmotionJSX(UploadOutlined, null), loading: fileLoading },\n  t('Select')\n  )\n  )\n  )\n  ),\n  ___EmotionJSX(Col, { span: 12 },\n  ___EmotionJSX(StyledFormItem, null,\n  ___EmotionJSX(SwitchContainer, { label: t('Preview uploaded file'), dataTest: \"previewUploadedFile\", onChange: onChangePreviewUploadedFile, checked: previewUploadedFile })\n  )\n  )\n  ),\n  previewUploadedFile && ___EmotionJSX(Row, null,\n  ___EmotionJSX(Col, { span: 24 },\n  ___EmotionJSX(ColumnsPreview, { columns: columns })\n  )\n  ),\n  ___EmotionJSX(Row, null,\n  ___EmotionJSX(Col, { span: 24 },\n  ___EmotionJSX(StyledFormItem, { label: t('Database'), required: true, name: \"database\", rules: [{ validator: validateDatabase }] },\n  ___EmotionJSX(AsyncSelect, { ariaLabel: t('Select a database'), options: loadDatabaseOptions, onChange: onChangeDatabase, allowClear: true, placeholder: t('Select a database to upload the file to') })\n  )\n  )\n  ),\n  ___EmotionJSX(Row, null,\n  ___EmotionJSX(Col, { span: 24 },\n  ___EmotionJSX(StyledFormItem, { label: t('Schema'), name: \"schema\" },\n  ___EmotionJSX(AsyncSelect, { ariaLabel: t('Select a schema'), options: loadSchemaOptions, onChange: onChangeSchema, allowClear: true, placeholder: t('Select a schema if the database supports this') })\n  )\n  )\n  ),\n  ___EmotionJSX(Row, null,\n  ___EmotionJSX(Col, { span: 24 },\n  ___EmotionJSX(StyledFormItem, { label: t('Table Name'), name: \"table_name\", required: true, rules: [\n    { required: true, message: 'Table name is required' }] },\n\n  ___EmotionJSX(Input, { \"aria-label\": t('Table Name'), name: \"table_name\", \"data-test\": \"properties-modal-name-input\", type: \"text\", placeholder: t('Name of table to be created') })\n  )\n  )\n  ),\n  isFieldATypeSpecificField('delimiter', type) && ___EmotionJSX(Row, null,\n  ___EmotionJSX(Col, { span: 24 },\n  ___EmotionJSX(StyledFormItemWithTip, { label: t('Delimiter'), tip: t('Select a delimiter for this data'), name: \"delimiter\" },\n  ___EmotionJSX(Select, { ariaLabel: t('Choose a delimiter'), options: delimiterOptions, onChange: onChangeDelimiter, allowNewOptions: true })\n  )\n  )\n  ),\n  isFieldATypeSpecificField('sheet_name', type) && ___EmotionJSX(Row, null,\n  ___EmotionJSX(Col, { span: 24 },\n  ___EmotionJSX(StyledFormItem, { label: t('Sheet name'), name: \"sheet_name\" },\n  ___EmotionJSX(Select, { ariaLabel: t('Choose sheet name'), options: sheetNamesToOptions(), onChange: onSheetNameChange, allowNewOptions: true, placeholder: t('Select a sheet name from the uploaded file') })\n  )\n  )\n  )\n  ),\n  ___EmotionJSX(Collapse.Panel, { header: ___EmotionJSX(\"div\", null,\n    ___EmotionJSX(\"h4\", null, t('File Settings')),\n    ___EmotionJSX(\"p\", { className: \"helper\" },\n    t('Adjust how spaces, blank lines, null values are handled and other file wide settings.')\n    )\n    ), key: \"2\" },\n  ___EmotionJSX(Row, null,\n  ___EmotionJSX(Col, { span: 24 },\n  ___EmotionJSX(StyledFormItemWithTip, { label: t('If Table Already Exists'), tip: t('What should happen if the table already exists'), name: \"already_exists\" },\n  ___EmotionJSX(Select, { ariaLabel: t('Choose already exists'), options: tableAlreadyExistsOptions, onChange: () => {} })\n  )\n  )\n  ),\n  isFieldATypeSpecificField('column_dates', type) && ___EmotionJSX(Row, null,\n  ___EmotionJSX(Col, { span: 24 },\n  ___EmotionJSX(StyledFormItem, { label: t('Columns To Be Parsed as Dates'), name: \"column_dates\" },\n  ___EmotionJSX(Select, { ariaLabel: t('Choose columns to be parsed as dates'), mode: \"multiple\", options: columnsToOptions(), allowClear: true, allowNewOptions: true, placeholder: t('A comma separated list of columns that should be parsed as dates') })\n  )\n  )\n  ),\n  isFieldATypeSpecificField('decimal_character', type) && ___EmotionJSX(Row, null,\n  ___EmotionJSX(Col, { span: 24 },\n  ___EmotionJSX(StyledFormItemWithTip, { label: t('Decimal Character'), tip: t('Character to interpret as decimal point'), name: \"decimal_character\" },\n  ___EmotionJSX(Input, { type: \"text\" })\n  )\n  )\n  ),\n  isFieldATypeSpecificField('null_values', type) && ___EmotionJSX(Row, null,\n  ___EmotionJSX(Col, { span: 24 },\n  ___EmotionJSX(StyledFormItemWithTip, { label: t('Null Values'), tip: t('Choose values that should be treated as null. Warning: Hive database supports only a single value'), name: \"null_values\" },\n  ___EmotionJSX(Select, { mode: \"multiple\", options: nullValuesOptions, allowClear: true, allowNewOptions: true })\n  )\n  )\n  ),\n  isFieldATypeSpecificField('skip_initial_space', type) && ___EmotionJSX(Row, null,\n  ___EmotionJSX(Col, { span: 24 },\n  ___EmotionJSX(StyledFormItem, { name: \"skip_initial_space\" },\n  ___EmotionJSX(SwitchContainer, { label: t('Skip spaces after delimiter'), dataTest: \"skipInitialSpace\" })\n  )\n  )\n  ),\n  isFieldATypeSpecificField('skip_blank_lines', type) && ___EmotionJSX(Row, null,\n  ___EmotionJSX(Col, { span: 24 },\n  ___EmotionJSX(StyledFormItem, { name: \"skip_blank_lines\" },\n  ___EmotionJSX(SwitchContainer, { label: t('Skip blank lines rather than interpreting them as Not A Number values'), dataTest: \"skipBlankLines\" })\n  )\n  )\n  ),\n  isFieldATypeSpecificField('day_first', type) && ___EmotionJSX(Row, null,\n  ___EmotionJSX(Col, { span: 24 },\n  ___EmotionJSX(StyledFormItem, { name: \"day_first\" },\n  ___EmotionJSX(SwitchContainer, { label: t('DD/MM format dates, international and European format'), dataTest: \"dayFirst\" })\n  )\n  )\n  )\n  ),\n  ___EmotionJSX(Collapse.Panel, { header: ___EmotionJSX(\"div\", null,\n    ___EmotionJSX(\"h4\", null, t('Columns')),\n    ___EmotionJSX(\"p\", { className: \"helper\" },\n    t('Adjust column settings such as specifying the columns to read, how duplicates are handled, column data types, and more.')\n    )\n    ), key: \"3\" },\n  ___EmotionJSX(Row, null,\n  ___EmotionJSX(Col, { span: 24 },\n  ___EmotionJSX(StyledFormItem, { label: t('Columns To Read'), name: \"columns_read\" },\n  ___EmotionJSX(Select, { ariaLabel: t('Choose columns to read'), mode: \"multiple\", options: columnsToOptions(), allowClear: true, allowNewOptions: true, placeholder: t('List of the column names that should be read') })\n  )\n  )\n  ),\n  isFieldATypeSpecificField('column_data_types', type) && ___EmotionJSX(Row, null,\n  ___EmotionJSX(Col, { span: 24 },\n  ___EmotionJSX(StyledFormItemWithTip, { label: t('Column Data Types'), tip: t('A dictionary with column names and their data types if you need to change the defaults. Example: {\"user_id\":\"int\"}. Check Python\\'s Pandas library for supported data types.'), name: \"column_data_types\" },\n  ___EmotionJSX(Input, { \"aria-label\": t('Column data types'), type: \"text\" })\n  )\n  )\n  ),\n  ___EmotionJSX(Row, null,\n  ___EmotionJSX(Col, { span: 24 },\n  ___EmotionJSX(StyledFormItem, { name: \"dataframe_index\" },\n  ___EmotionJSX(SwitchContainer, { label: t('Create dataframe index'), dataTest: \"dataFrameIndex\", onChange: setCurrentDataframeIndex })\n  )\n  )\n  ),\n  currentDataframeIndex &&\n  isFieldATypeSpecificField('index_column', type) && ___EmotionJSX(Row, null,\n  ___EmotionJSX(Col, { span: 24 },\n  ___EmotionJSX(StyledFormItemWithTip, { label: t('Index Column'), tip: t('Column to use as the index of the dataframe. If None is given, Index label is used.'), name: \"index_column\" },\n  ___EmotionJSX(Select, { ariaLabel: t('Choose index column'), options: columns.map((column) => ({\n      value: column,\n      label: column\n    })), allowClear: true, allowNewOptions: true })\n  )\n  )\n  ),\n  currentDataframeIndex && ___EmotionJSX(Row, null,\n  ___EmotionJSX(Col, { span: 24 },\n  ___EmotionJSX(StyledFormItemWithTip, { label: t('Index Label'), tip: t(\"Label for the index column. Don't use an existing column name.\"), name: \"index_label\" },\n  ___EmotionJSX(Input, { \"aria-label\": t('Index label'), type: \"text\" })\n  )\n  )\n  )\n  ),\n  isFieldATypeSpecificField('header_row', type) &&\n  isFieldATypeSpecificField('rows_to_read', type) &&\n  isFieldATypeSpecificField('skip_rows', type) && ___EmotionJSX(Collapse.Panel, { header: ___EmotionJSX(\"div\", null,\n    ___EmotionJSX(\"h4\", null, t('Rows')),\n    ___EmotionJSX(\"p\", { className: \"helper\" },\n    t('Set header rows and the number of rows to read or skip.')\n    )\n    ), key: \"4\" },\n  ___EmotionJSX(Row, null,\n  ___EmotionJSX(Col, { span: 8 },\n  ___EmotionJSX(StyledFormItemWithTip, { label: t('Header Row'), tip: t('Row containing the headers to use as column names (0 is first line of data).'), name: \"header_row\", rules: [\n    { required: true, message: 'Header row is required' }] },\n\n  ___EmotionJSX(InputNumber, { \"aria-label\": t('Header row'), type: \"text\", min: 0 })\n  )\n  ),\n  ___EmotionJSX(Col, { span: 8 },\n  ___EmotionJSX(StyledFormItemWithTip, { label: t('Rows to Read'), tip: t('Number of rows of file to read. Leave empty (default) to read all rows'), name: \"rows_to_read\" },\n  ___EmotionJSX(InputNumber, { \"aria-label\": t('Rows to read'), min: 1 })\n  )\n  ),\n  ___EmotionJSX(Col, { span: 8 },\n  ___EmotionJSX(StyledFormItemWithTip, { label: t('Skip Rows'), tip: t('Number of rows to skip at start of file.'), name: \"skip_rows\", rules: [\n    { required: true, message: 'Skip rows is required' }] },\n\n  ___EmotionJSX(InputNumber, { \"aria-label\": t('Skip rows'), min: 0 })\n  )\n  )\n  )\n  )\n  )\n  )\n  );\n};__signature__(UploadDataModal, \"useForm{[form]}\\nuseState{[currentDatabaseId, setCurrentDatabaseId](0)}\\nuseState{[fileList, setFileList]([])}\\nuseState{[columns, setColumns]([])}\\nuseState{[sheetNames, setSheetNames]([])}\\nuseState{[sheetsColumnNames, setSheetsColumnNames]([])}\\nuseState{[delimiter, setDelimiter](',')}\\nuseState{[isLoading, setIsLoading](false)}\\nuseState{[currentSchema, setCurrentSchema]}\\nuseState{[currentDataframeIndex, setCurrentDataframeIndex](false)}\\nuseState{[previewUploadedFile, setPreviewUploadedFile](true)}\\nuseState{[fileLoading, setFileLoading](false)}\\nuseMemo{loadDatabaseOptions}\\nuseMemo{loadSchemaOptions}\\nuseEffect{}\");const _default =\nwithToasts(UploadDataModal);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(CSVSpecificFields, \"CSVSpecificFields\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/features/databases/UploadDataModel/index.tsx\");reactHotLoader.register(ExcelSpecificFields, \"ExcelSpecificFields\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/features/databases/UploadDataModel/index.tsx\");reactHotLoader.register(ColumnarSpecificFields, \"ColumnarSpecificFields\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/features/databases/UploadDataModel/index.tsx\");reactHotLoader.register(NonNullFields, \"NonNullFields\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/features/databases/UploadDataModel/index.tsx\");reactHotLoader.register(AllSpecificFields, \"AllSpecificFields\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/features/databases/UploadDataModel/index.tsx\");reactHotLoader.register(UploadTypeToSpecificFields, \"UploadTypeToSpecificFields\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/features/databases/UploadDataModel/index.tsx\");reactHotLoader.register(isFieldATypeSpecificField, \"isFieldATypeSpecificField\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/features/databases/UploadDataModel/index.tsx\");reactHotLoader.register(defaultUploadInfo, \"defaultUploadInfo\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/features/databases/UploadDataModel/index.tsx\");reactHotLoader.register(allowedExtensionsToAccept, \"allowedExtensionsToAccept\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/features/databases/UploadDataModel/index.tsx\");reactHotLoader.register(validateUploadFileExtension, \"validateUploadFileExtension\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/features/databases/UploadDataModel/index.tsx\");reactHotLoader.register(SwitchContainer, \"SwitchContainer\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/features/databases/UploadDataModel/index.tsx\");reactHotLoader.register(UploadDataModal, \"UploadDataModal\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/features/databases/UploadDataModel/index.tsx\");reactHotLoader.register(_default, \"default\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/features/databases/UploadDataModel/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["React","useEffect","useMemo","useState","getClientErrorObject","SupersetClient","t","Modal","Button","Switch","Collapse","AntdForm","AsyncSelect","Col","Row","Select","Upload","UploadOutlined","Input","InputNumber","rison","withToasts","antdCollapseStyles","antDModalNoPaddingStyles","antDModalStyles","formStyles","StyledFormItem","StyledSwitchContainer","ColumnsPreview","StyledFormItemWithTip","jsx","___EmotionJSX","CSVSpecificFields","ExcelSpecificFields","ColumnarSpecificFields","NonNullFields","AllSpecificFields","UploadTypeToSpecificFields","csv","excel","columnar","isFieldATypeSpecificField","field","type","includes","defaultUploadInfo","table_name","schema","sheet_name","undefined","delimiter","already_exists","skip_initial_space","skip_blank_lines","day_first","decimal_character","null_values","header_row","rows_to_read","skip_rows","column_dates","index_column","dataframe_index","index_label","columns_read","column_data_types","allowedExtensionsToAccept","validateUploadFileExtension","file","allowedExtensions","extensionMatch","name","match","fileType","SwitchContainer","label","dataTest","children","switchProps","_extends","className","UploadDataModal","addDangerToast","addSuccessToast","onHide","show","form","useForm","currentDatabaseId","setCurrentDatabaseId","fileList","setFileList","columns","setColumns","sheetNames","setSheetNames","sheetsColumnNames","setSheetsColumnNames","setDelimiter","isLoading","setIsLoading","currentSchema","setCurrentSchema","currentDataframeIndex","setCurrentDataframeIndex","previewUploadedFile","setPreviewUploadedFile","fileLoading","setFileLoading","createTypeToEndpointMap","databaseId","typeToFileMetadataEndpoint","nullValuesOptions","value","delimiterOptions","tableAlreadyExistsOptions","onChangePreviewUploadedFile","onChangeDatabase","database","setFieldsValue","onChangeSchema","onChangeDelimiter","clearModal","resetFields","loadDatabaseOptions","input","page","pageSize","query","encode_uri","filters","col","opr","page_size","get","endpoint","then","response","list","json","result","map","item","id","database_name","data","totalCount","count","loadSchemaOptions","Promise","resolve","loadFileMetadata","fields","getFieldsValue","mergedValues","formData","FormData","append","post","body","headers","Accept","items","column_names","allSheetNames","sheetColumnNamesMap","reduce","acc","push","catch","error","finally","getAllFieldsNotInType","specificFields","filter","appendFormData","allFieldsNotInType","Object","entries","forEach","key","onClose","onFinish","_fileList$","originFileObj","onRemoveFile","removedFile","uid","onSheetNameChange","_sheetsColumnNames$va","columnsToOptions","column","sheetNamesToOptions","sheetName","onChangeFile","info","status","length","File","r","validateUpload","_","reject","join","validateDatabase","uploadTitles","UploadTitle","title","css","theme","primaryButtonLoading","onHandledPrimaryAction","submit","width","primaryButtonName","centered","layout","initialValues","expandIconPosition","accordion","defaultActiveKey","Panel","header","span","required","rules","validator","accept","onChange","onRemove","customRequest","icon","loading","checked","ariaLabel","options","allowClear","placeholder","message","tip","allowNewOptions","mode","min","__signature__","_default","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/features/databases/UploadDataModel/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { FunctionComponent, useEffect, useMemo, useState } from 'react';\nimport {\n  getClientErrorObject,\n  SupersetClient,\n  SupersetTheme,\n  t,\n} from '@superset-ui/core';\nimport Modal from 'src/components/Modal';\nimport Button from 'src/components/Button';\nimport { Switch, SwitchProps } from 'src/components/Switch';\nimport Collapse from 'src/components/Collapse';\nimport {\n  AntdForm,\n  AsyncSelect,\n  Col,\n  Row,\n  Select,\n  Upload,\n} from 'src/components';\nimport { UploadOutlined } from '@ant-design/icons';\nimport { Input, InputNumber } from 'src/components/Input';\nimport rison from 'rison';\nimport { UploadChangeParam, UploadFile } from 'antd/lib/upload/interface';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport {\n  antdCollapseStyles,\n  antDModalNoPaddingStyles,\n  antDModalStyles,\n  formStyles,\n  StyledFormItem,\n  StyledSwitchContainer,\n} from './styles';\nimport ColumnsPreview from './ColumnsPreview';\nimport StyledFormItemWithTip from './StyledFormItemWithTip';\n\ntype UploadType = 'csv' | 'excel' | 'columnar';\n\ninterface UploadDataModalProps {\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n  onHide: () => void;\n  show: boolean;\n  allowedExtensions: string[];\n  type: UploadType;\n}\n\nconst CSVSpecificFields = [\n  'delimiter',\n  'skip_initial_space',\n  'skip_blank_lines',\n  'day_first',\n  'column_data_types',\n  'column_dates',\n  'decimal_character',\n  'null_values',\n  'index_column',\n  'header_row',\n  'rows_to_read',\n  'skip_rows',\n];\n\nconst ExcelSpecificFields = [\n  'sheet_name',\n  'column_dates',\n  'decimal_character',\n  'null_values',\n  'index_column',\n  'header_row',\n  'rows_to_read',\n  'skip_rows',\n];\n\nconst ColumnarSpecificFields: string[] = [];\n\nconst NonNullFields = ['rows_to_read', 'index_column'];\n\nconst AllSpecificFields = [\n  ...CSVSpecificFields,\n  ...ExcelSpecificFields,\n  ...ColumnarSpecificFields,\n];\n\nconst UploadTypeToSpecificFields: Record<UploadType, string[]> = {\n  csv: CSVSpecificFields,\n  excel: ExcelSpecificFields,\n  columnar: ColumnarSpecificFields,\n};\n\nconst isFieldATypeSpecificField = (field: string, type: UploadType) =>\n  UploadTypeToSpecificFields[type].includes(field);\n\ninterface UploadInfo {\n  table_name: string;\n  schema: string;\n  sheet_name?: string;\n  delimiter: string;\n  already_exists: string;\n  skip_initial_space: boolean;\n  skip_blank_lines: boolean;\n  day_first: boolean;\n  decimal_character: string;\n  null_values: Array<string>;\n  header_row: string;\n  rows_to_read: string | null;\n  skip_rows: string;\n  column_dates: Array<string>;\n  index_column: string | null;\n  dataframe_index: boolean;\n  index_label: string;\n  columns_read: Array<string>;\n  column_data_types: string;\n}\n\ninterface SheetColumnNames {\n  sheet_name: string;\n  column_names: string[];\n}\n\nconst defaultUploadInfo: UploadInfo = {\n  table_name: '',\n  schema: '',\n  sheet_name: undefined,\n  delimiter: ',',\n  already_exists: 'fail',\n  skip_initial_space: false,\n  skip_blank_lines: false,\n  day_first: false,\n  decimal_character: '.',\n  null_values: [],\n  header_row: '0',\n  rows_to_read: null,\n  skip_rows: '0',\n  column_dates: [],\n  index_column: null,\n  dataframe_index: false,\n  index_label: '',\n  columns_read: [],\n  column_data_types: '',\n};\n\n// Allowed extensions to accept for file upload, users can always override this\n// by selecting all file extensions on the OS file picker. Also \".txt\" will\n// allow all files to be selected.\nconst allowedExtensionsToAccept = {\n  csv: '.csv, .tsv',\n  excel: '.xls, .xlsx',\n  columnar: '.parquet, .zip',\n};\n\nexport const validateUploadFileExtension = (\n  file: UploadFile<any>,\n  allowedExtensions: string[],\n) => {\n  const extensionMatch = file.name.match(/.+\\.([^.]+)$/);\n  if (!extensionMatch) {\n    return false;\n  }\n\n  const fileType = extensionMatch[1];\n  return allowedExtensions.includes(fileType);\n};\n\ninterface StyledSwitchContainerProps extends SwitchProps {\n  label: string;\n  dataTest: string;\n  children?: React.ReactNode;\n}\n\nconst SwitchContainer = ({\n  label,\n  dataTest,\n  children,\n  ...switchProps\n}: StyledSwitchContainerProps) => (\n  <StyledSwitchContainer>\n    <Switch data-test={dataTest} {...switchProps} />\n    <div className=\"switch-label\">{label}</div>\n    {children}\n  </StyledSwitchContainer>\n);\n\nconst UploadDataModal: FunctionComponent<UploadDataModalProps> = ({\n  addDangerToast,\n  addSuccessToast,\n  onHide,\n  show,\n  allowedExtensions,\n  type = 'csv',\n}) => {\n  const [form] = AntdForm.useForm();\n  const [currentDatabaseId, setCurrentDatabaseId] = useState<number>(0);\n  const [fileList, setFileList] = useState<UploadFile[]>([]);\n  const [columns, setColumns] = React.useState<string[]>([]);\n  const [sheetNames, setSheetNames] = React.useState<string[]>([]);\n  const [sheetsColumnNames, setSheetsColumnNames] = React.useState<\n    SheetColumnNames[]\n  >([]);\n  const [delimiter, setDelimiter] = useState<string>(',');\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [currentSchema, setCurrentSchema] = useState<string | undefined>();\n  const [currentDataframeIndex, setCurrentDataframeIndex] =\n    useState<boolean>(false);\n  const [previewUploadedFile, setPreviewUploadedFile] = useState<boolean>(true);\n  const [fileLoading, setFileLoading] = useState<boolean>(false);\n\n  const createTypeToEndpointMap = (\n    databaseId: number,\n  ): { [key: string]: string } => ({\n    csv: `/api/v1/database/${databaseId}/csv_upload/`,\n    excel: `/api/v1/database/${databaseId}/excel_upload/`,\n    columnar: `/api/v1/database/${databaseId}/columnar_upload/`,\n  });\n\n  const typeToFileMetadataEndpoint = {\n    csv: '/api/v1/database/csv_metadata/',\n    excel: '/api/v1/database/excel_metadata/',\n    columnar: '/api/v1/database/columnar_metadata/',\n  };\n\n  const nullValuesOptions = [\n    {\n      value: '\"\"',\n      label: 'Empty Strings \"\"',\n    },\n    {\n      value: 'None',\n      label: 'None',\n    },\n    {\n      value: 'nan',\n      label: 'nan',\n    },\n    {\n      value: 'null',\n      label: 'null',\n    },\n    {\n      value: 'N/A',\n      label: 'N/A',\n    },\n  ];\n\n  const delimiterOptions = [\n    {\n      value: ',',\n      label: 'Comma \",\"',\n    },\n    {\n      value: ';',\n      label: 'Semicolon \";\"',\n    },\n    {\n      value: '\\t',\n      label: 'Tab \"\\\\t\"',\n    },\n    {\n      value: '|',\n      label: 'Pipe',\n    },\n  ];\n\n  const tableAlreadyExistsOptions = [\n    {\n      value: 'fail',\n      label: 'Fail',\n    },\n    {\n      value: 'replace',\n      label: 'Replace',\n    },\n    {\n      value: 'append',\n      label: 'Append',\n    },\n  ];\n\n  const onChangePreviewUploadedFile = (value: boolean) => {\n    setPreviewUploadedFile(value);\n  };\n\n  const onChangeDatabase = (database: { value: number; label: string }) => {\n    setCurrentDatabaseId(database?.value);\n    setCurrentSchema(undefined);\n    form.setFieldsValue({ schema: undefined });\n  };\n\n  const onChangeSchema = (schema: { value: string; label: string }) => {\n    setCurrentSchema(schema?.value);\n  };\n\n  const onChangeDelimiter = (value: string) => {\n    setDelimiter(value);\n  };\n\n  const clearModal = () => {\n    setFileList([]);\n    setColumns([]);\n    setCurrentSchema('');\n    setCurrentDatabaseId(0);\n    setSheetNames([]);\n    setIsLoading(false);\n    setDelimiter(',');\n    setPreviewUploadedFile(true);\n    setFileLoading(false);\n    setSheetsColumnNames([]);\n    form.resetFields();\n  };\n\n  const loadDatabaseOptions = useMemo(\n    () =>\n      (input = '', page: number, pageSize: number) => {\n        const query = rison.encode_uri({\n          filters: [\n            {\n              col: 'allow_file_upload',\n              opr: 'eq',\n              value: true,\n            },\n          ],\n          page,\n          page_size: pageSize,\n        });\n        return SupersetClient.get({\n          endpoint: `/api/v1/database/?q=${query}`,\n        }).then(response => {\n          const list = response.json.result.map(\n            (item: { id: number; database_name: string }) => ({\n              value: item.id,\n              label: item.database_name,\n            }),\n          );\n          return { data: list, totalCount: response.json.count };\n        });\n      },\n    [],\n  );\n\n  const loadSchemaOptions = useMemo(\n    () =>\n      (input = '', page: number, pageSize: number) => {\n        if (!currentDatabaseId) {\n          return Promise.resolve({ data: [], totalCount: 0 });\n        }\n        return SupersetClient.get({\n          endpoint: `/api/v1/database/${currentDatabaseId}/schemas/`,\n        }).then(response => {\n          const list = response.json.result.map((item: string) => ({\n            value: item,\n            label: item,\n          }));\n          return { data: list, totalCount: response.json.count };\n        });\n      },\n    [currentDatabaseId],\n  );\n\n  const loadFileMetadata = (file: File) => {\n    const fields = form.getFieldsValue();\n    const mergedValues = { ...defaultUploadInfo, ...fields };\n    const formData = new FormData();\n    formData.append('file', file);\n    if (type === 'csv') {\n      formData.append('delimiter', mergedValues.delimiter);\n    }\n    setFileLoading(true);\n    return SupersetClient.post({\n      endpoint: typeToFileMetadataEndpoint[type],\n      body: formData,\n      headers: { Accept: 'application/json' },\n    })\n      .then(response => {\n        const { items } = response.json.result;\n        if (items && type !== 'excel') {\n          setColumns(items[0].column_names);\n        } else {\n          const { allSheetNames, sheetColumnNamesMap } = items.reduce(\n            (\n              acc: {\n                allSheetNames: any[];\n                sheetColumnNamesMap: Record<string, string[]>;\n              },\n              item: { sheet_name: any; column_names: any },\n            ) => {\n              acc.allSheetNames.push(item.sheet_name);\n              acc.sheetColumnNamesMap[item.sheet_name] = item.column_names;\n              return acc;\n            },\n            { allSheetNames: [], sheetColumnNamesMap: {} },\n          );\n          setColumns(items[0].column_names);\n          setSheetNames(allSheetNames);\n          form.setFieldsValue({ sheet_name: allSheetNames[0] });\n          setSheetsColumnNames(sheetColumnNamesMap);\n        }\n      })\n      .catch(response =>\n        getClientErrorObject(response).then(error => {\n          addDangerToast(error.error || 'Error');\n          setColumns([]);\n          form.setFieldsValue({ sheet_name: undefined });\n          setSheetNames([]);\n        }),\n      )\n      .finally(() => {\n        setFileLoading(false);\n      });\n  };\n\n  const getAllFieldsNotInType = (): string[] => {\n    const specificFields = UploadTypeToSpecificFields[type] || [];\n    return [...AllSpecificFields].filter(\n      field => !specificFields.includes(field),\n    );\n  };\n\n  const appendFormData = (formData: FormData, data: Record<string, any>) => {\n    const allFieldsNotInType = getAllFieldsNotInType();\n    Object.entries(data).forEach(([key, value]) => {\n      if (\n        !(\n          allFieldsNotInType.includes(key) ||\n          (NonNullFields.includes(key) &&\n            (value === undefined || value === null))\n        )\n      ) {\n        formData.append(key, value);\n      }\n    });\n  };\n\n  const onClose = () => {\n    clearModal();\n    onHide();\n  };\n\n  const onFinish = () => {\n    const fields = form.getFieldsValue();\n    delete fields.database;\n    fields.schema = currentSchema;\n    const mergedValues = { ...defaultUploadInfo, ...fields };\n    const formData = new FormData();\n    const file = fileList[0]?.originFileObj;\n    if (file) {\n      formData.append('file', file);\n    }\n    appendFormData(formData, mergedValues);\n    setIsLoading(true);\n    const endpoint = createTypeToEndpointMap(currentDatabaseId)[type];\n    return SupersetClient.post({\n      endpoint,\n      body: formData,\n      headers: { Accept: 'application/json' },\n    })\n      .then(() => {\n        addSuccessToast(t('Data Imported'));\n        setIsLoading(false);\n        onClose();\n      })\n      .catch(response =>\n        getClientErrorObject(response).then(error => {\n          addDangerToast(error.error || 'Error');\n        }),\n      )\n      .finally(() => {\n        setIsLoading(false);\n      });\n  };\n\n  const onRemoveFile = (removedFile: UploadFile) => {\n    setFileList(fileList.filter(file => file.uid !== removedFile.uid));\n    setColumns([]);\n    setSheetNames([]);\n    form.setFieldsValue({ sheet_name: undefined });\n    return false;\n  };\n\n  const onSheetNameChange = (value: string) => {\n    setColumns(sheetsColumnNames[value] ?? []);\n  };\n\n  const columnsToOptions = () =>\n    columns.map(column => ({\n      value: column,\n      label: column,\n    }));\n\n  const sheetNamesToOptions = () =>\n    sheetNames.map(sheetName => ({\n      value: sheetName,\n      label: sheetName,\n    }));\n\n  const onChangeFile = async (info: UploadChangeParam<any>) => {\n    setFileList([\n      {\n        ...info.file,\n        status: 'done',\n      },\n    ]);\n    if (!previewUploadedFile) {\n      return;\n    }\n    await loadFileMetadata(info.file.originFileObj);\n  };\n\n  useEffect(() => {\n    if (\n      columns.length > 0 &&\n      fileList[0].originFileObj &&\n      fileList[0].originFileObj instanceof File\n    ) {\n      if (!previewUploadedFile) {\n        return;\n      }\n      loadFileMetadata(fileList[0].originFileObj).then(r => r);\n    }\n  }, [delimiter]);\n\n  const validateUpload = (_: any, value: string) => {\n    if (fileList.length === 0) {\n      return Promise.reject(t('Uploading a file is required'));\n    }\n    if (!validateUploadFileExtension(fileList[0], allowedExtensions)) {\n      return Promise.reject(\n        t(\n          'Upload a file with a valid extension. Valid: [%s]',\n          allowedExtensions.join(','),\n        ),\n      );\n    }\n    return Promise.resolve();\n  };\n\n  const validateDatabase = (_: any, value: string) => {\n    if (!currentDatabaseId) {\n      return Promise.reject(t('Selecting a database is required'));\n    }\n    return Promise.resolve();\n  };\n\n  const uploadTitles = {\n    csv: t('CSV Upload'),\n    excel: t('Excel Upload'),\n    columnar: t('Columnar Upload'),\n  };\n\n  const UploadTitle: React.FC = () => {\n    const title = uploadTitles[type] || t('Upload');\n    return <h4>{title}</h4>;\n  };\n\n  return (\n    <Modal\n      css={(theme: SupersetTheme) => [\n        antDModalNoPaddingStyles,\n        antDModalStyles(theme),\n        formStyles(theme),\n      ]}\n      primaryButtonLoading={isLoading}\n      name=\"database\"\n      data-test=\"upload-modal\"\n      onHandledPrimaryAction={form.submit}\n      onHide={onClose}\n      width=\"500px\"\n      primaryButtonName=\"Upload\"\n      centered\n      show={show}\n      title={<UploadTitle />}\n    >\n      <AntdForm\n        form={form}\n        onFinish={onFinish}\n        data-test=\"dashboard-edit-properties-form\"\n        layout=\"vertical\"\n        initialValues={defaultUploadInfo}\n      >\n        <Collapse\n          expandIconPosition=\"right\"\n          accordion\n          defaultActiveKey=\"general\"\n          css={(theme: SupersetTheme) => antdCollapseStyles(theme)}\n        >\n          <Collapse.Panel\n            header={\n              <div>\n                <h4>{t('General information')}</h4>\n                <p className=\"helper\">{t('Upload a file to a database.')}</p>\n              </div>\n            }\n            key=\"general\"\n          >\n            <Row>\n              <Col span={12}>\n                <StyledFormItem\n                  label={t('%(type)s File', { type })}\n                  name=\"file\"\n                  required\n                  rules={[{ validator: validateUpload }]}\n                >\n                  <Upload\n                    name=\"modelFile\"\n                    id=\"modelFile\"\n                    data-test=\"model-file-input\"\n                    accept={allowedExtensionsToAccept[type]}\n                    fileList={fileList}\n                    onChange={onChangeFile}\n                    onRemove={onRemoveFile}\n                    // upload is handled by hook\n                    customRequest={() => {}}\n                  >\n                    <Button\n                      aria-label={t('Select')}\n                      icon={<UploadOutlined />}\n                      loading={fileLoading}\n                    >\n                      {t('Select')}\n                    </Button>\n                  </Upload>\n                </StyledFormItem>\n              </Col>\n              <Col span={12}>\n                <StyledFormItem>\n                  <SwitchContainer\n                    label={t('Preview uploaded file')}\n                    dataTest=\"previewUploadedFile\"\n                    onChange={onChangePreviewUploadedFile}\n                    checked={previewUploadedFile}\n                  />\n                </StyledFormItem>\n              </Col>\n            </Row>\n            {previewUploadedFile && (\n              <Row>\n                <Col span={24}>\n                  <ColumnsPreview columns={columns} />\n                </Col>\n              </Row>\n            )}\n            <Row>\n              <Col span={24}>\n                <StyledFormItem\n                  label={t('Database')}\n                  required\n                  name=\"database\"\n                  rules={[{ validator: validateDatabase }]}\n                >\n                  <AsyncSelect\n                    ariaLabel={t('Select a database')}\n                    options={loadDatabaseOptions}\n                    onChange={onChangeDatabase}\n                    allowClear\n                    placeholder={t('Select a database to upload the file to')}\n                  />\n                </StyledFormItem>\n              </Col>\n            </Row>\n            <Row>\n              <Col span={24}>\n                <StyledFormItem label={t('Schema')} name=\"schema\">\n                  <AsyncSelect\n                    ariaLabel={t('Select a schema')}\n                    options={loadSchemaOptions}\n                    onChange={onChangeSchema}\n                    allowClear\n                    placeholder={t(\n                      'Select a schema if the database supports this',\n                    )}\n                  />\n                </StyledFormItem>\n              </Col>\n            </Row>\n            <Row>\n              <Col span={24}>\n                <StyledFormItem\n                  label={t('Table Name')}\n                  name=\"table_name\"\n                  required\n                  rules={[\n                    { required: true, message: 'Table name is required' },\n                  ]}\n                >\n                  <Input\n                    aria-label={t('Table Name')}\n                    name=\"table_name\"\n                    data-test=\"properties-modal-name-input\"\n                    type=\"text\"\n                    placeholder={t('Name of table to be created')}\n                  />\n                </StyledFormItem>\n              </Col>\n            </Row>\n            {isFieldATypeSpecificField('delimiter', type) && (\n              <Row>\n                <Col span={24}>\n                  <StyledFormItemWithTip\n                    label={t('Delimiter')}\n                    tip={t('Select a delimiter for this data')}\n                    name=\"delimiter\"\n                  >\n                    <Select\n                      ariaLabel={t('Choose a delimiter')}\n                      options={delimiterOptions}\n                      onChange={onChangeDelimiter}\n                      allowNewOptions\n                    />\n                  </StyledFormItemWithTip>\n                </Col>\n              </Row>\n            )}\n            {isFieldATypeSpecificField('sheet_name', type) && (\n              <Row>\n                <Col span={24}>\n                  <StyledFormItem label={t('Sheet name')} name=\"sheet_name\">\n                    <Select\n                      ariaLabel={t('Choose sheet name')}\n                      options={sheetNamesToOptions()}\n                      onChange={onSheetNameChange}\n                      allowNewOptions\n                      placeholder={t(\n                        'Select a sheet name from the uploaded file',\n                      )}\n                    />\n                  </StyledFormItem>\n                </Col>\n              </Row>\n            )}\n          </Collapse.Panel>\n          <Collapse.Panel\n            header={\n              <div>\n                <h4>{t('File Settings')}</h4>\n                <p className=\"helper\">\n                  {t(\n                    'Adjust how spaces, blank lines, null values are handled and other file wide settings.',\n                  )}\n                </p>\n              </div>\n            }\n            key=\"2\"\n          >\n            <Row>\n              <Col span={24}>\n                <StyledFormItemWithTip\n                  label={t('If Table Already Exists')}\n                  tip={t('What should happen if the table already exists')}\n                  name=\"already_exists\"\n                >\n                  <Select\n                    ariaLabel={t('Choose already exists')}\n                    options={tableAlreadyExistsOptions}\n                    onChange={() => {}}\n                  />\n                </StyledFormItemWithTip>\n              </Col>\n            </Row>\n            {isFieldATypeSpecificField('column_dates', type) && (\n              <Row>\n                <Col span={24}>\n                  <StyledFormItem\n                    label={t('Columns To Be Parsed as Dates')}\n                    name=\"column_dates\"\n                  >\n                    <Select\n                      ariaLabel={t('Choose columns to be parsed as dates')}\n                      mode=\"multiple\"\n                      options={columnsToOptions()}\n                      allowClear\n                      allowNewOptions\n                      placeholder={t(\n                        'A comma separated list of columns that should be parsed as dates',\n                      )}\n                    />\n                  </StyledFormItem>\n                </Col>\n              </Row>\n            )}\n            {isFieldATypeSpecificField('decimal_character', type) && (\n              <Row>\n                <Col span={24}>\n                  <StyledFormItemWithTip\n                    label={t('Decimal Character')}\n                    tip={t('Character to interpret as decimal point')}\n                    name=\"decimal_character\"\n                  >\n                    <Input type=\"text\" />\n                  </StyledFormItemWithTip>\n                </Col>\n              </Row>\n            )}\n            {isFieldATypeSpecificField('null_values', type) && (\n              <Row>\n                <Col span={24}>\n                  <StyledFormItemWithTip\n                    label={t('Null Values')}\n                    tip={t(\n                      'Choose values that should be treated as null. Warning: Hive database supports only a single value',\n                    )}\n                    name=\"null_values\"\n                  >\n                    <Select\n                      mode=\"multiple\"\n                      options={nullValuesOptions}\n                      allowClear\n                      allowNewOptions\n                    />\n                  </StyledFormItemWithTip>\n                </Col>\n              </Row>\n            )}\n            {isFieldATypeSpecificField('skip_initial_space', type) && (\n              <Row>\n                <Col span={24}>\n                  <StyledFormItem name=\"skip_initial_space\">\n                    <SwitchContainer\n                      label={t('Skip spaces after delimiter')}\n                      dataTest=\"skipInitialSpace\"\n                    />\n                  </StyledFormItem>\n                </Col>\n              </Row>\n            )}\n            {isFieldATypeSpecificField('skip_blank_lines', type) && (\n              <Row>\n                <Col span={24}>\n                  <StyledFormItem name=\"skip_blank_lines\">\n                    <SwitchContainer\n                      label={t(\n                        'Skip blank lines rather than interpreting them as Not A Number values',\n                      )}\n                      dataTest=\"skipBlankLines\"\n                    />\n                  </StyledFormItem>\n                </Col>\n              </Row>\n            )}\n            {isFieldATypeSpecificField('day_first', type) && (\n              <Row>\n                <Col span={24}>\n                  <StyledFormItem name=\"day_first\">\n                    <SwitchContainer\n                      label={t(\n                        'DD/MM format dates, international and European format',\n                      )}\n                      dataTest=\"dayFirst\"\n                    />\n                  </StyledFormItem>\n                </Col>\n              </Row>\n            )}\n          </Collapse.Panel>\n          <Collapse.Panel\n            header={\n              <div>\n                <h4>{t('Columns')}</h4>\n                <p className=\"helper\">\n                  {t(\n                    'Adjust column settings such as specifying the columns to read, how duplicates are handled, column data types, and more.',\n                  )}\n                </p>\n              </div>\n            }\n            key=\"3\"\n          >\n            <Row>\n              <Col span={24}>\n                <StyledFormItem\n                  label={t('Columns To Read')}\n                  name=\"columns_read\"\n                >\n                  <Select\n                    ariaLabel={t('Choose columns to read')}\n                    mode=\"multiple\"\n                    options={columnsToOptions()}\n                    allowClear\n                    allowNewOptions\n                    placeholder={t(\n                      'List of the column names that should be read',\n                    )}\n                  />\n                </StyledFormItem>\n              </Col>\n            </Row>\n            {isFieldATypeSpecificField('column_data_types', type) && (\n              <Row>\n                <Col span={24}>\n                  <StyledFormItemWithTip\n                    label={t('Column Data Types')}\n                    tip={t(\n                      'A dictionary with column names and their data types if you need to change the defaults. Example: {\"user_id\":\"int\"}. Check Python\\'s Pandas library for supported data types.',\n                    )}\n                    name=\"column_data_types\"\n                  >\n                    <Input aria-label={t('Column data types')} type=\"text\" />\n                  </StyledFormItemWithTip>\n                </Col>\n              </Row>\n            )}\n            <Row>\n              <Col span={24}>\n                <StyledFormItem name=\"dataframe_index\">\n                  <SwitchContainer\n                    label={t('Create dataframe index')}\n                    dataTest=\"dataFrameIndex\"\n                    onChange={setCurrentDataframeIndex}\n                  />\n                </StyledFormItem>\n              </Col>\n            </Row>\n            {currentDataframeIndex &&\n              isFieldATypeSpecificField('index_column', type) && (\n                <Row>\n                  <Col span={24}>\n                    <StyledFormItemWithTip\n                      label={t('Index Column')}\n                      tip={t(\n                        'Column to use as the index of the dataframe. If None is given, Index label is used.',\n                      )}\n                      name=\"index_column\"\n                    >\n                      <Select\n                        ariaLabel={t('Choose index column')}\n                        options={columns.map(column => ({\n                          value: column,\n                          label: column,\n                        }))}\n                        allowClear\n                        allowNewOptions\n                      />\n                    </StyledFormItemWithTip>\n                  </Col>\n                </Row>\n              )}\n            {currentDataframeIndex && (\n              <Row>\n                <Col span={24}>\n                  <StyledFormItemWithTip\n                    label={t('Index Label')}\n                    tip={t(\n                      \"Label for the index column. Don't use an existing column name.\",\n                    )}\n                    name=\"index_label\"\n                  >\n                    <Input aria-label={t('Index label')} type=\"text\" />\n                  </StyledFormItemWithTip>\n                </Col>\n              </Row>\n            )}\n          </Collapse.Panel>\n          {isFieldATypeSpecificField('header_row', type) &&\n            isFieldATypeSpecificField('rows_to_read', type) &&\n            isFieldATypeSpecificField('skip_rows', type) && (\n              <Collapse.Panel\n                header={\n                  <div>\n                    <h4>{t('Rows')}</h4>\n                    <p className=\"helper\">\n                      {t(\n                        'Set header rows and the number of rows to read or skip.',\n                      )}\n                    </p>\n                  </div>\n                }\n                key=\"4\"\n              >\n                <Row>\n                  <Col span={8}>\n                    <StyledFormItemWithTip\n                      label={t('Header Row')}\n                      tip={t(\n                        'Row containing the headers to use as column names (0 is first line of data).',\n                      )}\n                      name=\"header_row\"\n                      rules={[\n                        { required: true, message: 'Header row is required' },\n                      ]}\n                    >\n                      <InputNumber\n                        aria-label={t('Header row')}\n                        type=\"text\"\n                        min={0}\n                      />\n                    </StyledFormItemWithTip>\n                  </Col>\n                  <Col span={8}>\n                    <StyledFormItemWithTip\n                      label={t('Rows to Read')}\n                      tip={t(\n                        'Number of rows of file to read. Leave empty (default) to read all rows',\n                      )}\n                      name=\"rows_to_read\"\n                    >\n                      <InputNumber aria-label={t('Rows to read')} min={1} />\n                    </StyledFormItemWithTip>\n                  </Col>\n                  <Col span={8}>\n                    <StyledFormItemWithTip\n                      label={t('Skip Rows')}\n                      tip={t('Number of rows to skip at start of file.')}\n                      name=\"skip_rows\"\n                      rules={[\n                        { required: true, message: 'Skip rows is required' },\n                      ]}\n                    >\n                      <InputNumber aria-label={t('Skip rows')} min={0} />\n                    </StyledFormItemWithTip>\n                  </Col>\n                </Row>\n              </Collapse.Panel>\n            )}\n        </Collapse>\n      </AntdForm>\n    </Modal>\n  );\n};\n\nexport default withToasts(UploadDataModal);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}