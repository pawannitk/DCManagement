{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useEffect, useLayoutEffect, useRef, useState } from 'react';\nimport { css, t } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { useResizeDetector } from 'react-resize-detector';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst titleStyles = (theme) => css`\n  display: flex;\n  font-size: ${theme.typography.sizes.xl}px;\n  font-weight: ${theme.typography.weights.bold};\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n\n  & .dynamic-title,\n  & .dynamic-title-input {\n    display: inline-block;\n    max-width: 100%;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  }\n\n  & .dynamic-title {\n    cursor: default;\n  }\n  & .dynamic-title-input {\n    border: none;\n    padding: 0;\n    outline: none;\n\n    &::placeholder {\n      color: ${theme.colors.grayscale.light1};\n    }\n  }\n\n  & .input-sizer {\n    position: absolute;\n    left: -9999px;\n    display: inline-block;\n  }\n`;\nexport const DynamicEditableTitle = ({ title, placeholder, onSave, canEdit, label }) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [currentTitle, setCurrentTitle] = useState(title || '');\n  const contentRef = useRef(null);\n  const [showTooltip, setShowTooltip] = useState(false);\n  const { width: inputWidth, ref: sizerRef } = useResizeDetector();\n  const { width: containerWidth, ref: containerRef } = useResizeDetector({\n    refreshMode: 'debounce'\n  });\n  useEffect(() => {\n    setCurrentTitle(title);\n  }, [title]);\n  useEffect(() => {\n    if (isEditing && contentRef != null && contentRef.current) {\n      contentRef.current.focus();\n      // move cursor and scroll to the end\n      if (contentRef.current.setSelectionRange) {\n        const { length } = contentRef.current.value;\n        contentRef.current.setSelectionRange(length, length);\n        contentRef.current.scrollLeft = contentRef.current.scrollWidth;\n      }\n    }\n  }, [isEditing]);\n  // a trick to make the input grow when user types text\n  // we make additional span component, place it somewhere out of view and copy input\n  // then we can measure the width of that span to resize the input element\n  useLayoutEffect(() => {\n    if (sizerRef != null && sizerRef.current) {\n      sizerRef.current.textContent = currentTitle || placeholder;\n    }\n  }, [currentTitle, placeholder, sizerRef]);\n  useEffect(() => {\n    if (contentRef.current &&\n    contentRef.current.scrollWidth > contentRef.current.clientWidth) {\n      setShowTooltip(true);\n    } else\n    {\n      setShowTooltip(false);\n    }\n  }, [inputWidth, containerWidth]);\n  const handleClick = useCallback(() => {\n    if (!canEdit || isEditing) {\n      return;\n    }\n    setIsEditing(true);\n  }, [canEdit, isEditing]);\n  const handleBlur = useCallback(() => {\n    if (!canEdit) {\n      return;\n    }\n    const formattedTitle = currentTitle.trim();\n    setCurrentTitle(formattedTitle);\n    if (title !== formattedTitle) {\n      onSave(formattedTitle);\n    }\n    setIsEditing(false);\n  }, [canEdit, currentTitle, onSave, title]);\n  const handleChange = useCallback((ev) => {\n    if (!canEdit || !isEditing) {\n      return;\n    }\n    setCurrentTitle(ev.target.value);\n  }, [canEdit, isEditing]);\n  const handleKeyPress = useCallback((ev) => {\n    if (!canEdit) {\n      return;\n    }\n    if (ev.key === 'Enter') {var _contentRef$current;\n      ev.preventDefault();\n      (_contentRef$current = contentRef.current) == null ? void 0 : _contentRef$current.blur();\n    }\n  }, [canEdit]);\n  return ___EmotionJSX(\"div\", { css: titleStyles, ref: containerRef },\n  ___EmotionJSX(Tooltip, { id: \"title-tooltip\", title: showTooltip && currentTitle && !isEditing ? currentTitle : null },\n  canEdit ? ___EmotionJSX(\"input\", { \"data-test\": \"editable-title-input\", className: \"dynamic-title-input\", \"aria-label\": label != null ? label : t('Title'), ref: contentRef, onChange: handleChange, onBlur: handleBlur, onClick: handleClick, onKeyPress: handleKeyPress, placeholder: placeholder, value: currentTitle, css: css`\n              cursor: ${isEditing ? 'text' : 'pointer'};\n\n              ${inputWidth &&\n    inputWidth > 0 &&\n    css`\n                width: ${inputWidth + 1}px;\n              `}\n            ` }) : ___EmotionJSX(\"span\", { className: \"dynamic-title\", \"aria-label\": label != null ? label : t('Title'), ref: contentRef, \"data-test\": \"editable-title\" },\n  currentTitle\n  )\n  ),\n  ___EmotionJSX(\"span\", { ref: sizerRef, className: \"input-sizer\", \"aria-hidden\": true, tabIndex: -1 })\n  );\n};__signature__(DynamicEditableTitle, \"useState{[isEditing, setIsEditing](false)}\\nuseState{[currentTitle, setCurrentTitle](title || '')}\\nuseRef{contentRef}\\nuseState{[showTooltip, setShowTooltip](false)}\\nuseResizeDetector{{ width: inputWidth, ref: sizerRef }}\\nuseResizeDetector{{ width: containerWidth, ref: containerRef }}\\nuseEffect{}\\nuseEffect{}\\nuseLayoutEffect{}\\nuseEffect{}\\nuseCallback{handleClick}\\nuseCallback{handleBlur}\\nuseCallback{handleChange}\\nuseCallback{handleKeyPress}\", () => [useResizeDetector, useResizeDetector]);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(titleStyles, \"titleStyles\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/DynamicEditableTitle/index.tsx\");reactHotLoader.register(DynamicEditableTitle, \"DynamicEditableTitle\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/components/DynamicEditableTitle/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["React","useCallback","useEffect","useLayoutEffect","useRef","useState","css","t","Tooltip","useResizeDetector","jsx","___EmotionJSX","titleStyles","theme","typography","sizes","xl","weights","bold","colors","grayscale","light1","DynamicEditableTitle","title","placeholder","onSave","canEdit","label","isEditing","setIsEditing","currentTitle","setCurrentTitle","contentRef","showTooltip","setShowTooltip","width","inputWidth","ref","sizerRef","containerWidth","containerRef","refreshMode","current","focus","setSelectionRange","length","value","scrollLeft","scrollWidth","textContent","clientWidth","handleClick","handleBlur","formattedTitle","trim","handleChange","ev","target","handleKeyPress","key","_contentRef$current","preventDefault","blur","id","className","onChange","onBlur","onClick","onKeyPress","tabIndex","__signature__","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/components/DynamicEditableTitle/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, {\n  ChangeEvent,\n  KeyboardEvent,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { css, SupersetTheme, t } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { useResizeDetector } from 'react-resize-detector';\n\nexport type DynamicEditableTitleProps = {\n  title: string;\n  placeholder: string;\n  onSave: (title: string) => void;\n  canEdit: boolean;\n  label: string | undefined;\n};\n\nconst titleStyles = (theme: SupersetTheme) => css`\n  display: flex;\n  font-size: ${theme.typography.sizes.xl}px;\n  font-weight: ${theme.typography.weights.bold};\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n\n  & .dynamic-title,\n  & .dynamic-title-input {\n    display: inline-block;\n    max-width: 100%;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  }\n\n  & .dynamic-title {\n    cursor: default;\n  }\n  & .dynamic-title-input {\n    border: none;\n    padding: 0;\n    outline: none;\n\n    &::placeholder {\n      color: ${theme.colors.grayscale.light1};\n    }\n  }\n\n  & .input-sizer {\n    position: absolute;\n    left: -9999px;\n    display: inline-block;\n  }\n`;\n\nexport const DynamicEditableTitle = ({\n  title,\n  placeholder,\n  onSave,\n  canEdit,\n  label,\n}: DynamicEditableTitleProps) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [currentTitle, setCurrentTitle] = useState(title || '');\n  const contentRef = useRef<HTMLInputElement>(null);\n  const [showTooltip, setShowTooltip] = useState(false);\n\n  const { width: inputWidth, ref: sizerRef } = useResizeDetector();\n  const { width: containerWidth, ref: containerRef } = useResizeDetector({\n    refreshMode: 'debounce',\n  });\n\n  useEffect(() => {\n    setCurrentTitle(title);\n  }, [title]);\n\n  useEffect(() => {\n    if (isEditing && contentRef?.current) {\n      contentRef.current.focus();\n      // move cursor and scroll to the end\n      if (contentRef.current.setSelectionRange) {\n        const { length } = contentRef.current.value;\n        contentRef.current.setSelectionRange(length, length);\n        contentRef.current.scrollLeft = contentRef.current.scrollWidth;\n      }\n    }\n  }, [isEditing]);\n\n  // a trick to make the input grow when user types text\n  // we make additional span component, place it somewhere out of view and copy input\n  // then we can measure the width of that span to resize the input element\n  useLayoutEffect(() => {\n    if (sizerRef?.current) {\n      sizerRef.current.textContent = currentTitle || placeholder;\n    }\n  }, [currentTitle, placeholder, sizerRef]);\n\n  useEffect(() => {\n    if (\n      contentRef.current &&\n      contentRef.current.scrollWidth > contentRef.current.clientWidth\n    ) {\n      setShowTooltip(true);\n    } else {\n      setShowTooltip(false);\n    }\n  }, [inputWidth, containerWidth]);\n\n  const handleClick = useCallback(() => {\n    if (!canEdit || isEditing) {\n      return;\n    }\n    setIsEditing(true);\n  }, [canEdit, isEditing]);\n\n  const handleBlur = useCallback(() => {\n    if (!canEdit) {\n      return;\n    }\n    const formattedTitle = currentTitle.trim();\n    setCurrentTitle(formattedTitle);\n    if (title !== formattedTitle) {\n      onSave(formattedTitle);\n    }\n    setIsEditing(false);\n  }, [canEdit, currentTitle, onSave, title]);\n\n  const handleChange = useCallback(\n    (ev: ChangeEvent<HTMLInputElement>) => {\n      if (!canEdit || !isEditing) {\n        return;\n      }\n      setCurrentTitle(ev.target.value);\n    },\n    [canEdit, isEditing],\n  );\n\n  const handleKeyPress = useCallback(\n    (ev: KeyboardEvent<HTMLInputElement>) => {\n      if (!canEdit) {\n        return;\n      }\n      if (ev.key === 'Enter') {\n        ev.preventDefault();\n        contentRef.current?.blur();\n      }\n    },\n    [canEdit],\n  );\n\n  return (\n    <div css={titleStyles} ref={containerRef}>\n      <Tooltip\n        id=\"title-tooltip\"\n        title={showTooltip && currentTitle && !isEditing ? currentTitle : null}\n      >\n        {canEdit ? (\n          <input\n            data-test=\"editable-title-input\"\n            className=\"dynamic-title-input\"\n            aria-label={label ?? t('Title')}\n            ref={contentRef}\n            onChange={handleChange}\n            onBlur={handleBlur}\n            onClick={handleClick}\n            onKeyPress={handleKeyPress}\n            placeholder={placeholder}\n            value={currentTitle}\n            css={css`\n              cursor: ${isEditing ? 'text' : 'pointer'};\n\n              ${inputWidth &&\n              inputWidth > 0 &&\n              css`\n                width: ${inputWidth + 1}px;\n              `}\n            `}\n          />\n        ) : (\n          <span\n            className=\"dynamic-title\"\n            aria-label={label ?? t('Title')}\n            ref={contentRef}\n            data-test=\"editable-title\"\n          >\n            {currentTitle}\n          </span>\n        )}\n      </Tooltip>\n      <span ref={sizerRef} className=\"input-sizer\" aria-hidden tabIndex={-1} />\n    </div>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}