{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { extractTimegrain, GenericDataType, getTimeFormatter, getTimeFormatterForGranularity, smartDateFormatter, TimeFormats } from '@superset-ui/core';\nimport { getColorFormatters } from '@superset-ui/chart-controls';\nconst { DATABASE_DATETIME } = TimeFormats;\nfunction isNumeric(key, data = []) {\n  return data.every((record) => record[key] === null ||\n  record[key] === undefined ||\n  typeof record[key] === 'number');\n}\nexport default function transformProps(chartProps) {\n  /**\n   * This function is called after a successful response has been\n   * received from the chart data endpoint, and is used to transform\n   * the incoming data prior to being sent to the Visualization.\n   *\n   * The transformProps function is also quite useful to return\n   * additional/modified props to your data viz component. The formData\n   * can also be accessed from your PivotTableChart.tsx file, but\n   * doing supplying custom props here is often handy for integrating third\n   * party libraries that rely on specific props.\n   *\n   * A description of properties in `chartProps`:\n   * - `height`, `width`: the height/width of the DOM element in which\n   *   the chart is located\n   * - `formData`: the chart data request payload that was sent to the\n   *   backend.\n   * - `queriesData`: the chart data response payload that was received\n   *   from the backend. Some notable properties of `queriesData`:\n   *   - `data`: an array with data, each row with an object mapping\n   *     the column/alias to its value. Example:\n   *     `[{ col1: 'abc', metric1: 10 }, { col1: 'xyz', metric1: 20 }]`\n   *   - `rowcount`: the number of rows in `data`\n   *   - `query`: the query that was issued.\n   *\n   * Please note: the transformProps function gets cached when the\n   * application loads. When making changes to the `transformProps`\n   * function during development with hot reloading, changes won't\n   * be seen until restarting the development server.\n   */\n  const { width, height, queriesData, formData, rawFormData, hooks: { setDataMask = () => {}, onContextMenu }, filterState, datasource: { verboseMap = {}, columnFormats = {}, currencyFormats = {} }, emitCrossFilters } = chartProps;\n  const { data, colnames, coltypes } = queriesData[0];\n  const { groupbyRows, groupbyColumns, metrics, tableRenderer, colOrder, rowOrder, aggregateFunction, transposePivot, combineMetric, rowSubtotalPosition, colSubtotalPosition, colTotals, colSubTotals, rowTotals, rowSubTotals, valueFormat, dateFormat, metricsLayout, conditionalFormatting, timeGrainSqla, currencyFormat } = formData;\n  const { selectedFilters } = filterState;\n  const granularity = extractTimegrain(rawFormData);\n  const dateFormatters = colnames.\n  filter((colname, index) => coltypes[index] === GenericDataType.Temporal).\n  reduce((acc, temporalColname) => {\n    let formatter;\n    if (dateFormat === smartDateFormatter.id) {\n      if (granularity) {\n        // time column use formats based on granularity\n        formatter = getTimeFormatterForGranularity(granularity);\n      } else\n      if (isNumeric(temporalColname, data)) {\n        formatter = getTimeFormatter(DATABASE_DATETIME);\n      } else\n      {\n        // if no column-specific format, print cell as is\n        formatter = String;\n      }\n    } else\n    if (dateFormat) {\n      formatter = getTimeFormatter(dateFormat);\n    }\n    if (formatter) {\n      acc[temporalColname] = formatter;\n    }\n    return acc;\n  }, {});\n  const metricColorFormatters = getColorFormatters(conditionalFormatting, data);\n  return {\n    width,\n    height,\n    data,\n    groupbyRows,\n    groupbyColumns,\n    metrics,\n    tableRenderer,\n    colOrder,\n    rowOrder,\n    aggregateFunction,\n    transposePivot,\n    combineMetric,\n    rowSubtotalPosition,\n    colSubtotalPosition,\n    colTotals,\n    colSubTotals,\n    rowTotals,\n    rowSubTotals,\n    valueFormat,\n    currencyFormat,\n    emitCrossFilters,\n    setDataMask,\n    selectedFilters,\n    verboseMap,\n    columnFormats,\n    currencyFormats,\n    metricsLayout,\n    metricColorFormatters,\n    dateFormatters,\n    onContextMenu,\n    timeGrainSqla\n  };\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(DATABASE_DATETIME, \"DATABASE_DATETIME\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/plugin/transformProps.ts\");reactHotLoader.register(isNumeric, \"isNumeric\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/plugin/transformProps.ts\");reactHotLoader.register(transformProps, \"transformProps\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/plugin/transformProps.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["extractTimegrain","GenericDataType","getTimeFormatter","getTimeFormatterForGranularity","smartDateFormatter","TimeFormats","getColorFormatters","DATABASE_DATETIME","isNumeric","key","data","every","record","undefined","transformProps","chartProps","width","height","queriesData","formData","rawFormData","hooks","setDataMask","onContextMenu","filterState","datasource","verboseMap","columnFormats","currencyFormats","emitCrossFilters","colnames","coltypes","groupbyRows","groupbyColumns","metrics","tableRenderer","colOrder","rowOrder","aggregateFunction","transposePivot","combineMetric","rowSubtotalPosition","colSubtotalPosition","colTotals","colSubTotals","rowTotals","rowSubTotals","valueFormat","dateFormat","metricsLayout","conditionalFormatting","timeGrainSqla","currencyFormat","selectedFilters","granularity","dateFormatters","filter","colname","index","Temporal","reduce","acc","temporalColname","formatter","id","String","metricColorFormatters","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/plugin/transformProps.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  ChartProps,\n  DataRecord,\n  extractTimegrain,\n  GenericDataType,\n  getTimeFormatter,\n  getTimeFormatterForGranularity,\n  QueryFormData,\n  smartDateFormatter,\n  TimeFormats,\n} from '@superset-ui/core';\nimport { getColorFormatters } from '@superset-ui/chart-controls';\nimport { DateFormatter } from '../types';\n\nconst { DATABASE_DATETIME } = TimeFormats;\n\nfunction isNumeric(key: string, data: DataRecord[] = []) {\n  return data.every(\n    record =>\n      record[key] === null ||\n      record[key] === undefined ||\n      typeof record[key] === 'number',\n  );\n}\n\nexport default function transformProps(chartProps: ChartProps<QueryFormData>) {\n  /**\n   * This function is called after a successful response has been\n   * received from the chart data endpoint, and is used to transform\n   * the incoming data prior to being sent to the Visualization.\n   *\n   * The transformProps function is also quite useful to return\n   * additional/modified props to your data viz component. The formData\n   * can also be accessed from your PivotTableChart.tsx file, but\n   * doing supplying custom props here is often handy for integrating third\n   * party libraries that rely on specific props.\n   *\n   * A description of properties in `chartProps`:\n   * - `height`, `width`: the height/width of the DOM element in which\n   *   the chart is located\n   * - `formData`: the chart data request payload that was sent to the\n   *   backend.\n   * - `queriesData`: the chart data response payload that was received\n   *   from the backend. Some notable properties of `queriesData`:\n   *   - `data`: an array with data, each row with an object mapping\n   *     the column/alias to its value. Example:\n   *     `[{ col1: 'abc', metric1: 10 }, { col1: 'xyz', metric1: 20 }]`\n   *   - `rowcount`: the number of rows in `data`\n   *   - `query`: the query that was issued.\n   *\n   * Please note: the transformProps function gets cached when the\n   * application loads. When making changes to the `transformProps`\n   * function during development with hot reloading, changes won't\n   * be seen until restarting the development server.\n   */\n  const {\n    width,\n    height,\n    queriesData,\n    formData,\n    rawFormData,\n    hooks: { setDataMask = () => {}, onContextMenu },\n    filterState,\n    datasource: { verboseMap = {}, columnFormats = {}, currencyFormats = {} },\n    emitCrossFilters,\n  } = chartProps;\n  const { data, colnames, coltypes } = queriesData[0];\n  const {\n    groupbyRows,\n    groupbyColumns,\n    metrics,\n    tableRenderer,\n    colOrder,\n    rowOrder,\n    aggregateFunction,\n    transposePivot,\n    combineMetric,\n    rowSubtotalPosition,\n    colSubtotalPosition,\n    colTotals,\n    colSubTotals,\n    rowTotals,\n    rowSubTotals,\n    valueFormat,\n    dateFormat,\n    metricsLayout,\n    conditionalFormatting,\n    timeGrainSqla,\n    currencyFormat,\n  } = formData;\n  const { selectedFilters } = filterState;\n  const granularity = extractTimegrain(rawFormData);\n\n  const dateFormatters = colnames\n    .filter(\n      (colname: string, index: number) =>\n        coltypes[index] === GenericDataType.Temporal,\n    )\n    .reduce(\n      (\n        acc: Record<string, DateFormatter | undefined>,\n        temporalColname: string,\n      ) => {\n        let formatter: DateFormatter | undefined;\n        if (dateFormat === smartDateFormatter.id) {\n          if (granularity) {\n            // time column use formats based on granularity\n            formatter = getTimeFormatterForGranularity(granularity);\n          } else if (isNumeric(temporalColname, data)) {\n            formatter = getTimeFormatter(DATABASE_DATETIME);\n          } else {\n            // if no column-specific format, print cell as is\n            formatter = String;\n          }\n        } else if (dateFormat) {\n          formatter = getTimeFormatter(dateFormat);\n        }\n        if (formatter) {\n          acc[temporalColname] = formatter;\n        }\n        return acc;\n      },\n      {},\n    );\n  const metricColorFormatters = getColorFormatters(conditionalFormatting, data);\n\n  return {\n    width,\n    height,\n    data,\n    groupbyRows,\n    groupbyColumns,\n    metrics,\n    tableRenderer,\n    colOrder,\n    rowOrder,\n    aggregateFunction,\n    transposePivot,\n    combineMetric,\n    rowSubtotalPosition,\n    colSubtotalPosition,\n    colTotals,\n    colSubTotals,\n    rowTotals,\n    rowSubTotals,\n    valueFormat,\n    currencyFormat,\n    emitCrossFilters,\n    setDataMask,\n    selectedFilters,\n    verboseMap,\n    columnFormats,\n    currencyFormats,\n    metricsLayout,\n    metricColorFormatters,\n    dateFormatters,\n    onContextMenu,\n    timeGrainSqla,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}