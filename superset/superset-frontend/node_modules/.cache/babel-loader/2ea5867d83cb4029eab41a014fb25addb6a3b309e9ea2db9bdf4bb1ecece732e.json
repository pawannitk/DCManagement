{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { CurrencyFormatter, GenericDataType, getNumberFormatter, isProbablyHTML, sanitizeHtml } from '@superset-ui/core';\nimport DateWithFormatter from './DateWithFormatter';\n/**\n * Format text for cell value.\n */\nfunction formatValue(formatter, value) {\n  // render undefined as empty string\n  if (value === undefined) {\n    return [false, ''];\n  }\n  // render null as `N/A`\n  if (value === null ||\n  // null values in temporal columns are wrapped in a Date object, so make sure we\n  // handle them here too\n  value instanceof DateWithFormatter && value.input === null) {\n    return [false, 'N/A'];\n  }\n  if (formatter) {\n    return [false, formatter(value)];\n  }\n  if (typeof value === 'string') {\n    return isProbablyHTML(value) ? [true, sanitizeHtml(value)] : [false, value];\n  }\n  return [false, value.toString()];\n}\nexport function formatColumnValue(column, value) {\n  const { dataType, formatter, config = {} } = column;\n  const isNumber = dataType === GenericDataType.Numeric;\n  const smallNumberFormatter = config.d3SmallNumberFormat === undefined ?\n  formatter :\n  config.currencyFormat ?\n  new CurrencyFormatter({\n    d3Format: config.d3SmallNumberFormat,\n    currency: config.currencyFormat\n  }) :\n  getNumberFormatter(config.d3SmallNumberFormat);\n  return formatValue(isNumber && typeof value === 'number' && Math.abs(value) < 1 ?\n  smallNumberFormatter :\n  formatter, value);\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(formatValue, \"formatValue\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-table/src/utils/formatValue.ts\");reactHotLoader.register(formatColumnValue, \"formatColumnValue\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-table/src/utils/formatValue.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["CurrencyFormatter","GenericDataType","getNumberFormatter","isProbablyHTML","sanitizeHtml","DateWithFormatter","formatValue","formatter","value","undefined","input","toString","formatColumnValue","column","dataType","config","isNumber","Numeric","smallNumberFormatter","d3SmallNumberFormat","currencyFormat","d3Format","currency","Math","abs","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-table/src/utils/formatValue.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  CurrencyFormatter,\n  DataRecordValue,\n  GenericDataType,\n  getNumberFormatter,\n  isProbablyHTML,\n  sanitizeHtml,\n} from '@superset-ui/core';\nimport { DataColumnMeta } from '../types';\nimport DateWithFormatter from './DateWithFormatter';\n\n/**\n * Format text for cell value.\n */\nfunction formatValue(\n  formatter: DataColumnMeta['formatter'],\n  value: DataRecordValue,\n): [boolean, string] {\n  // render undefined as empty string\n  if (value === undefined) {\n    return [false, ''];\n  }\n  // render null as `N/A`\n  if (\n    value === null ||\n    // null values in temporal columns are wrapped in a Date object, so make sure we\n    // handle them here too\n    (value instanceof DateWithFormatter && value.input === null)\n  ) {\n    return [false, 'N/A'];\n  }\n  if (formatter) {\n    return [false, formatter(value as number)];\n  }\n  if (typeof value === 'string') {\n    return isProbablyHTML(value) ? [true, sanitizeHtml(value)] : [false, value];\n  }\n  return [false, value.toString()];\n}\n\nexport function formatColumnValue(\n  column: DataColumnMeta,\n  value: DataRecordValue,\n) {\n  const { dataType, formatter, config = {} } = column;\n  const isNumber = dataType === GenericDataType.Numeric;\n  const smallNumberFormatter =\n    config.d3SmallNumberFormat === undefined\n      ? formatter\n      : config.currencyFormat\n        ? new CurrencyFormatter({\n            d3Format: config.d3SmallNumberFormat,\n            currency: config.currencyFormat,\n          })\n        : getNumberFormatter(config.d3SmallNumberFormat);\n  return formatValue(\n    isNumber && typeof value === 'number' && Math.abs(value) < 1\n      ? smallNumberFormatter\n      : formatter,\n    value,\n  );\n}\n"],"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAkBA,SACEA,iBAAiB,EAEjBC,eAAe,EACfC,kBAAkB,EAClBC,cAAc,EACdC,YAAY,QACP,mBAAmB;AAE1B,OAAOC,iBAAiB,MAAM,qBAAqB;AAEnD;;;AAGA,SAASC,WAAWA,CAClBC,SAAsC,EACtCC,KAAsB;EAEtB;EACA,IAAIA,KAAK,KAAKC,SAAS,EAAE;IACvB,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;;EAEpB;EACA,IACED,KAAK,KAAK,IAAI;EACd;EACA;EACCA,KAAK,YAAYH,iBAAiB,IAAIG,KAAK,CAACE,KAAK,KAAK,IAAK,EAC5D;IACA,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC;;EAEvB,IAAIH,SAAS,EAAE;IACb,OAAO,CAAC,KAAK,EAAEA,SAAS,CAACC,KAAe,CAAC,CAAC;;EAE5C,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC7B,OAAOL,cAAc,CAACK,KAAK,CAAC,GAAG,CAAC,IAAI,EAAEJ,YAAY,CAACI,KAAK,CAAC,CAAC,GAAG,CAAC,KAAK,EAAEA,KAAK,CAAC;;EAE7E,OAAO,CAAC,KAAK,EAAEA,KAAK,CAACG,QAAQ,EAAE,CAAC;AAClC;AAEA,OAAM,SAAUC,iBAAiBA,CAC/BC,MAAsB,EACtBL,KAAsB;EAEtB,MAAM,EAAEM,QAAQ,EAAEP,SAAS,EAAEQ,MAAM,GAAG,EAAE,EAAE,GAAGF,MAAM;EACnD,MAAMG,QAAQ,GAAGF,QAAQ,KAAKb,eAAe,CAACgB,OAAO;EACrD,MAAMC,oBAAoB,GACxBH,MAAM,CAACI,mBAAmB,KAAKV,SAAS;EACpCF,SAAS;EACTQ,MAAM,CAACK,cAAc;EACnB,IAAIpB,iBAAiB,CAAC;IACpBqB,QAAQ,EAAEN,MAAM,CAACI,mBAAmB;IACpCG,QAAQ,EAAEP,MAAM,CAACK;GAClB,CAAC;EACFlB,kBAAkB,CAACa,MAAM,CAACI,mBAAmB,CAAC;EACtD,OAAOb,WAAW,CAChBU,QAAQ,IAAI,OAAOR,KAAK,KAAK,QAAQ,IAAIe,IAAI,CAACC,GAAG,CAAChB,KAAK,CAAC,GAAG,CAAC;EACxDU,oBAAoB;EACpBX,SAAS,EACbC,KAAK,CACN;AACH,CAAC,mBAAAiB,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAC,OAAA,GAAAlB,SAAA,MAAAgB,cAAA,WAAAA,cAAA,CAAAG,QAAA,CA/CQtB,WAAW,+HAAAmB,cAAA,CAAAG,QAAA,CA0BJhB,iBAAiB,6JAAAiB,WAAA,UAAAH,oBAAA,mBAAAA,oBAAA,CAAAG,WAAA,GAAApB,SAAA,CAAAoB,WAAA,IAAAA,WAAA,CAAAC,MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}