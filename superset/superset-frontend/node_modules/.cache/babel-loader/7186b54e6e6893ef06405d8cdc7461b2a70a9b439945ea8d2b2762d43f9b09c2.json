{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { scaleLinear } from 'd3-scale';\nimport { interpolateHcl, interpolateNumber, piecewise, quantize } from 'd3-interpolate';\nimport ColorScheme from './ColorScheme';\nexport default class SequentialScheme extends ColorScheme {\n\n  constructor(config) {\n    super(config);this.isDiverging = void 0;\n    const { isDiverging = false } = config;\n    this.isDiverging = isDiverging;\n  }\n  /**\n   * Return a linear scale with a new domain interpolated from the input domain\n   * to match the number of elements in the color scheme\n   * because D3 continuous scale uses piecewise mapping between domain and range.\n   * This is a common use-case when the domain is [min, max]\n   * and the palette has more than two colors.\n   *\n   * @param domain domain of the scale\n   * @param modifyRange Set this to true if you don't want to modify the domain and\n   * want to interpolate range to have the same number of elements with domain instead.\n   */\n  createLinearScale(domain = [0, 1], modifyRange = false) {\n    const scale = scaleLinear().interpolate(interpolateHcl).clamp(true);\n    return modifyRange || domain.length === this.colors.length ?\n    scale.domain(domain).range(this.getColors(domain.length)) :\n    scale.\n    domain(quantize(piecewise(interpolateNumber, domain), this.colors.length)).\n    range(this.colors);\n  }\n  /**\n   * Get colors from this scheme\n   * @param numColors number of colors to return.\n   * Will interpolate the current scheme to match the number of colors requested\n   * @param extent The extent of the color range to use.\n   * For example [0.2, 1] will rescale the color scheme\n   * such that color values in the range [0, 0.2) are excluded from the scheme.\n   */\n  getColors(numColors = this.colors.length, extent = [0, 1]) {\n    if (numColors === this.colors.length &&\n    extent[0] === 0 &&\n    extent[1] === 1) {\n      return this.colors;\n    }\n    const piecewiseScale = piecewise(interpolateHcl, this.colors);\n    const adjustExtent = scaleLinear().range(extent).clamp(true);\n    return quantize((t) => piecewiseScale(adjustExtent(t)), numColors);\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(SequentialScheme, \"SequentialScheme\", \"/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/color/SequentialScheme.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["scaleLinear","interpolateHcl","interpolateNumber","piecewise","quantize","ColorScheme","SequentialScheme","constructor","config","isDiverging","createLinearScale","domain","modifyRange","scale","interpolate","clamp","length","colors","range","getColors","numColors","extent","piecewiseScale","adjustExtent","t","__reactstandin__regenerateByEval","key","code","eval","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/color/SequentialScheme.ts"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { scaleLinear } from 'd3-scale';\nimport {\n  interpolateHcl,\n  interpolateNumber,\n  piecewise,\n  quantize,\n} from 'd3-interpolate';\nimport ColorScheme, { ColorSchemeConfig } from './ColorScheme';\n\nexport interface SequentialSchemeConfig extends ColorSchemeConfig {\n  isDiverging?: boolean;\n}\n\nexport default class SequentialScheme extends ColorScheme {\n  isDiverging: boolean;\n\n  constructor(config: SequentialSchemeConfig) {\n    super(config);\n    const { isDiverging = false } = config;\n    this.isDiverging = isDiverging;\n  }\n\n  /**\n   * Return a linear scale with a new domain interpolated from the input domain\n   * to match the number of elements in the color scheme\n   * because D3 continuous scale uses piecewise mapping between domain and range.\n   * This is a common use-case when the domain is [min, max]\n   * and the palette has more than two colors.\n   *\n   * @param domain domain of the scale\n   * @param modifyRange Set this to true if you don't want to modify the domain and\n   * want to interpolate range to have the same number of elements with domain instead.\n   */\n  createLinearScale(domain: number[] = [0, 1], modifyRange = false) {\n    const scale = scaleLinear<string>().interpolate(interpolateHcl).clamp(true);\n\n    return modifyRange || domain.length === this.colors.length\n      ? scale.domain(domain).range(this.getColors(domain.length))\n      : scale\n          .domain(\n            quantize(piecewise(interpolateNumber, domain), this.colors.length),\n          )\n          .range(this.colors);\n  }\n\n  /**\n   * Get colors from this scheme\n   * @param numColors number of colors to return.\n   * Will interpolate the current scheme to match the number of colors requested\n   * @param extent The extent of the color range to use.\n   * For example [0.2, 1] will rescale the color scheme\n   * such that color values in the range [0, 0.2) are excluded from the scheme.\n   */\n  getColors(\n    numColors = this.colors.length,\n    extent: number[] = [0, 1],\n  ): string[] {\n    if (\n      numColors === this.colors.length &&\n      extent[0] === 0 &&\n      extent[1] === 1\n    ) {\n      return this.colors;\n    }\n\n    const piecewiseScale: (t: number) => string = piecewise(\n      interpolateHcl,\n      this.colors,\n    );\n    const adjustExtent = scaleLinear().range(extent).clamp(true);\n\n    return quantize<string>(\n      t => piecewiseScale(adjustExtent(t) as number),\n      numColors,\n    );\n  }\n}\n"],"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAmBA,SAASA,WAAW,QAAQ,UAAU;AACtC,SACEC,cAAc,EACdC,iBAAiB,EACjBC,SAAS,EACTC,QAAQ,QACH,gBAAgB;AACvB,OAAOC,WAAkC,MAAM,eAAe;AAM9D,eAAc,MAAOC,gBAAiB,SAAQD,WAAW;;EAGvDE,YAAYC,MAA8B;IACxC,KAAK,CAACA,MAAM,CAAC,CAAC,KAHhBC,WAAW;IAIT,MAAM,EAAEA,WAAW,GAAG,KAAK,EAAE,GAAGD,MAAM;IACtC,IAAI,CAACC,WAAW,GAAGA,WAAW;EAChC;EAEA;;;;;;;;;;;EAWAC,iBAAiBA,CAACC,MAAA,GAAmB,CAAC,CAAC,EAAE,CAAC,CAAC,EAAEC,WAAW,GAAG,KAAK;IAC9D,MAAMC,KAAK,GAAGb,WAAW,EAAU,CAACc,WAAW,CAACb,cAAc,CAAC,CAACc,KAAK,CAAC,IAAI,CAAC;IAE3E,OAAOH,WAAW,IAAID,MAAM,CAACK,MAAM,KAAK,IAAI,CAACC,MAAM,CAACD,MAAM;IACtDH,KAAK,CAACF,MAAM,CAACA,MAAM,CAAC,CAACO,KAAK,CAAC,IAAI,CAACC,SAAS,CAACR,MAAM,CAACK,MAAM,CAAC,CAAC;IACzDH,KAAK;IACFF,MAAM,CACLP,QAAQ,CAACD,SAAS,CAACD,iBAAiB,EAAES,MAAM,CAAC,EAAE,IAAI,CAACM,MAAM,CAACD,MAAM,CAAC,CACnE;IACAE,KAAK,CAAC,IAAI,CAACD,MAAM,CAAC;EAC3B;EAEA;;;;;;;;EAQAE,SAASA,CACPC,SAAS,GAAG,IAAI,CAACH,MAAM,CAACD,MAAM,EAC9BK,MAAA,GAAmB,CAAC,CAAC,EAAE,CAAC,CAAC;IAEzB,IACED,SAAS,KAAK,IAAI,CAACH,MAAM,CAACD,MAAM;IAChCK,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC;IACfA,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,EACf;MACA,OAAO,IAAI,CAACJ,MAAM;;IAGpB,MAAMK,cAAc,GAA0BnB,SAAS,CACrDF,cAAc,EACd,IAAI,CAACgB,MAAM,CACZ;IACD,MAAMM,YAAY,GAAGvB,WAAW,EAAE,CAACkB,KAAK,CAACG,MAAM,CAAC,CAACN,KAAK,CAAC,IAAI,CAAC;IAE5D,OAAOX,QAAQ,CACb,CAAAoB,CAAC,KAAIF,cAAc,CAACC,YAAY,CAACC,CAAC,CAAW,CAAC,EAC9CJ,SAAS,CACV;EACH,CAAC;EAAAK,iCAAAC,GAAA,EAAAC,IAAA;IAAA,KAAAD,GAAA,IAAAE,IAAA,CAAAD,IAAA,G,CACF,mBAAAE,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAC,OAAA,GAAAC,SAAA,MAAAH,cAAA,WAAAA,cAAA,CAAAI,QAAA,CA/DoB3B,gBAAiB,gKAAA4B,WAAA,UAAAJ,oBAAA,mBAAAA,oBAAA,CAAAI,WAAA,GAAAF,SAAA,CAAAE,WAAA,IAAAA,WAAA,CAAAC,MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}