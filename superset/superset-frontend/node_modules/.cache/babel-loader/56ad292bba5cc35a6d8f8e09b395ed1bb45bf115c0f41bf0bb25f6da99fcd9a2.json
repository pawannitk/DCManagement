{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { clamp } from '@math.gl/core';\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport { normalizeViewportProps } from '@math.gl/web-mercator';\nimport assert from '../utils/assert';\nimport LinearInterpolator from '../transitions/linear-interpolator';\nconst PITCH_MOUSE_THRESHOLD = 5;\nconst PITCH_ACCEL = 1.2;\nexport class MapState extends ViewState {\n  constructor(options) {\n    const {\n      width,\n      height,\n      latitude,\n      longitude,\n      zoom,\n      bearing = 0,\n      pitch = 0,\n      altitude = 1.5,\n      position = [0, 0, 0],\n      maxZoom = 20,\n      minZoom = 0,\n      maxPitch = 60,\n      minPitch = 0,\n      startPanLngLat,\n      startZoomLngLat,\n      startRotatePos,\n      startBearing,\n      startPitch,\n      startZoom,\n      normalize = true\n    } = options;\n    assert(Number.isFinite(longitude));\n    assert(Number.isFinite(latitude));\n    assert(Number.isFinite(zoom));\n    super({\n      width,\n      height,\n      latitude,\n      longitude,\n      zoom,\n      bearing,\n      pitch,\n      altitude,\n      maxZoom,\n      minZoom,\n      maxPitch,\n      minPitch,\n      normalize,\n      position\n    }, {\n      startPanLngLat,\n      startZoomLngLat,\n      startRotatePos,\n      startBearing,\n      startPitch,\n      startZoom\n    });\n\n    _defineProperty(this, \"makeViewport\", void 0);\n\n    this.makeViewport = options.makeViewport;\n  }\n\n  panStart({\n    pos\n  }) {\n    return this._getUpdatedState({\n      startPanLngLat: this._unproject(pos)\n    });\n  }\n\n  pan({\n    pos,\n    startPos\n  }) {\n    const startPanLngLat = this.getState().startPanLngLat || this._unproject(startPos);\n\n    if (!startPanLngLat) {\n      return this;\n    }\n\n    const viewport = this.makeViewport(this.getViewportProps());\n    const newProps = viewport.panByPosition(startPanLngLat, pos);\n    return this._getUpdatedState(newProps);\n  }\n\n  panEnd() {\n    return this._getUpdatedState({\n      startPanLngLat: null\n    });\n  }\n\n  rotateStart({\n    pos\n  }) {\n    return this._getUpdatedState({\n      startRotatePos: pos,\n      startBearing: this.getViewportProps().bearing,\n      startPitch: this.getViewportProps().pitch\n    });\n  }\n\n  rotate({\n    pos,\n    deltaAngleX = 0,\n    deltaAngleY = 0\n  }) {\n    const {\n      startRotatePos,\n      startBearing,\n      startPitch\n    } = this.getState();\n\n    if (!startRotatePos || startBearing === undefined || startPitch === undefined) {\n      return this;\n    }\n\n    let newRotation;\n\n    if (pos) {\n      newRotation = this._getNewRotation(pos, startRotatePos, startPitch, startBearing);\n    } else {\n      newRotation = {\n        bearing: startBearing + deltaAngleX,\n        pitch: startPitch + deltaAngleY\n      };\n    }\n\n    return this._getUpdatedState(newRotation);\n  }\n\n  rotateEnd() {\n    return this._getUpdatedState({\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  zoomStart({\n    pos\n  }) {\n    return this._getUpdatedState({\n      startZoomLngLat: this._unproject(pos),\n      startZoom: this.getViewportProps().zoom\n    });\n  }\n\n  zoom({\n    pos,\n    startPos,\n    scale\n  }) {\n    let {\n      startZoom,\n      startZoomLngLat\n    } = this.getState();\n\n    if (!startZoomLngLat) {\n      startZoom = this.getViewportProps().zoom;\n      startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n    }\n\n    if (!startZoomLngLat) {\n      return this;\n    }\n\n    const {\n      maxZoom,\n      minZoom\n    } = this.getViewportProps();\n    let zoom = startZoom + Math.log2(scale);\n    zoom = clamp(zoom, minZoom, maxZoom);\n    const zoomedViewport = this.makeViewport({ ...this.getViewportProps(),\n      zoom\n    });\n    return this._getUpdatedState({\n      zoom,\n      ...zoomedViewport.panByPosition(startZoomLngLat, pos)\n    });\n  }\n\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomLngLat: null,\n      startZoom: null\n    });\n  }\n\n  zoomIn(speed = 2) {\n    return this._zoomFromCenter(speed);\n  }\n\n  zoomOut(speed = 2) {\n    return this._zoomFromCenter(1 / speed);\n  }\n\n  moveLeft(speed = 100) {\n    return this._panFromCenter([speed, 0]);\n  }\n\n  moveRight(speed = 100) {\n    return this._panFromCenter([-speed, 0]);\n  }\n\n  moveUp(speed = 100) {\n    return this._panFromCenter([0, speed]);\n  }\n\n  moveDown(speed = 100) {\n    return this._panFromCenter([0, -speed]);\n  }\n\n  rotateLeft(speed = 15) {\n    return this._getUpdatedState({\n      bearing: this.getViewportProps().bearing - speed\n    });\n  }\n\n  rotateRight(speed = 15) {\n    return this._getUpdatedState({\n      bearing: this.getViewportProps().bearing + speed\n    });\n  }\n\n  rotateUp(speed = 10) {\n    return this._getUpdatedState({\n      pitch: this.getViewportProps().pitch + speed\n    });\n  }\n\n  rotateDown(speed = 10) {\n    return this._getUpdatedState({\n      pitch: this.getViewportProps().pitch - speed\n    });\n  }\n\n  shortestPathFrom(viewState) {\n    const fromProps = viewState.getViewportProps();\n    const props = { ...this.getViewportProps()\n    };\n    const {\n      bearing,\n      longitude\n    } = props;\n\n    if (Math.abs(bearing - fromProps.bearing) > 180) {\n      props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n    }\n\n    if (Math.abs(longitude - fromProps.longitude) > 180) {\n      props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n    }\n\n    return props;\n  }\n\n  applyConstraints(props) {\n    const {\n      maxZoom,\n      minZoom,\n      zoom\n    } = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n    const {\n      maxPitch,\n      minPitch,\n      pitch\n    } = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n    const {\n      normalize = true\n    } = props;\n\n    if (normalize) {\n      Object.assign(props, normalizeViewportProps(props));\n    }\n\n    return props;\n  }\n\n  _zoomFromCenter(scale) {\n    const {\n      width,\n      height\n    } = this.getViewportProps();\n    return this.zoom({\n      pos: [width / 2, height / 2],\n      scale\n    });\n  }\n\n  _panFromCenter(offset) {\n    const {\n      width,\n      height\n    } = this.getViewportProps();\n    return this.pan({\n      startPos: [width / 2, height / 2],\n      pos: [width / 2 + offset[0], height / 2 + offset[1]]\n    });\n  }\n\n  _getUpdatedState(newProps) {\n    return new this.constructor({\n      makeViewport: this.makeViewport,\n      ...this.getViewportProps(),\n      ...this.getState(),\n      ...newProps\n    });\n  }\n\n  _unproject(pos) {\n    const viewport = this.makeViewport(this.getViewportProps());\n    return pos && viewport.unproject(pos);\n  }\n\n  _getNewRotation(pos, startPos, startPitch, startBearing) {\n    const deltaX = pos[0] - startPos[0];\n    const deltaY = pos[1] - startPos[1];\n    const centerY = pos[1];\n    const startY = startPos[1];\n    const {\n      width,\n      height\n    } = this.getViewportProps();\n    const deltaScaleX = deltaX / width;\n    let deltaScaleY = 0;\n\n    if (deltaY > 0) {\n      if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n        deltaScaleY = deltaY / (startY - height) * PITCH_ACCEL;\n      }\n    } else if (deltaY < 0) {\n      if (startY > PITCH_MOUSE_THRESHOLD) {\n        deltaScaleY = 1 - centerY / startY;\n      }\n    }\n\n    deltaScaleY = clamp(deltaScaleY, -1, 1);\n    const {\n      minPitch,\n      maxPitch\n    } = this.getViewportProps();\n    const bearing = startBearing + 180 * deltaScaleX;\n    let pitch = startPitch;\n\n    if (deltaScaleY > 0) {\n      pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n    } else if (deltaScaleY < 0) {\n      pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n    }\n\n    return {\n      pitch,\n      bearing\n    };\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\nexport default class MapController extends Controller {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"ControllerState\", MapState);\n\n    _defineProperty(this, \"transition\", {\n      transitionDuration: 300,\n      transitionInterpolator: new LinearInterpolator({\n        transitionProps: {\n          compare: ['longitude', 'latitude', 'zoom', 'bearing', 'pitch', 'position'],\n          required: ['longitude', 'latitude', 'zoom']\n        }\n      })\n    });\n\n    _defineProperty(this, \"dragMode\", 'pan');\n  }\n\n  setProps(props) {\n    props.position = props.position || [0, 0, 0];\n    const oldProps = this.props;\n    super.setProps(props);\n    const dimensionChanged = !oldProps || oldProps.height !== props.height;\n\n    if (dimensionChanged) {\n      this.updateViewport(new this.ControllerState({\n        makeViewport: this.makeViewport,\n        ...props,\n        ...this.state\n      }));\n    }\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(PITCH_MOUSE_THRESHOLD, \"PITCH_MOUSE_THRESHOLD\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/core/dist/esm/controllers/map-controller.js\");reactHotLoader.register(PITCH_ACCEL, \"PITCH_ACCEL\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/core/dist/esm/controllers/map-controller.js\");reactHotLoader.register(MapState, \"MapState\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/core/dist/esm/controllers/map-controller.js\");reactHotLoader.register(MapController, \"MapController\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/core/dist/esm/controllers/map-controller.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["clamp","Controller","ViewState","normalizeViewportProps","assert","LinearInterpolator","PITCH_MOUSE_THRESHOLD","PITCH_ACCEL","MapState","constructor","options","width","height","latitude","longitude","zoom","bearing","pitch","altitude","position","maxZoom","minZoom","maxPitch","minPitch","startPanLngLat","startZoomLngLat","startRotatePos","startBearing","startPitch","startZoom","normalize","Number","isFinite","_defineProperty","makeViewport","panStart","pos","_getUpdatedState","_unproject","pan","startPos","getState","viewport","getViewportProps","newProps","panByPosition","panEnd","rotateStart","rotate","deltaAngleX","deltaAngleY","undefined","newRotation","_getNewRotation","rotateEnd","zoomStart","scale","Math","log2","zoomedViewport","zoomEnd","zoomIn","speed","_zoomFromCenter","zoomOut","moveLeft","_panFromCenter","moveRight","moveUp","moveDown","rotateLeft","rotateRight","rotateUp","rotateDown","shortestPathFrom","viewState","fromProps","props","abs","applyConstraints","Object","assign","offset","unproject","deltaX","deltaY","centerY","startY","deltaScaleX","deltaScaleY","__reactstandin__regenerateByEval","key","code","eval","MapController","args","transitionDuration","transitionInterpolator","transitionProps","compare","required","setProps","oldProps","dimensionChanged","updateViewport","ControllerState","state","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["../../../src/controllers/map-controller.ts"],"sourcesContent":["import {clamp} from '@math.gl/core';\nimport Controller, {ControllerProps} from './controller';\nimport ViewState from './view-state';\nimport {normalizeViewportProps} from '@math.gl/web-mercator';\nimport assert from '../utils/assert';\n\nimport LinearInterpolator from '../transitions/linear-interpolator';\nimport type Viewport from '../viewports/viewport';\n\nconst PITCH_MOUSE_THRESHOLD = 5;\nconst PITCH_ACCEL = 1.2;\n\nexport type MapStateProps = {\n  /** Mapbox viewport properties */\n  /** The width of the viewport */\n  width: number;\n  /** The height of the viewport */\n  height: number;\n  /** The latitude at the center of the viewport */\n  latitude: number;\n  /** The longitude at the center of the viewport */\n  longitude: number;\n  /** The tile zoom level of the map. */\n  zoom: number;\n  /** The bearing of the viewport in degrees */\n  bearing?: number;\n  /** The pitch of the viewport in degrees */\n  pitch?: number;\n  /**\n   * Specify the altitude of the viewport camera\n   * Unit: map heights, default 1.5\n   * Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137\n   */\n  altitude?: number;\n  /** Viewport position */\n  position?: [number, number, number];\n\n  /** Viewport constraints */\n  maxZoom?: number;\n  minZoom?: number;\n  maxPitch?: number;\n  minPitch?: number;\n\n  /** Normalize viewport props to fit map height into viewport. Default `true` */\n  normalize?: boolean;\n};\n\ntype MapStateInternal = {\n  /** Interaction states, required to calculate change during transform */\n  /* The point on map being grabbed when the operation first started */\n  startPanLngLat?: [number, number];\n  /* Center of the zoom when the operation first started */\n  startZoomLngLat?: [number, number];\n  /* Pointer position when rotation started */\n  startRotatePos?: [number, number];\n  /** Bearing when current perspective rotate operation started */\n  startBearing?: number;\n  /** Pitch when current perspective rotate operation started */\n  startPitch?: number;\n  /** Zoom when current zoom operation started */\n  startZoom?: number;\n};\n\n/* Utils */\n\nexport class MapState extends ViewState<MapState, MapStateProps, MapStateInternal> {\n  makeViewport: (props: Record<string, any>) => Viewport;\n\n  constructor(\n    options: MapStateProps &\n      MapStateInternal & {\n        makeViewport: (props: Record<string, any>) => Viewport;\n      }\n  ) {\n    const {\n      /** Mapbox viewport properties */\n      /** The width of the viewport */\n      width,\n      /** The height of the viewport */\n      height,\n      /** The latitude at the center of the viewport */\n      latitude,\n      /** The longitude at the center of the viewport */\n      longitude,\n      /** The tile zoom level of the map. */\n      zoom,\n      /** The bearing of the viewport in degrees */\n      bearing = 0,\n      /** The pitch of the viewport in degrees */\n      pitch = 0,\n      /**\n       * Specify the altitude of the viewport camera\n       * Unit: map heights, default 1.5\n       * Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137\n       */\n      altitude = 1.5,\n      /** Viewport position */\n      position = [0, 0, 0],\n\n      /** Viewport constraints */\n      maxZoom = 20,\n      minZoom = 0,\n      maxPitch = 60,\n      minPitch = 0,\n\n      /** Interaction states, required to calculate change during transform */\n      /* The point on map being grabbed when the operation first started */\n      startPanLngLat,\n      /* Center of the zoom when the operation first started */\n      startZoomLngLat,\n      /* Pointer position when rotation started */\n      startRotatePos,\n      /** Bearing when current perspective rotate operation started */\n      startBearing,\n      /** Pitch when current perspective rotate operation started */\n      startPitch,\n      /** Zoom when current zoom operation started */\n      startZoom,\n\n      /** Normalize viewport props to fit map height into viewport */\n      normalize = true\n    } = options;\n\n    assert(Number.isFinite(longitude)); // `longitude` must be supplied\n    assert(Number.isFinite(latitude)); // `latitude` must be supplied\n    assert(Number.isFinite(zoom)); // `zoom` must be supplied\n\n    super(\n      {\n        width,\n        height,\n        latitude,\n        longitude,\n        zoom,\n        bearing,\n        pitch,\n        altitude,\n        maxZoom,\n        minZoom,\n        maxPitch,\n        minPitch,\n        normalize,\n        position\n      },\n      {\n        startPanLngLat,\n        startZoomLngLat,\n        startRotatePos,\n        startBearing,\n        startPitch,\n        startZoom\n      }\n    );\n\n    this.makeViewport = options.makeViewport;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}: {pos: [number, number]}): MapState {\n    return this._getUpdatedState({\n      startPanLngLat: this._unproject(pos)\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   * @param {[Number, Number], optional} startPos - where the pointer grabbed at\n   *   the start of the operation. Must be supplied of `panStart()` was not called\n   */\n  pan({pos, startPos}: {pos: [number, number]; startPos?: [number, number]}): MapState {\n    const startPanLngLat = this.getState().startPanLngLat || this._unproject(startPos);\n\n    if (!startPanLngLat) {\n      return this;\n    }\n\n    const viewport = this.makeViewport(this.getViewportProps());\n    const newProps = viewport.panByPosition(startPanLngLat, pos);\n\n    return this._getUpdatedState(newProps);\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd(): MapState {\n    return this._getUpdatedState({\n      startPanLngLat: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  rotateStart({pos}: {pos: [number, number]}): MapState {\n    return this._getUpdatedState({\n      startRotatePos: pos,\n      startBearing: this.getViewportProps().bearing,\n      startPitch: this.getViewportProps().pitch\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  rotate({\n    pos,\n    deltaAngleX = 0,\n    deltaAngleY = 0\n  }: {\n    pos?: [number, number];\n    deltaAngleX?: number;\n    deltaAngleY?: number;\n  }): MapState {\n    const {startRotatePos, startBearing, startPitch} = this.getState();\n\n    if (!startRotatePos || startBearing === undefined || startPitch === undefined) {\n      return this;\n    }\n    let newRotation;\n    if (pos) {\n      newRotation = this._getNewRotation(pos, startRotatePos, startPitch, startBearing);\n    } else {\n      newRotation = {\n        bearing: startBearing + deltaAngleX,\n        pitch: startPitch + deltaAngleY\n      };\n    }\n    return this._getUpdatedState(newRotation);\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd(): MapState {\n    return this._getUpdatedState({\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  zoomStart({pos}: {pos: [number, number]}): MapState {\n    return this._getUpdatedState({\n      startZoomLngLat: this._unproject(pos),\n      startZoom: this.getViewportProps().zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current center is\n   * @param {[Number, Number]} startPos - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({\n    pos,\n    startPos,\n    scale\n  }: {\n    pos: [number, number];\n    startPos?: [number, number];\n    scale: number;\n  }): MapState {\n    // Make sure we zoom around the current mouse position rather than map center\n    let {startZoom, startZoomLngLat} = this.getState();\n\n    if (!startZoomLngLat) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = this.getViewportProps().zoom;\n      startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n    }\n    if (!startZoomLngLat) {\n      return this;\n    }\n\n    const {maxZoom, minZoom} = this.getViewportProps();\n    let zoom = (startZoom as number) + Math.log2(scale);\n    zoom = clamp(zoom, minZoom, maxZoom);\n\n    const zoomedViewport = this.makeViewport({...this.getViewportProps(), zoom});\n\n    return this._getUpdatedState({\n      zoom,\n      ...zoomedViewport.panByPosition(startZoomLngLat, pos)\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd(): MapState {\n    return this._getUpdatedState({\n      startZoomLngLat: null,\n      startZoom: null\n    });\n  }\n\n  zoomIn(speed: number = 2): MapState {\n    return this._zoomFromCenter(speed);\n  }\n\n  zoomOut(speed: number = 2): MapState {\n    return this._zoomFromCenter(1 / speed);\n  }\n\n  moveLeft(speed: number = 100): MapState {\n    return this._panFromCenter([speed, 0]);\n  }\n\n  moveRight(speed: number = 100): MapState {\n    return this._panFromCenter([-speed, 0]);\n  }\n\n  moveUp(speed: number = 100): MapState {\n    return this._panFromCenter([0, speed]);\n  }\n\n  moveDown(speed: number = 100): MapState {\n    return this._panFromCenter([0, -speed]);\n  }\n\n  rotateLeft(speed: number = 15): MapState {\n    return this._getUpdatedState({\n      bearing: this.getViewportProps().bearing - speed\n    });\n  }\n\n  rotateRight(speed: number = 15): MapState {\n    return this._getUpdatedState({\n      bearing: this.getViewportProps().bearing + speed\n    });\n  }\n\n  rotateUp(speed: number = 10): MapState {\n    return this._getUpdatedState({\n      pitch: this.getViewportProps().pitch + speed\n    });\n  }\n\n  rotateDown(speed: number = 10): MapState {\n    return this._getUpdatedState({\n      pitch: this.getViewportProps().pitch - speed\n    });\n  }\n\n  shortestPathFrom(viewState: MapState): MapStateProps {\n    // const endViewStateProps = new this.ControllerState(endProps).shortestPathFrom(startViewstate);\n    const fromProps = viewState.getViewportProps();\n    const props = {...this.getViewportProps()};\n    const {bearing, longitude} = props;\n\n    if (Math.abs(bearing - fromProps.bearing) > 180) {\n      props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n    }\n    if (Math.abs(longitude - fromProps.longitude) > 180) {\n      props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n    }\n    return props;\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  applyConstraints(props: Required<MapStateProps>): Required<MapStateProps> {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n\n    // Ensure pitch is within specified range\n    const {maxPitch, minPitch, pitch} = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n\n    // Normalize viewport props to fit map height into viewport\n    const {normalize = true} = props;\n    if (normalize) {\n      Object.assign(props, normalizeViewportProps(props));\n    }\n\n    return props;\n  }\n\n  /* Private methods */\n\n  _zoomFromCenter(scale) {\n    const {width, height} = this.getViewportProps();\n    return this.zoom({\n      pos: [width / 2, height / 2],\n      scale\n    });\n  }\n\n  _panFromCenter(offset) {\n    const {width, height} = this.getViewportProps();\n    return this.pan({\n      startPos: [width / 2, height / 2],\n      pos: [width / 2 + offset[0], height / 2 + offset[1]]\n    });\n  }\n\n  _getUpdatedState(newProps): MapState {\n    // @ts-ignore\n    return new this.constructor({\n      makeViewport: this.makeViewport,\n      ...this.getViewportProps(),\n      ...this.getState(),\n      ...newProps\n    });\n  }\n\n  _unproject(pos?: [number, number]): [number, number] | undefined {\n    const viewport = this.makeViewport(this.getViewportProps());\n    // @ts-ignore\n    return pos && viewport.unproject(pos);\n  }\n\n  _getNewRotation(\n    pos: [number, number],\n    startPos: [number, number],\n    startPitch: number,\n    startBearing: number\n  ): {\n    pitch: number;\n    bearing: number;\n  } {\n    const deltaX = pos[0] - startPos[0];\n    const deltaY = pos[1] - startPos[1];\n    const centerY = pos[1];\n    const startY = startPos[1];\n    const {width, height} = this.getViewportProps();\n\n    const deltaScaleX = deltaX / width;\n    let deltaScaleY = 0;\n\n    if (deltaY > 0) {\n      if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to -1 as we drag upwards\n        deltaScaleY = (deltaY / (startY - height)) * PITCH_ACCEL;\n      }\n    } else if (deltaY < 0) {\n      if (startY > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to 1 as we drag upwards\n        deltaScaleY = 1 - centerY / startY;\n      }\n    }\n    // clamp deltaScaleY to [-1, 1] so that rotation is constrained between minPitch and maxPitch.\n    // deltaScaleX does not need to be clamped as bearing does not have constraints.\n    deltaScaleY = clamp(deltaScaleY, -1, 1);\n\n    const {minPitch, maxPitch} = this.getViewportProps();\n\n    const bearing = startBearing + 180 * deltaScaleX;\n    let pitch = startPitch;\n    if (deltaScaleY > 0) {\n      // Gradually increase pitch\n      pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n    } else if (deltaScaleY < 0) {\n      // Gradually decrease pitch\n      pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n    }\n\n    return {\n      pitch,\n      bearing\n    };\n  }\n}\n\nexport default class MapController extends Controller<MapState> {\n  ControllerState = MapState;\n\n  transition = {\n    transitionDuration: 300,\n    transitionInterpolator: new LinearInterpolator({\n      transitionProps: {\n        compare: ['longitude', 'latitude', 'zoom', 'bearing', 'pitch', 'position'],\n        required: ['longitude', 'latitude', 'zoom']\n      }\n    })\n  };\n\n  dragMode: 'pan' | 'rotate' = 'pan';\n\n  setProps(props: ControllerProps & MapStateProps) {\n    props.position = props.position || [0, 0, 0];\n    const oldProps = this.props;\n\n    super.setProps(props);\n\n    const dimensionChanged = !oldProps || oldProps.height !== props.height;\n    if (dimensionChanged) {\n      // Dimensions changed, normalize the props\n      this.updateViewport(\n        new this.ControllerState({\n          makeViewport: this.makeViewport,\n          ...props,\n          ...this.state\n        })\n      );\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}