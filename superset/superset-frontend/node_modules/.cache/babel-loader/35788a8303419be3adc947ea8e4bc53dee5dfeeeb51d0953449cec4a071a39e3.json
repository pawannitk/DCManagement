{"ast":null,"code":"import _pick from \"lodash/pick\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\n\nimport { EditableTabs } from 'src/components/Tabs';\nimport { connect } from 'react-redux';\nimport URI from 'urijs';\nimport { FeatureFlag, styled, t, isFeatureEnabled } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { detectOS } from 'src/utils/common';\nimport * as Actions from 'src/SqlLab/actions/sqlLab';\nimport { EmptyStateBig } from 'src/components/EmptyState';\nimport getBootstrapData from 'src/utils/getBootstrapData';\nimport { locationContext } from 'src/pages/SqlLab/LocationContext';\nimport SqlEditor from '../SqlEditor';\nimport SqlEditorTabHeader from '../SqlEditorTabHeader';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst DEFAULT_PROPS = {\n  queryEditors: [],\n  offline: false,\n  saveQueryWarning: null,\n  scheduleQueryWarning: null\n};\nconst StyledEditableTabs = styled(EditableTabs)`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n`;\nconst StyledTab = styled.span`\n  line-height: 24px;\n`;\nconst TabTitle = styled.span`\n  margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n  text-transform: none;\n`;\n// Get the user's OS\nconst userOS = detectOS();\nconst SQL_LAB_URL = '/sqllab';\nclass TabbedSqlEditors extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.removeQueryEditor = this.removeQueryEditor.bind(this);\n    this.handleSelect = this.handleSelect.bind(this);\n    this.handleEdit = this.handleEdit.bind(this);\n  }\n  componentDidMount() {\n    // migrate query editor and associated tables state to server\n    if (isFeatureEnabled(FeatureFlag.SqllabBackendPersistence)) {\n      const localStorageTables = this.props.tables.filter((table) => table.inLocalStorage);\n      const localStorageQueries = Object.values(this.props.queries).filter((query) => query.inLocalStorage);\n      this.props.queryEditors.\n      filter((qe) => qe.inLocalStorage).\n      forEach((qe) => {\n        // get all queries associated with the query editor\n        const queries = localStorageQueries.filter((query) => query.sqlEditorId === qe.id);\n        const tables = localStorageTables.filter((table) => table.queryEditorId === qe.id);\n        this.props.actions.migrateQueryEditorFromLocalStorage(qe, tables, queries);\n      });\n    }\n    // merge post form data with GET search params\n    // Hack: this data should be coming from getInitialState\n    // but for some reason this data isn't being passed properly through\n    // the reducer.\n    const bootstrapData = getBootstrapData();\n    const queryParameters = URI(window.location).search(true);\n    const { id, name, sql, savedQueryId, datasourceKey, queryId, dbid, dbname, catalog, schema, autorun, new: isNewQuery, ...urlParams } = {\n      ...this.context.requestedQuery,\n      ...bootstrapData.requested_query,\n      ...queryParameters\n    };\n    // Popping a new tab based on the querystring\n    if (id || sql || savedQueryId || datasourceKey || queryId) {\n      if (id) {\n        this.props.actions.popStoredQuery(id);\n      } else\n      if (savedQueryId) {\n        this.props.actions.popSavedQuery(savedQueryId);\n      } else\n      if (queryId) {\n        this.props.actions.popQuery(queryId);\n      } else\n      if (datasourceKey) {\n        this.props.actions.popDatasourceQuery(datasourceKey, sql);\n      } else\n      if (sql) {\n        let databaseId = dbid;\n        if (databaseId) {\n          databaseId = parseInt(databaseId, 10);\n        } else\n        {\n          const { databases } = this.props;\n          const databaseName = dbname;\n          if (databaseName) {\n            Object.keys(databases).forEach((db) => {\n              if (databases[db].database_name === databaseName) {\n                databaseId = databases[db].id;\n              }\n            });\n          }\n        }\n        const newQueryEditor = {\n          name,\n          dbId: databaseId,\n          catalog,\n          schema,\n          autorun,\n          sql\n        };\n        this.props.actions.addQueryEditor(newQueryEditor);\n      }\n      this.popNewTab(_pick(urlParams, Object.keys(queryParameters)));\n    } else\n    if (isNewQuery || this.props.queryEditors.length === 0) {\n      this.newQueryEditor();\n      if (isNewQuery) {\n        window.history.replaceState({}, document.title, SQL_LAB_URL);\n      }\n    } else\n    {\n      const qe = this.activeQueryEditor();\n      const latestQuery = this.props.queries[(qe == null ? void 0 : qe.latestQueryId) || ''];\n      if (isFeatureEnabled(FeatureFlag.SqllabBackendPersistence) &&\n      latestQuery &&\n      latestQuery.resultsKey) {\n        // when results are not stored in localStorage they need to be\n        // fetched from the results backend (if configured)\n        this.props.actions.fetchQueryResults(latestQuery, this.props.displayLimit);\n      }\n    }\n  }\n  popNewTab(urlParams) {\n    // Clean the url in browser history\n    const updatedUrl = `${URI(SQL_LAB_URL).query(urlParams)}`;\n    window.history.replaceState({}, document.title, updatedUrl);\n  }\n  activeQueryEditor() {\n    if (this.props.tabHistory.length === 0) {\n      return this.props.queryEditors[0];\n    }\n    const qeid = this.props.tabHistory[this.props.tabHistory.length - 1];\n    return this.props.queryEditors.find((qe) => qe.id === qeid) || null;\n  }\n  newQueryEditor() {\n    this.props.actions.addNewQueryEditor();\n  }\n  handleSelect(key) {\n    const qeid = this.props.tabHistory[this.props.tabHistory.length - 1];\n    if (key !== qeid) {\n      const queryEditor = this.props.queryEditors.find((qe) => qe.id === key);\n      if (!queryEditor) {\n        return;\n      }\n      this.props.actions.switchQueryEditor(queryEditor, this.props.displayLimit);\n    }\n  }\n  handleEdit(key, action) {\n    if (action === 'remove') {\n      const qe = this.props.queryEditors.find((qe) => qe.id === key);\n      if (qe) {\n        this.removeQueryEditor(qe);\n      }\n    }\n    if (action === 'add') {\n      this.newQueryEditor();\n    }\n  }\n  removeQueryEditor(qe) {\n    this.props.actions.removeQueryEditor(qe);\n  }\n  render() {var _this$props$queryEdit, _this$props$queryEdit2;\n    const noQueryEditors = ((_this$props$queryEdit = this.props.queryEditors) == null ? void 0 : _this$props$queryEdit.length) === 0;\n    const editors = (_this$props$queryEdit2 = this.props.queryEditors) == null ? void 0 : _this$props$queryEdit2.map((qe) => ___EmotionJSX(EditableTabs.TabPane, { key: qe.id, tab: ___EmotionJSX(SqlEditorTabHeader, { queryEditor: qe })\n      // for tests - key prop isn't handled by enzyme well bcs it's a react keyword\n      , \"data-key\": qe.id },\n    ___EmotionJSX(SqlEditor, { queryEditor: qe, defaultQueryLimit: this.props.defaultQueryLimit, maxRow: this.props.maxRow, displayLimit: this.props.displayLimit, saveQueryWarning: this.props.saveQueryWarning, scheduleQueryWarning: this.props.scheduleQueryWarning })\n    ));\n    const emptyTab = ___EmotionJSX(StyledTab, null,\n    ___EmotionJSX(TabTitle, null, t('Add a new tab')),\n    ___EmotionJSX(Tooltip, { id: \"add-tab\", placement: \"bottom\", title: userOS === 'Windows' ?\n      t('New tab (Ctrl + q)') :\n      t('New tab (Ctrl + t)') },\n    ___EmotionJSX(\"i\", { \"data-test\": \"add-tab-icon\", className: \"fa fa-plus-circle\" })\n    )\n    );\n    const emptyTabState = ___EmotionJSX(EditableTabs.TabPane, { key: 0, \"data-key\": 0, tab: emptyTab, closable: false },\n    ___EmotionJSX(EmptyStateBig, { image: \"empty_sql_chart.svg\", description: t('Add a new tab to create SQL Query') })\n    );\n    return ___EmotionJSX(StyledEditableTabs, { activeKey: this.props.tabHistory[this.props.tabHistory.length - 1], id: \"a11y-query-editor-tabs\", className: \"SqlEditorTabs\", \"data-test\": \"sql-editor-tabs\", onChange: this.handleSelect, fullWidth: false, hideAdd: this.props.offline, onTabClick: () => noQueryEditors && this.newQueryEditor(), onEdit: this.handleEdit, type: noQueryEditors ? 'card' : 'editable-card', addIcon: ___EmotionJSX(Tooltip, { id: \"add-tab\", placement: \"bottom\", title: userOS === 'Windows' ?\n        t('New tab (Ctrl + q)') :\n        t('New tab (Ctrl + t)') },\n      ___EmotionJSX(\"i\", { \"data-test\": \"add-tab-icon\", className: \"fa fa-plus-circle\" })\n      ) },\n    editors,\n    noQueryEditors && emptyTabState\n    );\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}TabbedSqlEditors.contextType = locationContext;\nexport function mapStateToProps({ sqlLab, common }) {var _sqlLab$queryEditors, _sqlLab$offline, _common$conf$SQLLAB_S, _common$conf$SQLLAB_S2;\n  return {\n    databases: sqlLab.databases,\n    queryEditors: (_sqlLab$queryEditors = sqlLab.queryEditors) != null ? _sqlLab$queryEditors : DEFAULT_PROPS.queryEditors,\n    queries: sqlLab.queries,\n    tabHistory: sqlLab.tabHistory,\n    tables: sqlLab.tables,\n    defaultDbId: common.conf.SQLLAB_DEFAULT_DBID,\n    displayLimit: common.conf.DISPLAY_MAX_ROW,\n    offline: (_sqlLab$offline = sqlLab.offline) != null ? _sqlLab$offline : DEFAULT_PROPS.offline,\n    defaultQueryLimit: common.conf.DEFAULT_SQLLAB_LIMIT,\n    maxRow: common.conf.SQL_MAX_ROW,\n    saveQueryWarning: (_common$conf$SQLLAB_S = common.conf.SQLLAB_SAVE_WARNING_MESSAGE) != null ? _common$conf$SQLLAB_S : DEFAULT_PROPS.saveQueryWarning,\n    scheduleQueryWarning: (_common$conf$SQLLAB_S2 = common.conf.SQLLAB_SCHEDULE_WARNING_MESSAGE) != null ? _common$conf$SQLLAB_S2 :\n    DEFAULT_PROPS.scheduleQueryWarning\n  };\n}\nconst mapDispatchToProps = {\n  ...Actions\n};\nfunction mergeProps(stateProps, dispatchProps) {\n  return {\n    ...stateProps,\n    actions: dispatchProps\n  };\n}const _default =\nconnect(mapStateToProps, mapDispatchToProps, mergeProps)(TabbedSqlEditors);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(DEFAULT_PROPS, \"DEFAULT_PROPS\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/TabbedSqlEditors/index.tsx\");reactHotLoader.register(StyledEditableTabs, \"StyledEditableTabs\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/TabbedSqlEditors/index.tsx\");reactHotLoader.register(StyledTab, \"StyledTab\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/TabbedSqlEditors/index.tsx\");reactHotLoader.register(TabTitle, \"TabTitle\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/TabbedSqlEditors/index.tsx\");reactHotLoader.register(userOS, \"userOS\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/TabbedSqlEditors/index.tsx\");reactHotLoader.register(SQL_LAB_URL, \"SQL_LAB_URL\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/TabbedSqlEditors/index.tsx\");reactHotLoader.register(TabbedSqlEditors, \"TabbedSqlEditors\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/TabbedSqlEditors/index.tsx\");reactHotLoader.register(mapStateToProps, \"mapStateToProps\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/TabbedSqlEditors/index.tsx\");reactHotLoader.register(mapDispatchToProps, \"mapDispatchToProps\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/TabbedSqlEditors/index.tsx\");reactHotLoader.register(mergeProps, \"mergeProps\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/TabbedSqlEditors/index.tsx\");reactHotLoader.register(_default, \"default\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/TabbedSqlEditors/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["React","EditableTabs","connect","URI","FeatureFlag","styled","t","isFeatureEnabled","Tooltip","detectOS","Actions","EmptyStateBig","getBootstrapData","locationContext","SqlEditor","SqlEditorTabHeader","jsx","___EmotionJSX","DEFAULT_PROPS","queryEditors","offline","saveQueryWarning","scheduleQueryWarning","StyledEditableTabs","StyledTab","span","TabTitle","theme","gridUnit","userOS","SQL_LAB_URL","TabbedSqlEditors","PureComponent","constructor","props","removeQueryEditor","bind","handleSelect","handleEdit","componentDidMount","SqllabBackendPersistence","localStorageTables","tables","filter","table","inLocalStorage","localStorageQueries","Object","values","queries","query","qe","forEach","sqlEditorId","id","queryEditorId","actions","migrateQueryEditorFromLocalStorage","bootstrapData","queryParameters","window","location","search","name","sql","savedQueryId","datasourceKey","queryId","dbid","dbname","catalog","schema","autorun","new","isNewQuery","urlParams","context","requestedQuery","requested_query","popStoredQuery","popSavedQuery","popQuery","popDatasourceQuery","databaseId","parseInt","databases","databaseName","keys","db","database_name","newQueryEditor","dbId","addQueryEditor","popNewTab","_pick","length","history","replaceState","document","title","activeQueryEditor","latestQuery","latestQueryId","resultsKey","fetchQueryResults","displayLimit","updatedUrl","tabHistory","qeid","find","addNewQueryEditor","key","queryEditor","switchQueryEditor","action","render","_this$props$queryEdit","_this$props$queryEdit2","noQueryEditors","editors","map","TabPane","tab","defaultQueryLimit","maxRow","emptyTab","placement","className","emptyTabState","closable","image","description","activeKey","onChange","fullWidth","hideAdd","onTabClick","onEdit","type","addIcon","__reactstandin__regenerateByEval","code","eval","contextType","mapStateToProps","sqlLab","common","_sqlLab$queryEditors","_sqlLab$offline","_common$conf$SQLLAB_S","_common$conf$SQLLAB_S2","defaultDbId","conf","SQLLAB_DEFAULT_DBID","DISPLAY_MAX_ROW","DEFAULT_SQLLAB_LIMIT","SQL_MAX_ROW","SQLLAB_SAVE_WARNING_MESSAGE","SQLLAB_SCHEDULE_WARNING_MESSAGE","mapDispatchToProps","mergeProps","stateProps","dispatchProps","_default","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/SqlLab/components/TabbedSqlEditors/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { pick } from 'lodash';\nimport { EditableTabs } from 'src/components/Tabs';\nimport { connect } from 'react-redux';\nimport URI from 'urijs';\nimport type { QueryEditor, SqlLabRootState } from 'src/SqlLab/types';\nimport { FeatureFlag, styled, t, isFeatureEnabled } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { detectOS } from 'src/utils/common';\nimport * as Actions from 'src/SqlLab/actions/sqlLab';\nimport { EmptyStateBig } from 'src/components/EmptyState';\nimport getBootstrapData from 'src/utils/getBootstrapData';\nimport { locationContext } from 'src/pages/SqlLab/LocationContext';\nimport SqlEditor from '../SqlEditor';\nimport SqlEditorTabHeader from '../SqlEditorTabHeader';\n\nconst DEFAULT_PROPS = {\n  queryEditors: [],\n  offline: false,\n  saveQueryWarning: null,\n  scheduleQueryWarning: null,\n};\n\nconst StyledEditableTabs = styled(EditableTabs)`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst StyledTab = styled.span`\n  line-height: 24px;\n`;\n\nconst TabTitle = styled.span`\n  margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n  text-transform: none;\n`;\n\n// Get the user's OS\nconst userOS = detectOS();\n\ntype TabbedSqlEditorsProps = ReturnType<typeof mergeProps>;\n\nconst SQL_LAB_URL = '/sqllab';\n\nclass TabbedSqlEditors extends React.PureComponent<TabbedSqlEditorsProps> {\n  constructor(props: TabbedSqlEditorsProps) {\n    super(props);\n    this.removeQueryEditor = this.removeQueryEditor.bind(this);\n    this.handleSelect = this.handleSelect.bind(this);\n    this.handleEdit = this.handleEdit.bind(this);\n  }\n\n  componentDidMount() {\n    // migrate query editor and associated tables state to server\n    if (isFeatureEnabled(FeatureFlag.SqllabBackendPersistence)) {\n      const localStorageTables = this.props.tables.filter(\n        table => table.inLocalStorage,\n      );\n      const localStorageQueries = Object.values(this.props.queries).filter(\n        query => query.inLocalStorage,\n      );\n      this.props.queryEditors\n        .filter(qe => qe.inLocalStorage)\n        .forEach(qe => {\n          // get all queries associated with the query editor\n          const queries = localStorageQueries.filter(\n            query => query.sqlEditorId === qe.id,\n          );\n          const tables = localStorageTables.filter(\n            table => table.queryEditorId === qe.id,\n          );\n          this.props.actions.migrateQueryEditorFromLocalStorage(\n            qe,\n            tables,\n            queries,\n          );\n        });\n    }\n\n    // merge post form data with GET search params\n    // Hack: this data should be coming from getInitialState\n    // but for some reason this data isn't being passed properly through\n    // the reducer.\n    const bootstrapData = getBootstrapData();\n    const queryParameters = URI(window.location).search(true);\n    const {\n      id,\n      name,\n      sql,\n      savedQueryId,\n      datasourceKey,\n      queryId,\n      dbid,\n      dbname,\n      catalog,\n      schema,\n      autorun,\n      new: isNewQuery,\n      ...urlParams\n    } = {\n      ...this.context.requestedQuery,\n      ...bootstrapData.requested_query,\n      ...queryParameters,\n    } as Record<string, string>;\n\n    // Popping a new tab based on the querystring\n    if (id || sql || savedQueryId || datasourceKey || queryId) {\n      if (id) {\n        this.props.actions.popStoredQuery(id);\n      } else if (savedQueryId) {\n        this.props.actions.popSavedQuery(savedQueryId);\n      } else if (queryId) {\n        this.props.actions.popQuery(queryId);\n      } else if (datasourceKey) {\n        this.props.actions.popDatasourceQuery(datasourceKey, sql);\n      } else if (sql) {\n        let databaseId: string | number = dbid;\n        if (databaseId) {\n          databaseId = parseInt(databaseId, 10);\n        } else {\n          const { databases } = this.props;\n          const databaseName = dbname;\n          if (databaseName) {\n            Object.keys(databases).forEach(db => {\n              if (databases[db].database_name === databaseName) {\n                databaseId = databases[db].id;\n              }\n            });\n          }\n        }\n        const newQueryEditor = {\n          name,\n          dbId: databaseId,\n          catalog,\n          schema,\n          autorun,\n          sql,\n        };\n        this.props.actions.addQueryEditor(newQueryEditor);\n      }\n      this.popNewTab(pick(urlParams, Object.keys(queryParameters)));\n    } else if (isNewQuery || this.props.queryEditors.length === 0) {\n      this.newQueryEditor();\n\n      if (isNewQuery) {\n        window.history.replaceState({}, document.title, SQL_LAB_URL);\n      }\n    } else {\n      const qe = this.activeQueryEditor();\n      const latestQuery = this.props.queries[qe?.latestQueryId || ''];\n      if (\n        isFeatureEnabled(FeatureFlag.SqllabBackendPersistence) &&\n        latestQuery &&\n        latestQuery.resultsKey\n      ) {\n        // when results are not stored in localStorage they need to be\n        // fetched from the results backend (if configured)\n        this.props.actions.fetchQueryResults(\n          latestQuery,\n          this.props.displayLimit,\n        );\n      }\n    }\n  }\n\n  popNewTab(urlParams: Record<string, string>) {\n    // Clean the url in browser history\n    const updatedUrl = `${URI(SQL_LAB_URL).query(urlParams)}`;\n    window.history.replaceState({}, document.title, updatedUrl);\n  }\n\n  activeQueryEditor() {\n    if (this.props.tabHistory.length === 0) {\n      return this.props.queryEditors[0];\n    }\n    const qeid = this.props.tabHistory[this.props.tabHistory.length - 1];\n    return this.props.queryEditors.find(qe => qe.id === qeid) || null;\n  }\n\n  newQueryEditor() {\n    this.props.actions.addNewQueryEditor();\n  }\n\n  handleSelect(key: string) {\n    const qeid = this.props.tabHistory[this.props.tabHistory.length - 1];\n    if (key !== qeid) {\n      const queryEditor = this.props.queryEditors.find(qe => qe.id === key);\n      if (!queryEditor) {\n        return;\n      }\n      this.props.actions.switchQueryEditor(\n        queryEditor,\n        this.props.displayLimit,\n      );\n    }\n  }\n\n  handleEdit(key: string, action: string) {\n    if (action === 'remove') {\n      const qe = this.props.queryEditors.find(qe => qe.id === key);\n      if (qe) {\n        this.removeQueryEditor(qe);\n      }\n    }\n    if (action === 'add') {\n      this.newQueryEditor();\n    }\n  }\n\n  removeQueryEditor(qe: QueryEditor) {\n    this.props.actions.removeQueryEditor(qe);\n  }\n\n  render() {\n    const noQueryEditors = this.props.queryEditors?.length === 0;\n    const editors = this.props.queryEditors?.map(qe => (\n      <EditableTabs.TabPane\n        key={qe.id}\n        tab={<SqlEditorTabHeader queryEditor={qe} />}\n        // for tests - key prop isn't handled by enzyme well bcs it's a react keyword\n        data-key={qe.id}\n      >\n        <SqlEditor\n          queryEditor={qe}\n          defaultQueryLimit={this.props.defaultQueryLimit}\n          maxRow={this.props.maxRow}\n          displayLimit={this.props.displayLimit}\n          saveQueryWarning={this.props.saveQueryWarning}\n          scheduleQueryWarning={this.props.scheduleQueryWarning}\n        />\n      </EditableTabs.TabPane>\n    ));\n\n    const emptyTab = (\n      <StyledTab>\n        <TabTitle>{t('Add a new tab')}</TabTitle>\n        <Tooltip\n          id=\"add-tab\"\n          placement=\"bottom\"\n          title={\n            userOS === 'Windows'\n              ? t('New tab (Ctrl + q)')\n              : t('New tab (Ctrl + t)')\n          }\n        >\n          <i data-test=\"add-tab-icon\" className=\"fa fa-plus-circle\" />\n        </Tooltip>\n      </StyledTab>\n    );\n\n    const emptyTabState = (\n      <EditableTabs.TabPane\n        key={0}\n        data-key={0}\n        tab={emptyTab}\n        closable={false}\n      >\n        <EmptyStateBig\n          image=\"empty_sql_chart.svg\"\n          description={t('Add a new tab to create SQL Query')}\n        />\n      </EditableTabs.TabPane>\n    );\n\n    return (\n      <StyledEditableTabs\n        activeKey={this.props.tabHistory[this.props.tabHistory.length - 1]}\n        id=\"a11y-query-editor-tabs\"\n        className=\"SqlEditorTabs\"\n        data-test=\"sql-editor-tabs\"\n        onChange={this.handleSelect}\n        fullWidth={false}\n        hideAdd={this.props.offline}\n        onTabClick={() => noQueryEditors && this.newQueryEditor()}\n        onEdit={this.handleEdit}\n        type={noQueryEditors ? 'card' : 'editable-card'}\n        addIcon={\n          <Tooltip\n            id=\"add-tab\"\n            placement=\"bottom\"\n            title={\n              userOS === 'Windows'\n                ? t('New tab (Ctrl + q)')\n                : t('New tab (Ctrl + t)')\n            }\n          >\n            <i data-test=\"add-tab-icon\" className=\"fa fa-plus-circle\" />\n          </Tooltip>\n        }\n      >\n        {editors}\n        {noQueryEditors && emptyTabState}\n      </StyledEditableTabs>\n    );\n  }\n}\n\nTabbedSqlEditors.contextType = locationContext;\n\nexport function mapStateToProps({ sqlLab, common }: SqlLabRootState) {\n  return {\n    databases: sqlLab.databases,\n    queryEditors: sqlLab.queryEditors ?? DEFAULT_PROPS.queryEditors,\n    queries: sqlLab.queries,\n    tabHistory: sqlLab.tabHistory,\n    tables: sqlLab.tables,\n    defaultDbId: common.conf.SQLLAB_DEFAULT_DBID,\n    displayLimit: common.conf.DISPLAY_MAX_ROW,\n    offline: sqlLab.offline ?? DEFAULT_PROPS.offline,\n    defaultQueryLimit: common.conf.DEFAULT_SQLLAB_LIMIT,\n    maxRow: common.conf.SQL_MAX_ROW,\n    saveQueryWarning:\n      common.conf.SQLLAB_SAVE_WARNING_MESSAGE ?? DEFAULT_PROPS.saveQueryWarning,\n    scheduleQueryWarning:\n      common.conf.SQLLAB_SCHEDULE_WARNING_MESSAGE ??\n      DEFAULT_PROPS.scheduleQueryWarning,\n  };\n}\n\nconst mapDispatchToProps = {\n  ...Actions,\n};\n\nfunction mergeProps(\n  stateProps: ReturnType<typeof mapStateToProps>,\n  dispatchProps: typeof mapDispatchToProps,\n) {\n  return {\n    ...stateProps,\n    actions: dispatchProps,\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n  mergeProps,\n)(TabbedSqlEditors);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}