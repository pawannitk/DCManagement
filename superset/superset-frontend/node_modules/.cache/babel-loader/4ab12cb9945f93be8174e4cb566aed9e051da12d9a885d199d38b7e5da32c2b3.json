{"ast":null,"code":"import _debounce from \"lodash/debounce\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useState } from 'react';\nimport { ensureIsArray, SupersetClient, t } from '@superset-ui/core';\n\nimport rison from 'rison';\nconst INITIAL_ADVANCED_DATA_TYPES_STATE = {\n  parsedAdvancedDataType: '',\n  advancedDataTypeOperatorList: [],\n  errorMessage: ''\n};\nconst useAdvancedDataTypes = (validHandler) => {\n  const [advancedDataTypesState, setAdvancedDataTypesState] = useState(INITIAL_ADVANCED_DATA_TYPES_STATE);\n  const [subjectAdvancedDataType, setSubjectAdvancedDataType] = useState();\n  const fetchAdvancedDataTypeValueCallback = useCallback((comp, advancedDataTypesState, subjectAdvancedDataType) => {\n    const values = ensureIsArray(comp);\n    if (!subjectAdvancedDataType) {\n      setAdvancedDataTypesState(INITIAL_ADVANCED_DATA_TYPES_STATE);\n      return;\n    }\n    _debounce(() => {\n      const queryParams = rison.encode({\n        type: subjectAdvancedDataType,\n        values\n      });\n      const endpoint = `/api/v1/advanced_data_type/convert?q=${queryParams}`;\n      SupersetClient.get({ endpoint }).\n      then(({ json }) => {\n        setAdvancedDataTypesState({\n          parsedAdvancedDataType: json.result.display_value,\n          advancedDataTypeOperatorList: json.result.valid_filter_operators,\n          errorMessage: json.result.error_message\n        });\n        // Changed due to removal of status field\n        validHandler(!json.result.error_message);\n      }).\n      catch(() => {\n        setAdvancedDataTypesState({\n          parsedAdvancedDataType: '',\n          advancedDataTypeOperatorList: advancedDataTypesState.advancedDataTypeOperatorList,\n          errorMessage: t('Failed to retrieve advanced type')\n        });\n        validHandler(false);\n      });\n    }, 600)();\n  }, [validHandler]);\n  const fetchSubjectAdvancedDataType = (props) => {\n    const option = props.options.find((option) => 'column_name' in option &&\n    option.column_name === props.adhocFilter.subject ||\n    'optionName' in option &&\n    option.optionName === props.adhocFilter.subject);\n    if (option && 'advanced_data_type' in option) {\n      setSubjectAdvancedDataType(option.advanced_data_type);\n    } else\n    {\n      props.validHandler(true);\n    }\n  };\n  return {\n    advancedDataTypesState,\n    subjectAdvancedDataType,\n    setAdvancedDataTypesState,\n    fetchAdvancedDataTypeValueCallback,\n    fetchSubjectAdvancedDataType\n  };\n};__signature__(useAdvancedDataTypes, \"useState{[advancedDataTypesState, setAdvancedDataTypesState](INITIAL_ADVANCED_DATA_TYPES_STATE)}\\nuseState{[subjectAdvancedDataType, setSubjectAdvancedDataType]}\\nuseCallback{fetchAdvancedDataTypeValueCallback}\");const _default =\nuseAdvancedDataTypes;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(INITIAL_ADVANCED_DATA_TYPES_STATE, \"INITIAL_ADVANCED_DATA_TYPES_STATE\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilterEditPopoverSimpleTabContent/useAdvancedDataTypes.ts\");reactHotLoader.register(useAdvancedDataTypes, \"useAdvancedDataTypes\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilterEditPopoverSimpleTabContent/useAdvancedDataTypes.ts\");reactHotLoader.register(_default, \"default\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilterEditPopoverSimpleTabContent/useAdvancedDataTypes.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["useCallback","useState","ensureIsArray","SupersetClient","t","rison","INITIAL_ADVANCED_DATA_TYPES_STATE","parsedAdvancedDataType","advancedDataTypeOperatorList","errorMessage","useAdvancedDataTypes","validHandler","advancedDataTypesState","setAdvancedDataTypesState","subjectAdvancedDataType","setSubjectAdvancedDataType","fetchAdvancedDataTypeValueCallback","comp","values","_debounce","queryParams","encode","type","endpoint","get","then","json","result","display_value","valid_filter_operators","error_message","catch","fetchSubjectAdvancedDataType","props","option","options","find","column_name","adhocFilter","subject","optionName","advanced_data_type","__signature__","_default","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilterEditPopoverSimpleTabContent/useAdvancedDataTypes.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useState } from 'react';\nimport { ensureIsArray, SupersetClient, t } from '@superset-ui/core';\nimport { debounce } from 'lodash';\nimport rison from 'rison';\nimport { AdvancedDataTypesState, Props } from './index';\n\nconst INITIAL_ADVANCED_DATA_TYPES_STATE: AdvancedDataTypesState = {\n  parsedAdvancedDataType: '',\n  advancedDataTypeOperatorList: [],\n  errorMessage: '',\n};\n\nconst useAdvancedDataTypes = (validHandler: (isValid: boolean) => void) => {\n  const [advancedDataTypesState, setAdvancedDataTypesState] =\n    useState<AdvancedDataTypesState>(INITIAL_ADVANCED_DATA_TYPES_STATE);\n  const [subjectAdvancedDataType, setSubjectAdvancedDataType] = useState<\n    string | undefined\n  >();\n\n  const fetchAdvancedDataTypeValueCallback = useCallback(\n    (\n      comp: string | string[],\n      advancedDataTypesState: AdvancedDataTypesState,\n      subjectAdvancedDataType?: string,\n    ) => {\n      const values = ensureIsArray(comp);\n      if (!subjectAdvancedDataType) {\n        setAdvancedDataTypesState(INITIAL_ADVANCED_DATA_TYPES_STATE);\n        return;\n      }\n      debounce(() => {\n        const queryParams = rison.encode({\n          type: subjectAdvancedDataType,\n          values,\n        });\n        const endpoint = `/api/v1/advanced_data_type/convert?q=${queryParams}`;\n        SupersetClient.get({ endpoint })\n          .then(({ json }) => {\n            setAdvancedDataTypesState({\n              parsedAdvancedDataType: json.result.display_value,\n              advancedDataTypeOperatorList: json.result.valid_filter_operators,\n              errorMessage: json.result.error_message,\n            });\n            // Changed due to removal of status field\n            validHandler(!json.result.error_message);\n          })\n          .catch(() => {\n            setAdvancedDataTypesState({\n              parsedAdvancedDataType: '',\n              advancedDataTypeOperatorList:\n                advancedDataTypesState.advancedDataTypeOperatorList,\n              errorMessage: t('Failed to retrieve advanced type'),\n            });\n            validHandler(false);\n          });\n      }, 600)();\n    },\n    [validHandler],\n  );\n\n  const fetchSubjectAdvancedDataType = (props: Props) => {\n    const option = props.options.find(\n      option =>\n        ('column_name' in option &&\n          option.column_name === props.adhocFilter.subject) ||\n        ('optionName' in option &&\n          option.optionName === props.adhocFilter.subject),\n    );\n    if (option && 'advanced_data_type' in option) {\n      setSubjectAdvancedDataType(option.advanced_data_type);\n    } else {\n      props.validHandler(true);\n    }\n  };\n\n  return {\n    advancedDataTypesState,\n    subjectAdvancedDataType,\n    setAdvancedDataTypesState,\n    fetchAdvancedDataTypeValueCallback,\n    fetchSubjectAdvancedDataType,\n  };\n};\n\nexport default useAdvancedDataTypes;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}