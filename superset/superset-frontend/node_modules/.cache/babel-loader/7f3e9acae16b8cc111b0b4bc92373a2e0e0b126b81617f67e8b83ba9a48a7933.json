{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};import { toHilbertQuadkey, FromHilbertQuadKey, IJToST, STToUV, FaceUVToXYZ, XYZToLngLat } from './s2-geometry';\nimport Long from 'long';\n\nfunction getIdFromToken(token) {\n  const paddedToken = token.padEnd(16, '0');\n  return Long.fromString(paddedToken, 16);\n}\n\nconst MAX_RESOLUTION = 100;\n\nfunction getGeoBounds({\n  face,\n  ij,\n  level\n}) {\n  const offsets = [[0, 0], [0, 1], [1, 1], [1, 0], [0, 0]];\n  const resolution = Math.max(1, Math.ceil(MAX_RESOLUTION * Math.pow(2, -level)));\n  const result = new Float64Array(4 * resolution * 2 + 2);\n  let ptIndex = 0;\n  let prevLng = 0;\n\n  for (let i = 0; i < 4; i++) {\n    const offset = offsets[i].slice(0);\n    const nextOffset = offsets[i + 1];\n    const stepI = (nextOffset[0] - offset[0]) / resolution;\n    const stepJ = (nextOffset[1] - offset[1]) / resolution;\n\n    for (let j = 0; j < resolution; j++) {\n      offset[0] += stepI;\n      offset[1] += stepJ;\n      const st = IJToST(ij, level, offset);\n      const uv = STToUV(st);\n      const xyz = FaceUVToXYZ(face, uv);\n      const lngLat = XYZToLngLat(xyz);\n\n      if (Math.abs(lngLat[1]) > 89.999) {\n        lngLat[0] = prevLng;\n      }\n\n      const deltaLng = lngLat[0] - prevLng;\n      lngLat[0] += deltaLng > 180 ? -360 : deltaLng < -180 ? 360 : 0;\n      result[ptIndex++] = lngLat[0];\n      result[ptIndex++] = lngLat[1];\n      prevLng = lngLat[0];\n    }\n  }\n\n  result[ptIndex++] = result[0];\n  result[ptIndex++] = result[1];\n  return result;\n}\n\nexport function getS2QuadKey(token) {\n  if (typeof token === 'string') {\n    if (token.indexOf('/') > 0) {\n      return token;\n    }\n\n    token = getIdFromToken(token);\n  }\n\n  return toHilbertQuadkey(token.toString());\n}\nexport function getS2Polygon(token) {\n  const key = getS2QuadKey(token);\n  const s2cell = FromHilbertQuadKey(key);\n  return getGeoBounds(s2cell);\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(getIdFromToken, \"getIdFromToken\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/geo-layers/dist/esm/s2-layer/s2-utils.js\");reactHotLoader.register(MAX_RESOLUTION, \"MAX_RESOLUTION\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/geo-layers/dist/esm/s2-layer/s2-utils.js\");reactHotLoader.register(getGeoBounds, \"getGeoBounds\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/geo-layers/dist/esm/s2-layer/s2-utils.js\");reactHotLoader.register(getS2QuadKey, \"getS2QuadKey\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/geo-layers/dist/esm/s2-layer/s2-utils.js\");reactHotLoader.register(getS2Polygon, \"getS2Polygon\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/geo-layers/dist/esm/s2-layer/s2-utils.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["toHilbertQuadkey","FromHilbertQuadKey","IJToST","STToUV","FaceUVToXYZ","XYZToLngLat","Long","getIdFromToken","token","paddedToken","padEnd","fromString","MAX_RESOLUTION","getGeoBounds","face","ij","level","offsets","resolution","Math","max","ceil","pow","result","Float64Array","ptIndex","prevLng","i","offset","slice","nextOffset","stepI","stepJ","j","st","uv","xyz","lngLat","abs","deltaLng","getS2QuadKey","indexOf","toString","getS2Polygon","key","s2cell","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["../../../src/s2-layer/s2-utils.ts"],"sourcesContent":["// s2-geometry is a pure JavaScript port of Google/Niantic's S2 Geometry library\n// which is perfect since it works in the browser.\nimport {\n  toHilbertQuadkey,\n  FromHilbertQuadKey,\n  IJToST,\n  STToUV,\n  FaceUVToXYZ,\n  XYZToLngLat\n} from './s2-geometry';\nimport Long from 'long';\n\n/**\n * Given an S2 token this function convert the token to 64 bit id\n   https://github.com/google/s2-geometry-library-java/blob/c04b68bf3197a9c34082327eeb3aec7ab7c85da1/src/com/google/common/geometry/S2CellId.java#L439\n * */\nfunction getIdFromToken(token: string): number {\n  // pad token with zeros to make the length 16\n  const paddedToken = token.padEnd(16, '0');\n  return Long.fromString(paddedToken, 16);\n}\n\nconst MAX_RESOLUTION = 100;\n\n/* Adapted from s2-geometry's S2Cell.getCornerLatLngs */\n/* eslint-disable max-statements */\nfunction getGeoBounds({\n  face,\n  ij,\n  level\n}: {\n  face: number;\n  ij: [number, number];\n  level: number;\n}): Float64Array {\n  const offsets = [\n    [0, 0],\n    [0, 1],\n    [1, 1],\n    [1, 0],\n    [0, 0]\n  ];\n\n  // The S2 cell edge is curved: http://s2geometry.io/\n  // This is more prominent at lower levels\n  // resolution is the number of segments to generate per edge.\n  // We exponentially reduce resolution as level increases so it doesn't affect perf\n  // when there are a large number of cells\n  const resolution = Math.max(1, Math.ceil(MAX_RESOLUTION * Math.pow(2, -level)));\n  const result = new Float64Array(4 * resolution * 2 + 2);\n  let ptIndex = 0;\n  let prevLng = 0;\n\n  for (let i = 0; i < 4; i++) {\n    const offset = offsets[i].slice(0) as [number, number];\n    const nextOffset = offsets[i + 1];\n    const stepI = (nextOffset[0] - offset[0]) / resolution;\n    const stepJ = (nextOffset[1] - offset[1]) / resolution;\n\n    for (let j = 0; j < resolution; j++) {\n      offset[0] += stepI;\n      offset[1] += stepJ;\n      // Cell can be represented by coordinates IJ, ST, UV, XYZ\n      // http://s2geometry.io/devguide/s2cell_hierarchy#coordinate-systems\n      const st = IJToST(ij, level, offset);\n      const uv = STToUV(st);\n      const xyz = FaceUVToXYZ(face, uv);\n      const lngLat = XYZToLngLat(xyz);\n\n      // Adjust longitude for Web Mercator projection\n      if (Math.abs(lngLat[1]) > 89.999) {\n        lngLat[0] = prevLng;\n      }\n      const deltaLng = lngLat[0] - prevLng;\n      lngLat[0] += deltaLng > 180 ? -360 : deltaLng < -180 ? 360 : 0;\n\n      result[ptIndex++] = lngLat[0];\n      result[ptIndex++] = lngLat[1];\n      prevLng = lngLat[0];\n    }\n  }\n  // close the loop\n  result[ptIndex++] = result[0];\n  result[ptIndex++] = result[1];\n  return result;\n}\n/* eslint-enable max-statements */\n\nexport function getS2QuadKey(token: string | number): string {\n  if (typeof token === 'string') {\n    if (token.indexOf('/') > 0) {\n      // is Hilbert quad key\n      return token;\n    }\n    // is S2 token\n    token = getIdFromToken(token);\n  }\n  // is Long id\n  return toHilbertQuadkey(token.toString());\n}\n\n/**\n * Get a polygon with corner coordinates for an s2 cell\n * @param {*} cell - This can be an S2 key or token\n * @return {Float64Array} - a simple polygon in flat array format: [lng0, lat0, lng1, lat1, ...]\n *   - the polygon is closed, i.e. last coordinate is a copy of the first coordinate\n */\nexport function getS2Polygon(token: string | number): Float64Array {\n  const key = getS2QuadKey(token);\n  const s2cell = FromHilbertQuadKey(key);\n\n  return getGeoBounds(s2cell);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}