{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { CompositeLayer } from '@deck.gl/core';\nimport { PolygonLayer } from '@deck.gl/layers';\nconst defaultProps = { ...PolygonLayer.defaultProps\n};\nexport default class GeoCellLayer extends CompositeLayer {\n  indexToBounds() {\n    return null;\n  }\n\n  renderLayers() {\n    const {\n      elevationScale,\n      extruded,\n      wireframe,\n      filled,\n      stroked,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified,\n      getElevation,\n      getFillColor,\n      getLineColor,\n      getLineWidth\n    } = this.props;\n    const {\n      updateTriggers,\n      material,\n      transitions\n    } = this.props;\n    const CellLayer = this.getSubLayerClass('cell', PolygonLayer);\n    const {\n      updateTriggers: boundsUpdateTriggers,\n      ...boundsProps\n    } = this.indexToBounds() || {};\n    return new CellLayer({\n      filled,\n      wireframe,\n      extruded,\n      elevationScale,\n      stroked,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified,\n      material,\n      transitions,\n      getElevation,\n      getFillColor,\n      getLineColor,\n      getLineWidth\n    }, this.getSubLayerProps({\n      id: 'cell',\n      updateTriggers: updateTriggers && { ...boundsUpdateTriggers,\n        getElevation: updateTriggers.getElevation,\n        getFillColor: updateTriggers.getFillColor,\n        getLineColor: updateTriggers.getLineColor,\n        getLineWidth: updateTriggers.getLineWidth\n      }\n    }), boundsProps);\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\n\n_defineProperty(GeoCellLayer, \"layerName\", 'GeoCellLayer');\n\n_defineProperty(GeoCellLayer, \"defaultProps\", defaultProps);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(defaultProps, \"defaultProps\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/geo-layers/dist/esm/geo-cell-layer/GeoCellLayer.js\");reactHotLoader.register(GeoCellLayer, \"GeoCellLayer\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/geo-layers/dist/esm/geo-cell-layer/GeoCellLayer.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["CompositeLayer","PolygonLayer","defaultProps","GeoCellLayer","indexToBounds","renderLayers","elevationScale","extruded","wireframe","filled","stroked","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","lineJointRounded","lineMiterLimit","lineDashJustified","getElevation","getFillColor","getLineColor","getLineWidth","props","updateTriggers","material","transitions","CellLayer","getSubLayerClass","boundsUpdateTriggers","boundsProps","getSubLayerProps","id","__reactstandin__regenerateByEval","key","code","eval","reactHotLoader","register","leaveModule","reactHotLoaderGlobal","undefined","module"],"sources":["../../../src/geo-cell-layer/GeoCellLayer.ts"],"sourcesContent":["import {CompositeLayer, Layer, LayersList, DefaultProps} from '@deck.gl/core';\nimport {PolygonLayer, PolygonLayerProps} from '@deck.gl/layers';\n\nconst defaultProps: DefaultProps<GeoCellLayerProps> = {\n  ...PolygonLayer.defaultProps\n};\n\n/** All properties supported by GeoCellLayer. */\nexport type GeoCellLayerProps<DataT = any> = PolygonLayerProps<DataT>;\n\nexport default class GeoCellLayer<DataT = any, ExtraProps extends {} = {}> extends CompositeLayer<\n  Required<GeoCellLayerProps<DataT>> & ExtraProps\n> {\n  static layerName = 'GeoCellLayer';\n  static defaultProps: DefaultProps = defaultProps;\n\n  /** Implement to generate props to create geometry. */\n  indexToBounds(): Partial<GeoCellLayer['props']> | null {\n    return null;\n  }\n\n  renderLayers(): Layer | null | LayersList {\n    // Rendering props underlying layer\n    const {\n      elevationScale,\n      extruded,\n      wireframe,\n      filled,\n      stroked,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified,\n      getElevation,\n      getFillColor,\n      getLineColor,\n      getLineWidth\n    } = this.props;\n\n    // Accessor props for underlying layers\n    const {updateTriggers, material, transitions} = this.props;\n\n    // Filled Polygon Layer\n    const CellLayer = this.getSubLayerClass('cell', PolygonLayer);\n    const {updateTriggers: boundsUpdateTriggers, ...boundsProps} = this.indexToBounds() || {};\n    return new CellLayer(\n      {\n        filled,\n        wireframe,\n\n        extruded,\n        elevationScale,\n\n        stroked,\n        lineWidthUnits,\n        lineWidthScale,\n        lineWidthMinPixels,\n        lineWidthMaxPixels,\n        lineJointRounded,\n        lineMiterLimit,\n        lineDashJustified,\n\n        material,\n        transitions,\n\n        getElevation,\n        getFillColor,\n        getLineColor,\n        getLineWidth\n      },\n      this.getSubLayerProps({\n        id: 'cell',\n        updateTriggers: updateTriggers && {\n          ...boundsUpdateTriggers,\n          getElevation: updateTriggers.getElevation,\n          getFillColor: updateTriggers.getFillColor,\n          getLineColor: updateTriggers.getLineColor,\n          getLineWidth: updateTriggers.getLineWidth\n        }\n      }),\n      boundsProps\n    );\n  }\n}\n"],"mappings":";AAAA,SAAQA,cAAR,QAA8D,eAA9D;AACA,SAAQC,YAAR,QAA8C,iBAA9C;AAEA,MAAMC,YAA6C,GAAG,EACpD,GAAGD,YAAY,CAACC;AADoC,CAAtD;AAOA,eAAe,MAAMC,YAAN,SAAoEH,cAApE,CAEb;EAKAI,aAAaA,CAAA,EAA0C;IACrD,OAAO,IAAP;EACD;;EAEDC,YAAYA,CAAA,EAA8B;IAExC,MAAM;MACJC,cADI;MAEJC,QAFI;MAGJC,SAHI;MAIJC,MAJI;MAKJC,OALI;MAMJC,cANI;MAOJC,cAPI;MAQJC,kBARI;MASJC,kBATI;MAUJC,gBAVI;MAWJC,cAXI;MAYJC,iBAZI;MAaJC,YAbI;MAcJC,YAdI;MAeJC,YAfI;MAgBJC;IAhBI,IAiBF,KAAKC,KAjBT;IAoBA,MAAM;MAACC,cAAD;MAAiBC,QAAjB;MAA2BC;IAA3B,IAA0C,KAAKH,KAArD;IAGA,MAAMI,SAAS,GAAG,KAAKC,gBAAL,CAAsB,MAAtB,EAA8B1B,YAA9B,CAAlB;IACA,MAAM;MAACsB,cAAc,EAAEK,oBAAjB;MAAuC,GAAGC;IAA1C,IAAyD,KAAKzB,aAAL,MAAwB,EAAvF;IACA,OAAO,IAAIsB,SAAJ,CACL;MACEjB,MADF;MAEED,SAFF;MAIED,QAJF;MAKED,cALF;MAOEI,OAPF;MAQEC,cARF;MASEC,cATF;MAUEC,kBAVF;MAWEC,kBAXF;MAYEC,gBAZF;MAaEC,cAbF;MAcEC,iBAdF;MAgBEO,QAhBF;MAiBEC,WAjBF;MAmBEP,YAnBF;MAoBEC,YApBF;MAqBEC,YArBF;MAsBEC;IAtBF,CADK,EAyBL,KAAKS,gBAAL,CAAsB;MACpBC,EAAE,EAAE,MADgB;MAEpBR,cAAc,EAAEA,cAAc,IAAI,EAChC,GAAGK,oBAD6B;QAEhCV,YAAY,EAAEK,cAAc,CAACL,YAFG;QAGhCC,YAAY,EAAEI,cAAc,CAACJ,YAHG;QAIhCC,YAAY,EAAEG,cAAc,CAACH,YAJG;QAKhCC,YAAY,EAAEE,cAAc,CAACF;MALG;IAFd,CAAtB,CAzBK,EAmCLQ,WAnCK,CAAP;EAqCD;EAAAG,iCAAAC,GAAA,EAAAC,IAAA;IAAA,KAAAD,GAAA,IAAAE,IAAA,CAAAD,IAAA,GAzED;;gBAFmB/B,Y,eAGA,c;;gBAHAA,Y,kBAIiBD,Y,mLAXhCA,YAA6C,wLAAAkC,cAAA,CAAAC,QAAA,CAO9BlC,YAAN,gNAAAmC,WAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAD,WAAA,GAAAE,SAAA,CAAAF,WAAA,IAAAA,WAAA,CAAAG,MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}