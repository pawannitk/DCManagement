{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { buildQueryContext, ensureIsArray, isPhysicalColumn } from '@superset-ui/core';\nexport default function buildQuery(formData) {\n  const { groupbyColumns = [], groupbyRows = [], extra_form_data } = formData;\n  const time_grain_sqla = (extra_form_data == null ? void 0 : extra_form_data.time_grain_sqla) || formData.time_grain_sqla;\n  // TODO: add deduping of AdhocColumns\n  const columns = Array.from(new Set([\n  ...ensureIsArray(groupbyColumns),\n  ...ensureIsArray(groupbyRows)]\n  )).map((col) => {var _formData$temporal_co;\n    if (isPhysicalColumn(col) &&\n    time_grain_sqla && (\n    formData != null && (_formData$temporal_co = formData.temporal_columns_lookup) != null && _formData$temporal_co[col] ||\n    formData.granularity_sqla === col)) {\n      return {\n        timeGrain: time_grain_sqla,\n        columnType: 'BASE_AXIS',\n        sqlExpression: col,\n        label: col,\n        expressionType: 'SQL'\n      };\n    }\n    return col;\n  });\n  return buildQueryContext(formData, (baseQueryObject) => {\n    const { series_limit_metric, metrics, order_desc } = baseQueryObject;\n    let orderBy;\n    if (series_limit_metric) {\n      orderBy = [[series_limit_metric, !order_desc]];\n    } else\n    if (Array.isArray(metrics) && metrics[0]) {\n      orderBy = [[metrics[0], !order_desc]];\n    }\n    return [\n    {\n      ...baseQueryObject,\n      orderby: orderBy,\n      columns\n    }];\n\n  });\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(buildQuery, \"buildQuery\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/plugin/buildQuery.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["buildQueryContext","ensureIsArray","isPhysicalColumn","buildQuery","formData","groupbyColumns","groupbyRows","extra_form_data","time_grain_sqla","columns","Array","from","Set","map","col","_formData$temporal_co","temporal_columns_lookup","granularity_sqla","timeGrain","columnType","sqlExpression","label","expressionType","baseQueryObject","series_limit_metric","metrics","order_desc","orderBy","isArray","orderby","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/plugin/buildQuery.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  AdhocColumn,\n  buildQueryContext,\n  ensureIsArray,\n  isPhysicalColumn,\n  QueryFormColumn,\n  QueryFormOrderBy,\n} from '@superset-ui/core';\nimport { PivotTableQueryFormData } from '../types';\n\nexport default function buildQuery(formData: PivotTableQueryFormData) {\n  const { groupbyColumns = [], groupbyRows = [], extra_form_data } = formData;\n  const time_grain_sqla =\n    extra_form_data?.time_grain_sqla || formData.time_grain_sqla;\n\n  // TODO: add deduping of AdhocColumns\n  const columns = Array.from(\n    new Set([\n      ...ensureIsArray<QueryFormColumn>(groupbyColumns),\n      ...ensureIsArray<QueryFormColumn>(groupbyRows),\n    ]),\n  ).map(col => {\n    if (\n      isPhysicalColumn(col) &&\n      time_grain_sqla &&\n      (formData?.temporal_columns_lookup?.[col] ||\n        formData.granularity_sqla === col)\n    ) {\n      return {\n        timeGrain: time_grain_sqla,\n        columnType: 'BASE_AXIS',\n        sqlExpression: col,\n        label: col,\n        expressionType: 'SQL',\n      } as AdhocColumn;\n    }\n    return col;\n  });\n\n  return buildQueryContext(formData, baseQueryObject => {\n    const { series_limit_metric, metrics, order_desc } = baseQueryObject;\n    let orderBy: QueryFormOrderBy[] | undefined;\n    if (series_limit_metric) {\n      orderBy = [[series_limit_metric, !order_desc]];\n    } else if (Array.isArray(metrics) && metrics[0]) {\n      orderBy = [[metrics[0], !order_desc]];\n    }\n    return [\n      {\n        ...baseQueryObject,\n        orderby: orderBy,\n        columns,\n      },\n    ];\n  });\n}\n"],"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAkBA,SAEEA,iBAAiB,EACjBC,aAAa,EACbC,gBAAgB,QAGX,mBAAmB;AAG1B,eAAc,SAAUC,UAAUA,CAACC,QAAiC;EAClE,MAAM,EAAEC,cAAc,GAAG,EAAE,EAAEC,WAAW,GAAG,EAAE,EAAEC,eAAe,EAAE,GAAGH,QAAQ;EAC3E,MAAMI,eAAe,GACnB,CAAAD,eAAe,oBAAfA,eAAe,CAAEC,eAAe,KAAIJ,QAAQ,CAACI,eAAe;EAE9D;EACA,MAAMC,OAAO,GAAGC,KAAK,CAACC,IAAI,CACxB,IAAIC,GAAG,CAAC;EACN,GAAGX,aAAa,CAAkBI,cAAc,CAAC;EACjD,GAAGJ,aAAa,CAAkBK,WAAW,CAAC;EAC/C,CAAC,CACH,CAACO,GAAG,CAAC,CAAAC,GAAG,KAAG,KAAAC,qBAAA;IACV,IACEb,gBAAgB,CAACY,GAAG,CAAC;IACrBN,eAAe;IACdJ,QAAQ,aAAAW,qBAAA,GAARX,QAAQ,CAAEY,uBAAuB,aAAjCD,qBAAA,CAAoCD,GAAG,CAAC;IACvCV,QAAQ,CAACa,gBAAgB,KAAKH,GAAG,CAAC,EACpC;MACA,OAAO;QACLI,SAAS,EAAEV,eAAe;QAC1BW,UAAU,EAAE,WAAW;QACvBC,aAAa,EAAEN,GAAG;QAClBO,KAAK,EAAEP,GAAG;QACVQ,cAAc,EAAE;OACF;;IAElB,OAAOR,GAAG;EACZ,CAAC,CAAC;EAEF,OAAOd,iBAAiB,CAACI,QAAQ,EAAE,CAAAmB,eAAe,KAAG;IACnD,MAAM,EAAEC,mBAAmB,EAAEC,OAAO,EAAEC,UAAU,EAAE,GAAGH,eAAe;IACpE,IAAII,OAAuC;IAC3C,IAAIH,mBAAmB,EAAE;MACvBG,OAAO,GAAG,CAAC,CAACH,mBAAmB,EAAE,CAACE,UAAU,CAAC,CAAC;KAC/C;IAAM,IAAIhB,KAAK,CAACkB,OAAO,CAACH,OAAO,CAAC,IAAIA,OAAO,CAAC,CAAC,CAAC,EAAE;MAC/CE,OAAO,GAAG,CAAC,CAACF,OAAO,CAAC,CAAC,CAAC,EAAE,CAACC,UAAU,CAAC,CAAC;;IAEvC,OAAO;IACL;MACE,GAAGH,eAAe;MAClBM,OAAO,EAAEF,OAAO;MAChBlB;KACD,CACF;;EACH,CAAC,CAAC;AACJ,CAAC,mBAAAqB,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAC,OAAA,GAAAC,SAAA,MAAAH,cAAA,WAAAA,cAAA,CAAAI,QAAA,CA7CuB/B,UAAU,4JAAAgC,WAAA,UAAAJ,oBAAA,mBAAAA,oBAAA,CAAAI,WAAA,GAAAF,SAAA,CAAAE,WAAA,IAAAA,WAAA,CAAAC,MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}