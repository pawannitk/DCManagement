{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { CategoricalColorNamespace, getColumnLabel, getMetricLabel, getNumberFormatter, getTimeFormatter, NumberFormats, getValueFormatter, tooltipHtml } from '@superset-ui/core';\nimport { DEFAULT_FORM_DATA as DEFAULT_TREEMAP_FORM_DATA, EchartsTreemapLabelType } from './types';\nimport { formatSeriesName, getColtypesMapping } from '../utils/series';\nimport { COLOR_SATURATION, BORDER_WIDTH, GAP_WIDTH, LABEL_FONTSIZE, extractTreePathInfo, BORDER_COLOR } from './constants';\nimport { OpacityEnum } from '../constants';\nimport { getDefaultTooltip } from '../utils/tooltip';\nimport { treeBuilder } from '../utils/treeBuilder';\nexport function formatLabel({ params, labelType, numberFormatter }) {\n  const { name = '', value } = params;\n  const formattedValue = numberFormatter(value);\n  switch (labelType) {\n    case EchartsTreemapLabelType.Key:\n      return name;\n    case EchartsTreemapLabelType.Value:\n      return formattedValue;\n    case EchartsTreemapLabelType.KeyValue:\n      return `${name}: ${formattedValue}`;\n    default:\n      return name;\n  }\n}\nexport function formatTooltip({ params, numberFormatter }) {\n  const { value, treePathInfo = [] } = params;\n  const formattedValue = numberFormatter(value);\n  const { metricLabel, treePath } = extractTreePathInfo(treePathInfo);\n  const percentFormatter = getNumberFormatter(NumberFormats.PERCENT_2_POINT);\n  let formattedPercent = '';\n  // the last item is current node, here we should find the parent node\n  const currentNode = treePathInfo[treePathInfo.length - 1];\n  const parentNode = treePathInfo[treePathInfo.length - 2];\n  if (parentNode) {\n    const percent = parentNode.value ?\n    currentNode.value / parentNode.value :\n    0;\n    formattedPercent = percentFormatter(percent);\n  }\n  const row = [metricLabel, formattedValue];\n  if (formattedPercent) {\n    row.push(formattedPercent);\n  }\n  return tooltipHtml([row], treePath.join(' â–¸ '));\n}\nexport default function transformProps(chartProps) {\n  const { formData, height, queriesData, width, hooks, filterState, theme, inContextMenu, emitCrossFilters, datasource } = chartProps;\n  const { data = [] } = queriesData[0];\n  const { columnFormats = {}, currencyFormats = {} } = datasource;\n  const { setDataMask = () => {}, onContextMenu } = hooks;\n  const coltypeMapping = getColtypesMapping(queriesData[0]);\n  const { colorScheme, groupby = [], metric = '', labelType, labelPosition, numberFormat, currencyFormat, dateFormat, showLabels, showUpperLabels, dashboardId, sliceId } = {\n    ...DEFAULT_TREEMAP_FORM_DATA,\n    ...formData\n  };\n  const refs = {};\n  const colorFn = CategoricalColorNamespace.getScale(colorScheme);\n  const numberFormatter = getValueFormatter(metric, currencyFormats, columnFormats, numberFormat, currencyFormat);\n  const formatter = (params) => formatLabel({\n    params,\n    numberFormatter,\n    labelType\n  });\n  const columnsLabelMap = new Map();\n  const metricLabel = getMetricLabel(metric);\n  const groupbyLabels = groupby.map(getColumnLabel);\n  const treeData = treeBuilder(data, groupbyLabels, metricLabel);\n  const traverse = (treeNodes, path) => treeNodes.map((treeNode) => {var _treeNode$children;\n    const { name: nodeName, value, groupBy } = treeNode;\n    const name = formatSeriesName(nodeName, {\n      timeFormatter: getTimeFormatter(dateFormat),\n      ...(coltypeMapping[groupBy] && {\n        coltype: coltypeMapping[groupBy]\n      })\n    });\n    const newPath = path.concat(name);\n    let item = {\n      name,\n      value\n    };\n    if ((_treeNode$children = treeNode.children) != null && _treeNode$children.length) {\n      item = {\n        ...item,\n        children: traverse(treeNode.children, newPath),\n        colorSaturation: COLOR_SATURATION,\n        itemStyle: {\n          borderColor: BORDER_COLOR,\n          color: colorFn(name, sliceId),\n          borderWidth: BORDER_WIDTH,\n          gapWidth: GAP_WIDTH\n        }\n      };\n    } else\n    {\n      const joinedName = newPath.join(',');\n      // map(joined_name: [columnLabel_1, columnLabel_2, ...])\n      columnsLabelMap.set(joinedName, newPath);\n      if (filterState.selectedValues &&\n      !filterState.selectedValues.includes(joinedName)) {\n        item = {\n          ...item,\n          itemStyle: {\n            colorAlpha: OpacityEnum.SemiTransparent\n          },\n          label: {\n            color: `rgba(0, 0, 0, ${OpacityEnum.SemiTransparent})`\n          }\n        };\n      }\n    }\n    return item;\n  });\n  const transformedData = [\n  {\n    name: metricLabel,\n    colorSaturation: COLOR_SATURATION,\n    itemStyle: {\n      borderColor: BORDER_COLOR,\n      color: colorFn(`${metricLabel}`, sliceId),\n      borderWidth: BORDER_WIDTH,\n      gapWidth: GAP_WIDTH\n    },\n    upperLabel: {\n      show: false\n    },\n    children: traverse(treeData, [])\n  }];\n\n  // set a default color when metric values are 0 over all.\n  const levels = [\n  {\n    upperLabel: {\n      show: false\n    },\n    label: {\n      show: false\n    },\n    itemStyle: {\n      color: theme.colors.primary.base\n    }\n  }];\n\n  const series = [\n  {\n    type: 'treemap',\n    width: '100%',\n    height: '100%',\n    nodeClick: undefined,\n    roam: !dashboardId,\n    breadcrumb: {\n      show: false,\n      emptyItemWidth: 25\n    },\n    emphasis: {\n      label: {\n        show: true\n      }\n    },\n    levels,\n    label: {\n      show: showLabels,\n      position: labelPosition,\n      formatter,\n      color: theme.colors.grayscale.dark2,\n      fontSize: LABEL_FONTSIZE\n    },\n    upperLabel: {\n      show: showUpperLabels,\n      formatter,\n      textBorderColor: 'transparent',\n      fontSize: LABEL_FONTSIZE\n    },\n    data: transformedData\n  }];\n\n  const echartOptions = {\n    tooltip: {\n      ...getDefaultTooltip(refs),\n      show: !inContextMenu,\n      trigger: 'item',\n      formatter: (params) => formatTooltip({\n        params,\n        numberFormatter\n      })\n    },\n    series\n  };\n  return {\n    formData,\n    width,\n    height,\n    echartOptions,\n    setDataMask,\n    emitCrossFilters,\n    labelMap: Object.fromEntries(columnsLabelMap),\n    groupby,\n    selectedValues: filterState.selectedValues || [],\n    onContextMenu,\n    refs,\n    coltypeMapping\n  };\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(formatLabel, \"formatLabel\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-echarts/src/Treemap/transformProps.ts\");reactHotLoader.register(formatTooltip, \"formatTooltip\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-echarts/src/Treemap/transformProps.ts\");reactHotLoader.register(transformProps, \"transformProps\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-echarts/src/Treemap/transformProps.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["CategoricalColorNamespace","getColumnLabel","getMetricLabel","getNumberFormatter","getTimeFormatter","NumberFormats","getValueFormatter","tooltipHtml","DEFAULT_FORM_DATA","DEFAULT_TREEMAP_FORM_DATA","EchartsTreemapLabelType","formatSeriesName","getColtypesMapping","COLOR_SATURATION","BORDER_WIDTH","GAP_WIDTH","LABEL_FONTSIZE","extractTreePathInfo","BORDER_COLOR","OpacityEnum","getDefaultTooltip","treeBuilder","formatLabel","params","labelType","numberFormatter","name","value","formattedValue","Key","Value","KeyValue","formatTooltip","treePathInfo","metricLabel","treePath","percentFormatter","PERCENT_2_POINT","formattedPercent","currentNode","length","parentNode","percent","row","push","join","transformProps","chartProps","formData","height","queriesData","width","hooks","filterState","theme","inContextMenu","emitCrossFilters","datasource","data","columnFormats","currencyFormats","setDataMask","onContextMenu","coltypeMapping","colorScheme","groupby","metric","labelPosition","numberFormat","currencyFormat","dateFormat","showLabels","showUpperLabels","dashboardId","sliceId","refs","colorFn","getScale","formatter","columnsLabelMap","Map","groupbyLabels","map","treeData","traverse","treeNodes","path","treeNode","_treeNode$children","nodeName","groupBy","timeFormatter","coltype","newPath","concat","item","children","colorSaturation","itemStyle","borderColor","color","borderWidth","gapWidth","joinedName","set","selectedValues","includes","colorAlpha","SemiTransparent","label","transformedData","upperLabel","show","levels","colors","primary","base","series","type","nodeClick","undefined","roam","breadcrumb","emptyItemWidth","emphasis","position","grayscale","dark2","fontSize","textBorderColor","echartOptions","tooltip","trigger","labelMap","Object","fromEntries","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-echarts/src/Treemap/transformProps.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  CategoricalColorNamespace,\n  getColumnLabel,\n  getMetricLabel,\n  getNumberFormatter,\n  getTimeFormatter,\n  NumberFormats,\n  ValueFormatter,\n  getValueFormatter,\n  tooltipHtml,\n} from '@superset-ui/core';\nimport { TreemapSeriesNodeItemOption } from 'echarts/types/src/chart/treemap/TreemapSeries';\nimport { EChartsCoreOption, TreemapSeriesOption } from 'echarts';\nimport {\n  DEFAULT_FORM_DATA as DEFAULT_TREEMAP_FORM_DATA,\n  EchartsTreemapChartProps,\n  EchartsTreemapFormData,\n  EchartsTreemapLabelType,\n  TreemapSeriesCallbackDataParams,\n  TreemapTransformedProps,\n} from './types';\nimport { formatSeriesName, getColtypesMapping } from '../utils/series';\nimport {\n  COLOR_SATURATION,\n  BORDER_WIDTH,\n  GAP_WIDTH,\n  LABEL_FONTSIZE,\n  extractTreePathInfo,\n  BORDER_COLOR,\n} from './constants';\nimport { OpacityEnum } from '../constants';\nimport { getDefaultTooltip } from '../utils/tooltip';\nimport { Refs } from '../types';\nimport { treeBuilder, TreeNode } from '../utils/treeBuilder';\n\nexport function formatLabel({\n  params,\n  labelType,\n  numberFormatter,\n}: {\n  params: TreemapSeriesCallbackDataParams;\n  labelType: EchartsTreemapLabelType;\n  numberFormatter: ValueFormatter;\n}): string {\n  const { name = '', value } = params;\n  const formattedValue = numberFormatter(value as number);\n\n  switch (labelType) {\n    case EchartsTreemapLabelType.Key:\n      return name;\n    case EchartsTreemapLabelType.Value:\n      return formattedValue;\n    case EchartsTreemapLabelType.KeyValue:\n      return `${name}: ${formattedValue}`;\n    default:\n      return name;\n  }\n}\n\nexport function formatTooltip({\n  params,\n  numberFormatter,\n}: {\n  params: TreemapSeriesCallbackDataParams;\n  numberFormatter: ValueFormatter;\n}): string {\n  const { value, treePathInfo = [] } = params;\n  const formattedValue = numberFormatter(value as number);\n  const { metricLabel, treePath } = extractTreePathInfo(treePathInfo);\n  const percentFormatter = getNumberFormatter(NumberFormats.PERCENT_2_POINT);\n\n  let formattedPercent = '';\n  // the last item is current node, here we should find the parent node\n  const currentNode = treePathInfo[treePathInfo.length - 1];\n  const parentNode = treePathInfo[treePathInfo.length - 2];\n  if (parentNode) {\n    const percent: number = parentNode.value\n      ? (currentNode.value as number) / (parentNode.value as number)\n      : 0;\n    formattedPercent = percentFormatter(percent);\n  }\n  const row = [metricLabel, formattedValue];\n  if (formattedPercent) {\n    row.push(formattedPercent);\n  }\n  return tooltipHtml([row], treePath.join(' â–¸ '));\n}\n\nexport default function transformProps(\n  chartProps: EchartsTreemapChartProps,\n): TreemapTransformedProps {\n  const {\n    formData,\n    height,\n    queriesData,\n    width,\n    hooks,\n    filterState,\n    theme,\n    inContextMenu,\n    emitCrossFilters,\n    datasource,\n  } = chartProps;\n  const { data = [] } = queriesData[0];\n  const { columnFormats = {}, currencyFormats = {} } = datasource;\n  const { setDataMask = () => {}, onContextMenu } = hooks;\n  const coltypeMapping = getColtypesMapping(queriesData[0]);\n\n  const {\n    colorScheme,\n    groupby = [],\n    metric = '',\n    labelType,\n    labelPosition,\n    numberFormat,\n    currencyFormat,\n    dateFormat,\n    showLabels,\n    showUpperLabels,\n    dashboardId,\n    sliceId,\n  }: EchartsTreemapFormData = {\n    ...DEFAULT_TREEMAP_FORM_DATA,\n    ...formData,\n  };\n  const refs: Refs = {};\n  const colorFn = CategoricalColorNamespace.getScale(colorScheme as string);\n  const numberFormatter = getValueFormatter(\n    metric,\n    currencyFormats,\n    columnFormats,\n    numberFormat,\n    currencyFormat,\n  );\n\n  const formatter = (params: TreemapSeriesCallbackDataParams) =>\n    formatLabel({\n      params,\n      numberFormatter,\n      labelType,\n    });\n\n  const columnsLabelMap = new Map<string, string[]>();\n  const metricLabel = getMetricLabel(metric);\n  const groupbyLabels = groupby.map(getColumnLabel);\n  const treeData = treeBuilder(data, groupbyLabels, metricLabel);\n  const traverse = (treeNodes: TreeNode[], path: string[]) =>\n    treeNodes.map(treeNode => {\n      const { name: nodeName, value, groupBy } = treeNode;\n      const name = formatSeriesName(nodeName, {\n        timeFormatter: getTimeFormatter(dateFormat),\n        ...(coltypeMapping[groupBy] && {\n          coltype: coltypeMapping[groupBy],\n        }),\n      });\n      const newPath = path.concat(name);\n      let item: TreemapSeriesNodeItemOption = {\n        name,\n        value,\n      };\n      if (treeNode.children?.length) {\n        item = {\n          ...item,\n          children: traverse(treeNode.children, newPath),\n          colorSaturation: COLOR_SATURATION,\n          itemStyle: {\n            borderColor: BORDER_COLOR,\n            color: colorFn(name, sliceId),\n            borderWidth: BORDER_WIDTH,\n            gapWidth: GAP_WIDTH,\n          },\n        };\n      } else {\n        const joinedName = newPath.join(',');\n        // map(joined_name: [columnLabel_1, columnLabel_2, ...])\n        columnsLabelMap.set(joinedName, newPath);\n        if (\n          filterState.selectedValues &&\n          !filterState.selectedValues.includes(joinedName)\n        ) {\n          item = {\n            ...item,\n            itemStyle: {\n              colorAlpha: OpacityEnum.SemiTransparent,\n            },\n            label: {\n              color: `rgba(0, 0, 0, ${OpacityEnum.SemiTransparent})`,\n            },\n          };\n        }\n      }\n      return item;\n    });\n\n  const transformedData: TreemapSeriesNodeItemOption[] = [\n    {\n      name: metricLabel,\n      colorSaturation: COLOR_SATURATION,\n      itemStyle: {\n        borderColor: BORDER_COLOR,\n        color: colorFn(`${metricLabel}`, sliceId),\n        borderWidth: BORDER_WIDTH,\n        gapWidth: GAP_WIDTH,\n      },\n      upperLabel: {\n        show: false,\n      },\n      children: traverse(treeData, []),\n    },\n  ];\n\n  // set a default color when metric values are 0 over all.\n  const levels = [\n    {\n      upperLabel: {\n        show: false,\n      },\n      label: {\n        show: false,\n      },\n      itemStyle: {\n        color: theme.colors.primary.base,\n      },\n    },\n  ];\n\n  const series: TreemapSeriesOption[] = [\n    {\n      type: 'treemap',\n      width: '100%',\n      height: '100%',\n      nodeClick: undefined,\n      roam: !dashboardId,\n      breadcrumb: {\n        show: false,\n        emptyItemWidth: 25,\n      },\n      emphasis: {\n        label: {\n          show: true,\n        },\n      },\n      levels,\n      label: {\n        show: showLabels,\n        position: labelPosition,\n        formatter,\n        color: theme.colors.grayscale.dark2,\n        fontSize: LABEL_FONTSIZE,\n      },\n      upperLabel: {\n        show: showUpperLabels,\n        formatter,\n        textBorderColor: 'transparent',\n        fontSize: LABEL_FONTSIZE,\n      },\n      data: transformedData,\n    },\n  ];\n\n  const echartOptions: EChartsCoreOption = {\n    tooltip: {\n      ...getDefaultTooltip(refs),\n      show: !inContextMenu,\n      trigger: 'item',\n      formatter: (params: any) =>\n        formatTooltip({\n          params,\n          numberFormatter,\n        }),\n    },\n    series,\n  };\n\n  return {\n    formData,\n    width,\n    height,\n    echartOptions,\n    setDataMask,\n    emitCrossFilters,\n    labelMap: Object.fromEntries(columnsLabelMap),\n    groupby,\n    selectedValues: filterState.selectedValues || [],\n    onContextMenu,\n    refs,\n    coltypeMapping,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}