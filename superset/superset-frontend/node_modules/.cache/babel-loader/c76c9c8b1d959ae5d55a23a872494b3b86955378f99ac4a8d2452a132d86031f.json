{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport Pass from './pass';\nimport { clear, setParameters, withParameters, cssToDeviceRatio } from '@luma.gl/core';\nexport default class LayersPass extends Pass {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"_lastRenderIndex\", -1);\n  }\n\n  render(options) {\n    const gl = this.gl;\n    setParameters(gl, {\n      framebuffer: options.target\n    });\n    return this._drawLayers(options);\n  }\n\n  _drawLayers(options) {\n    const {\n      target,\n      moduleParameters,\n      viewports,\n      views,\n      onViewportActive,\n      clearStack = true,\n      clearCanvas = true\n    } = options;\n    options.pass = options.pass || 'unknown';\n    const gl = this.gl;\n\n    if (clearCanvas) {\n      clearGLCanvas(gl, target);\n    }\n\n    if (clearStack) {\n      this._lastRenderIndex = -1;\n    }\n\n    const renderStats = [];\n\n    for (const viewport of viewports) {\n      const view = views && views[viewport.id];\n      onViewportActive === null || onViewportActive === void 0 ? void 0 : onViewportActive(viewport);\n\n      const drawLayerParams = this._getDrawLayerParams(viewport, options);\n\n      const subViewports = viewport.subViewports || [viewport];\n\n      for (const subViewport of subViewports) {\n        const stats = this._drawLayersInViewport(gl, {\n          target,\n          moduleParameters,\n          viewport: subViewport,\n          view,\n          pass: options.pass,\n          layers: options.layers\n        }, drawLayerParams);\n\n        renderStats.push(stats);\n      }\n    }\n\n    return renderStats;\n  }\n\n  _getDrawLayerParams(viewport, {\n    layers,\n    pass,\n    isPicking = false,\n    layerFilter,\n    cullRect,\n    effects,\n    moduleParameters\n  }, evaluateShouldDrawOnly = false) {\n    const drawLayerParams = [];\n    const indexResolver = layerIndexResolver(this._lastRenderIndex + 1);\n    const drawContext = {\n      layer: layers[0],\n      viewport,\n      isPicking,\n      renderPass: pass,\n      cullRect\n    };\n    const layerFilterCache = {};\n\n    for (let layerIndex = 0; layerIndex < layers.length; layerIndex++) {\n      const layer = layers[layerIndex];\n\n      const shouldDrawLayer = this._shouldDrawLayer(layer, drawContext, layerFilter, layerFilterCache);\n\n      const layerParam = {\n        shouldDrawLayer\n      };\n\n      if (shouldDrawLayer && !evaluateShouldDrawOnly) {\n        layerParam.layerRenderIndex = indexResolver(layer, shouldDrawLayer);\n        layerParam.moduleParameters = this._getModuleParameters(layer, effects, pass, moduleParameters);\n        layerParam.layerParameters = this.getLayerParameters(layer, layerIndex, viewport);\n      }\n\n      drawLayerParams[layerIndex] = layerParam;\n    }\n\n    return drawLayerParams;\n  }\n\n  _drawLayersInViewport(gl, {\n    layers,\n    moduleParameters: globalModuleParameters,\n    pass,\n    target,\n    viewport,\n    view\n  }, drawLayerParams) {\n    const glViewport = getGLViewport(gl, {\n      moduleParameters: globalModuleParameters,\n      target,\n      viewport\n    });\n\n    if (view && view.props.clear) {\n      const clearOpts = view.props.clear === true ? {\n        color: true,\n        depth: true\n      } : view.props.clear;\n      withParameters(gl, {\n        scissorTest: true,\n        scissor: glViewport\n      }, () => clear(gl, clearOpts));\n    }\n\n    const renderStatus = {\n      totalCount: layers.length,\n      visibleCount: 0,\n      compositeCount: 0,\n      pickableCount: 0\n    };\n    setParameters(gl, {\n      viewport: glViewport\n    });\n\n    for (let layerIndex = 0; layerIndex < layers.length; layerIndex++) {\n      const layer = layers[layerIndex];\n      const {\n        shouldDrawLayer,\n        layerRenderIndex,\n        moduleParameters,\n        layerParameters\n      } = drawLayerParams[layerIndex];\n\n      if (shouldDrawLayer && layer.props.pickable) {\n        renderStatus.pickableCount++;\n      }\n\n      if (layer.isComposite) {\n        renderStatus.compositeCount++;\n      } else if (shouldDrawLayer) {\n        renderStatus.visibleCount++;\n        this._lastRenderIndex = Math.max(this._lastRenderIndex, layerRenderIndex);\n        moduleParameters.viewport = viewport;\n\n        try {\n          layer._drawLayer({\n            moduleParameters,\n            uniforms: {\n              layerIndex: layerRenderIndex\n            },\n            parameters: layerParameters\n          });\n        } catch (err) {\n          layer.raiseError(err, \"drawing \".concat(layer, \" to \").concat(pass));\n        }\n      }\n    }\n\n    return renderStatus;\n  }\n\n  shouldDrawLayer(layer) {\n    return true;\n  }\n\n  getModuleParameters(layer, effects) {\n    return null;\n  }\n\n  getLayerParameters(layer, layerIndex, viewport) {\n    return layer.props.parameters;\n  }\n\n  _shouldDrawLayer(layer, drawContext, layerFilter, layerFilterCache) {\n    const shouldDrawLayer = layer.props.visible && this.shouldDrawLayer(layer);\n\n    if (!shouldDrawLayer) {\n      return false;\n    }\n\n    drawContext.layer = layer;\n    let parent = layer.parent;\n\n    while (parent) {\n      if (!parent.props.visible || !parent.filterSubLayer(drawContext)) {\n        return false;\n      }\n\n      drawContext.layer = parent;\n      parent = parent.parent;\n    }\n\n    if (layerFilter) {\n      const rootLayerId = drawContext.layer.id;\n\n      if (!(rootLayerId in layerFilterCache)) {\n        layerFilterCache[rootLayerId] = layerFilter(drawContext);\n      }\n\n      if (!layerFilterCache[rootLayerId]) {\n        return false;\n      }\n    }\n\n    layer.activateViewport(drawContext.viewport);\n    return true;\n  }\n\n  _getModuleParameters(layer, effects, pass, overrides) {\n    var _layer$internalState;\n\n    const moduleParameters = Object.assign(Object.create(((_layer$internalState = layer.internalState) === null || _layer$internalState === void 0 ? void 0 : _layer$internalState.propsInTransition) || layer.props), {\n      autoWrapLongitude: layer.wrapLongitude,\n      viewport: layer.context.viewport,\n      mousePosition: layer.context.mousePosition,\n      pickingActive: 0,\n      devicePixelRatio: cssToDeviceRatio(this.gl)\n    });\n\n    if (effects) {\n      for (const effect of effects) {\n        var _effect$getModulePara;\n\n        Object.assign(moduleParameters, (_effect$getModulePara = effect.getModuleParameters) === null || _effect$getModulePara === void 0 ? void 0 : _effect$getModulePara.call(effect, layer));\n      }\n    }\n\n    return Object.assign(moduleParameters, this.getModuleParameters(layer, effects), overrides);\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\nexport function layerIndexResolver(startIndex = 0, layerIndices = {}) {\n  const resolvers = {};\n\n  const resolveLayerIndex = (layer, isDrawn) => {\n    const indexOverride = layer.props._offset;\n    const layerId = layer.id;\n    const parentId = layer.parent && layer.parent.id;\n    let index;\n\n    if (parentId && !(parentId in layerIndices)) {\n      resolveLayerIndex(layer.parent, false);\n    }\n\n    if (parentId in resolvers) {\n      const resolver = resolvers[parentId] = resolvers[parentId] || layerIndexResolver(layerIndices[parentId], layerIndices);\n      index = resolver(layer, isDrawn);\n      resolvers[layerId] = resolver;\n    } else if (Number.isFinite(indexOverride)) {\n      index = indexOverride + (layerIndices[parentId] || 0);\n      resolvers[layerId] = null;\n    } else {\n      index = startIndex;\n    }\n\n    if (isDrawn && index >= startIndex) {\n      startIndex = index + 1;\n    }\n\n    layerIndices[layerId] = index;\n    return index;\n  };\n\n  return resolveLayerIndex;\n}\n\nfunction getGLViewport(gl, {\n  moduleParameters,\n  target,\n  viewport\n}) {\n  const useTarget = target && target.id !== 'default-framebuffer';\n  const pixelRatio = moduleParameters && moduleParameters.devicePixelRatio || cssToDeviceRatio(gl);\n  const height = useTarget ? target.height : gl.drawingBufferHeight;\n  const dimensions = viewport;\n  return [dimensions.x * pixelRatio, height - (dimensions.y + dimensions.height) * pixelRatio, dimensions.width * pixelRatio, dimensions.height * pixelRatio];\n}\n\nfunction clearGLCanvas(gl, targetFramebuffer) {\n  const width = targetFramebuffer ? targetFramebuffer.width : gl.drawingBufferWidth;\n  const height = targetFramebuffer ? targetFramebuffer.height : gl.drawingBufferHeight;\n  setParameters(gl, {\n    viewport: [0, 0, width, height]\n  });\n  gl.clear(16384 | 256);\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(LayersPass, \"LayersPass\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/core/dist/esm/passes/layers-pass.js\");reactHotLoader.register(layerIndexResolver, \"layerIndexResolver\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/core/dist/esm/passes/layers-pass.js\");reactHotLoader.register(getGLViewport, \"getGLViewport\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/core/dist/esm/passes/layers-pass.js\");reactHotLoader.register(clearGLCanvas, \"clearGLCanvas\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/core/dist/esm/passes/layers-pass.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["Pass","clear","setParameters","withParameters","cssToDeviceRatio","LayersPass","constructor","args","_defineProperty","render","options","gl","framebuffer","target","_drawLayers","moduleParameters","viewports","views","onViewportActive","clearStack","clearCanvas","pass","clearGLCanvas","_lastRenderIndex","renderStats","viewport","view","id","drawLayerParams","_getDrawLayerParams","subViewports","subViewport","stats","_drawLayersInViewport","layers","push","isPicking","layerFilter","cullRect","effects","evaluateShouldDrawOnly","indexResolver","layerIndexResolver","drawContext","layer","renderPass","layerFilterCache","layerIndex","length","shouldDrawLayer","_shouldDrawLayer","layerParam","layerRenderIndex","_getModuleParameters","layerParameters","getLayerParameters","globalModuleParameters","glViewport","getGLViewport","props","clearOpts","color","depth","scissorTest","scissor","renderStatus","totalCount","visibleCount","compositeCount","pickableCount","pickable","isComposite","Math","max","_drawLayer","uniforms","parameters","err","raiseError","concat","getModuleParameters","visible","parent","filterSubLayer","rootLayerId","activateViewport","overrides","_layer$internalState","Object","assign","create","internalState","propsInTransition","autoWrapLongitude","wrapLongitude","context","mousePosition","pickingActive","devicePixelRatio","effect","_effect$getModulePara","call","__reactstandin__regenerateByEval","key","code","eval","startIndex","layerIndices","resolvers","resolveLayerIndex","isDrawn","indexOverride","_offset","layerId","parentId","index","resolver","Number","isFinite","useTarget","pixelRatio","height","drawingBufferHeight","dimensions","x","y","width","targetFramebuffer","drawingBufferWidth","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["../../../src/passes/layers-pass.ts"],"sourcesContent":["import GL from '@luma.gl/constants';\nimport Pass from './pass';\nimport {clear, setParameters, withParameters, cssToDeviceRatio} from '@luma.gl/core';\n\nimport type {Framebuffer} from '@luma.gl/core';\nimport type Viewport from '../viewports/viewport';\nimport type View from '../views/view';\nimport type Layer from '../lib/layer';\nimport type {Effect} from '../lib/effect';\n\nexport type Rect = {x: number; y: number; width: number; height: number};\n\nexport type LayersPassRenderOptions = {\n  target?: Framebuffer;\n  isPicking?: boolean;\n  pass: string;\n  layers: Layer[];\n  viewports: Viewport[];\n  onViewportActive?: (viewport: Viewport) => void;\n  cullRect?: Rect;\n  views?: Record<string, View>;\n  effects?: Effect[];\n  /** If true, recalculates render index (z) from 0. Set to false if a stack of layers are rendered in multiple passes. */\n  clearStack?: boolean;\n  clearCanvas?: boolean;\n  layerFilter?: ((context: FilterContext) => boolean) | null;\n  moduleParameters?: any;\n  /** Stores returned results from Effect.preRender, for use downstream in the render pipeline */\n  preRenderStats?: Record<string, any>;\n};\n\ntype DrawLayerParameters = {\n  shouldDrawLayer: boolean;\n  layerRenderIndex?: number;\n  moduleParameters?: any;\n  layerParameters?: any;\n};\n\nexport type FilterContext = {\n  layer: Layer;\n  viewport: Viewport;\n  isPicking: boolean;\n  renderPass: string;\n  cullRect?: Rect;\n};\n\nexport type RenderStats = {\n  totalCount: number;\n  visibleCount: number;\n  compositeCount: number;\n  pickableCount: number;\n};\n\nexport default class LayersPass extends Pass {\n  _lastRenderIndex: number = -1;\n\n  render(options: LayersPassRenderOptions): any {\n    const gl = this.gl;\n\n    setParameters(gl, {framebuffer: options.target});\n    return this._drawLayers(options);\n  }\n\n  // Draw a list of layers in a list of viewports\n  private _drawLayers(options: LayersPassRenderOptions) {\n    const {\n      target,\n      moduleParameters,\n      viewports,\n      views,\n      onViewportActive,\n      clearStack = true,\n      clearCanvas = true\n    } = options;\n    options.pass = options.pass || 'unknown';\n\n    const gl = this.gl;\n    if (clearCanvas) {\n      clearGLCanvas(gl, target);\n    }\n\n    if (clearStack) {\n      this._lastRenderIndex = -1;\n    }\n\n    const renderStats: RenderStats[] = [];\n\n    for (const viewport of viewports) {\n      const view = views && views[viewport.id];\n\n      // Update context to point to this viewport\n      onViewportActive?.(viewport);\n\n      const drawLayerParams = this._getDrawLayerParams(viewport, options);\n\n      // render this viewport\n      const subViewports = viewport.subViewports || [viewport];\n      for (const subViewport of subViewports) {\n        const stats = this._drawLayersInViewport(\n          gl,\n          {\n            target,\n            moduleParameters,\n            viewport: subViewport,\n            view,\n            pass: options.pass,\n            layers: options.layers\n          },\n          drawLayerParams\n        );\n        renderStats.push(stats);\n      }\n    }\n    return renderStats;\n  }\n\n  // When a viewport contains multiple subviewports (e.g. repeated web mercator map),\n  // this is only done once for the parent viewport\n  /* Resolve the parameters needed to draw each layer */\n  protected _getDrawLayerParams(\n    viewport: Viewport,\n    {\n      layers,\n      pass,\n      isPicking = false,\n      layerFilter,\n      cullRect,\n      effects,\n      moduleParameters\n    }: LayersPassRenderOptions,\n    /** Internal flag, true if only used to determine whether each layer should be drawn */\n    evaluateShouldDrawOnly: boolean = false\n  ): DrawLayerParameters[] {\n    const drawLayerParams: DrawLayerParameters[] = [];\n    const indexResolver = layerIndexResolver(this._lastRenderIndex + 1);\n    const drawContext: FilterContext = {\n      layer: layers[0],\n      viewport,\n      isPicking,\n      renderPass: pass,\n      cullRect\n    };\n    const layerFilterCache = {};\n    for (let layerIndex = 0; layerIndex < layers.length; layerIndex++) {\n      const layer = layers[layerIndex];\n      // Check if we should draw layer\n      const shouldDrawLayer = this._shouldDrawLayer(\n        layer,\n        drawContext,\n        layerFilter,\n        layerFilterCache\n      );\n\n      const layerParam: DrawLayerParameters = {\n        shouldDrawLayer\n      };\n\n      if (shouldDrawLayer && !evaluateShouldDrawOnly) {\n        // This is the \"logical\" index for ordering this layer in the stack\n        // used to calculate polygon offsets\n        // It can be the same as another layer\n        layerParam.layerRenderIndex = indexResolver(layer, shouldDrawLayer);\n\n        layerParam.moduleParameters = this._getModuleParameters(\n          layer,\n          effects,\n          pass,\n          moduleParameters\n        );\n        layerParam.layerParameters = this.getLayerParameters(layer, layerIndex, viewport);\n      }\n      drawLayerParams[layerIndex] = layerParam;\n    }\n    return drawLayerParams;\n  }\n\n  // Draws a list of layers in one viewport\n  // TODO - when picking we could completely skip rendering viewports that dont\n  // intersect with the picking rect\n  /* eslint-disable max-depth, max-statements */\n  private _drawLayersInViewport(\n    gl,\n    {layers, moduleParameters: globalModuleParameters, pass, target, viewport, view},\n    drawLayerParams\n  ): RenderStats {\n    const glViewport = getGLViewport(gl, {\n      moduleParameters: globalModuleParameters,\n      target,\n      viewport\n    });\n\n    if (view && view.props.clear) {\n      const clearOpts = view.props.clear === true ? {color: true, depth: true} : view.props.clear;\n      withParameters(\n        gl,\n        {\n          scissorTest: true,\n          scissor: glViewport\n        },\n        () => clear(gl, clearOpts)\n      );\n    }\n\n    // render layers in normal colors\n    const renderStatus = {\n      totalCount: layers.length,\n      visibleCount: 0,\n      compositeCount: 0,\n      pickableCount: 0\n    };\n\n    setParameters(gl, {viewport: glViewport});\n\n    // render layers in normal colors\n    for (let layerIndex = 0; layerIndex < layers.length; layerIndex++) {\n      const layer = layers[layerIndex];\n      const {shouldDrawLayer, layerRenderIndex, moduleParameters, layerParameters} =\n        drawLayerParams[layerIndex];\n\n      // Calculate stats\n      if (shouldDrawLayer && layer.props.pickable) {\n        renderStatus.pickableCount++;\n      }\n      if (layer.isComposite) {\n        renderStatus.compositeCount++;\n      } else if (shouldDrawLayer) {\n        // Draw the layer\n        renderStatus.visibleCount++;\n\n        this._lastRenderIndex = Math.max(this._lastRenderIndex, layerRenderIndex);\n\n        // overwrite layer.context.viewport with the sub viewport\n        moduleParameters.viewport = viewport;\n\n        try {\n          layer._drawLayer({\n            moduleParameters,\n            uniforms: {layerIndex: layerRenderIndex},\n            parameters: layerParameters\n          });\n        } catch (err) {\n          layer.raiseError(err, `drawing ${layer} to ${pass}`);\n        }\n      }\n    }\n\n    return renderStatus;\n  }\n  /* eslint-enable max-depth, max-statements */\n\n  /* Methods for subclass overrides */\n  shouldDrawLayer(layer: Layer): boolean {\n    return true;\n  }\n\n  protected getModuleParameters(layer: Layer, effects?: Effect[]): any {\n    return null;\n  }\n\n  protected getLayerParameters(layer: Layer, layerIndex: number, viewport: Viewport): any {\n    return layer.props.parameters;\n  }\n\n  /* Private */\n  private _shouldDrawLayer(\n    layer: Layer,\n    drawContext: FilterContext,\n    layerFilter: ((params: FilterContext) => boolean) | undefined | null,\n    layerFilterCache: Record<string, boolean>\n  ) {\n    const shouldDrawLayer = layer.props.visible && this.shouldDrawLayer(layer);\n\n    if (!shouldDrawLayer) {\n      return false;\n    }\n\n    drawContext.layer = layer;\n\n    let parent = layer.parent as Layer;\n    while (parent) {\n      // @ts-ignore\n      if (!parent.props.visible || !parent.filterSubLayer(drawContext)) {\n        return false;\n      }\n      drawContext.layer = parent;\n      parent = parent.parent as Layer;\n    }\n\n    if (layerFilter) {\n      const rootLayerId = drawContext.layer.id;\n      if (!(rootLayerId in layerFilterCache)) {\n        layerFilterCache[rootLayerId] = layerFilter(drawContext);\n      }\n      if (!layerFilterCache[rootLayerId]) {\n        return false;\n      }\n    }\n\n    // If a layer is drawn, update its viewportChanged flag\n    layer.activateViewport(drawContext.viewport);\n\n    return true;\n  }\n\n  private _getModuleParameters(\n    layer: Layer,\n    effects: Effect[] | undefined,\n    pass: string,\n    overrides: any\n  ): any {\n    const moduleParameters = Object.assign(\n      Object.create(layer.internalState?.propsInTransition || layer.props),\n      {\n        autoWrapLongitude: layer.wrapLongitude,\n        // @ts-ignore\n        viewport: layer.context.viewport,\n        // @ts-ignore\n        mousePosition: layer.context.mousePosition,\n        pickingActive: 0,\n        devicePixelRatio: cssToDeviceRatio(this.gl)\n      }\n    );\n\n    if (effects) {\n      for (const effect of effects) {\n        Object.assign(moduleParameters, effect.getModuleParameters?.(layer));\n      }\n    }\n\n    return Object.assign(moduleParameters, this.getModuleParameters(layer, effects), overrides);\n  }\n}\n\n// If the _index prop is defined, return a layer index that's relative to its parent\n// Otherwise return the index of the layer among all rendered layers\n// This is done recursively, i.e. if the user overrides a layer's default index,\n// all its descendants will be resolved relative to that index.\n// This implementation assumes that parent layers always appear before its children\n// which is true if the layer array comes from the LayerManager\nexport function layerIndexResolver(\n  startIndex: number = 0,\n  layerIndices: Record<string, number> = {}\n): (layer: Layer, isDrawn: boolean) => number {\n  const resolvers = {};\n\n  const resolveLayerIndex = (layer, isDrawn) => {\n    const indexOverride = layer.props._offset;\n    const layerId = layer.id;\n    const parentId = layer.parent && layer.parent.id;\n\n    let index;\n\n    if (parentId && !(parentId in layerIndices)) {\n      // Populate layerIndices with the parent layer's index\n      resolveLayerIndex(layer.parent, false);\n    }\n\n    if (parentId in resolvers) {\n      const resolver = (resolvers[parentId] =\n        resolvers[parentId] || layerIndexResolver(layerIndices[parentId], layerIndices));\n      index = resolver(layer, isDrawn);\n      resolvers[layerId] = resolver;\n    } else if (Number.isFinite(indexOverride)) {\n      index = indexOverride + (layerIndices[parentId] || 0);\n      // Mark layer as needing its own resolver\n      // We don't actually create it until it's used for the first time\n      resolvers[layerId] = null;\n    } else {\n      index = startIndex;\n    }\n\n    if (isDrawn && index >= startIndex) {\n      startIndex = index + 1;\n    }\n\n    layerIndices[layerId] = index;\n    return index;\n  };\n  return resolveLayerIndex;\n}\n\n// Convert viewport top-left CSS coordinates to bottom up WebGL coordinates\nfunction getGLViewport(\n  gl,\n  {\n    moduleParameters,\n    target,\n    viewport\n  }: {\n    moduleParameters: any;\n    target?: Framebuffer;\n    viewport: Viewport;\n  }\n): [number, number, number, number] {\n  const useTarget = target && target.id !== 'default-framebuffer';\n  const pixelRatio =\n    (moduleParameters && moduleParameters.devicePixelRatio) || cssToDeviceRatio(gl);\n\n  // Default framebuffer is used when writing to canvas\n  const height = useTarget ? target.height : gl.drawingBufferHeight;\n\n  // Convert viewport top-left CSS coordinates to bottom up WebGL coordinates\n  const dimensions = viewport;\n  return [\n    dimensions.x * pixelRatio,\n    height - (dimensions.y + dimensions.height) * pixelRatio,\n    dimensions.width * pixelRatio,\n    dimensions.height * pixelRatio\n  ];\n}\n\nfunction clearGLCanvas(gl: WebGLRenderingContext, targetFramebuffer?: Framebuffer) {\n  const width = targetFramebuffer ? targetFramebuffer.width : gl.drawingBufferWidth;\n  const height = targetFramebuffer ? targetFramebuffer.height : gl.drawingBufferHeight;\n  // clear depth and color buffers, restoring transparency\n  setParameters(gl, {viewport: [0, 0, width, height]});\n  gl.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}