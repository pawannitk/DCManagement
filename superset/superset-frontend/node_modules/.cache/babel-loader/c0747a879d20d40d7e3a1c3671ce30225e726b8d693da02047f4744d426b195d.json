{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { h3SetToMultiPolygon } from 'h3-js';\nimport { createIterable } from '@deck.gl/core';\nimport { default as H3HexagonLayer } from './h3-hexagon-layer';\nimport GeoCellLayer from '../geo-cell-layer/GeoCellLayer';\nconst defaultProps = {\n  getHexagons: {\n    type: 'accessor',\n    value: (d) => d.hexagons\n  }\n};\nexport default class H3ClusterLayer extends GeoCellLayer {\n  initializeState() {\n    H3HexagonLayer._checkH3Lib();\n  }\n\n  updateState({\n    props,\n    changeFlags\n  }) {\n    if (changeFlags.dataChanged || changeFlags.updateTriggersChanged && changeFlags.updateTriggersChanged.getHexagons) {\n      const {\n        data,\n        getHexagons\n      } = props;\n      const polygons = [];\n      const {\n        iterable,\n        objectInfo\n      } = createIterable(data);\n\n      for (const object of iterable) {\n        objectInfo.index++;\n        const hexagons = getHexagons(object, objectInfo);\n        const multiPolygon = h3SetToMultiPolygon(hexagons, true);\n\n        for (const polygon of multiPolygon) {\n          polygons.push(this.getSubLayerRow({\n            polygon\n          }, object, objectInfo.index));\n        }\n      }\n\n      this.setState({\n        polygons\n      });\n    }\n  }\n\n  indexToBounds() {\n    const {\n      getElevation,\n      getFillColor,\n      getLineColor,\n      getLineWidth\n    } = this.props;\n    return {\n      data: this.state.polygons,\n      getPolygon: (d) => d.polygon,\n      getElevation: this.getSubLayerAccessor(getElevation),\n      getFillColor: this.getSubLayerAccessor(getFillColor),\n      getLineColor: this.getSubLayerAccessor(getLineColor),\n      getLineWidth: this.getSubLayerAccessor(getLineWidth)\n    };\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\n\n_defineProperty(H3ClusterLayer, \"layerName\", 'H3ClusterLayer');\n\n_defineProperty(H3ClusterLayer, \"defaultProps\", defaultProps);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(defaultProps, \"defaultProps\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/geo-layers/dist/esm/h3-layers/h3-cluster-layer.js\");reactHotLoader.register(H3ClusterLayer, \"H3ClusterLayer\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/geo-layers/dist/esm/h3-layers/h3-cluster-layer.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["h3SetToMultiPolygon","createIterable","default","H3HexagonLayer","GeoCellLayer","defaultProps","getHexagons","type","value","d","hexagons","H3ClusterLayer","initializeState","_checkH3Lib","updateState","props","changeFlags","dataChanged","updateTriggersChanged","data","polygons","iterable","objectInfo","object","index","multiPolygon","polygon","push","getSubLayerRow","setState","indexToBounds","getElevation","getFillColor","getLineColor","getLineWidth","state","getPolygon","getSubLayerAccessor","__reactstandin__regenerateByEval","key","code","eval","reactHotLoader","register","leaveModule","reactHotLoaderGlobal","undefined","module"],"sources":["../../../src/h3-layers/h3-cluster-layer.ts"],"sourcesContent":["import {h3SetToMultiPolygon, H3IndexInput} from 'h3-js';\n\nimport {AccessorFunction, createIterable, UpdateParameters, DefaultProps} from '@deck.gl/core';\nimport {default as H3HexagonLayer} from './h3-hexagon-layer';\nimport GeoCellLayer, {GeoCellLayerProps} from '../geo-cell-layer/GeoCellLayer';\n\nconst defaultProps: DefaultProps<H3ClusterLayerProps> = {\n  getHexagons: {type: 'accessor', value: d => d.hexagons}\n};\n\n/** All properties supported by H3ClusterLayer. */\nexport type H3ClusterLayerProps<DataT = any> = _H3ClusterLayerProps<DataT> &\n  GeoCellLayerProps<DataT>;\n\n/** Properties added by H3ClusterLayer. */\ntype _H3ClusterLayerProps<DataT> = {\n  /**\n   * Called for each data object to retrieve the hexagon identifiers.\n   *\n   * By default, it reads `hexagons` property of data object.\n   */\n  getHexagons?: AccessorFunction<DataT, H3IndexInput[]>;\n};\n\nexport default class H3ClusterLayer<DataT = any, ExtraProps extends {} = {}> extends GeoCellLayer<\n  DataT,\n  Required<_H3ClusterLayerProps<DataT>> & ExtraProps\n> {\n  static layerName = 'H3ClusterLayer';\n  static defaultProps = defaultProps;\n\n  initializeState(): void {\n    H3HexagonLayer._checkH3Lib();\n  }\n\n  updateState({props, changeFlags}: UpdateParameters<this>): void {\n    if (\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged && changeFlags.updateTriggersChanged.getHexagons)\n    ) {\n      const {data, getHexagons} = props;\n      const polygons: {polygon: number[][][]}[] = [];\n\n      const {iterable, objectInfo} = createIterable(data);\n      for (const object of iterable) {\n        objectInfo.index++;\n        const hexagons = getHexagons(object, objectInfo);\n        const multiPolygon = h3SetToMultiPolygon(hexagons, true);\n\n        for (const polygon of multiPolygon) {\n          polygons.push(this.getSubLayerRow({polygon}, object, objectInfo.index));\n        }\n      }\n\n      this.setState({polygons});\n    }\n  }\n\n  indexToBounds(): Partial<GeoCellLayer['props']> {\n    const {getElevation, getFillColor, getLineColor, getLineWidth} = this.props;\n\n    return {\n      data: this.state.polygons,\n      getPolygon: d => d.polygon,\n\n      getElevation: this.getSubLayerAccessor(getElevation),\n      getFillColor: this.getSubLayerAccessor(getFillColor),\n      getLineColor: this.getSubLayerAccessor(getLineColor),\n      getLineWidth: this.getSubLayerAccessor(getLineWidth)\n    };\n  }\n}\n"],"mappings":";AAAA,SAAQA,mBAAR,QAAgD,OAAhD;AAEA,SAA0BC,cAA1B,QAA+E,eAA/E;AACA,SAAQC,OAAO,IAAIC,cAAnB,QAAwC,oBAAxC;AACA,OAAOC,YAAP,MAA8C,gCAA9C;AAEA,MAAMC,YAA+C,GAAG;EACtDC,WAAW,EAAE;IAACC,IAAI,EAAE,UAAP;IAAmBC,KAAK,EAAEA,CAAAC,CAAC,KAAIA,CAAC,CAACC;EAAjC;AADyC,CAAxD;AAkBA,eAAe,MAAMC,cAAN,SAAsEP,YAAtE,CAGb;EAIAQ,eAAeA,CAAA,EAAS;IACtBT,cAAc,CAACU,WAAf;EACD;;EAEDC,WAAWA,CAAC;IAACC,KAAD;IAAQC;EAAR,CAAD,EAAqD;IAC9D,IACEA,WAAW,CAACC,WAAZ,IACCD,WAAW,CAACE,qBAAZ,IAAqCF,WAAW,CAACE,qBAAZ,CAAkCZ,WAF1E,EAGE;MACA,MAAM;QAACa,IAAD;QAAOb;MAAP,IAAsBS,KAA5B;MACA,MAAMK,QAAmC,GAAG,EAA5C;MAEA,MAAM;QAACC,QAAD;QAAWC;MAAX,IAAyBrB,cAAc,CAACkB,IAAD,CAA7C;;MACA,KAAK,MAAMI,MAAX,IAAqBF,QAArB,EAA+B;QAC7BC,UAAU,CAACE,KAAX;QACA,MAAMd,QAAQ,GAAGJ,WAAW,CAACiB,MAAD,EAASD,UAAT,CAA5B;QACA,MAAMG,YAAY,GAAGzB,mBAAmB,CAACU,QAAD,EAAW,IAAX,CAAxC;;QAEA,KAAK,MAAMgB,OAAX,IAAsBD,YAAtB,EAAoC;UAClCL,QAAQ,CAACO,IAAT,CAAc,KAAKC,cAAL,CAAoB;YAACF;UAAD,CAApB,EAA+BH,MAA/B,EAAuCD,UAAU,CAACE,KAAlD,CAAd;QACD;MACF;;MAED,KAAKK,QAAL,CAAc;QAACT;MAAD,CAAd;IACD;EACF;;EAEDU,aAAaA,CAAA,EAAmC;IAC9C,MAAM;MAACC,YAAD;MAAeC,YAAf;MAA6BC,YAA7B;MAA2CC;IAA3C,IAA2D,KAAKnB,KAAtE;IAEA,OAAO;MACLI,IAAI,EAAE,KAAKgB,KAAL,CAAWf,QADZ;MAELgB,UAAU,EAAEA,CAAA3B,CAAC,KAAIA,CAAC,CAACiB,OAFd;MAILK,YAAY,EAAE,KAAKM,mBAAL,CAAyBN,YAAzB,CAJT;MAKLC,YAAY,EAAE,KAAKK,mBAAL,CAAyBL,YAAzB,CALT;MAMLC,YAAY,EAAE,KAAKI,mBAAL,CAAyBJ,YAAzB,CANT;MAOLC,YAAY,EAAE,KAAKG,mBAAL,CAAyBH,YAAzB;IAPT,CAAP;EASD;EAAAI,iCAAAC,GAAA,EAAAC,IAAA;IAAA,KAAAD,GAAA,IAAAE,IAAA,CAAAD,IAAA,GA3CD;;gBAHmB7B,c,eAIA,gB;;gBAJAA,c,kBAKGN,Y,mLAvBlBA,YAA+C,uLAAAqC,cAAA,CAAAC,QAAA,CAkBhChC,cAAN,iNAAAiC,WAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAD,WAAA,GAAAE,SAAA,CAAAF,WAAA,IAAAA,WAAA,CAAAG,MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}