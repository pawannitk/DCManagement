{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { extractTimegrain, getNumberFormatter, NumberFormats, GenericDataType, getMetricLabel, getXAxisLabel, getValueFormatter, t, tooltipHtml } from '@superset-ui/core';\nimport { graphic } from 'echarts';\nimport { getDateFormatter, parseMetricValue } from '../utils';\nimport { getDefaultTooltip } from '../../utils/tooltip';\nconst formatPercentChange = getNumberFormatter(NumberFormats.PERCENT_SIGNED_1_POINT);\nexport default function transformProps(chartProps) {var _chartProps$datasourc, _metricEntry;\n  const { width, height, queriesData, formData, rawFormData, theme, hooks, inContextMenu, datasource: { currencyFormats = {}, columnFormats = {} } } = chartProps;\n  const { colorPicker, compareLag: compareLag_, compareSuffix = '', timeFormat, headerFontSize, metric = 'value', showTimestamp, showTrendLine, startYAxisAtZero, subheader = '', subheaderFontSize, forceTimestampFormatting, yAxisFormat, currencyFormat, timeRangeFixed } = formData;\n  const granularity = extractTimegrain(rawFormData);\n  const { data = [], colnames = [], coltypes = [], from_dttm: fromDatetime, to_dttm: toDatetime } = queriesData[0];\n  const refs = {};\n  const metricName = getMetricLabel(metric);\n  const compareLag = Number(compareLag_) || 0;\n  let formattedSubheader = subheader;\n  const { r, g, b } = colorPicker;\n  const mainColor = `rgb(${r}, ${g}, ${b})`;\n  const xAxisLabel = getXAxisLabel(rawFormData);\n  let trendLineData;\n  let percentChange = 0;\n  let bigNumber = data.length === 0 ? null : data[0][metricName];\n  let timestamp = data.length === 0 ? null : data[0][xAxisLabel];\n  let bigNumberFallback;\n  const metricColtypeIndex = colnames.findIndex((name) => name === metricName);\n  const metricColtype = metricColtypeIndex > -1 ? coltypes[metricColtypeIndex] : null;\n  if (data.length > 0) {\n    const sortedData = data.\n    map((d) => [d[xAxisLabel], parseMetricValue(d[metricName])])\n    // sort in time descending order\n    .sort((a, b) => a[0] !== null && b[0] !== null ? b[0] - a[0] : 0);\n    bigNumber = sortedData[0][1];\n    timestamp = sortedData[0][0];\n    if (bigNumber === null) {\n      bigNumberFallback = sortedData.find((d) => d[1] !== null);\n      bigNumber = bigNumberFallback ? bigNumberFallback[1] : null;\n      timestamp = bigNumberFallback ? bigNumberFallback[0] : null;\n    }\n    if (compareLag > 0) {\n      const compareIndex = compareLag;\n      if (compareIndex < sortedData.length) {\n        const compareValue = sortedData[compareIndex][1];\n        // compare values must both be non-nulls\n        if (bigNumber !== null && compareValue !== null) {\n          percentChange = compareValue ?\n          (bigNumber - compareValue) / Math.abs(compareValue) :\n          0;\n          formattedSubheader = `${formatPercentChange(percentChange)} ${compareSuffix}`;\n        }\n      }\n    }\n    sortedData.reverse();\n    // @ts-ignore\n    trendLineData = showTrendLine ? sortedData : undefined;\n  }\n  let className = '';\n  if (percentChange > 0) {\n    className = 'positive';\n  } else\n  if (percentChange < 0) {\n    className = 'negative';\n  }\n  let metricEntry;\n  if ((_chartProps$datasourc = chartProps.datasource) != null && _chartProps$datasourc.metrics) {\n    metricEntry = chartProps.datasource.metrics.find((metricEntry) => metricEntry.metric_name === metric);\n  }\n  const formatTime = getDateFormatter(timeFormat, granularity, (_metricEntry = metricEntry) == null ? void 0 : _metricEntry.d3format);\n  const numberFormatter = getValueFormatter(metric, currencyFormats, columnFormats, yAxisFormat, currencyFormat);\n  const headerFormatter = metricColtype === GenericDataType.Temporal ||\n  metricColtype === GenericDataType.String ||\n  forceTimestampFormatting ?\n  formatTime :\n  numberFormatter;\n  if (trendLineData && timeRangeFixed && fromDatetime) {\n    const toDatetimeOrToday = toDatetime != null ? toDatetime : Date.now();\n    if (!trendLineData[0][0] || trendLineData[0][0] > fromDatetime) {\n      trendLineData.unshift([fromDatetime, null]);\n    }\n    if (!trendLineData[trendLineData.length - 1][0] ||\n    trendLineData[trendLineData.length - 1][0] < toDatetimeOrToday) {\n      trendLineData.push([toDatetimeOrToday, null]);\n    }\n  }\n  const echartOptions = trendLineData ?\n  {\n    series: [\n    {\n      data: trendLineData,\n      type: 'line',\n      smooth: true,\n      symbol: 'circle',\n      symbolSize: 10,\n      showSymbol: false,\n      color: mainColor,\n      areaStyle: {\n        color: new graphic.LinearGradient(0, 0, 0, 1, [\n        {\n          offset: 0,\n          color: mainColor\n        },\n        {\n          offset: 1,\n          color: theme.colors.grayscale.light5\n        }]\n        )\n      }\n    }],\n\n    xAxis: {\n      min: trendLineData[0][0],\n      max: trendLineData[trendLineData.length - 1][0],\n      show: false,\n      type: 'value'\n    },\n    yAxis: {\n      scale: !startYAxisAtZero,\n      show: false\n    },\n    grid: {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    },\n    tooltip: {\n      ...getDefaultTooltip(refs),\n      show: !inContextMenu,\n      trigger: 'axis',\n      formatter: (params) => tooltipHtml([\n      [\n      metricName,\n      params[0].data[1] === null ?\n      t('N/A') :\n      headerFormatter.format(params[0].data[1])]],\n\n      formatTime(params[0].data[0]))\n    },\n    aria: {\n      enabled: true,\n      label: {\n        description: `Big number visualization ${subheader}`\n      }\n    }\n  } :\n  {};\n  const { onContextMenu } = hooks;\n  return {\n    width,\n    height,\n    bigNumber,\n    // @ts-ignore\n    bigNumberFallback,\n    className,\n    headerFormatter,\n    formatTime,\n    formData,\n    headerFontSize,\n    subheaderFontSize,\n    mainColor,\n    showTimestamp,\n    showTrendLine,\n    startYAxisAtZero,\n    subheader: formattedSubheader,\n    timestamp,\n    trendLineData,\n    echartOptions,\n    onContextMenu,\n    xValueFormatter: formatTime,\n    refs\n  };\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(formatPercentChange, \"formatPercentChange\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-echarts/src/BigNumber/BigNumberWithTrendline/transformProps.ts\");reactHotLoader.register(transformProps, \"transformProps\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-echarts/src/BigNumber/BigNumberWithTrendline/transformProps.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["extractTimegrain","getNumberFormatter","NumberFormats","GenericDataType","getMetricLabel","getXAxisLabel","getValueFormatter","t","tooltipHtml","graphic","getDateFormatter","parseMetricValue","getDefaultTooltip","formatPercentChange","PERCENT_SIGNED_1_POINT","transformProps","chartProps","_chartProps$datasourc","_metricEntry","width","height","queriesData","formData","rawFormData","theme","hooks","inContextMenu","datasource","currencyFormats","columnFormats","colorPicker","compareLag","compareLag_","compareSuffix","timeFormat","headerFontSize","metric","showTimestamp","showTrendLine","startYAxisAtZero","subheader","subheaderFontSize","forceTimestampFormatting","yAxisFormat","currencyFormat","timeRangeFixed","granularity","data","colnames","coltypes","from_dttm","fromDatetime","to_dttm","toDatetime","refs","metricName","Number","formattedSubheader","r","g","b","mainColor","xAxisLabel","trendLineData","percentChange","bigNumber","length","timestamp","bigNumberFallback","metricColtypeIndex","findIndex","name","metricColtype","sortedData","map","d","sort","a","find","compareIndex","compareValue","Math","abs","reverse","undefined","className","metricEntry","metrics","metric_name","formatTime","d3format","numberFormatter","headerFormatter","Temporal","String","toDatetimeOrToday","Date","now","unshift","push","echartOptions","series","type","smooth","symbol","symbolSize","showSymbol","color","areaStyle","LinearGradient","offset","colors","grayscale","light5","xAxis","min","max","show","yAxis","scale","grid","left","right","top","bottom","tooltip","trigger","formatter","params","format","aria","enabled","label","description","onContextMenu","xValueFormatter","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/plugins/plugin-chart-echarts/src/BigNumber/BigNumberWithTrendline/transformProps.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  extractTimegrain,\n  getNumberFormatter,\n  NumberFormats,\n  GenericDataType,\n  getMetricLabel,\n  getXAxisLabel,\n  Metric,\n  getValueFormatter,\n  t,\n  tooltipHtml,\n} from '@superset-ui/core';\nimport { EChartsCoreOption, graphic } from 'echarts';\nimport {\n  BigNumberVizProps,\n  BigNumberDatum,\n  BigNumberWithTrendlineChartProps,\n  TimeSeriesDatum,\n} from '../types';\nimport { getDateFormatter, parseMetricValue } from '../utils';\nimport { getDefaultTooltip } from '../../utils/tooltip';\nimport { Refs } from '../../types';\n\nconst formatPercentChange = getNumberFormatter(\n  NumberFormats.PERCENT_SIGNED_1_POINT,\n);\n\nexport default function transformProps(\n  chartProps: BigNumberWithTrendlineChartProps,\n): BigNumberVizProps {\n  const {\n    width,\n    height,\n    queriesData,\n    formData,\n    rawFormData,\n    theme,\n    hooks,\n    inContextMenu,\n    datasource: { currencyFormats = {}, columnFormats = {} },\n  } = chartProps;\n  const {\n    colorPicker,\n    compareLag: compareLag_,\n    compareSuffix = '',\n    timeFormat,\n    headerFontSize,\n    metric = 'value',\n    showTimestamp,\n    showTrendLine,\n    startYAxisAtZero,\n    subheader = '',\n    subheaderFontSize,\n    forceTimestampFormatting,\n    yAxisFormat,\n    currencyFormat,\n    timeRangeFixed,\n  } = formData;\n  const granularity = extractTimegrain(rawFormData);\n  const {\n    data = [],\n    colnames = [],\n    coltypes = [],\n    from_dttm: fromDatetime,\n    to_dttm: toDatetime,\n  } = queriesData[0];\n  const refs: Refs = {};\n  const metricName = getMetricLabel(metric);\n  const compareLag = Number(compareLag_) || 0;\n  let formattedSubheader = subheader;\n\n  const { r, g, b } = colorPicker;\n  const mainColor = `rgb(${r}, ${g}, ${b})`;\n\n  const xAxisLabel = getXAxisLabel(rawFormData) as string;\n  let trendLineData: TimeSeriesDatum[] | undefined;\n  let percentChange = 0;\n  let bigNumber = data.length === 0 ? null : data[0][metricName];\n  let timestamp = data.length === 0 ? null : data[0][xAxisLabel];\n  let bigNumberFallback;\n\n  const metricColtypeIndex = colnames.findIndex(name => name === metricName);\n  const metricColtype =\n    metricColtypeIndex > -1 ? coltypes[metricColtypeIndex] : null;\n\n  if (data.length > 0) {\n    const sortedData = (data as BigNumberDatum[])\n      .map(d => [d[xAxisLabel], parseMetricValue(d[metricName])])\n      // sort in time descending order\n      .sort((a, b) => (a[0] !== null && b[0] !== null ? b[0] - a[0] : 0));\n\n    bigNumber = sortedData[0][1];\n    timestamp = sortedData[0][0];\n\n    if (bigNumber === null) {\n      bigNumberFallback = sortedData.find(d => d[1] !== null);\n      bigNumber = bigNumberFallback ? bigNumberFallback[1] : null;\n      timestamp = bigNumberFallback ? bigNumberFallback[0] : null;\n    }\n\n    if (compareLag > 0) {\n      const compareIndex = compareLag;\n      if (compareIndex < sortedData.length) {\n        const compareValue = sortedData[compareIndex][1];\n        // compare values must both be non-nulls\n        if (bigNumber !== null && compareValue !== null) {\n          percentChange = compareValue\n            ? (bigNumber - compareValue) / Math.abs(compareValue)\n            : 0;\n          formattedSubheader = `${formatPercentChange(\n            percentChange,\n          )} ${compareSuffix}`;\n        }\n      }\n    }\n    sortedData.reverse();\n    // @ts-ignore\n    trendLineData = showTrendLine ? sortedData : undefined;\n  }\n\n  let className = '';\n  if (percentChange > 0) {\n    className = 'positive';\n  } else if (percentChange < 0) {\n    className = 'negative';\n  }\n\n  let metricEntry: Metric | undefined;\n  if (chartProps.datasource?.metrics) {\n    metricEntry = chartProps.datasource.metrics.find(\n      metricEntry => metricEntry.metric_name === metric,\n    );\n  }\n\n  const formatTime = getDateFormatter(\n    timeFormat,\n    granularity,\n    metricEntry?.d3format,\n  );\n\n  const numberFormatter = getValueFormatter(\n    metric,\n    currencyFormats,\n    columnFormats,\n    yAxisFormat,\n    currencyFormat,\n  );\n\n  const headerFormatter =\n    metricColtype === GenericDataType.Temporal ||\n    metricColtype === GenericDataType.String ||\n    forceTimestampFormatting\n      ? formatTime\n      : numberFormatter;\n\n  if (trendLineData && timeRangeFixed && fromDatetime) {\n    const toDatetimeOrToday = toDatetime ?? Date.now();\n    if (!trendLineData[0][0] || trendLineData[0][0] > fromDatetime) {\n      trendLineData.unshift([fromDatetime, null]);\n    }\n    if (\n      !trendLineData[trendLineData.length - 1][0] ||\n      trendLineData[trendLineData.length - 1][0]! < toDatetimeOrToday\n    ) {\n      trendLineData.push([toDatetimeOrToday, null]);\n    }\n  }\n\n  const echartOptions: EChartsCoreOption = trendLineData\n    ? {\n        series: [\n          {\n            data: trendLineData,\n            type: 'line',\n            smooth: true,\n            symbol: 'circle',\n            symbolSize: 10,\n            showSymbol: false,\n            color: mainColor,\n            areaStyle: {\n              color: new graphic.LinearGradient(0, 0, 0, 1, [\n                {\n                  offset: 0,\n                  color: mainColor,\n                },\n                {\n                  offset: 1,\n                  color: theme.colors.grayscale.light5,\n                },\n              ]),\n            },\n          },\n        ],\n        xAxis: {\n          min: trendLineData[0][0],\n          max: trendLineData[trendLineData.length - 1][0],\n          show: false,\n          type: 'value',\n        },\n        yAxis: {\n          scale: !startYAxisAtZero,\n          show: false,\n        },\n        grid: {\n          left: 0,\n          right: 0,\n          top: 0,\n          bottom: 0,\n        },\n        tooltip: {\n          ...getDefaultTooltip(refs),\n          show: !inContextMenu,\n          trigger: 'axis',\n          formatter: (params: { data: TimeSeriesDatum }[]) =>\n            tooltipHtml(\n              [\n                [\n                  metricName,\n                  params[0].data[1] === null\n                    ? t('N/A')\n                    : headerFormatter.format(params[0].data[1]),\n                ],\n              ],\n              formatTime(params[0].data[0]),\n            ),\n        },\n        aria: {\n          enabled: true,\n          label: {\n            description: `Big number visualization ${subheader}`,\n          },\n        },\n      }\n    : {};\n\n  const { onContextMenu } = hooks;\n\n  return {\n    width,\n    height,\n    bigNumber,\n    // @ts-ignore\n    bigNumberFallback,\n    className,\n    headerFormatter,\n    formatTime,\n    formData,\n    headerFontSize,\n    subheaderFontSize,\n    mainColor,\n    showTimestamp,\n    showTrendLine,\n    startYAxisAtZero,\n    subheader: formattedSubheader,\n    timestamp,\n    trendLineData,\n    echartOptions,\n    onContextMenu,\n    xValueFormatter: formatTime,\n    refs,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}