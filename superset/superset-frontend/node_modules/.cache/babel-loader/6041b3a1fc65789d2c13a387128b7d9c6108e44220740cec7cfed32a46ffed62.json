{"ast":null,"code":"import _kebabCase from \"lodash/kebabCase\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};import domToPdf from 'dom-to-pdf';\n\nimport { logging, t } from '@superset-ui/core';\nimport { addWarningToast } from 'src/components/MessageToasts/actions';\n/**\n * generate a consistent file stem from a description and date\n *\n * @param description title or description of content of file\n * @param date date when file was generated\n */\nconst generateFileStem = (description, date = new Date()) => `${_kebabCase(description)}-${date.toISOString().replace(/[: ]/g, '-')}`;\n/**\n * Create an event handler for turning an element into an image\n *\n * @param selector css selector of the parent element which should be turned into image\n * @param description name or a short description of what is being printed.\n *   Value will be normalized, and a date as well as a file extension will be added.\n * @param isExactSelector if false, searches for the closest ancestor that matches selector.\n * @returns event handler\n */\nexport default function downloadAsPdf(selector, description, isExactSelector = false) {\n  return (event) => {\n    const elementToPrint = isExactSelector ?\n    document.querySelector(selector) :\n    event.currentTarget.closest(selector);\n    if (!elementToPrint) {\n      return addWarningToast(t('PDF download failed, please refresh and try again.'));\n    }\n    const options = {\n      margin: 10,\n      filename: `${generateFileStem(description)}.pdf`,\n      image: { type: 'jpeg', quality: 1 },\n      html2canvas: { scale: 2 },\n      excludeClassNames: ['header-controls']\n    };\n    return domToPdf(elementToPrint, options).\n    then(() => {\n\n      // nothing to be done\n    }).catch((e) => {\n      logging.error('PDF generation failed', e);\n    });\n  };\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(generateFileStem, \"generateFileStem\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/utils/downloadAsPdf.ts\");reactHotLoader.register(downloadAsPdf, \"downloadAsPdf\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/utils/downloadAsPdf.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["domToPdf","logging","t","addWarningToast","generateFileStem","description","date","Date","_kebabCase","toISOString","replace","downloadAsPdf","selector","isExactSelector","event","elementToPrint","document","querySelector","currentTarget","closest","options","margin","filename","image","type","quality","html2canvas","scale","excludeClassNames","then","catch","e","error","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/utils/downloadAsPdf.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { SyntheticEvent } from 'react';\nimport domToPdf from 'dom-to-pdf';\nimport { kebabCase } from 'lodash';\nimport { logging, t } from '@superset-ui/core';\nimport { addWarningToast } from 'src/components/MessageToasts/actions';\n\n/**\n * generate a consistent file stem from a description and date\n *\n * @param description title or description of content of file\n * @param date date when file was generated\n */\nconst generateFileStem = (description: string, date = new Date()) =>\n  `${kebabCase(description)}-${date.toISOString().replace(/[: ]/g, '-')}`;\n\n/**\n * Create an event handler for turning an element into an image\n *\n * @param selector css selector of the parent element which should be turned into image\n * @param description name or a short description of what is being printed.\n *   Value will be normalized, and a date as well as a file extension will be added.\n * @param isExactSelector if false, searches for the closest ancestor that matches selector.\n * @returns event handler\n */\nexport default function downloadAsPdf(\n  selector: string,\n  description: string,\n  isExactSelector = false,\n) {\n  return (event: SyntheticEvent) => {\n    const elementToPrint = isExactSelector\n      ? document.querySelector(selector)\n      : event.currentTarget.closest(selector);\n\n    if (!elementToPrint) {\n      return addWarningToast(\n        t('PDF download failed, please refresh and try again.'),\n      );\n    }\n\n    const options = {\n      margin: 10,\n      filename: `${generateFileStem(description)}.pdf`,\n      image: { type: 'jpeg', quality: 1 },\n      html2canvas: { scale: 2 },\n      excludeClassNames: ['header-controls'],\n    };\n    return domToPdf(elementToPrint, options)\n      .then(() => {\n        // nothing to be done\n      })\n      .catch((e: Error) => {\n        logging.error('PDF generation failed', e);\n      });\n  };\n}\n"],"mappings":"iVAmBA,OAAOA,QAAQ,MAAM,YAAY;;AAEjC,SAASC,OAAO,EAAEC,CAAC,QAAQ,mBAAmB;AAC9C,SAASC,eAAe,QAAQ,sCAAsC;AAEtE;;;;;;AAMA,MAAMC,gBAAgB,GAAGA,CAACC,WAAmB,EAAEC,IAAI,GAAG,IAAIC,IAAI,EAAE,KAC9D,GAAGC,UAAA,CAAUH,WAAW,CAAC,IAAIC,IAAI,CAACG,WAAW,EAAE,CAACC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,EAAE;AAEzE;;;;;;;;;AASA,eAAc,SAAUC,aAAaA,CACnCC,QAAgB,EAChBP,WAAmB,EACnBQ,eAAe,GAAG,KAAK;EAEvB,OAAO,CAACC,KAAqB,KAAI;IAC/B,MAAMC,cAAc,GAAGF,eAAe;IAClCG,QAAQ,CAACC,aAAa,CAACL,QAAQ,CAAC;IAChCE,KAAK,CAACI,aAAa,CAACC,OAAO,CAACP,QAAQ,CAAC;IAEzC,IAAI,CAACG,cAAc,EAAE;MACnB,OAAOZ,eAAe,CACpBD,CAAC,CAAC,oDAAoD,CAAC,CACxD;;IAGH,MAAMkB,OAAO,GAAG;MACdC,MAAM,EAAE,EAAE;MACVC,QAAQ,EAAE,GAAGlB,gBAAgB,CAACC,WAAW,CAAC,MAAM;MAChDkB,KAAK,EAAE,EAAEC,IAAI,EAAE,MAAM,EAAEC,OAAO,EAAE,CAAC,EAAE;MACnCC,WAAW,EAAE,EAAEC,KAAK,EAAE,CAAC,EAAE;MACzBC,iBAAiB,EAAE,CAAC,iBAAiB;KACtC;IACD,OAAO5B,QAAQ,CAACe,cAAc,EAAEK,OAAO,CAAC;IACrCS,IAAI,CAAC,MAAK;;MACT;IAAA,CACD,CAAC,CACDC,KAAK,CAAC,CAACC,CAAQ,KAAI;MAClB9B,OAAO,CAAC+B,KAAK,CAAC,uBAAuB,EAAED,CAAC,CAAC;IAC3C,CAAC,CAAC;EACN,CAAC;AACH,CAAC,mBAAAE,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAC,OAAA,GAAAC,SAAA,MAAAH,cAAA,WAAAA,cAAA,CAAAI,QAAA,CA3CKjC,gBAAgB,2GAAA6B,cAAA,CAAAI,QAAA,CAYE1B,aAAa,gIAAA2B,WAAA,UAAAJ,oBAAA,mBAAAA,oBAAA,CAAAI,WAAA,GAAAF,SAAA,CAAAE,WAAA,IAAAA,WAAA,CAAAC,MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}