{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t, useTheme } from '@superset-ui/core';\nimport React from 'react';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport { AlertState } from '../types';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nfunction getStatusColor(status, isReportEnabled, theme) {\n  switch (status) {\n    case AlertState.Working:\n      return theme.colors.primary.base;\n    case AlertState.Error:\n      return theme.colors.error.base;\n    case AlertState.Success:\n      return isReportEnabled ?\n      theme.colors.success.base :\n      theme.colors.alert.base;\n    case AlertState.Noop:\n      return theme.colors.success.base;\n    case AlertState.Grace:\n      return theme.colors.alert.base;\n    default:\n      return theme.colors.grayscale.base;\n  }\n}\nexport default function AlertStatusIcon({ state, isReportEnabled = false }) {\n  const theme = useTheme();\n  const lastStateConfig = {\n    icon: Icons.Check,\n    label: '',\n    status: ''\n  };\n  switch (state) {\n    case AlertState.Success:\n      lastStateConfig.icon = isReportEnabled ?\n      Icons.Check :\n      Icons.AlertSolidSmall;\n      lastStateConfig.label = isReportEnabled ?\n      t('Report sent') :\n      t('Alert triggered, notification sent');\n      lastStateConfig.status = AlertState.Success;\n      break;\n    case AlertState.Working:\n      lastStateConfig.icon = Icons.Running;\n      lastStateConfig.label = isReportEnabled ?\n      t('Report sending') :\n      t('Alert running');\n      lastStateConfig.status = AlertState.Working;\n      break;\n    case AlertState.Error:\n      lastStateConfig.icon = Icons.XSmall;\n      lastStateConfig.label = isReportEnabled ?\n      t('Report failed') :\n      t('Alert failed');\n      lastStateConfig.status = AlertState.Error;\n      break;\n    case AlertState.Noop:\n      lastStateConfig.icon = Icons.Check;\n      lastStateConfig.label = t('Nothing triggered');\n      lastStateConfig.status = AlertState.Noop;\n      break;\n    case AlertState.Grace:\n      lastStateConfig.icon = Icons.AlertSolidSmall;\n      lastStateConfig.label = t('Alert Triggered, In Grace Period');\n      lastStateConfig.status = AlertState.Grace;\n      break;\n    default:\n      lastStateConfig.icon = Icons.Check;\n      lastStateConfig.label = t('Nothing triggered');\n      lastStateConfig.status = AlertState.Noop;\n  }\n  const Icon = lastStateConfig.icon;\n  return ___EmotionJSX(Tooltip, { title: lastStateConfig.label, placement: \"bottomLeft\" },\n  ___EmotionJSX(Icon, { iconColor: getStatusColor(lastStateConfig.status, isReportEnabled, theme) })\n  );\n}__signature__(AlertStatusIcon, \"useTheme{theme}\", () => [useTheme]);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(getStatusColor, \"getStatusColor\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/features/alerts/components/AlertStatusIcon.tsx\");reactHotLoader.register(AlertStatusIcon, \"AlertStatusIcon\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/features/alerts/components/AlertStatusIcon.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["t","useTheme","React","Tooltip","Icons","AlertState","jsx","___EmotionJSX","getStatusColor","status","isReportEnabled","theme","Working","colors","primary","base","Error","error","Success","success","alert","Noop","Grace","grayscale","AlertStatusIcon","state","lastStateConfig","icon","Check","label","AlertSolidSmall","Running","XSmall","Icon","title","placement","iconColor","__signature__","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/features/alerts/components/AlertStatusIcon.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t, SupersetTheme, useTheme } from '@superset-ui/core';\nimport React from 'react';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport { AlertState } from '../types';\n\nfunction getStatusColor(\n  status: string,\n  isReportEnabled: boolean,\n  theme: SupersetTheme,\n) {\n  switch (status) {\n    case AlertState.Working:\n      return theme.colors.primary.base;\n    case AlertState.Error:\n      return theme.colors.error.base;\n    case AlertState.Success:\n      return isReportEnabled\n        ? theme.colors.success.base\n        : theme.colors.alert.base;\n    case AlertState.Noop:\n      return theme.colors.success.base;\n    case AlertState.Grace:\n      return theme.colors.alert.base;\n    default:\n      return theme.colors.grayscale.base;\n  }\n}\n\nexport default function AlertStatusIcon({\n  state,\n  isReportEnabled = false,\n}: {\n  state: string;\n  isReportEnabled: boolean;\n}) {\n  const theme = useTheme();\n  const lastStateConfig = {\n    icon: Icons.Check,\n    label: '',\n    status: '',\n  };\n  switch (state) {\n    case AlertState.Success:\n      lastStateConfig.icon = isReportEnabled\n        ? Icons.Check\n        : Icons.AlertSolidSmall;\n      lastStateConfig.label = isReportEnabled\n        ? t('Report sent')\n        : t('Alert triggered, notification sent');\n      lastStateConfig.status = AlertState.Success;\n      break;\n    case AlertState.Working:\n      lastStateConfig.icon = Icons.Running;\n      lastStateConfig.label = isReportEnabled\n        ? t('Report sending')\n        : t('Alert running');\n      lastStateConfig.status = AlertState.Working;\n      break;\n    case AlertState.Error:\n      lastStateConfig.icon = Icons.XSmall;\n      lastStateConfig.label = isReportEnabled\n        ? t('Report failed')\n        : t('Alert failed');\n      lastStateConfig.status = AlertState.Error;\n      break;\n    case AlertState.Noop:\n      lastStateConfig.icon = Icons.Check;\n      lastStateConfig.label = t('Nothing triggered');\n      lastStateConfig.status = AlertState.Noop;\n      break;\n    case AlertState.Grace:\n      lastStateConfig.icon = Icons.AlertSolidSmall;\n      lastStateConfig.label = t('Alert Triggered, In Grace Period');\n      lastStateConfig.status = AlertState.Grace;\n      break;\n    default:\n      lastStateConfig.icon = Icons.Check;\n      lastStateConfig.label = t('Nothing triggered');\n      lastStateConfig.status = AlertState.Noop;\n  }\n  const Icon = lastStateConfig.icon;\n  return (\n    <Tooltip title={lastStateConfig.label} placement=\"bottomLeft\">\n      <Icon\n        iconColor={getStatusColor(\n          lastStateConfig.status,\n          isReportEnabled,\n          theme,\n        )}\n      />\n    </Tooltip>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}