{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { CompositeLayer, log } from '@deck.gl/core';\nimport { SimpleMeshLayer } from '@deck.gl/mesh-layers';\nimport { COORDINATE_SYSTEM } from '@deck.gl/core';\nimport { TerrainWorkerLoader } from '@loaders.gl/terrain';\nimport TileLayer from '../tile-layer/tile-layer';\nimport { urlType, getURLFromTemplate } from '../tileset-2d';\nconst DUMMY_DATA = [1];\nconst defaultProps = { ...TileLayer.defaultProps,\n  elevationData: urlType,\n  texture: { ...urlType,\n    optional: true\n  },\n  meshMaxError: {\n    type: 'number',\n    value: 4.0\n  },\n  bounds: {\n    type: 'array',\n    value: null,\n    optional: true,\n    compare: true\n  },\n  color: {\n    type: 'color',\n    value: [255, 255, 255]\n  },\n  elevationDecoder: {\n    type: 'object',\n    value: {\n      rScaler: 1,\n      gScaler: 0,\n      bScaler: 0,\n      offset: 0\n    }\n  },\n  workerUrl: '',\n  wireframe: false,\n  material: true,\n  loaders: [TerrainWorkerLoader]\n};\n\nfunction urlTemplateToUpdateTrigger(template) {\n  if (Array.isArray(template)) {\n    return template.join(';');\n  }\n\n  return template || '';\n}\n\nexport default class TerrainLayer extends CompositeLayer {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", void 0);\n  }\n\n  updateState({\n    props,\n    oldProps\n  }) {\n    const elevationDataChanged = props.elevationData !== oldProps.elevationData;\n\n    if (elevationDataChanged) {\n      const {\n        elevationData\n      } = props;\n      const isTiled = elevationData && (Array.isArray(elevationData) || elevationData.includes('{x}') && elevationData.includes('{y}'));\n      this.setState({\n        isTiled\n      });\n    }\n\n    const shouldReload = elevationDataChanged || props.meshMaxError !== oldProps.meshMaxError || props.elevationDecoder !== oldProps.elevationDecoder || props.bounds !== oldProps.bounds;\n\n    if (!this.state.isTiled && shouldReload) {\n      const terrain = this.loadTerrain(props);\n      this.setState({\n        terrain\n      });\n    }\n\n    if (props.workerUrl) {\n      log.removed('workerUrl', 'loadOptions.terrain.workerUrl')();\n    }\n  }\n\n  loadTerrain({\n    elevationData,\n    bounds,\n    elevationDecoder,\n    meshMaxError,\n    signal\n  }) {\n    var _loadOptions;\n\n    if (!elevationData) {\n      return null;\n    }\n\n    let loadOptions = this.getLoadOptions();\n    loadOptions = { ...loadOptions,\n      terrain: {\n        skirtHeight: this.state.isTiled ? meshMaxError * 2 : 0,\n        ...((_loadOptions = loadOptions) === null || _loadOptions === void 0 ? void 0 : _loadOptions.terrain),\n        bounds,\n        meshMaxError,\n        elevationDecoder\n      }\n    };\n    const {\n      fetch\n    } = this.props;\n    return fetch(elevationData, {\n      propName: 'elevationData',\n      layer: this,\n      loadOptions,\n      signal\n    });\n  }\n\n  getTiledTerrainData(tile) {\n    const {\n      elevationData,\n      fetch,\n      texture,\n      elevationDecoder,\n      meshMaxError\n    } = this.props;\n    const {\n      viewport\n    } = this.context;\n    const dataUrl = getURLFromTemplate(elevationData, tile);\n    const textureUrl = texture && getURLFromTemplate(texture, tile);\n    const {\n      signal\n    } = tile;\n    let bottomLeft = [0, 0];\n    let topRight = [0, 0];\n\n    if (viewport.isGeospatial) {\n      const bbox = tile.bbox;\n      bottomLeft = viewport.projectFlat([bbox.west, bbox.south]);\n      topRight = viewport.projectFlat([bbox.east, bbox.north]);\n    } else {\n      const bbox = tile.bbox;\n      bottomLeft = [bbox.left, bbox.bottom];\n      topRight = [bbox.right, bbox.top];\n    }\n\n    const bounds = [bottomLeft[0], bottomLeft[1], topRight[0], topRight[1]];\n    const terrain = this.loadTerrain({\n      elevationData: dataUrl,\n      bounds,\n      elevationDecoder,\n      meshMaxError,\n      signal\n    });\n    const surface = textureUrl ? fetch(textureUrl, {\n      propName: 'texture',\n      layer: this,\n      loaders: [],\n      signal\n    }).catch((_) => null) : Promise.resolve(null);\n    return Promise.all([terrain, surface]);\n  }\n\n  renderSubLayers(props) {\n    const SubLayerClass = this.getSubLayerClass('mesh', SimpleMeshLayer);\n    const {\n      color,\n      wireframe,\n      material\n    } = this.props;\n    const {\n      data\n    } = props;\n\n    if (!data) {\n      return null;\n    }\n\n    const [mesh, texture] = data;\n    return new SubLayerClass(props, {\n      data: DUMMY_DATA,\n      mesh,\n      texture,\n      _instanced: false,\n      coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n      getPosition: (d) => [0, 0, 0],\n      getColor: color,\n      wireframe,\n      material\n    });\n  }\n\n  onViewportLoad(tiles) {\n    if (!tiles) {\n      return;\n    }\n\n    const {\n      zRange\n    } = this.state;\n    const ranges = tiles.map((tile) => tile.content).filter(Boolean).map((arr) => {\n      const bounds = arr[0].header.boundingBox;\n      return bounds.map((bound) => bound[2]);\n    });\n\n    if (ranges.length === 0) {\n      return;\n    }\n\n    const minZ = Math.min(...ranges.map((x) => x[0]));\n    const maxZ = Math.max(...ranges.map((x) => x[1]));\n\n    if (!zRange || minZ < zRange[0] || maxZ > zRange[1]) {\n      this.setState({\n        zRange: [minZ, maxZ]\n      });\n    }\n  }\n\n  renderLayers() {\n    const {\n      color,\n      material,\n      elevationData,\n      texture,\n      wireframe,\n      meshMaxError,\n      elevationDecoder,\n      tileSize,\n      maxZoom,\n      minZoom,\n      extent,\n      maxRequests,\n      onTileLoad,\n      onTileUnload,\n      onTileError,\n      maxCacheSize,\n      maxCacheByteSize,\n      refinementStrategy\n    } = this.props;\n\n    if (this.state.isTiled) {\n      return new TileLayer(this.getSubLayerProps({\n        id: 'tiles'\n      }), {\n        getTileData: this.getTiledTerrainData.bind(this),\n        renderSubLayers: this.renderSubLayers.bind(this),\n        updateTriggers: {\n          getTileData: {\n            elevationData: urlTemplateToUpdateTrigger(elevationData),\n            texture: urlTemplateToUpdateTrigger(texture),\n            meshMaxError,\n            elevationDecoder\n          }\n        },\n        onViewportLoad: this.onViewportLoad.bind(this),\n        zRange: this.state.zRange || null,\n        tileSize,\n        maxZoom,\n        minZoom,\n        extent,\n        maxRequests,\n        onTileLoad,\n        onTileUnload,\n        onTileError,\n        maxCacheSize,\n        maxCacheByteSize,\n        refinementStrategy\n      });\n    }\n\n    const SubLayerClass = this.getSubLayerClass('mesh', SimpleMeshLayer);\n    return new SubLayerClass(this.getSubLayerProps({\n      id: 'mesh'\n    }), {\n      data: DUMMY_DATA,\n      mesh: this.state.terrain,\n      texture,\n      _instanced: false,\n      getPosition: (d) => [0, 0, 0],\n      getColor: color,\n      material,\n      wireframe\n    });\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\n\n_defineProperty(TerrainLayer, \"defaultProps\", defaultProps);\n\n_defineProperty(TerrainLayer, \"layerName\", 'TerrainLayer');;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(DUMMY_DATA, \"DUMMY_DATA\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/geo-layers/dist/esm/terrain-layer/terrain-layer.js\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/geo-layers/dist/esm/terrain-layer/terrain-layer.js\");reactHotLoader.register(urlTemplateToUpdateTrigger, \"urlTemplateToUpdateTrigger\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/geo-layers/dist/esm/terrain-layer/terrain-layer.js\");reactHotLoader.register(TerrainLayer, \"TerrainLayer\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/geo-layers/dist/esm/terrain-layer/terrain-layer.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["CompositeLayer","log","SimpleMeshLayer","COORDINATE_SYSTEM","TerrainWorkerLoader","TileLayer","urlType","getURLFromTemplate","DUMMY_DATA","defaultProps","elevationData","texture","optional","meshMaxError","type","value","bounds","compare","color","elevationDecoder","rScaler","gScaler","bScaler","offset","workerUrl","wireframe","material","loaders","urlTemplateToUpdateTrigger","template","Array","isArray","join","TerrainLayer","constructor","args","_defineProperty","updateState","props","oldProps","elevationDataChanged","isTiled","includes","setState","shouldReload","state","terrain","loadTerrain","removed","signal","_loadOptions","loadOptions","getLoadOptions","skirtHeight","fetch","propName","layer","getTiledTerrainData","tile","viewport","context","dataUrl","textureUrl","bottomLeft","topRight","isGeospatial","bbox","projectFlat","west","south","east","north","left","bottom","right","top","surface","catch","_","Promise","resolve","all","renderSubLayers","SubLayerClass","getSubLayerClass","data","mesh","_instanced","coordinateSystem","CARTESIAN","getPosition","d","getColor","onViewportLoad","tiles","zRange","ranges","map","content","filter","Boolean","arr","header","boundingBox","bound","length","minZ","Math","min","x","maxZ","max","renderLayers","tileSize","maxZoom","minZoom","extent","maxRequests","onTileLoad","onTileUnload","onTileError","maxCacheSize","maxCacheByteSize","refinementStrategy","getSubLayerProps","id","getTileData","bind","updateTriggers","__reactstandin__regenerateByEval","key","code","eval","reactHotLoader","register","leaveModule","reactHotLoaderGlobal","undefined","module"],"sources":["../../../src/terrain-layer/terrain-layer.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Color,\n  CompositeLayer,\n  CompositeLayerProps,\n  DefaultProps,\n  Layer,\n  LayersList,\n  log,\n  Material,\n  Texture,\n  UpdateParameters\n} from '@deck.gl/core';\nimport {SimpleMeshLayer} from '@deck.gl/mesh-layers';\nimport {COORDINATE_SYSTEM} from '@deck.gl/core';\nimport type {MeshAttributes} from '@loaders.gl/schema';\nimport {TerrainWorkerLoader} from '@loaders.gl/terrain';\nimport TileLayer, {TileLayerProps} from '../tile-layer/tile-layer';\nimport type {Bounds, GeoBoundingBox, TileBoundingBox, TileLoadProps, ZRange} from '../tileset-2d';\nimport {Tile2DHeader, urlType, getURLFromTemplate, URLTemplate} from '../tileset-2d';\n\nconst DUMMY_DATA = [1];\n\nconst defaultProps: DefaultProps<TerrainLayerProps> = {\n  ...TileLayer.defaultProps,\n  // Image url that encodes height data\n  elevationData: urlType,\n  // Image url to use as texture\n  texture: {...urlType, optional: true},\n  // Martini error tolerance in meters, smaller number -> more detailed mesh\n  meshMaxError: {type: 'number', value: 4.0},\n  // Bounding box of the terrain image, [minX, minY, maxX, maxY] in world coordinates\n  bounds: {type: 'array', value: null, optional: true, compare: true},\n  // Color to use if texture is unavailable\n  color: {type: 'color', value: [255, 255, 255]},\n  // Object to decode height data, from (r, g, b) to height in meters\n  elevationDecoder: {\n    type: 'object',\n    value: {\n      rScaler: 1,\n      gScaler: 0,\n      bScaler: 0,\n      offset: 0\n    }\n  },\n  // Supply url to local terrain worker bundle. Only required if running offline and cannot access CDN.\n  workerUrl: '',\n  // Same as SimpleMeshLayer wireframe\n  wireframe: false,\n  material: true,\n\n  loaders: [TerrainWorkerLoader]\n};\n\n// Turns array of templates into a single string to work around shallow change\nfunction urlTemplateToUpdateTrigger(template: URLTemplate): string {\n  if (Array.isArray(template)) {\n    return template.join(';');\n  }\n  return template || '';\n}\n\ntype ElevationDecoder = {rScaler: number; gScaler: number; bScaler: number; offset: number};\ntype TerrainLoadProps = {\n  bounds: Bounds;\n  elevationData: string | null;\n  elevationDecoder: ElevationDecoder;\n  meshMaxError: number;\n  signal?: AbortSignal;\n};\n\ntype MeshAndTexture = [MeshAttributes | null, Texture | null];\n\n/** All properties supported by TerrainLayer */\nexport type TerrainLayerProps = _TerrainLayerProps &\n  TileLayerProps<MeshAndTexture> &\n  CompositeLayerProps;\n\n/** Props added by the TerrainLayer */\ntype _TerrainLayerProps = {\n  /** Image url that encodes height data. **/\n  elevationData: URLTemplate;\n\n  /** Image url to use as texture. **/\n  texture?: URLTemplate;\n\n  /** Martini error tolerance in meters, smaller number -> more detailed mesh. **/\n  meshMaxError?: number;\n\n  /** Bounding box of the terrain image, [minX, minY, maxX, maxY] in world coordinates. **/\n  bounds?: Bounds | null;\n\n  /** Color to use if texture is unavailable. **/\n  color?: Color;\n\n  /** Object to decode height data, from (r, g, b) to height in meters. **/\n  elevationDecoder?: ElevationDecoder;\n\n  /** Whether to render the mesh in wireframe mode. **/\n  wireframe?: boolean;\n\n  /** Material props for lighting effect. **/\n  material?: Material;\n\n  /**\n   * @deprecated Use `loadOptions.terrain.workerUrl` instead\n   */\n  workerUrl?: string;\n};\n\n/** Render mesh surfaces from height map images. */\nexport default class TerrainLayer<ExtraPropsT extends {} = {}> extends CompositeLayer<\n  ExtraPropsT & Required<_TerrainLayerProps & Required<TileLayerProps<MeshAndTexture>>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'TerrainLayer';\n\n  state!: {\n    isTiled?: boolean;\n    terrain: MeshAttributes;\n    zRange?: ZRange | null;\n  };\n\n  updateState({props, oldProps}: UpdateParameters<this>): void {\n    const elevationDataChanged = props.elevationData !== oldProps.elevationData;\n    if (elevationDataChanged) {\n      const {elevationData} = props;\n      const isTiled =\n        elevationData &&\n        (Array.isArray(elevationData) ||\n          (elevationData.includes('{x}') && elevationData.includes('{y}')));\n      this.setState({isTiled});\n    }\n\n    // Reloading for single terrain mesh\n    const shouldReload =\n      elevationDataChanged ||\n      props.meshMaxError !== oldProps.meshMaxError ||\n      props.elevationDecoder !== oldProps.elevationDecoder ||\n      props.bounds !== oldProps.bounds;\n\n    if (!this.state.isTiled && shouldReload) {\n      // When state.isTiled, elevationData cannot be an array\n      const terrain = this.loadTerrain(props as TerrainLoadProps);\n      this.setState({terrain});\n    }\n\n    // TODO - remove in v9\n    // @ts-ignore\n    if (props.workerUrl) {\n      log.removed('workerUrl', 'loadOptions.terrain.workerUrl')();\n    }\n  }\n\n  loadTerrain({\n    elevationData,\n    bounds,\n    elevationDecoder,\n    meshMaxError,\n    signal\n  }: TerrainLoadProps): Promise<MeshAttributes> | null {\n    if (!elevationData) {\n      return null;\n    }\n    let loadOptions = this.getLoadOptions();\n    loadOptions = {\n      ...loadOptions,\n      terrain: {\n        skirtHeight: this.state.isTiled ? meshMaxError * 2 : 0,\n        ...loadOptions?.terrain,\n        bounds,\n        meshMaxError,\n        elevationDecoder\n      }\n    };\n    const {fetch} = this.props;\n    return fetch(elevationData, {propName: 'elevationData', layer: this, loadOptions, signal});\n  }\n\n  getTiledTerrainData(tile: TileLoadProps): Promise<MeshAndTexture> {\n    const {elevationData, fetch, texture, elevationDecoder, meshMaxError} = this.props;\n    const {viewport} = this.context;\n    const dataUrl = getURLFromTemplate(elevationData, tile);\n    const textureUrl = texture && getURLFromTemplate(texture, tile);\n\n    const {signal} = tile;\n    let bottomLeft = [0, 0] as [number, number];\n    let topRight = [0, 0] as [number, number];\n    if (viewport.isGeospatial) {\n      const bbox = tile.bbox as GeoBoundingBox;\n      bottomLeft = viewport.projectFlat([bbox.west, bbox.south]);\n      topRight = viewport.projectFlat([bbox.east, bbox.north]);\n    } else {\n      const bbox = tile.bbox as Exclude<TileBoundingBox, GeoBoundingBox>;\n      bottomLeft = [bbox.left, bbox.bottom];\n      topRight = [bbox.right, bbox.top];\n    }\n    const bounds: Bounds = [bottomLeft[0], bottomLeft[1], topRight[0], topRight[1]];\n\n    const terrain = this.loadTerrain({\n      elevationData: dataUrl,\n      bounds,\n      elevationDecoder,\n      meshMaxError,\n      signal\n    });\n    const surface = textureUrl\n      ? // If surface image fails to load, the tile should still be displayed\n        fetch(textureUrl, {propName: 'texture', layer: this, loaders: [], signal}).catch(_ => null)\n      : Promise.resolve(null);\n\n    return Promise.all([terrain, surface]);\n  }\n\n  renderSubLayers(\n    props: TileLayerProps<MeshAndTexture> & {\n      id: string;\n      data: MeshAndTexture;\n      tile: Tile2DHeader<MeshAndTexture>;\n    }\n  ) {\n    const SubLayerClass = this.getSubLayerClass('mesh', SimpleMeshLayer);\n\n    const {color, wireframe, material} = this.props;\n    const {data} = props;\n\n    if (!data) {\n      return null;\n    }\n\n    const [mesh, texture] = data;\n\n    return new SubLayerClass(props, {\n      data: DUMMY_DATA,\n      mesh,\n      texture,\n      _instanced: false,\n      coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n      getPosition: d => [0, 0, 0],\n      getColor: color,\n      wireframe,\n      material\n    });\n  }\n\n  // Update zRange of viewport\n  onViewportLoad(tiles?: Tile2DHeader<MeshAndTexture>[]): void {\n    if (!tiles) {\n      return;\n    }\n\n    const {zRange} = this.state;\n    const ranges = tiles\n      .map(tile => tile.content)\n      .filter(Boolean)\n      .map(arr => {\n        // @ts-ignore\n        const bounds = arr[0].header.boundingBox;\n        return bounds.map(bound => bound[2]);\n      });\n    if (ranges.length === 0) {\n      return;\n    }\n    const minZ = Math.min(...ranges.map(x => x[0]));\n    const maxZ = Math.max(...ranges.map(x => x[1]));\n\n    if (!zRange || minZ < zRange[0] || maxZ > zRange[1]) {\n      this.setState({zRange: [minZ, maxZ]});\n    }\n  }\n\n  renderLayers(): Layer | null | LayersList {\n    const {\n      color,\n      material,\n      elevationData,\n      texture,\n      wireframe,\n      meshMaxError,\n      elevationDecoder,\n      tileSize,\n      maxZoom,\n      minZoom,\n      extent,\n      maxRequests,\n      onTileLoad,\n      onTileUnload,\n      onTileError,\n      maxCacheSize,\n      maxCacheByteSize,\n      refinementStrategy\n    } = this.props;\n\n    if (this.state.isTiled) {\n      return new TileLayer<MeshAndTexture>(\n        this.getSubLayerProps({\n          id: 'tiles'\n        }),\n        {\n          getTileData: this.getTiledTerrainData.bind(this),\n          renderSubLayers: this.renderSubLayers.bind(this),\n          updateTriggers: {\n            getTileData: {\n              elevationData: urlTemplateToUpdateTrigger(elevationData),\n              texture: urlTemplateToUpdateTrigger(texture),\n              meshMaxError,\n              elevationDecoder\n            }\n          },\n          onViewportLoad: this.onViewportLoad.bind(this),\n          zRange: this.state.zRange || null,\n          tileSize,\n          maxZoom,\n          minZoom,\n          extent,\n          maxRequests,\n          onTileLoad,\n          onTileUnload,\n          onTileError,\n          maxCacheSize,\n          maxCacheByteSize,\n          refinementStrategy\n        }\n      );\n    }\n\n    const SubLayerClass = this.getSubLayerClass('mesh', SimpleMeshLayer);\n    return new SubLayerClass(\n      this.getSubLayerProps({\n        id: 'mesh'\n      }),\n      {\n        data: DUMMY_DATA,\n        mesh: this.state.terrain,\n        texture,\n        _instanced: false,\n        getPosition: d => [0, 0, 0],\n        getColor: color,\n        material,\n        wireframe\n      }\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}