{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport findParentId from './findParentId';\nimport { GRID_MIN_COLUMN_COUNT, GRID_COLUMN_COUNT } from './constants';\nimport {\n  ROW_TYPE,\n  COLUMN_TYPE,\n  MARKDOWN_TYPE,\n  CHART_TYPE,\n  DYNAMIC_TYPE } from\n'./componentTypes';\n\nfunction getTotalChildWidth({ id, components }) {\n  const component = components[id];\n  if (!component) return 0;\n\n  let width = 0;\n\n  (component.children || []).forEach((childId) => {\n    const child = components[childId] || {};\n    width += (child.meta || {}).width || 0;\n  });\n\n  return width;\n}\n\nexport default function getDetailedComponentWidth({\n  // pass either an id, or a component\n  id,\n  component: passedComponent,\n  components = {}\n}) {\n  const result = {\n    width: undefined,\n    occupiedWidth: undefined,\n    minimumWidth: undefined\n  };\n\n  const component = passedComponent || components[id];\n  if (!component) return result;\n\n  // note these remain as undefined if the component has no defined width\n  result.width = (component.meta || {}).width;\n  result.occupiedWidth = result.width;\n\n  if (component.type === ROW_TYPE) {\n    // not all rows have width 12, e\n    result.width =\n    getDetailedComponentWidth({\n      id: findParentId({\n        childId: component.id,\n        layout: components\n      }),\n      components\n    }).width || GRID_COLUMN_COUNT;\n    result.occupiedWidth = getTotalChildWidth({ id: component.id, components });\n    result.minimumWidth = result.occupiedWidth || GRID_MIN_COLUMN_COUNT;\n  } else if (component.type === COLUMN_TYPE) {\n    // find the width of the largest child, only rows count\n    result.minimumWidth = GRID_MIN_COLUMN_COUNT;\n    result.occupiedWidth = 0;\n    (component.children || []).forEach((childId) => {\n      // rows don't have widths, so find the width of its children\n      if (components[childId].type === ROW_TYPE) {\n        result.minimumWidth = Math.max(\n          result.minimumWidth,\n          getTotalChildWidth({ id: childId, components })\n        );\n      }\n    });\n  } else if (\n  component.type === DYNAMIC_TYPE ||\n  component.type === MARKDOWN_TYPE ||\n  component.type === CHART_TYPE)\n  {\n    result.minimumWidth = GRID_MIN_COLUMN_COUNT;\n  }\n\n  return result;\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(getTotalChildWidth, \"getTotalChildWidth\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/util/getDetailedComponentWidth.js\");reactHotLoader.register(getDetailedComponentWidth, \"getDetailedComponentWidth\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/util/getDetailedComponentWidth.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["findParentId","GRID_MIN_COLUMN_COUNT","GRID_COLUMN_COUNT","ROW_TYPE","COLUMN_TYPE","MARKDOWN_TYPE","CHART_TYPE","DYNAMIC_TYPE","getTotalChildWidth","id","components","component","width","children","forEach","childId","child","meta","getDetailedComponentWidth","passedComponent","result","undefined","occupiedWidth","minimumWidth","type","layout","Math","max","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/util/getDetailedComponentWidth.js"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport findParentId from './findParentId';\nimport { GRID_MIN_COLUMN_COUNT, GRID_COLUMN_COUNT } from './constants';\nimport {\n  ROW_TYPE,\n  COLUMN_TYPE,\n  MARKDOWN_TYPE,\n  CHART_TYPE,\n  DYNAMIC_TYPE,\n} from './componentTypes';\n\nfunction getTotalChildWidth({ id, components }) {\n  const component = components[id];\n  if (!component) return 0;\n\n  let width = 0;\n\n  (component.children || []).forEach(childId => {\n    const child = components[childId] || {};\n    width += (child.meta || {}).width || 0;\n  });\n\n  return width;\n}\n\nexport default function getDetailedComponentWidth({\n  // pass either an id, or a component\n  id,\n  component: passedComponent,\n  components = {},\n}) {\n  const result = {\n    width: undefined,\n    occupiedWidth: undefined,\n    minimumWidth: undefined,\n  };\n\n  const component = passedComponent || components[id];\n  if (!component) return result;\n\n  // note these remain as undefined if the component has no defined width\n  result.width = (component.meta || {}).width;\n  result.occupiedWidth = result.width;\n\n  if (component.type === ROW_TYPE) {\n    // not all rows have width 12, e\n    result.width =\n      getDetailedComponentWidth({\n        id: findParentId({\n          childId: component.id,\n          layout: components,\n        }),\n        components,\n      }).width || GRID_COLUMN_COUNT;\n    result.occupiedWidth = getTotalChildWidth({ id: component.id, components });\n    result.minimumWidth = result.occupiedWidth || GRID_MIN_COLUMN_COUNT;\n  } else if (component.type === COLUMN_TYPE) {\n    // find the width of the largest child, only rows count\n    result.minimumWidth = GRID_MIN_COLUMN_COUNT;\n    result.occupiedWidth = 0;\n    (component.children || []).forEach(childId => {\n      // rows don't have widths, so find the width of its children\n      if (components[childId].type === ROW_TYPE) {\n        result.minimumWidth = Math.max(\n          result.minimumWidth,\n          getTotalChildWidth({ id: childId, components }),\n        );\n      }\n    });\n  } else if (\n    component.type === DYNAMIC_TYPE ||\n    component.type === MARKDOWN_TYPE ||\n    component.type === CHART_TYPE\n  ) {\n    result.minimumWidth = GRID_MIN_COLUMN_COUNT;\n  }\n\n  return result;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}