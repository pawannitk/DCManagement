{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useMemo, useState } from 'react';\nimport { isFeatureEnabled, FeatureFlag, t } from '@superset-ui/core';\nimport { Actions, createErrorHandler, createFetchRelated } from 'src/views/CRUD/utils';\nimport { useListViewResource, useFavoriteStatus } from 'src/views/CRUD/hooks';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport SubMenu from 'src/features/home/SubMenu';\nimport ListView, { FilterOperator } from 'src/components/ListView';\nimport { dangerouslyGetItemDoNotUse } from 'src/utils/localStorageHelpers';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport Icons from 'src/components/Icons';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { Link } from 'react-router-dom';\nimport { deleteTags } from 'src/features/tags/tags';\nimport { Tag as AntdTag } from 'antd';\nimport { QueryObjectColumns } from 'src/views/CRUD/types';\nimport TagModal from 'src/features/tags/TagModal';\nimport FaveStar from 'src/components/FaveStar';\nimport { ModifiedInfo } from 'src/components/AuditInfo';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst PAGE_SIZE = 25;\nfunction TagList(props) {\n  const { addDangerToast, addSuccessToast, user } = props;\n  const { userId } = user;\n  const initialFilters = useMemo(() => [\n  {\n    id: 'type',\n    operator: 'custom_tag',\n    value: true\n  }],\n  []);\n  const { state: { loading, resourceCount: tagCount, resourceCollection: tags, bulkSelectEnabled }, hasPerm, fetchData, toggleBulkSelect, refreshData } = useListViewResource('tag', t('tag'), addDangerToast, undefined, undefined, initialFilters);\n  const [showTagModal, setShowTagModal] = useState(false);\n  const [tagToEdit, setTagToEdit] = useState(null);\n  const tagIds = useMemo(() => tags.map((c) => c.id), [tags]);\n  const [saveFavoriteStatus, favoriteStatus] = useFavoriteStatus('tag', tagIds, addDangerToast);\n  // TODO: Fix usage of localStorage keying on the user id\n  const userKey = dangerouslyGetItemDoNotUse(userId == null ? void 0 : userId.toString(), null);\n  const canDelete = hasPerm('can_write');\n  const canEdit = hasPerm('can_write');\n  const initialSort = [{ id: 'changed_on_delta_humanized', desc: true }];\n  function handleTagsDelete(tags) {\n    deleteTags(tags, (msg) => {\n      addSuccessToast(msg);\n      refreshData();\n    }, (msg) => {\n      addDangerToast(msg);\n      refreshData();\n    });\n  }\n  const handleTagEdit = (tag) => {\n    setShowTagModal(true);\n    setTagToEdit(tag);\n  };\n  const emptyState = {\n    title: t('No Tags created'),\n    image: 'dashboard.svg',\n    description: 'Create a new tag and assign it to existing entities like charts or dashboards',\n    buttonAction: () => setShowTagModal(true),\n    buttonText: ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(\"i\", { className: \"fa fa-plus\", \"data-test\": \"add-rule-empty\" }), ' ',\n    'Create a new Tag', ' '\n    )\n  };\n  const columns = useMemo(() => [\n  {\n    Cell: ({ row: { original: { id } } }) => userId && ___EmotionJSX(FaveStar, { itemId: id, saveFaveStar: saveFavoriteStatus, isStarred: favoriteStatus[id] }),\n    Header: '',\n    id: 'id',\n    disableSortBy: true,\n    size: 'xs',\n    hidden: !userId\n  },\n  {\n    Cell: ({ row: { original: { id, name: tagName } } }) => ___EmotionJSX(AntdTag, null,\n    ___EmotionJSX(Link, { to: `/superset/all_entities/?id=${id}` }, tagName)\n    ),\n    Header: t('Name'),\n    accessor: 'name'\n  },\n  {\n    Cell: ({ row: { original: { changed_on_delta_humanized: changedOn, changed_by: changedBy } } }) => ___EmotionJSX(ModifiedInfo, { date: changedOn, user: changedBy }),\n    Header: t('Last modified'),\n    accessor: 'changed_on_delta_humanized',\n    size: 'xl'\n  },\n  {\n    Cell: ({ row: { original } }) => {\n      const handleEdit = () => handleTagEdit(original);\n      return ___EmotionJSX(Actions, { className: \"actions\" },\n      canDelete && ___EmotionJSX(ConfirmStatusChange, { title: t('Please confirm'), description: ___EmotionJSX(React.Fragment, null,\n        t('Are you sure you want to delete'), ' ',\n        ___EmotionJSX(\"b\", null, original.dashboard_title), \"?\"\n        ), onConfirm: () => handleTagsDelete([original]) },\n      (confirmDelete) => ___EmotionJSX(Tooltip, { id: \"delete-action-tooltip\", title: t('Delete'), placement: \"bottom\" },\n      ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: confirmDelete },\n      ___EmotionJSX(Icons.Trash, { \"data-test\": \"dashboard-list-trash-icon\" })\n      )\n      )\n      ),\n      canEdit && ___EmotionJSX(Tooltip, { id: \"edit-action-tooltip\", title: t('Edit'), placement: \"bottom\" },\n      ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: handleEdit },\n      ___EmotionJSX(Icons.EditAlt, { \"data-test\": \"edit-alt\" })\n      )\n      )\n      );\n    },\n    Header: t('Actions'),\n    id: 'actions',\n    hidden: !canDelete,\n    disableSortBy: true\n  },\n  {\n    accessor: QueryObjectColumns.ChangedBy,\n    hidden: true\n  }],\n  [userId, canDelete, refreshData, addSuccessToast, addDangerToast]);\n  const filters = useMemo(() => {\n    const filters_list = [\n    {\n      Header: t('Name'),\n      id: 'name',\n      input: 'search',\n      operator: FilterOperator.Contains\n    },\n    {\n      Header: t('Modified by'),\n      key: 'changed_by',\n      id: 'changed_by',\n      input: 'select',\n      operator: FilterOperator.RelationOneMany,\n      unfilteredLabel: t('All'),\n      fetchSelects: createFetchRelated('tag', 'changed_by', createErrorHandler((errMsg) => t('An error occurred while fetching dataset datasource values: %s', errMsg)), user),\n      paginate: true\n    }];\n\n    return filters_list;\n  }, [addDangerToast, props.user]);\n  const sortTypes = [\n  {\n    desc: false,\n    id: 'name',\n    label: t('Alphabetical'),\n    value: 'alphabetical'\n  },\n  {\n    desc: true,\n    id: 'changed_on_delta_humanized',\n    label: t('Recently modified'),\n    value: 'recently_modified'\n  },\n  {\n    desc: false,\n    id: 'changed_on_delta_humanized',\n    label: t('Least recently modified'),\n    value: 'least_recently_modified'\n  }];\n\n  const subMenuButtons = [];\n  if (canDelete) {\n    subMenuButtons.push({\n      name: t('Bulk select'),\n      buttonStyle: 'secondary',\n      'data-test': 'bulk-select',\n      onClick: toggleBulkSelect\n    });\n  }\n  // render new 'New Tag' btn\n  subMenuButtons.push({\n    name: ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(\"i\", { className: \"fa fa-plus\" }), \" \", t('Tag')\n    ),\n    buttonStyle: 'primary',\n    'data-test': 'bulk-select',\n    onClick: () => setShowTagModal(true)\n  });\n  const handleBulkDelete = (tagsToDelete) => handleTagsDelete(tagsToDelete);\n  return ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(TagModal, { show: showTagModal, onHide: () => {\n      setShowTagModal(false);\n      setTagToEdit(null);\n    }, editTag: tagToEdit, refreshData: refreshData, addSuccessToast: addSuccessToast, addDangerToast: addDangerToast, clearOnHide: true }),\n  ___EmotionJSX(SubMenu, { name: t('Tags'), buttons: subMenuButtons }),\n  ___EmotionJSX(ConfirmStatusChange, { title: t('Please confirm'), description: t('Are you sure you want to delete the selected tags?'), onConfirm: handleBulkDelete },\n  (confirmDelete) => {\n    const bulkActions = [];\n    if (canDelete) {\n      bulkActions.push({\n        key: 'delete',\n        name: t('Delete'),\n        type: 'danger',\n        onSelect: confirmDelete\n      });\n    }\n    return ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(ListView, { bulkActions: bulkActions, bulkSelectEnabled: bulkSelectEnabled, cardSortSelectOptions: sortTypes, className: \"tags-list-view\", columns: columns, count: tagCount, data: tags, disableBulkSelect: toggleBulkSelect, refreshData: refreshData, emptyState: emptyState, fetchData: fetchData, filters: filters, initialSort: initialSort, loading: loading, addDangerToast: addDangerToast, addSuccessToast: addSuccessToast, pageSize: PAGE_SIZE, showThumbnails: userKey ?\n      userKey.thumbnails :\n      isFeatureEnabled(FeatureFlag.Thumbnails), defaultViewMode: isFeatureEnabled(FeatureFlag.ListviewsDefaultCardView) ?\n      'card' :\n      'table' })\n    );\n  }\n  )\n  );\n}__signature__(TagList, \"useMemo{initialFilters}\\nuseListViewResource{{ state: { loading, resourceCount: tagCount, resourceCollection: tags, bulkSelectEnabled, }, hasPerm, fetchData, toggleBulkSelect, refreshData, }}\\nuseState{[showTagModal, setShowTagModal](false)}\\nuseState{[tagToEdit, setTagToEdit](null)}\\nuseMemo{tagIds}\\nuseFavoriteStatus{[saveFavoriteStatus, favoriteStatus]}\\nuseMemo{columns}\\nuseMemo{filters}\", () => [useListViewResource, useFavoriteStatus]);const _default =\nwithToasts(TagList);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(PAGE_SIZE, \"PAGE_SIZE\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/pages/Tags/index.tsx\");reactHotLoader.register(TagList, \"TagList\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/pages/Tags/index.tsx\");reactHotLoader.register(_default, \"default\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/pages/Tags/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["React","useMemo","useState","isFeatureEnabled","FeatureFlag","t","Actions","createErrorHandler","createFetchRelated","useListViewResource","useFavoriteStatus","ConfirmStatusChange","SubMenu","ListView","FilterOperator","dangerouslyGetItemDoNotUse","withToasts","Icons","Tooltip","Link","deleteTags","Tag","AntdTag","QueryObjectColumns","TagModal","FaveStar","ModifiedInfo","jsx","___EmotionJSX","PAGE_SIZE","TagList","props","addDangerToast","addSuccessToast","user","userId","initialFilters","id","operator","value","state","loading","resourceCount","tagCount","resourceCollection","tags","bulkSelectEnabled","hasPerm","fetchData","toggleBulkSelect","refreshData","undefined","showTagModal","setShowTagModal","tagToEdit","setTagToEdit","tagIds","map","c","saveFavoriteStatus","favoriteStatus","userKey","toString","canDelete","canEdit","initialSort","desc","handleTagsDelete","msg","handleTagEdit","tag","emptyState","title","image","description","buttonAction","buttonText","Fragment","className","columns","Cell","row","original","itemId","saveFaveStar","isStarred","Header","disableSortBy","size","hidden","name","tagName","to","accessor","changed_on_delta_humanized","changedOn","changed_by","changedBy","date","handleEdit","dashboard_title","onConfirm","confirmDelete","placement","role","tabIndex","onClick","Trash","EditAlt","ChangedBy","filters","filters_list","input","Contains","key","RelationOneMany","unfilteredLabel","fetchSelects","errMsg","paginate","sortTypes","label","subMenuButtons","push","buttonStyle","handleBulkDelete","tagsToDelete","show","onHide","editTag","clearOnHide","buttons","bulkActions","type","onSelect","cardSortSelectOptions","count","data","disableBulkSelect","pageSize","showThumbnails","thumbnails","Thumbnails","defaultViewMode","ListviewsDefaultCardView","__signature__","_default","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/pages/Tags/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useMemo, useState } from 'react';\nimport { isFeatureEnabled, FeatureFlag, t } from '@superset-ui/core';\nimport {\n  Actions,\n  createErrorHandler,\n  createFetchRelated,\n} from 'src/views/CRUD/utils';\nimport { useListViewResource, useFavoriteStatus } from 'src/views/CRUD/hooks';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport SubMenu, { SubMenuProps } from 'src/features/home/SubMenu';\nimport ListView, {\n  ListViewProps,\n  Filters,\n  FilterOperator,\n} from 'src/components/ListView';\nimport { dangerouslyGetItemDoNotUse } from 'src/utils/localStorageHelpers';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport Icons from 'src/components/Icons';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { Link } from 'react-router-dom';\nimport { deleteTags } from 'src/features/tags/tags';\nimport { Tag as AntdTag } from 'antd';\nimport { QueryObjectColumns, Tag } from 'src/views/CRUD/types';\nimport TagModal from 'src/features/tags/TagModal';\nimport FaveStar from 'src/components/FaveStar';\nimport { ModifiedInfo } from 'src/components/AuditInfo';\n\nconst PAGE_SIZE = 25;\n\ninterface TagListProps {\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n  user: {\n    userId: string | number;\n    firstName: string;\n    lastName: string;\n  };\n}\n\nfunction TagList(props: TagListProps) {\n  const { addDangerToast, addSuccessToast, user } = props;\n  const { userId } = user;\n\n  const initialFilters = useMemo(\n    () => [\n      {\n        id: 'type',\n        operator: 'custom_tag',\n        value: true,\n      },\n    ],\n    [],\n  );\n\n  const {\n    state: {\n      loading,\n      resourceCount: tagCount,\n      resourceCollection: tags,\n      bulkSelectEnabled,\n    },\n    hasPerm,\n    fetchData,\n    toggleBulkSelect,\n    refreshData,\n  } = useListViewResource<Tag>(\n    'tag',\n    t('tag'),\n    addDangerToast,\n    undefined,\n    undefined,\n    initialFilters,\n  );\n\n  const [showTagModal, setShowTagModal] = useState<boolean>(false);\n  const [tagToEdit, setTagToEdit] = useState<Tag | null>(null);\n  const tagIds = useMemo(() => tags.map(c => c.id), [tags]);\n  const [saveFavoriteStatus, favoriteStatus] = useFavoriteStatus(\n    'tag',\n    tagIds,\n    addDangerToast,\n  );\n\n  // TODO: Fix usage of localStorage keying on the user id\n  const userKey = dangerouslyGetItemDoNotUse(userId?.toString(), null);\n\n  const canDelete = hasPerm('can_write');\n  const canEdit = hasPerm('can_write');\n\n  const initialSort = [{ id: 'changed_on_delta_humanized', desc: true }];\n\n  function handleTagsDelete(tags: Tag[]) {\n    deleteTags(\n      tags,\n      (msg: string) => {\n        addSuccessToast(msg);\n        refreshData();\n      },\n      msg => {\n        addDangerToast(msg);\n        refreshData();\n      },\n    );\n  }\n\n  const handleTagEdit = (tag: Tag) => {\n    setShowTagModal(true);\n    setTagToEdit(tag);\n  };\n\n  const emptyState = {\n    title: t('No Tags created'),\n    image: 'dashboard.svg',\n    description:\n      'Create a new tag and assign it to existing entities like charts or dashboards',\n    buttonAction: () => setShowTagModal(true),\n    buttonText: (\n      <>\n        <i className=\"fa fa-plus\" data-test=\"add-rule-empty\" />{' '}\n        {'Create a new Tag'}{' '}\n      </>\n    ),\n  };\n\n  const columns = useMemo(\n    () => [\n      {\n        Cell: ({\n          row: {\n            original: { id },\n          },\n        }: any) =>\n          userId && (\n            <FaveStar\n              itemId={id}\n              saveFaveStar={saveFavoriteStatus}\n              isStarred={favoriteStatus[id]}\n            />\n          ),\n        Header: '',\n        id: 'id',\n        disableSortBy: true,\n        size: 'xs',\n        hidden: !userId,\n      },\n      {\n        Cell: ({\n          row: {\n            original: { id, name: tagName },\n          },\n        }: any) => (\n          <AntdTag>\n            <Link to={`/superset/all_entities/?id=${id}`}>{tagName}</Link>\n          </AntdTag>\n        ),\n        Header: t('Name'),\n        accessor: 'name',\n      },\n      {\n        Cell: ({\n          row: {\n            original: {\n              changed_on_delta_humanized: changedOn,\n              changed_by: changedBy,\n            },\n          },\n        }: any) => <ModifiedInfo date={changedOn} user={changedBy} />,\n        Header: t('Last modified'),\n        accessor: 'changed_on_delta_humanized',\n        size: 'xl',\n      },\n      {\n        Cell: ({ row: { original } }: any) => {\n          const handleEdit = () => handleTagEdit(original);\n          return (\n            <Actions className=\"actions\">\n              {canDelete && (\n                <ConfirmStatusChange\n                  title={t('Please confirm')}\n                  description={\n                    <>\n                      {t('Are you sure you want to delete')}{' '}\n                      <b>{original.dashboard_title}</b>?\n                    </>\n                  }\n                  onConfirm={() => handleTagsDelete([original])}\n                >\n                  {confirmDelete => (\n                    <Tooltip\n                      id=\"delete-action-tooltip\"\n                      title={t('Delete')}\n                      placement=\"bottom\"\n                    >\n                      <span\n                        role=\"button\"\n                        tabIndex={0}\n                        className=\"action-button\"\n                        onClick={confirmDelete}\n                      >\n                        <Icons.Trash data-test=\"dashboard-list-trash-icon\" />\n                      </span>\n                    </Tooltip>\n                  )}\n                </ConfirmStatusChange>\n              )}\n              {canEdit && (\n                <Tooltip\n                  id=\"edit-action-tooltip\"\n                  title={t('Edit')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={handleEdit}\n                  >\n                    <Icons.EditAlt data-test=\"edit-alt\" />\n                  </span>\n                </Tooltip>\n              )}\n            </Actions>\n          );\n        },\n        Header: t('Actions'),\n        id: 'actions',\n        hidden: !canDelete,\n        disableSortBy: true,\n      },\n      {\n        accessor: QueryObjectColumns.ChangedBy,\n        hidden: true,\n      },\n    ],\n    [userId, canDelete, refreshData, addSuccessToast, addDangerToast],\n  );\n\n  const filters: Filters = useMemo(() => {\n    const filters_list = [\n      {\n        Header: t('Name'),\n        id: 'name',\n        input: 'search',\n        operator: FilterOperator.Contains,\n      },\n      {\n        Header: t('Modified by'),\n        key: 'changed_by',\n        id: 'changed_by',\n        input: 'select',\n        operator: FilterOperator.RelationOneMany,\n        unfilteredLabel: t('All'),\n        fetchSelects: createFetchRelated(\n          'tag',\n          'changed_by',\n          createErrorHandler(errMsg =>\n            t(\n              'An error occurred while fetching dataset datasource values: %s',\n              errMsg,\n            ),\n          ),\n          user,\n        ),\n        paginate: true,\n      },\n    ] as Filters;\n    return filters_list;\n  }, [addDangerToast, props.user]);\n\n  const sortTypes = [\n    {\n      desc: false,\n      id: 'name',\n      label: t('Alphabetical'),\n      value: 'alphabetical',\n    },\n    {\n      desc: true,\n      id: 'changed_on_delta_humanized',\n      label: t('Recently modified'),\n      value: 'recently_modified',\n    },\n    {\n      desc: false,\n      id: 'changed_on_delta_humanized',\n      label: t('Least recently modified'),\n      value: 'least_recently_modified',\n    },\n  ];\n\n  const subMenuButtons: SubMenuProps['buttons'] = [];\n\n  if (canDelete) {\n    subMenuButtons.push({\n      name: t('Bulk select'),\n      buttonStyle: 'secondary',\n      'data-test': 'bulk-select',\n      onClick: toggleBulkSelect,\n    });\n  }\n\n  // render new 'New Tag' btn\n  subMenuButtons.push({\n    name: (\n      <>\n        <i className=\"fa fa-plus\" /> {t('Tag')}\n      </>\n    ),\n    buttonStyle: 'primary',\n    'data-test': 'bulk-select',\n    onClick: () => setShowTagModal(true),\n  });\n\n  const handleBulkDelete = (tagsToDelete: Tag[]) =>\n    handleTagsDelete(tagsToDelete);\n\n  return (\n    <>\n      <TagModal\n        show={showTagModal}\n        onHide={() => {\n          setShowTagModal(false);\n          setTagToEdit(null);\n        }}\n        editTag={tagToEdit}\n        refreshData={refreshData}\n        addSuccessToast={addSuccessToast}\n        addDangerToast={addDangerToast}\n        clearOnHide\n      />\n      <SubMenu name={t('Tags')} buttons={subMenuButtons} />\n      <ConfirmStatusChange\n        title={t('Please confirm')}\n        description={t('Are you sure you want to delete the selected tags?')}\n        onConfirm={handleBulkDelete}\n      >\n        {confirmDelete => {\n          const bulkActions: ListViewProps['bulkActions'] = [];\n          if (canDelete) {\n            bulkActions.push({\n              key: 'delete',\n              name: t('Delete'),\n              type: 'danger',\n              onSelect: confirmDelete,\n            });\n          }\n          return (\n            <>\n              <ListView<Tag>\n                bulkActions={bulkActions}\n                bulkSelectEnabled={bulkSelectEnabled}\n                cardSortSelectOptions={sortTypes}\n                className=\"tags-list-view\"\n                columns={columns}\n                count={tagCount}\n                data={tags}\n                disableBulkSelect={toggleBulkSelect}\n                refreshData={refreshData}\n                emptyState={emptyState}\n                fetchData={fetchData}\n                filters={filters}\n                initialSort={initialSort}\n                loading={loading}\n                addDangerToast={addDangerToast}\n                addSuccessToast={addSuccessToast}\n                pageSize={PAGE_SIZE}\n                showThumbnails={\n                  userKey\n                    ? userKey.thumbnails\n                    : isFeatureEnabled(FeatureFlag.Thumbnails)\n                }\n                defaultViewMode={\n                  isFeatureEnabled(FeatureFlag.ListviewsDefaultCardView)\n                    ? 'card'\n                    : 'table'\n                }\n              />\n            </>\n          );\n        }}\n      </ConfirmStatusChange>\n    </>\n  );\n}\n\nexport default withToasts(TagList);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}