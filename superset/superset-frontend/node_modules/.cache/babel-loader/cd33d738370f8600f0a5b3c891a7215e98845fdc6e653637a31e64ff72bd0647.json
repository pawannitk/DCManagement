{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { t, isAdhocColumn } from '@superset-ui/core';\nimport { isColumnMeta } from '@superset-ui/chart-controls';\nimport { ExplorePopoverContent } from 'src/explore/components/ExploreContentPopover';\nimport { SaveDatasetModal } from 'src/SqlLab/components/SaveDatasetModal';\nimport ColumnSelectPopover from './ColumnSelectPopover';\nimport { DndColumnSelectPopoverTitle } from './DndColumnSelectPopoverTitle';\nimport ControlPopover from '../ControlPopover/ControlPopover';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst defaultPopoverLabel = t('My column');\nconst editableTitleTab = 'sqlExpression';\nconst ColumnSelectPopoverTrigger = ({ columns, editedColumn, onColumnEdit, isControlledComponent, children, isTemporal, ...props }) => {\n  // @ts-ignore\n  const datasource = useSelector((state) => state.explore.datasource);\n  const [popoverLabel, setPopoverLabel] = useState(defaultPopoverLabel);\n  const [popoverVisible, setPopoverVisible] = useState(false);\n  const [isTitleEditDisabled, setIsTitleEditDisabled] = useState(true);\n  const [hasCustomLabel, setHasCustomLabel] = useState(false);\n  const [showDatasetModal, setDatasetModal] = useState(false);\n  let initialPopoverLabel = defaultPopoverLabel;\n  if (editedColumn && isColumnMeta(editedColumn)) {\n    initialPopoverLabel = editedColumn.verbose_name || editedColumn.column_name;\n  } else\n  if (editedColumn && isAdhocColumn(editedColumn)) {\n    initialPopoverLabel = editedColumn.label || defaultPopoverLabel;\n  }\n  useEffect(() => {\n    setPopoverLabel(initialPopoverLabel);\n  }, [initialPopoverLabel, popoverVisible]);\n  const togglePopover = useCallback((visible) => {\n    setPopoverVisible(visible);\n  }, []);\n  const closePopover = useCallback(() => {\n    setPopoverVisible(false);\n  }, []);\n  const { visible, handleTogglePopover, handleClosePopover } = isControlledComponent ?\n  {\n    visible: props.visible,\n    handleTogglePopover: props.togglePopover,\n    handleClosePopover: props.closePopover\n  } :\n  {\n    visible: popoverVisible,\n    handleTogglePopover: togglePopover,\n    handleClosePopover: closePopover\n  };\n  const getCurrentTab = useCallback((tab) => {\n    setIsTitleEditDisabled(tab !== editableTitleTab);\n  }, []);\n  const overlayContent = useMemo(() => ___EmotionJSX(ExplorePopoverContent, null,\n  ___EmotionJSX(ColumnSelectPopover, { editedColumn: editedColumn, columns: columns, setDatasetModal: setDatasetModal, onClose: handleClosePopover, onChange: onColumnEdit, hasCustomLabel: hasCustomLabel, label: popoverLabel, setLabel: setPopoverLabel, getCurrentTab: getCurrentTab, isTemporal: isTemporal })\n  ), [\n  columns,\n  editedColumn,\n  getCurrentTab,\n  hasCustomLabel,\n  handleClosePopover,\n  isTemporal,\n  onColumnEdit,\n  popoverLabel]\n  );\n  const onLabelChange = useCallback((e) => {\n    setPopoverLabel(e.target.value);\n    setHasCustomLabel(true);\n  }, [setPopoverLabel, setHasCustomLabel]);\n  const popoverTitle = useMemo(() => ___EmotionJSX(DndColumnSelectPopoverTitle, { title: popoverLabel, onChange: onLabelChange, isEditDisabled: isTitleEditDisabled, hasCustomLabel: hasCustomLabel }), [hasCustomLabel, isTitleEditDisabled, onLabelChange, popoverLabel]);\n  return ___EmotionJSX(React.Fragment, null,\n  showDatasetModal && ___EmotionJSX(SaveDatasetModal, { visible: showDatasetModal, onHide: () => setDatasetModal(false), buttonTextOnSave: t('Save'), buttonTextOnOverwrite: t('Overwrite'), modalDescription: t('Save this query as a virtual dataset to continue exploring'), datasource: datasource }),\n  ___EmotionJSX(ControlPopover, { trigger: \"click\", content: overlayContent, defaultVisible: visible, visible: visible, onVisibleChange: handleTogglePopover, title: popoverTitle, destroyTooltipOnHide: true },\n  children\n  )\n  );\n};__signature__(ColumnSelectPopoverTrigger, \"useSelector{datasource}\\nuseState{[popoverLabel, setPopoverLabel](defaultPopoverLabel)}\\nuseState{[popoverVisible, setPopoverVisible](false)}\\nuseState{[isTitleEditDisabled, setIsTitleEditDisabled](true)}\\nuseState{[hasCustomLabel, setHasCustomLabel](false)}\\nuseState{[showDatasetModal, setDatasetModal](false)}\\nuseEffect{}\\nuseCallback{togglePopover}\\nuseCallback{closePopover}\\nuseCallback{getCurrentTab}\\nuseMemo{overlayContent}\\nuseCallback{onLabelChange}\\nuseMemo{popoverTitle}\", () => [useSelector]);const _default =\nColumnSelectPopoverTrigger;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(defaultPopoverLabel, \"defaultPopoverLabel\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/ColumnSelectPopoverTrigger.tsx\");reactHotLoader.register(editableTitleTab, \"editableTitleTab\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/ColumnSelectPopoverTrigger.tsx\");reactHotLoader.register(ColumnSelectPopoverTrigger, \"ColumnSelectPopoverTrigger\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/ColumnSelectPopoverTrigger.tsx\");reactHotLoader.register(_default, \"default\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/ColumnSelectPopoverTrigger.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["React","useCallback","useEffect","useMemo","useState","useSelector","t","isAdhocColumn","isColumnMeta","ExplorePopoverContent","SaveDatasetModal","ColumnSelectPopover","DndColumnSelectPopoverTitle","ControlPopover","jsx","___EmotionJSX","defaultPopoverLabel","editableTitleTab","ColumnSelectPopoverTrigger","columns","editedColumn","onColumnEdit","isControlledComponent","children","isTemporal","props","datasource","state","explore","popoverLabel","setPopoverLabel","popoverVisible","setPopoverVisible","isTitleEditDisabled","setIsTitleEditDisabled","hasCustomLabel","setHasCustomLabel","showDatasetModal","setDatasetModal","initialPopoverLabel","verbose_name","column_name","label","togglePopover","visible","closePopover","handleTogglePopover","handleClosePopover","getCurrentTab","tab","overlayContent","onClose","onChange","setLabel","onLabelChange","e","target","value","popoverTitle","title","isEditDisabled","Fragment","onHide","buttonTextOnSave","buttonTextOnOverwrite","modalDescription","trigger","content","defaultVisible","onVisibleChange","destroyTooltipOnHide","__signature__","_default","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/ColumnSelectPopoverTrigger.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { AdhocColumn, t, isAdhocColumn } from '@superset-ui/core';\nimport { ColumnMeta, isColumnMeta } from '@superset-ui/chart-controls';\nimport { ExplorePopoverContent } from 'src/explore/components/ExploreContentPopover';\nimport { SaveDatasetModal } from 'src/SqlLab/components/SaveDatasetModal';\nimport ColumnSelectPopover from './ColumnSelectPopover';\nimport { DndColumnSelectPopoverTitle } from './DndColumnSelectPopoverTitle';\nimport ControlPopover from '../ControlPopover/ControlPopover';\n\ninterface ColumnSelectPopoverTriggerProps {\n  columns: ColumnMeta[];\n  editedColumn?: ColumnMeta | AdhocColumn;\n  onColumnEdit: (editedColumn: ColumnMeta | AdhocColumn) => void;\n  isControlledComponent?: boolean;\n  visible?: boolean;\n  togglePopover?: (visible: boolean) => void;\n  closePopover?: () => void;\n  children: React.ReactNode;\n  isTemporal?: boolean;\n}\n\nconst defaultPopoverLabel = t('My column');\nconst editableTitleTab = 'sqlExpression';\n\nconst ColumnSelectPopoverTrigger = ({\n  columns,\n  editedColumn,\n  onColumnEdit,\n  isControlledComponent,\n  children,\n  isTemporal,\n  ...props\n}: ColumnSelectPopoverTriggerProps) => {\n  // @ts-ignore\n  const datasource = useSelector(state => state.explore.datasource);\n  const [popoverLabel, setPopoverLabel] = useState(defaultPopoverLabel);\n  const [popoverVisible, setPopoverVisible] = useState(false);\n  const [isTitleEditDisabled, setIsTitleEditDisabled] = useState(true);\n  const [hasCustomLabel, setHasCustomLabel] = useState(false);\n  const [showDatasetModal, setDatasetModal] = useState(false);\n\n  let initialPopoverLabel = defaultPopoverLabel;\n  if (editedColumn && isColumnMeta(editedColumn)) {\n    initialPopoverLabel = editedColumn.verbose_name || editedColumn.column_name;\n  } else if (editedColumn && isAdhocColumn(editedColumn)) {\n    initialPopoverLabel = editedColumn.label || defaultPopoverLabel;\n  }\n\n  useEffect(() => {\n    setPopoverLabel(initialPopoverLabel);\n  }, [initialPopoverLabel, popoverVisible]);\n\n  const togglePopover = useCallback((visible: boolean) => {\n    setPopoverVisible(visible);\n  }, []);\n\n  const closePopover = useCallback(() => {\n    setPopoverVisible(false);\n  }, []);\n\n  const { visible, handleTogglePopover, handleClosePopover } =\n    isControlledComponent\n      ? {\n          visible: props.visible,\n          handleTogglePopover: props.togglePopover!,\n          handleClosePopover: props.closePopover!,\n        }\n      : {\n          visible: popoverVisible,\n          handleTogglePopover: togglePopover,\n          handleClosePopover: closePopover,\n        };\n\n  const getCurrentTab = useCallback((tab: string) => {\n    setIsTitleEditDisabled(tab !== editableTitleTab);\n  }, []);\n\n  const overlayContent = useMemo(\n    () => (\n      <ExplorePopoverContent>\n        <ColumnSelectPopover\n          editedColumn={editedColumn}\n          columns={columns}\n          setDatasetModal={setDatasetModal}\n          onClose={handleClosePopover}\n          onChange={onColumnEdit}\n          hasCustomLabel={hasCustomLabel}\n          label={popoverLabel}\n          setLabel={setPopoverLabel}\n          getCurrentTab={getCurrentTab}\n          isTemporal={isTemporal}\n        />\n      </ExplorePopoverContent>\n    ),\n    [\n      columns,\n      editedColumn,\n      getCurrentTab,\n      hasCustomLabel,\n      handleClosePopover,\n      isTemporal,\n      onColumnEdit,\n      popoverLabel,\n    ],\n  );\n\n  const onLabelChange = useCallback(\n    (e: any) => {\n      setPopoverLabel(e.target.value);\n      setHasCustomLabel(true);\n    },\n    [setPopoverLabel, setHasCustomLabel],\n  );\n\n  const popoverTitle = useMemo(\n    () => (\n      <DndColumnSelectPopoverTitle\n        title={popoverLabel}\n        onChange={onLabelChange}\n        isEditDisabled={isTitleEditDisabled}\n        hasCustomLabel={hasCustomLabel}\n      />\n    ),\n    [hasCustomLabel, isTitleEditDisabled, onLabelChange, popoverLabel],\n  );\n\n  return (\n    <>\n      {showDatasetModal && (\n        <SaveDatasetModal\n          visible={showDatasetModal}\n          onHide={() => setDatasetModal(false)}\n          buttonTextOnSave={t('Save')}\n          buttonTextOnOverwrite={t('Overwrite')}\n          modalDescription={t(\n            'Save this query as a virtual dataset to continue exploring',\n          )}\n          datasource={datasource}\n        />\n      )}\n      <ControlPopover\n        trigger=\"click\"\n        content={overlayContent}\n        defaultVisible={visible}\n        visible={visible}\n        onVisibleChange={handleTogglePopover}\n        title={popoverTitle}\n        destroyTooltipOnHide\n      >\n        {children}\n      </ControlPopover>\n    </>\n  );\n};\n\nexport default ColumnSelectPopoverTrigger;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}