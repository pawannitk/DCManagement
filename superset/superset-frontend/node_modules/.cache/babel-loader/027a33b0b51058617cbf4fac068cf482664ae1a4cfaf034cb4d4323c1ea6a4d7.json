{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { isDefined, t } from '@superset-ui/core';\nimport Modal from 'src/components/Modal';\nimport { isCrossFilterScopeGlobal, GLOBAL_SCOPE_POINTER } from 'src/dashboard/types';\nimport { getChartIdsInFilterScope } from 'src/dashboard/util/getChartIdsInFilterScope';\nimport { useChartIds } from 'src/dashboard/util/charts/useChartIds';\nimport { saveChartConfiguration } from 'src/dashboard/actions/dashboardInfo';\nimport { DEFAULT_CROSS_FILTER_SCOPING } from 'src/dashboard/constants';\nimport { ScopingModalContent } from './ScopingModalContent';\nimport { NEW_CHART_SCOPING_ID } from './constants';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst getUpdatedGloballyScopedChartsInScope = (configs, globalChartsInScope) => Object.entries(configs).reduce((acc, [id, config]) => {\n  if (isCrossFilterScopeGlobal(config.crossFilters.scope)) {\n    acc[id] = {\n      id: Number(config.id),\n      crossFilters: {\n        scope: GLOBAL_SCOPE_POINTER,\n        chartsInScope: globalChartsInScope.filter((chartId) => chartId !== Number(config.id))\n      }\n    };\n  } else\n  {\n    acc[id] = config;\n  }\n  return acc;\n}, {});\nconst getActualScopeFromGlobalScope = (chartId, globalScope) => ({\n  rootPath: globalScope.rootPath,\n  excluded: globalScope.excluded.filter((id) => id !== chartId)\n});\nexport const ScopingModal = ({ initialChartId, isVisible, closeModal }) => {\n  const dispatch = useDispatch();\n  const layout = useSelector((state) => state.dashboardLayout.present);\n  const chartIds = useChartIds();\n  const [currentChartId, setCurrentChartId] = useState(initialChartId);\n  const initialChartConfig = useSelector((state) => {var _state$dashboardInfo$;return ((_state$dashboardInfo$ = state.dashboardInfo.metadata) == null ? void 0 : _state$dashboardInfo$.chart_configuration) || {};});\n  const defaultGlobalChartConfig = useMemo(() => ({\n    scope: DEFAULT_CROSS_FILTER_SCOPING,\n    chartsInScope: chartIds\n  }), [chartIds]);\n  const initialGlobalChartConfig = useSelector((state) => {var _state$dashboardInfo$2;return ((_state$dashboardInfo$2 = state.dashboardInfo.metadata) == null ? void 0 : _state$dashboardInfo$2.global_chart_configuration) ||\n    defaultGlobalChartConfig;});\n  const getInitialChartConfig = () => {var _initialChartConfig$i;\n    if (isDefined(initialChartId) &&\n    isCrossFilterScopeGlobal((_initialChartConfig$i = initialChartConfig[initialChartId]) == null ? void 0 : _initialChartConfig$i.crossFilters.scope)) {var _initialChartConfig$i2;\n      return {\n        ...initialChartConfig,\n        [initialChartId]: {\n          id: initialChartId,\n          crossFilters: {\n            scope: getActualScopeFromGlobalScope(initialChartId, initialGlobalChartConfig.scope),\n            chartsInScope: (_initialChartConfig$i2 = initialChartConfig[initialChartId]) == null ? void 0 : _initialChartConfig$i2.crossFilters.chartsInScope\n          }\n        }\n      };\n    }\n    return initialChartConfig;\n  };\n  const [chartConfigs, setChartConfigs] = useState(getInitialChartConfig());\n  const [globalChartConfig, setGlobalChartConfig] = useState(initialGlobalChartConfig);\n  const saveScoping = useCallback(() => {\n    const savedChartConfigs = { ...chartConfigs };\n    if (savedChartConfigs[NEW_CHART_SCOPING_ID]) {\n      delete savedChartConfigs[NEW_CHART_SCOPING_ID];\n    }\n    dispatch(saveChartConfiguration({\n      chartConfiguration: savedChartConfigs,\n      globalChartConfiguration: globalChartConfig\n    }));\n    closeModal();\n  }, [chartConfigs, closeModal, dispatch, globalChartConfig]);\n  const handleScopeUpdate = useCallback(({ scope }) => {\n    if (isDefined(currentChartId)) {\n      setChartConfigs((prevConfig) => ({\n        ...prevConfig,\n        [currentChartId]: {\n          id: currentChartId,\n          crossFilters: {\n            scope,\n            chartsInScope: getChartIdsInFilterScope(scope, chartIds, layout)\n          }\n        }\n      }));\n    } else\n    {\n      const globalChartsInScope = getChartIdsInFilterScope(scope, chartIds, layout);\n      setGlobalChartConfig({\n        scope,\n        chartsInScope: globalChartsInScope\n      });\n      setChartConfigs((prevConfig) => getUpdatedGloballyScopedChartsInScope(prevConfig, globalChartsInScope));\n    }\n  }, [currentChartId, chartIds, layout]);\n  const removeCustomScope = useCallback((chartId) => {\n    setChartConfigs((prevConfigs) => {\n      const newConfigs = { ...prevConfigs };\n      if (chartId === NEW_CHART_SCOPING_ID) {\n        delete newConfigs[NEW_CHART_SCOPING_ID];\n      } else\n      {\n        newConfigs[chartId] = {\n          id: chartId,\n          crossFilters: {\n            scope: GLOBAL_SCOPE_POINTER,\n            chartsInScope: globalChartConfig.chartsInScope.filter((id) => id !== chartId)\n          }\n        };\n      }\n      return newConfigs;\n    });\n    if (currentChartId === chartId) {\n      setCurrentChartId(undefined);\n    }\n  }, [currentChartId, globalChartConfig.chartsInScope]);\n  const addNewCustomScope = useCallback(() => {\n    setCurrentChartId(NEW_CHART_SCOPING_ID);\n    if (!chartConfigs[NEW_CHART_SCOPING_ID]) {\n      setChartConfigs((prevConfigs) => ({\n        ...prevConfigs,\n        [NEW_CHART_SCOPING_ID]: {\n          id: NEW_CHART_SCOPING_ID,\n          crossFilters: {\n            scope: globalChartConfig.scope,\n            chartsInScope: globalChartConfig.chartsInScope\n          }\n        }\n      }));\n    }\n  }, [chartConfigs, globalChartConfig.chartsInScope, globalChartConfig.scope]);\n  const handleSelectChange = useCallback((newChartId) => {\n    if (isDefined(currentChartId)) {var _chartConfigs$current;\n      const currentScope = !isCrossFilterScopeGlobal((_chartConfigs$current = chartConfigs[currentChartId]) == null ? void 0 : _chartConfigs$current.crossFilters.scope) ?\n      chartConfigs[currentChartId].crossFilters.\n      scope :\n      globalChartConfig.scope;\n      const newScope = {\n        rootPath: currentScope.rootPath,\n        excluded: [\n        ...currentScope.excluded.filter((id) => id !== currentChartId),\n        newChartId]\n\n      };\n      const newCrossFiltersConfig = {\n        id: newChartId,\n        crossFilters: {\n          scope: newScope,\n          chartsInScope: getChartIdsInFilterScope(newScope, chartIds, layout)\n        }\n      };\n      setChartConfigs((prevConfig) => {\n        const newConfig = {\n          ...prevConfig,\n          [newChartId]: newCrossFiltersConfig\n        };\n        if (currentChartId === NEW_CHART_SCOPING_ID) {\n          delete newConfig[NEW_CHART_SCOPING_ID];\n        } else\n        {\n          newConfig[currentChartId] = {\n            id: currentChartId,\n            crossFilters: {\n              scope: GLOBAL_SCOPE_POINTER,\n              chartsInScope: globalChartConfig.chartsInScope.filter((id) => id !== currentChartId)\n            }\n          };\n        }\n        return newConfig;\n      });\n      setCurrentChartId(newChartId);\n    }\n  }, [\n  chartConfigs,\n  chartIds,\n  currentChartId,\n  globalChartConfig.chartsInScope,\n  globalChartConfig.scope,\n  layout]\n  );\n  const scope = useMemo(() => {var _chartConfigs$current2, _chartConfigs$current3, _chartConfigs$current4, _chartConfigs$current5;\n    const globalScope = globalChartConfig.scope;\n    if (!isDefined(currentChartId)) {\n      return globalScope;\n    }\n    if (isCrossFilterScopeGlobal((_chartConfigs$current2 = chartConfigs[currentChartId]) == null ? void 0 : (_chartConfigs$current3 = _chartConfigs$current2.crossFilters) == null ? void 0 : _chartConfigs$current3.scope)) {\n      return getActualScopeFromGlobalScope(currentChartId, globalScope);\n    }\n    return (_chartConfigs$current4 = chartConfigs[currentChartId]) == null ? void 0 : (_chartConfigs$current5 = _chartConfigs$current4.crossFilters) == null ? void 0 : _chartConfigs$current5.\n    scope;\n  }, [chartConfigs, currentChartId, globalChartConfig.scope]);\n  return ___EmotionJSX(Modal, { onHide: closeModal, show: isVisible, title: t('Cross-filtering scoping'), onHandledPrimaryAction: saveScoping, primaryButtonName: t('Save'), responsive: true, destroyOnClose: true, bodyStyle: {\n      padding: 0,\n      height: 700\n    } },\n  ___EmotionJSX(ScopingModalContent, { chartConfigs: chartConfigs, currentScope: scope, onScopeUpdate: handleScopeUpdate, chartId: currentChartId, setCurrentChartId: setCurrentChartId, onSelectChange: handleSelectChange, removeCustomScope: removeCustomScope, addNewCustomScope: addNewCustomScope })\n  );\n};__signature__(ScopingModal, \"useDispatch{dispatch}\\nuseSelector{layout}\\nuseChartIds{chartIds}\\nuseState{[currentChartId, setCurrentChartId](initialChartId)}\\nuseSelector{initialChartConfig}\\nuseMemo{defaultGlobalChartConfig}\\nuseSelector{initialGlobalChartConfig}\\nuseState{[chartConfigs, setChartConfigs](getInitialChartConfig())}\\nuseState{[globalChartConfig, setGlobalChartConfig](initialGlobalChartConfig)}\\nuseCallback{saveScoping}\\nuseCallback{handleScopeUpdate}\\nuseCallback{removeCustomScope}\\nuseCallback{addNewCustomScope}\\nuseCallback{handleSelectChange}\\nuseMemo{scope}\", () => [useDispatch, useSelector, useChartIds, useSelector, useSelector]);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(getUpdatedGloballyScopedChartsInScope, \"getUpdatedGloballyScopedChartsInScope\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/components/nativeFilters/FilterBar/CrossFilters/ScopingModal/ScopingModal.tsx\");reactHotLoader.register(getActualScopeFromGlobalScope, \"getActualScopeFromGlobalScope\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/components/nativeFilters/FilterBar/CrossFilters/ScopingModal/ScopingModal.tsx\");reactHotLoader.register(ScopingModal, \"ScopingModal\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/components/nativeFilters/FilterBar/CrossFilters/ScopingModal/ScopingModal.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["React","useCallback","useMemo","useState","useDispatch","useSelector","isDefined","t","Modal","isCrossFilterScopeGlobal","GLOBAL_SCOPE_POINTER","getChartIdsInFilterScope","useChartIds","saveChartConfiguration","DEFAULT_CROSS_FILTER_SCOPING","ScopingModalContent","NEW_CHART_SCOPING_ID","jsx","___EmotionJSX","getUpdatedGloballyScopedChartsInScope","configs","globalChartsInScope","Object","entries","reduce","acc","id","config","crossFilters","scope","Number","chartsInScope","filter","chartId","getActualScopeFromGlobalScope","globalScope","rootPath","excluded","ScopingModal","initialChartId","isVisible","closeModal","dispatch","layout","state","dashboardLayout","present","chartIds","currentChartId","setCurrentChartId","initialChartConfig","_state$dashboardInfo$","dashboardInfo","metadata","chart_configuration","defaultGlobalChartConfig","initialGlobalChartConfig","_state$dashboardInfo$2","global_chart_configuration","getInitialChartConfig","_initialChartConfig$i","_initialChartConfig$i2","chartConfigs","setChartConfigs","globalChartConfig","setGlobalChartConfig","saveScoping","savedChartConfigs","chartConfiguration","globalChartConfiguration","handleScopeUpdate","prevConfig","removeCustomScope","prevConfigs","newConfigs","undefined","addNewCustomScope","handleSelectChange","newChartId","_chartConfigs$current","currentScope","newScope","newCrossFiltersConfig","newConfig","_chartConfigs$current2","_chartConfigs$current3","_chartConfigs$current4","_chartConfigs$current5","onHide","show","title","onHandledPrimaryAction","primaryButtonName","responsive","destroyOnClose","bodyStyle","padding","height","onScopeUpdate","onSelectChange","__signature__","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/dashboard/components/nativeFilters/FilterBar/CrossFilters/ScopingModal/ScopingModal.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { isDefined, NativeFilterScope, t } from '@superset-ui/core';\nimport Modal from 'src/components/Modal';\nimport {\n  ChartConfiguration,\n  Layout,\n  RootState,\n  isCrossFilterScopeGlobal,\n  GlobalChartCrossFilterConfig,\n  GLOBAL_SCOPE_POINTER,\n} from 'src/dashboard/types';\nimport { getChartIdsInFilterScope } from 'src/dashboard/util/getChartIdsInFilterScope';\nimport { useChartIds } from 'src/dashboard/util/charts/useChartIds';\nimport { saveChartConfiguration } from 'src/dashboard/actions/dashboardInfo';\nimport { DEFAULT_CROSS_FILTER_SCOPING } from 'src/dashboard/constants';\nimport { ScopingModalContent } from './ScopingModalContent';\nimport { NEW_CHART_SCOPING_ID } from './constants';\n\nconst getUpdatedGloballyScopedChartsInScope = (\n  configs: ChartConfiguration,\n  globalChartsInScope: number[],\n) =>\n  Object.entries(configs).reduce((acc, [id, config]) => {\n    if (isCrossFilterScopeGlobal(config.crossFilters.scope)) {\n      acc[id] = {\n        id: Number(config.id),\n        crossFilters: {\n          scope: GLOBAL_SCOPE_POINTER,\n          chartsInScope: globalChartsInScope.filter(\n            chartId => chartId !== Number(config.id),\n          ),\n        },\n      };\n    } else {\n      acc[id] = config;\n    }\n    return acc;\n  }, {});\n\nconst getActualScopeFromGlobalScope = (\n  chartId: number,\n  globalScope: NativeFilterScope,\n) => ({\n  rootPath: globalScope.rootPath,\n  excluded: globalScope.excluded.filter(id => id !== chartId),\n});\n\nexport interface ScopingModalProps {\n  initialChartId: number | undefined;\n  isVisible: boolean;\n  closeModal: () => void;\n}\n\nexport const ScopingModal = ({\n  initialChartId,\n  isVisible,\n  closeModal,\n}: ScopingModalProps) => {\n  const dispatch = useDispatch();\n  const layout = useSelector<RootState, Layout>(\n    state => state.dashboardLayout.present,\n  );\n  const chartIds = useChartIds();\n  const [currentChartId, setCurrentChartId] = useState(initialChartId);\n  const initialChartConfig = useSelector<RootState, ChartConfiguration>(\n    state => state.dashboardInfo.metadata?.chart_configuration || {},\n  );\n  const defaultGlobalChartConfig = useMemo(\n    () => ({\n      scope: DEFAULT_CROSS_FILTER_SCOPING,\n      chartsInScope: chartIds,\n    }),\n    [chartIds],\n  );\n\n  const initialGlobalChartConfig = useSelector<\n    RootState,\n    GlobalChartCrossFilterConfig\n  >(\n    state =>\n      state.dashboardInfo.metadata?.global_chart_configuration ||\n      defaultGlobalChartConfig,\n  );\n\n  const getInitialChartConfig = () => {\n    if (\n      isDefined(initialChartId) &&\n      isCrossFilterScopeGlobal(\n        initialChartConfig[initialChartId]?.crossFilters.scope,\n      )\n    ) {\n      return {\n        ...initialChartConfig,\n        [initialChartId]: {\n          id: initialChartId,\n          crossFilters: {\n            scope: getActualScopeFromGlobalScope(\n              initialChartId,\n              initialGlobalChartConfig.scope,\n            ),\n            chartsInScope:\n              initialChartConfig[initialChartId]?.crossFilters.chartsInScope,\n          },\n        },\n      };\n    }\n    return initialChartConfig;\n  };\n\n  const [chartConfigs, setChartConfigs] = useState(getInitialChartConfig());\n  const [globalChartConfig, setGlobalChartConfig] = useState(\n    initialGlobalChartConfig,\n  );\n\n  const saveScoping = useCallback(() => {\n    const savedChartConfigs = { ...chartConfigs };\n    if (savedChartConfigs[NEW_CHART_SCOPING_ID]) {\n      delete savedChartConfigs[NEW_CHART_SCOPING_ID];\n    }\n    dispatch(\n      saveChartConfiguration({\n        chartConfiguration: savedChartConfigs,\n        globalChartConfiguration: globalChartConfig,\n      }),\n    );\n    closeModal();\n  }, [chartConfigs, closeModal, dispatch, globalChartConfig]);\n\n  const handleScopeUpdate = useCallback(\n    ({ scope }: { scope: NativeFilterScope }) => {\n      if (isDefined(currentChartId)) {\n        setChartConfigs(prevConfig => ({\n          ...prevConfig,\n          [currentChartId]: {\n            id: currentChartId,\n            crossFilters: {\n              scope,\n              chartsInScope: getChartIdsInFilterScope(scope, chartIds, layout),\n            },\n          },\n        }));\n      } else {\n        const globalChartsInScope = getChartIdsInFilterScope(\n          scope,\n          chartIds,\n          layout,\n        );\n        setGlobalChartConfig({\n          scope,\n          chartsInScope: globalChartsInScope,\n        });\n        setChartConfigs(prevConfig =>\n          getUpdatedGloballyScopedChartsInScope(\n            prevConfig,\n            globalChartsInScope,\n          ),\n        );\n      }\n    },\n    [currentChartId, chartIds, layout],\n  );\n\n  const removeCustomScope = useCallback(\n    (chartId: number) => {\n      setChartConfigs(prevConfigs => {\n        const newConfigs = { ...prevConfigs };\n        if (chartId === NEW_CHART_SCOPING_ID) {\n          delete newConfigs[NEW_CHART_SCOPING_ID];\n        } else {\n          newConfigs[chartId] = {\n            id: chartId,\n            crossFilters: {\n              scope: GLOBAL_SCOPE_POINTER,\n              chartsInScope: globalChartConfig.chartsInScope.filter(\n                id => id !== chartId,\n              ),\n            },\n          };\n        }\n        return newConfigs;\n      });\n      if (currentChartId === chartId) {\n        setCurrentChartId(undefined);\n      }\n    },\n    [currentChartId, globalChartConfig.chartsInScope],\n  );\n\n  const addNewCustomScope = useCallback(() => {\n    setCurrentChartId(NEW_CHART_SCOPING_ID);\n    if (!chartConfigs[NEW_CHART_SCOPING_ID]) {\n      setChartConfigs(prevConfigs => ({\n        ...prevConfigs,\n        [NEW_CHART_SCOPING_ID]: {\n          id: NEW_CHART_SCOPING_ID,\n          crossFilters: {\n            scope: globalChartConfig.scope,\n            chartsInScope: globalChartConfig.chartsInScope,\n          },\n        },\n      }));\n    }\n  }, [chartConfigs, globalChartConfig.chartsInScope, globalChartConfig.scope]);\n\n  const handleSelectChange = useCallback(\n    (newChartId: number) => {\n      if (isDefined(currentChartId)) {\n        const currentScope = !isCrossFilterScopeGlobal(\n          chartConfigs[currentChartId]?.crossFilters.scope,\n        )\n          ? (chartConfigs[currentChartId].crossFilters\n              .scope as NativeFilterScope)\n          : globalChartConfig.scope;\n        const newScope = {\n          rootPath: currentScope.rootPath,\n          excluded: [\n            ...currentScope.excluded.filter(id => id !== currentChartId),\n            newChartId,\n          ],\n        };\n        const newCrossFiltersConfig = {\n          id: newChartId,\n          crossFilters: {\n            scope: newScope,\n            chartsInScope: getChartIdsInFilterScope(newScope, chartIds, layout),\n          },\n        };\n\n        setChartConfigs(prevConfig => {\n          const newConfig = {\n            ...prevConfig,\n            [newChartId]: newCrossFiltersConfig,\n          };\n          if (currentChartId === NEW_CHART_SCOPING_ID) {\n            delete newConfig[NEW_CHART_SCOPING_ID];\n          } else {\n            newConfig[currentChartId] = {\n              id: currentChartId,\n              crossFilters: {\n                scope: GLOBAL_SCOPE_POINTER,\n                chartsInScope: globalChartConfig.chartsInScope.filter(\n                  id => id !== currentChartId,\n                ),\n              },\n            };\n          }\n          return newConfig;\n        });\n\n        setCurrentChartId(newChartId);\n      }\n    },\n    [\n      chartConfigs,\n      chartIds,\n      currentChartId,\n      globalChartConfig.chartsInScope,\n      globalChartConfig.scope,\n      layout,\n    ],\n  );\n\n  const scope = useMemo(() => {\n    const globalScope = globalChartConfig.scope;\n    if (!isDefined(currentChartId)) {\n      return globalScope;\n    }\n    if (\n      isCrossFilterScopeGlobal(\n        chartConfigs[currentChartId]?.crossFilters?.scope,\n      )\n    ) {\n      return getActualScopeFromGlobalScope(currentChartId, globalScope);\n    }\n    return chartConfigs[currentChartId]?.crossFilters\n      ?.scope as NativeFilterScope;\n  }, [chartConfigs, currentChartId, globalChartConfig.scope]);\n\n  return (\n    <Modal\n      onHide={closeModal}\n      show={isVisible}\n      title={t('Cross-filtering scoping')}\n      onHandledPrimaryAction={saveScoping}\n      primaryButtonName={t('Save')}\n      responsive\n      destroyOnClose\n      bodyStyle={{\n        padding: 0,\n        height: 700,\n      }}\n    >\n      <ScopingModalContent\n        chartConfigs={chartConfigs}\n        currentScope={scope}\n        onScopeUpdate={handleScopeUpdate}\n        chartId={currentChartId}\n        setCurrentChartId={setCurrentChartId}\n        onSelectChange={handleSelectChange}\n        removeCustomScope={removeCustomScope}\n        addNewCustomScope={addNewCustomScope}\n      />\n    </Modal>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}