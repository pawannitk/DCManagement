{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  t,\n  logging,\n  SupersetClient,\n  withTheme,\n  ensureIsArray } from\n'@superset-ui/core';\n\nimport ControlHeader from 'src/explore/components/ControlHeader';\nimport adhocMetricType from 'src/explore/components/controls/MetricControl/adhocMetricType';\nimport savedMetricType from 'src/explore/components/controls/MetricControl/savedMetricType';\nimport AdhocMetric from 'src/explore/components/controls/MetricControl/AdhocMetric';\nimport {\n  Operators,\n  OPERATOR_ENUM_TO_OPERATOR_TYPE } from\n'src/explore/constants';\nimport FilterDefinitionOption from 'src/explore/components/controls/MetricControl/FilterDefinitionOption';\nimport {\n  AddControlLabel,\n  AddIconButton,\n  HeaderContainer,\n  LabelsContainer } from\n'src/explore/components/controls/OptionControls';\nimport Icons from 'src/components/Icons';\nimport Modal from 'src/components/Modal';\nimport AdhocFilterPopoverTrigger from 'src/explore/components/controls/FilterControl/AdhocFilterPopoverTrigger';\nimport AdhocFilterOption from 'src/explore/components/controls/FilterControl/AdhocFilterOption';\nimport AdhocFilter from 'src/explore/components/controls/FilterControl/AdhocFilter';\nimport adhocFilterType from 'src/explore/components/controls/FilterControl/adhocFilterType';\nimport columnType from 'src/explore/components/controls/FilterControl/columnType';\nimport { toQueryString } from 'src/utils/urlUtils';\nimport { Clauses, ExpressionTypes } from '../types';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst { warning } = Modal;\n\nconst selectedMetricType = PropTypes.oneOfType([\nPropTypes.string,\nadhocMetricType]\n);\n\nconst propTypes = {\n  label: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n  name: PropTypes.string,\n  sections: PropTypes.arrayOf(PropTypes.string),\n  operators: PropTypes.arrayOf(PropTypes.string),\n  onChange: PropTypes.func,\n  value: PropTypes.arrayOf(adhocFilterType),\n  datasource: PropTypes.object,\n  columns: PropTypes.arrayOf(columnType),\n  savedMetrics: PropTypes.arrayOf(savedMetricType),\n  selectedMetrics: PropTypes.oneOfType([\n  selectedMetricType,\n  PropTypes.arrayOf(selectedMetricType)]\n  ),\n  isLoading: PropTypes.bool,\n  canDelete: PropTypes.func\n};\n\nconst defaultProps = {\n  name: '',\n  onChange: () => {},\n  columns: [],\n  savedMetrics: [],\n  selectedMetrics: []\n};\n\nfunction isDictionaryForAdhocFilter(value) {\n  return value && !(value instanceof AdhocFilter) && value.expressionType;\n}\n\nclass AdhocFilterControl extends React.Component {\n  constructor(props) {\n    super(props);\n    this.optionsForSelect = this.optionsForSelect.bind(this);\n    this.onRemoveFilter = this.onRemoveFilter.bind(this);\n    this.onNewFilter = this.onNewFilter.bind(this);\n    this.onFilterEdit = this.onFilterEdit.bind(this);\n    this.moveLabel = this.moveLabel.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.mapOption = this.mapOption.bind(this);\n    this.getMetricExpression = this.getMetricExpression.bind(this);\n    this.removeFilter = this.removeFilter.bind(this);\n\n    const filters = (this.props.value || []).map((filter) =>\n    isDictionaryForAdhocFilter(filter) ? new AdhocFilter(filter) : filter\n    );\n\n    this.optionRenderer = (option) => ___EmotionJSX(FilterDefinitionOption, { option: option });\n    this.valueRenderer = (adhocFilter, index) =>\n    ___EmotionJSX(AdhocFilterOption, {\n      key: index,\n      index: index,\n      adhocFilter: adhocFilter,\n      onFilterEdit: this.onFilterEdit,\n      options: this.state.options,\n      sections: this.props.sections,\n      operators: this.props.operators,\n      datasource: this.props.datasource,\n      onRemoveFilter: (e) => {\n        e.stopPropagation();\n        this.onRemoveFilter(index);\n      },\n      onMoveLabel: this.moveLabel,\n      onDropLabel: () => this.props.onChange(this.state.values),\n      partitionColumn: this.state.partitionColumn }\n    );\n\n    this.state = {\n      values: filters,\n      options: this.optionsForSelect(this.props),\n      partitionColumn: null\n    };\n  }\n\n  componentDidMount() {\n    const { datasource } = this.props;\n    if (datasource && datasource.type === 'table') {var _datasource$database;\n      const dbId = (_datasource$database = datasource.database) == null ? void 0 : _datasource$database.id;\n      const {\n        datasource_name: name,\n        catalog,\n        schema,\n        is_sqllab_view: isSqllabView\n      } = datasource;\n\n      if (!isSqllabView && dbId && name && schema) {\n        SupersetClient.get({\n          endpoint: `/api/v1/database/${dbId}/table_metadata/extra/${toQueryString(\n            {\n              name,\n              catalog,\n              schema\n            }\n          )}`\n        }).\n        then(({ json }) => {\n          if (json && json.partitions) {\n            const { partitions } = json;\n            // for now only show latest_partition option\n            // when table datasource has only 1 partition key.\n            if (\n            partitions &&\n            partitions.cols &&\n            Object.keys(partitions.cols).length === 1)\n            {\n              this.setState({ partitionColumn: partitions.cols[0] });\n            }\n          }\n        }).\n        catch((error) => {\n          logging.error('fetch extra_table_metadata:', error.statusText);\n        });\n      }\n    }\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.columns !== nextProps.columns) {\n      this.setState({ options: this.optionsForSelect(nextProps) });\n    }\n    if (this.props.value !== nextProps.value) {\n      this.setState({\n        values: (nextProps.value || []).map((filter) =>\n        isDictionaryForAdhocFilter(filter) ? new AdhocFilter(filter) : filter\n        )\n      });\n    }\n  }\n\n  removeFilter(index) {\n    const valuesCopy = [...this.state.values];\n    valuesCopy.splice(index, 1);\n    this.setState((prevState) => ({\n      ...prevState,\n      values: valuesCopy\n    }));\n    this.props.onChange(valuesCopy);\n  }\n\n  onRemoveFilter(index) {\n    const { canDelete } = this.props;\n    const { values } = this.state;\n    const result = canDelete == null ? void 0 : canDelete(values[index], values);\n    if (typeof result === 'string') {\n      warning({ title: t('Warning'), content: result });\n      return;\n    }\n    this.removeFilter(index);\n  }\n\n  onNewFilter(newFilter) {\n    const mappedOption = this.mapOption(newFilter);\n    if (mappedOption) {\n      this.setState(\n        (prevState) => ({\n          ...prevState,\n          values: [...prevState.values, mappedOption]\n        }),\n        () => {\n          this.props.onChange(this.state.values);\n        }\n      );\n    }\n  }\n\n  onFilterEdit(changedFilter) {\n    this.props.onChange(\n      this.state.values.map((value) => {\n        if (value.filterOptionName === changedFilter.filterOptionName) {\n          return changedFilter;\n        }\n        return value;\n      })\n    );\n  }\n\n  onChange(opts) {\n    const options = (opts || []).\n    map((option) => this.mapOption(option)).\n    filter((option) => option);\n    this.props.onChange(options);\n  }\n\n  getMetricExpression(savedMetricName) {\n    return this.props.savedMetrics.find(\n      (savedMetric) => savedMetric.metric_name === savedMetricName\n    ).expression;\n  }\n\n  moveLabel(dragIndex, hoverIndex) {\n    const { values } = this.state;\n\n    const newValues = [...values];\n    [newValues[hoverIndex], newValues[dragIndex]] = [\n    newValues[dragIndex],\n    newValues[hoverIndex]];\n\n    this.setState({ values: newValues });\n  }\n\n  mapOption(option) {\n    // already a AdhocFilter, skip\n    if (option instanceof AdhocFilter) {\n      return option;\n    }\n    // via datasource saved metric\n    if (option.saved_metric_name) {\n      return new AdhocFilter({\n        expressionType: ExpressionTypes.Sql,\n        subject: this.getMetricExpression(option.saved_metric_name),\n        operator:\n        OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.GreaterThan].operation,\n        comparator: 0,\n        clause: Clauses.Having\n      });\n    }\n    // has a custom label, meaning it's custom column\n    if (option.label) {\n      return new AdhocFilter({\n        expressionType: ExpressionTypes.Sql,\n        subject: new AdhocMetric(option).translateToSql(),\n        operator:\n        OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.GreaterThan].operation,\n        comparator: 0,\n        clause: Clauses.Having\n      });\n    }\n    // add a new filter item\n    if (option.column_name) {\n      return new AdhocFilter({\n        expressionType: ExpressionTypes.Simple,\n        subject: option.column_name,\n        operator: OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.Equals].operation,\n        comparator: '',\n        clause: Clauses.Where,\n        isNew: true\n      });\n    }\n    return null;\n  }\n\n  optionsForSelect(props) {\n    const options = [\n    ...props.columns,\n    ...ensureIsArray(props.selectedMetrics).map(\n      (metric) =>\n      metric && (\n      typeof metric === 'string' ?\n      { saved_metric_name: metric } :\n      new AdhocMetric(metric))\n    )].\n    filter((option) => option);\n\n    return options.\n    reduce((results, option) => {\n      if (option.saved_metric_name) {\n        results.push({\n          ...option,\n          filterOptionName: option.saved_metric_name\n        });\n      } else if (option.column_name) {\n        results.push({\n          ...option,\n          filterOptionName: `_col_${option.column_name}`\n        });\n      } else if (option instanceof AdhocMetric) {\n        results.push({\n          ...option,\n          filterOptionName: `_adhocmetric_${option.label}`\n        });\n      }\n      return results;\n    }, []).\n    sort((a, b) =>\n    (a.saved_metric_name || a.column_name || a.label).localeCompare(\n      b.saved_metric_name || b.column_name || b.label\n    )\n    );\n  }\n\n  addNewFilterPopoverTrigger(trigger) {\n    return (\n      ___EmotionJSX(AdhocFilterPopoverTrigger, {\n        operators: this.props.operators,\n        sections: this.props.sections,\n        adhocFilter: new AdhocFilter({}),\n        datasource: this.props.datasource,\n        options: this.state.options,\n        onFilterEdit: this.onNewFilter,\n        partitionColumn: this.state.partitionColumn },\n\n      trigger\n      ));\n\n  }\n\n  render() {\n    const { theme } = this.props;\n    return (\n      ___EmotionJSX(\"div\", { className: \"metrics-select\", \"data-test\": \"adhoc-filter-control\" },\n      ___EmotionJSX(HeaderContainer, null,\n      ___EmotionJSX(ControlHeader, this.props),\n      this.addNewFilterPopoverTrigger(\n        ___EmotionJSX(AddIconButton, { \"data-test\": \"add-filter-button\" },\n        ___EmotionJSX(Icons.PlusLarge, {\n          iconSize: \"s\",\n          iconColor: theme.colors.grayscale.light5 }\n        )\n        )\n      )\n      ),\n      ___EmotionJSX(LabelsContainer, null,\n      this.state.values.length > 0 ?\n      this.state.values.map((value, index) =>\n      this.valueRenderer(value, index)\n      ) :\n      this.addNewFilterPopoverTrigger(\n        ___EmotionJSX(AddControlLabel, null,\n        ___EmotionJSX(Icons.PlusSmall, { iconColor: theme.colors.grayscale.light1 }),\n        t('Add filter')\n        )\n      )\n      )\n      ));\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\nAdhocFilterControl.propTypes = propTypes;\nAdhocFilterControl.defaultProps = defaultProps;const _default =\n\nwithTheme(AdhocFilterControl);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(warning, \"warning\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilterControl/index.jsx\");reactHotLoader.register(selectedMetricType, \"selectedMetricType\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilterControl/index.jsx\");reactHotLoader.register(propTypes, \"propTypes\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilterControl/index.jsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilterControl/index.jsx\");reactHotLoader.register(isDictionaryForAdhocFilter, \"isDictionaryForAdhocFilter\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilterControl/index.jsx\");reactHotLoader.register(AdhocFilterControl, \"AdhocFilterControl\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilterControl/index.jsx\");reactHotLoader.register(_default, \"default\", \"/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilterControl/index.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["React","PropTypes","t","logging","SupersetClient","withTheme","ensureIsArray","ControlHeader","adhocMetricType","savedMetricType","AdhocMetric","Operators","OPERATOR_ENUM_TO_OPERATOR_TYPE","FilterDefinitionOption","AddControlLabel","AddIconButton","HeaderContainer","LabelsContainer","Icons","Modal","AdhocFilterPopoverTrigger","AdhocFilterOption","AdhocFilter","adhocFilterType","columnType","toQueryString","Clauses","ExpressionTypes","jsx","___EmotionJSX","warning","selectedMetricType","oneOfType","string","propTypes","label","object","name","sections","arrayOf","operators","onChange","func","value","datasource","columns","savedMetrics","selectedMetrics","isLoading","bool","canDelete","defaultProps","isDictionaryForAdhocFilter","expressionType","AdhocFilterControl","Component","constructor","props","optionsForSelect","bind","onRemoveFilter","onNewFilter","onFilterEdit","moveLabel","mapOption","getMetricExpression","removeFilter","filters","map","filter","optionRenderer","option","valueRenderer","adhocFilter","index","key","options","state","e","stopPropagation","onMoveLabel","onDropLabel","values","partitionColumn","componentDidMount","type","_datasource$database","dbId","database","id","datasource_name","catalog","schema","is_sqllab_view","isSqllabView","get","endpoint","then","json","partitions","cols","Object","keys","length","setState","catch","error","statusText","UNSAFE_componentWillReceiveProps","nextProps","valuesCopy","splice","prevState","result","title","content","newFilter","mappedOption","changedFilter","filterOptionName","opts","savedMetricName","find","savedMetric","metric_name","expression","dragIndex","hoverIndex","newValues","saved_metric_name","Sql","subject","operator","GreaterThan","operation","comparator","clause","Having","translateToSql","column_name","Simple","Equals","Where","isNew","metric","reduce","results","push","sort","a","b","localeCompare","addNewFilterPopoverTrigger","trigger","render","theme","className","PlusLarge","iconSize","iconColor","colors","grayscale","light5","PlusSmall","light1","__reactstandin__regenerateByEval","code","eval","_default","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilterControl/index.jsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  t,\n  logging,\n  SupersetClient,\n  withTheme,\n  ensureIsArray,\n} from '@superset-ui/core';\n\nimport ControlHeader from 'src/explore/components/ControlHeader';\nimport adhocMetricType from 'src/explore/components/controls/MetricControl/adhocMetricType';\nimport savedMetricType from 'src/explore/components/controls/MetricControl/savedMetricType';\nimport AdhocMetric from 'src/explore/components/controls/MetricControl/AdhocMetric';\nimport {\n  Operators,\n  OPERATOR_ENUM_TO_OPERATOR_TYPE,\n} from 'src/explore/constants';\nimport FilterDefinitionOption from 'src/explore/components/controls/MetricControl/FilterDefinitionOption';\nimport {\n  AddControlLabel,\n  AddIconButton,\n  HeaderContainer,\n  LabelsContainer,\n} from 'src/explore/components/controls/OptionControls';\nimport Icons from 'src/components/Icons';\nimport Modal from 'src/components/Modal';\nimport AdhocFilterPopoverTrigger from 'src/explore/components/controls/FilterControl/AdhocFilterPopoverTrigger';\nimport AdhocFilterOption from 'src/explore/components/controls/FilterControl/AdhocFilterOption';\nimport AdhocFilter from 'src/explore/components/controls/FilterControl/AdhocFilter';\nimport adhocFilterType from 'src/explore/components/controls/FilterControl/adhocFilterType';\nimport columnType from 'src/explore/components/controls/FilterControl/columnType';\nimport { toQueryString } from 'src/utils/urlUtils';\nimport { Clauses, ExpressionTypes } from '../types';\n\nconst { warning } = Modal;\n\nconst selectedMetricType = PropTypes.oneOfType([\n  PropTypes.string,\n  adhocMetricType,\n]);\n\nconst propTypes = {\n  label: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n  name: PropTypes.string,\n  sections: PropTypes.arrayOf(PropTypes.string),\n  operators: PropTypes.arrayOf(PropTypes.string),\n  onChange: PropTypes.func,\n  value: PropTypes.arrayOf(adhocFilterType),\n  datasource: PropTypes.object,\n  columns: PropTypes.arrayOf(columnType),\n  savedMetrics: PropTypes.arrayOf(savedMetricType),\n  selectedMetrics: PropTypes.oneOfType([\n    selectedMetricType,\n    PropTypes.arrayOf(selectedMetricType),\n  ]),\n  isLoading: PropTypes.bool,\n  canDelete: PropTypes.func,\n};\n\nconst defaultProps = {\n  name: '',\n  onChange: () => {},\n  columns: [],\n  savedMetrics: [],\n  selectedMetrics: [],\n};\n\nfunction isDictionaryForAdhocFilter(value) {\n  return value && !(value instanceof AdhocFilter) && value.expressionType;\n}\n\nclass AdhocFilterControl extends React.Component {\n  constructor(props) {\n    super(props);\n    this.optionsForSelect = this.optionsForSelect.bind(this);\n    this.onRemoveFilter = this.onRemoveFilter.bind(this);\n    this.onNewFilter = this.onNewFilter.bind(this);\n    this.onFilterEdit = this.onFilterEdit.bind(this);\n    this.moveLabel = this.moveLabel.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.mapOption = this.mapOption.bind(this);\n    this.getMetricExpression = this.getMetricExpression.bind(this);\n    this.removeFilter = this.removeFilter.bind(this);\n\n    const filters = (this.props.value || []).map(filter =>\n      isDictionaryForAdhocFilter(filter) ? new AdhocFilter(filter) : filter,\n    );\n\n    this.optionRenderer = option => <FilterDefinitionOption option={option} />;\n    this.valueRenderer = (adhocFilter, index) => (\n      <AdhocFilterOption\n        key={index}\n        index={index}\n        adhocFilter={adhocFilter}\n        onFilterEdit={this.onFilterEdit}\n        options={this.state.options}\n        sections={this.props.sections}\n        operators={this.props.operators}\n        datasource={this.props.datasource}\n        onRemoveFilter={e => {\n          e.stopPropagation();\n          this.onRemoveFilter(index);\n        }}\n        onMoveLabel={this.moveLabel}\n        onDropLabel={() => this.props.onChange(this.state.values)}\n        partitionColumn={this.state.partitionColumn}\n      />\n    );\n    this.state = {\n      values: filters,\n      options: this.optionsForSelect(this.props),\n      partitionColumn: null,\n    };\n  }\n\n  componentDidMount() {\n    const { datasource } = this.props;\n    if (datasource && datasource.type === 'table') {\n      const dbId = datasource.database?.id;\n      const {\n        datasource_name: name,\n        catalog,\n        schema,\n        is_sqllab_view: isSqllabView,\n      } = datasource;\n\n      if (!isSqllabView && dbId && name && schema) {\n        SupersetClient.get({\n          endpoint: `/api/v1/database/${dbId}/table_metadata/extra/${toQueryString(\n            {\n              name,\n              catalog,\n              schema,\n            },\n          )}`,\n        })\n          .then(({ json }) => {\n            if (json && json.partitions) {\n              const { partitions } = json;\n              // for now only show latest_partition option\n              // when table datasource has only 1 partition key.\n              if (\n                partitions &&\n                partitions.cols &&\n                Object.keys(partitions.cols).length === 1\n              ) {\n                this.setState({ partitionColumn: partitions.cols[0] });\n              }\n            }\n          })\n          .catch(error => {\n            logging.error('fetch extra_table_metadata:', error.statusText);\n          });\n      }\n    }\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.columns !== nextProps.columns) {\n      this.setState({ options: this.optionsForSelect(nextProps) });\n    }\n    if (this.props.value !== nextProps.value) {\n      this.setState({\n        values: (nextProps.value || []).map(filter =>\n          isDictionaryForAdhocFilter(filter) ? new AdhocFilter(filter) : filter,\n        ),\n      });\n    }\n  }\n\n  removeFilter(index) {\n    const valuesCopy = [...this.state.values];\n    valuesCopy.splice(index, 1);\n    this.setState(prevState => ({\n      ...prevState,\n      values: valuesCopy,\n    }));\n    this.props.onChange(valuesCopy);\n  }\n\n  onRemoveFilter(index) {\n    const { canDelete } = this.props;\n    const { values } = this.state;\n    const result = canDelete?.(values[index], values);\n    if (typeof result === 'string') {\n      warning({ title: t('Warning'), content: result });\n      return;\n    }\n    this.removeFilter(index);\n  }\n\n  onNewFilter(newFilter) {\n    const mappedOption = this.mapOption(newFilter);\n    if (mappedOption) {\n      this.setState(\n        prevState => ({\n          ...prevState,\n          values: [...prevState.values, mappedOption],\n        }),\n        () => {\n          this.props.onChange(this.state.values);\n        },\n      );\n    }\n  }\n\n  onFilterEdit(changedFilter) {\n    this.props.onChange(\n      this.state.values.map(value => {\n        if (value.filterOptionName === changedFilter.filterOptionName) {\n          return changedFilter;\n        }\n        return value;\n      }),\n    );\n  }\n\n  onChange(opts) {\n    const options = (opts || [])\n      .map(option => this.mapOption(option))\n      .filter(option => option);\n    this.props.onChange(options);\n  }\n\n  getMetricExpression(savedMetricName) {\n    return this.props.savedMetrics.find(\n      savedMetric => savedMetric.metric_name === savedMetricName,\n    ).expression;\n  }\n\n  moveLabel(dragIndex, hoverIndex) {\n    const { values } = this.state;\n\n    const newValues = [...values];\n    [newValues[hoverIndex], newValues[dragIndex]] = [\n      newValues[dragIndex],\n      newValues[hoverIndex],\n    ];\n    this.setState({ values: newValues });\n  }\n\n  mapOption(option) {\n    // already a AdhocFilter, skip\n    if (option instanceof AdhocFilter) {\n      return option;\n    }\n    // via datasource saved metric\n    if (option.saved_metric_name) {\n      return new AdhocFilter({\n        expressionType: ExpressionTypes.Sql,\n        subject: this.getMetricExpression(option.saved_metric_name),\n        operator:\n          OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.GreaterThan].operation,\n        comparator: 0,\n        clause: Clauses.Having,\n      });\n    }\n    // has a custom label, meaning it's custom column\n    if (option.label) {\n      return new AdhocFilter({\n        expressionType: ExpressionTypes.Sql,\n        subject: new AdhocMetric(option).translateToSql(),\n        operator:\n          OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.GreaterThan].operation,\n        comparator: 0,\n        clause: Clauses.Having,\n      });\n    }\n    // add a new filter item\n    if (option.column_name) {\n      return new AdhocFilter({\n        expressionType: ExpressionTypes.Simple,\n        subject: option.column_name,\n        operator: OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.Equals].operation,\n        comparator: '',\n        clause: Clauses.Where,\n        isNew: true,\n      });\n    }\n    return null;\n  }\n\n  optionsForSelect(props) {\n    const options = [\n      ...props.columns,\n      ...ensureIsArray(props.selectedMetrics).map(\n        metric =>\n          metric &&\n          (typeof metric === 'string'\n            ? { saved_metric_name: metric }\n            : new AdhocMetric(metric)),\n      ),\n    ].filter(option => option);\n\n    return options\n      .reduce((results, option) => {\n        if (option.saved_metric_name) {\n          results.push({\n            ...option,\n            filterOptionName: option.saved_metric_name,\n          });\n        } else if (option.column_name) {\n          results.push({\n            ...option,\n            filterOptionName: `_col_${option.column_name}`,\n          });\n        } else if (option instanceof AdhocMetric) {\n          results.push({\n            ...option,\n            filterOptionName: `_adhocmetric_${option.label}`,\n          });\n        }\n        return results;\n      }, [])\n      .sort((a, b) =>\n        (a.saved_metric_name || a.column_name || a.label).localeCompare(\n          b.saved_metric_name || b.column_name || b.label,\n        ),\n      );\n  }\n\n  addNewFilterPopoverTrigger(trigger) {\n    return (\n      <AdhocFilterPopoverTrigger\n        operators={this.props.operators}\n        sections={this.props.sections}\n        adhocFilter={new AdhocFilter({})}\n        datasource={this.props.datasource}\n        options={this.state.options}\n        onFilterEdit={this.onNewFilter}\n        partitionColumn={this.state.partitionColumn}\n      >\n        {trigger}\n      </AdhocFilterPopoverTrigger>\n    );\n  }\n\n  render() {\n    const { theme } = this.props;\n    return (\n      <div className=\"metrics-select\" data-test=\"adhoc-filter-control\">\n        <HeaderContainer>\n          <ControlHeader {...this.props} />\n          {this.addNewFilterPopoverTrigger(\n            <AddIconButton data-test=\"add-filter-button\">\n              <Icons.PlusLarge\n                iconSize=\"s\"\n                iconColor={theme.colors.grayscale.light5}\n              />\n            </AddIconButton>,\n          )}\n        </HeaderContainer>\n        <LabelsContainer>\n          {this.state.values.length > 0\n            ? this.state.values.map((value, index) =>\n                this.valueRenderer(value, index),\n              )\n            : this.addNewFilterPopoverTrigger(\n                <AddControlLabel>\n                  <Icons.PlusSmall iconColor={theme.colors.grayscale.light1} />\n                  {t('Add filter')}\n                </AddControlLabel>,\n              )}\n        </LabelsContainer>\n      </div>\n    );\n  }\n}\n\nAdhocFilterControl.propTypes = propTypes;\nAdhocFilterControl.defaultProps = defaultProps;\n\nexport default withTheme(AdhocFilterControl);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}