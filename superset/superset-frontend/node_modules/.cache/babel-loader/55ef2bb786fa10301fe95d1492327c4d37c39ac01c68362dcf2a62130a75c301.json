{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};const logState = {\n  attributeUpdateStart: -1,\n  attributeManagerUpdateStart: -1,\n  attributeUpdateMessages: []\n};\nconst LOG_LEVEL_MAJOR_UPDATE = 1;\nconst LOG_LEVEL_MINOR_UPDATE = 2;\nconst LOG_LEVEL_UPDATE_DETAIL = 3;\nconst LOG_LEVEL_INFO = 4;\nconst LOG_LEVEL_DRAW = 2;\nexport const getLoggers = (log) => ({\n  'layer.changeFlag': (layer, key, flags) => {\n    log.log(LOG_LEVEL_UPDATE_DETAIL, \"\".concat(layer.id, \" \").concat(key, \": \"), flags[key])();\n  },\n  'layer.initialize': (layer) => {\n    log.log(LOG_LEVEL_MAJOR_UPDATE, \"Initializing \".concat(layer))();\n  },\n  'layer.update': (layer, needsUpdate) => {\n    if (needsUpdate) {\n      const flags = layer.getChangeFlags();\n      log.log(LOG_LEVEL_MINOR_UPDATE, \"Updating \".concat(layer, \" because: \").concat(Object.keys(flags).filter((key) => flags[key]).join(', ')))();\n    } else {\n      log.log(LOG_LEVEL_INFO, \"\".concat(layer, \" does not need update\"))();\n    }\n  },\n  'layer.matched': (layer, changed) => {\n    if (changed) {\n      log.log(LOG_LEVEL_INFO, \"Matched \".concat(layer, \", state transfered\"))();\n    }\n  },\n  'layer.finalize': (layer) => {\n    log.log(LOG_LEVEL_MAJOR_UPDATE, \"Finalizing \".concat(layer))();\n  },\n  'compositeLayer.renderLayers': (layer, updated, subLayers) => {\n    if (updated) {\n      log.log(LOG_LEVEL_MINOR_UPDATE, \"Composite layer rendered new subLayers \".concat(layer), subLayers)();\n    } else {\n      log.log(LOG_LEVEL_INFO, \"Composite layer reused subLayers \".concat(layer), subLayers)();\n    }\n  },\n  'layerManager.setLayers': (layerManager, updated, layers) => {\n    if (updated) {\n      log.log(LOG_LEVEL_MINOR_UPDATE, \"Updating \".concat(layers.length, \" deck layers\"))();\n    }\n  },\n  'layerManager.activateViewport': (layerManager, viewport) => {\n    log.log(LOG_LEVEL_UPDATE_DETAIL, 'Viewport changed', viewport)();\n  },\n  'attributeManager.invalidate': (attributeManager, trigger, attributeNames) => {\n    log.log(LOG_LEVEL_MAJOR_UPDATE, attributeNames ? \"invalidated attributes \".concat(attributeNames, \" (\").concat(trigger, \") for \").concat(attributeManager.id) : \"invalidated all attributes for \".concat(attributeManager.id))();\n  },\n  'attributeManager.updateStart': (attributeManager) => {\n    logState.attributeUpdateMessages.length = 0;\n    logState.attributeManagerUpdateStart = Date.now();\n  },\n  'attributeManager.updateEnd': (attributeManager, numInstances) => {\n    const timeMs = Math.round(Date.now() - logState.attributeManagerUpdateStart);\n    log.groupCollapsed(LOG_LEVEL_MINOR_UPDATE, \"Updated attributes for \".concat(numInstances, \" instances in \").concat(attributeManager.id, \" in \").concat(timeMs, \"ms\"))();\n\n    for (const updateMessage of logState.attributeUpdateMessages) {\n      log.log(LOG_LEVEL_UPDATE_DETAIL, updateMessage)();\n    }\n\n    log.groupEnd(LOG_LEVEL_MINOR_UPDATE)();\n  },\n  'attribute.updateStart': (attribute) => {\n    logState.attributeUpdateStart = Date.now();\n  },\n  'attribute.allocate': (attribute, numInstances) => {\n    const message = \"\".concat(attribute.id, \" allocated \").concat(numInstances);\n    logState.attributeUpdateMessages.push(message);\n  },\n  'attribute.updateEnd': (attribute, numInstances) => {\n    const timeMs = Math.round(Date.now() - logState.attributeUpdateStart);\n    const message = \"\".concat(attribute.id, \" updated \").concat(numInstances, \" in \").concat(timeMs, \"ms\");\n    logState.attributeUpdateMessages.push(message);\n  },\n  'deckRenderer.renderLayers': (deckRenderer, renderStats, opts) => {\n    const {\n      pass,\n      redrawReason,\n      stats\n    } = opts;\n\n    for (const status of renderStats) {\n      const {\n        totalCount,\n        visibleCount,\n        compositeCount,\n        pickableCount\n      } = status;\n      const primitiveCount = totalCount - compositeCount;\n      const hiddenCount = primitiveCount - visibleCount;\n      log.log(LOG_LEVEL_DRAW, \"RENDER #\".concat(deckRenderer.renderCount, \"   \").concat(visibleCount, \" (of \").concat(totalCount, \" layers) to \").concat(pass, \" because \").concat(redrawReason, \"   (\").concat(hiddenCount, \" hidden, \").concat(compositeCount, \" composite \").concat(pickableCount, \" pickable)\"))();\n\n      if (stats) {\n        stats.get('Redraw Layers').add(visibleCount);\n      }\n    }\n  }\n});;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(logState, \"logState\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/core/dist/esm/debug/loggers.js\");reactHotLoader.register(LOG_LEVEL_MAJOR_UPDATE, \"LOG_LEVEL_MAJOR_UPDATE\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/core/dist/esm/debug/loggers.js\");reactHotLoader.register(LOG_LEVEL_MINOR_UPDATE, \"LOG_LEVEL_MINOR_UPDATE\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/core/dist/esm/debug/loggers.js\");reactHotLoader.register(LOG_LEVEL_UPDATE_DETAIL, \"LOG_LEVEL_UPDATE_DETAIL\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/core/dist/esm/debug/loggers.js\");reactHotLoader.register(LOG_LEVEL_INFO, \"LOG_LEVEL_INFO\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/core/dist/esm/debug/loggers.js\");reactHotLoader.register(LOG_LEVEL_DRAW, \"LOG_LEVEL_DRAW\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/core/dist/esm/debug/loggers.js\");reactHotLoader.register(getLoggers, \"getLoggers\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/core/dist/esm/debug/loggers.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["logState","attributeUpdateStart","attributeManagerUpdateStart","attributeUpdateMessages","LOG_LEVEL_MAJOR_UPDATE","LOG_LEVEL_MINOR_UPDATE","LOG_LEVEL_UPDATE_DETAIL","LOG_LEVEL_INFO","LOG_LEVEL_DRAW","getLoggers","log","layer.changeFlag","layer","key","flags","concat","id","layer.initialize","layer.update","needsUpdate","getChangeFlags","Object","keys","filter","join","layer.matched","changed","layer.finalize","compositeLayer.renderLayers","updated","subLayers","layerManager.setLayers","layerManager","layers","length","layerManager.activateViewport","viewport","attributeManager.invalidate","attributeManager","trigger","attributeNames","attributeManager.updateStart","Date","now","attributeManager.updateEnd","numInstances","timeMs","Math","round","groupCollapsed","updateMessage","groupEnd","attribute.updateStart","attribute","attribute.allocate","message","push","attribute.updateEnd","deckRenderer.renderLayers","deckRenderer","renderStats","opts","pass","redrawReason","stats","status","totalCount","visibleCount","compositeCount","pickableCount","primitiveCount","hiddenCount","renderCount","get","add","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["../../../src/debug/loggers.ts"],"sourcesContent":["import type {Log} from '@probe.gl/log';\n\nconst logState: {\n  attributeUpdateStart: number;\n  attributeManagerUpdateStart: number;\n  attributeUpdateMessages: string[];\n} = {\n  attributeUpdateStart: -1,\n  attributeManagerUpdateStart: -1,\n  attributeUpdateMessages: []\n};\n\nconst LOG_LEVEL_MAJOR_UPDATE = 1; // Events with direct perf impact\nconst LOG_LEVEL_MINOR_UPDATE = 2; // Events that may affect perf\nconst LOG_LEVEL_UPDATE_DETAIL = 3;\nconst LOG_LEVEL_INFO = 4;\nconst LOG_LEVEL_DRAW = 2;\n\nexport const getLoggers = (log: Log): Record<string, Function> => ({\n  /* Layer events */\n\n  'layer.changeFlag': (layer, key, flags) => {\n    log.log(LOG_LEVEL_UPDATE_DETAIL, `${layer.id} ${key}: `, flags[key])();\n  },\n\n  'layer.initialize': layer => {\n    log.log(LOG_LEVEL_MAJOR_UPDATE, `Initializing ${layer}`)();\n  },\n  'layer.update': (layer, needsUpdate) => {\n    if (needsUpdate) {\n      const flags = layer.getChangeFlags();\n      log.log(\n        LOG_LEVEL_MINOR_UPDATE,\n        `Updating ${layer} because: ${Object.keys(flags)\n          .filter(key => flags[key])\n          .join(', ')}`\n      )();\n    } else {\n      log.log(LOG_LEVEL_INFO, `${layer} does not need update`)();\n    }\n  },\n  'layer.matched': (layer, changed) => {\n    if (changed) {\n      log.log(LOG_LEVEL_INFO, `Matched ${layer}, state transfered`)();\n    }\n  },\n  'layer.finalize': layer => {\n    log.log(LOG_LEVEL_MAJOR_UPDATE, `Finalizing ${layer}`)();\n  },\n\n  /* CompositeLayer events */\n\n  'compositeLayer.renderLayers': (layer, updated, subLayers) => {\n    if (updated) {\n      log.log(\n        LOG_LEVEL_MINOR_UPDATE,\n        `Composite layer rendered new subLayers ${layer}`,\n        subLayers\n      )();\n    } else {\n      log.log(LOG_LEVEL_INFO, `Composite layer reused subLayers ${layer}`, subLayers)();\n    }\n  },\n\n  /* LayerManager events */\n\n  'layerManager.setLayers': (layerManager, updated, layers) => {\n    if (updated) {\n      log.log(LOG_LEVEL_MINOR_UPDATE, `Updating ${layers.length} deck layers`)();\n    }\n  },\n\n  'layerManager.activateViewport': (layerManager, viewport) => {\n    log.log(LOG_LEVEL_UPDATE_DETAIL, 'Viewport changed', viewport)();\n  },\n\n  /* AttributeManager events */\n\n  'attributeManager.invalidate': (attributeManager, trigger, attributeNames) => {\n    log.log(\n      LOG_LEVEL_MAJOR_UPDATE,\n      attributeNames\n        ? `invalidated attributes ${attributeNames} (${trigger}) for ${attributeManager.id}`\n        : `invalidated all attributes for ${attributeManager.id}`\n    )();\n  },\n\n  'attributeManager.updateStart': attributeManager => {\n    logState.attributeUpdateMessages.length = 0;\n    logState.attributeManagerUpdateStart = Date.now();\n  },\n  'attributeManager.updateEnd': (attributeManager, numInstances) => {\n    const timeMs = Math.round(Date.now() - logState.attributeManagerUpdateStart);\n    log.groupCollapsed(\n      LOG_LEVEL_MINOR_UPDATE,\n      `Updated attributes for ${numInstances} instances in ${attributeManager.id} in ${timeMs}ms`\n    )();\n    for (const updateMessage of logState.attributeUpdateMessages) {\n      log.log(LOG_LEVEL_UPDATE_DETAIL, updateMessage)();\n    }\n    log.groupEnd(LOG_LEVEL_MINOR_UPDATE)();\n  },\n\n  /* Attribute events */\n\n  'attribute.updateStart': attribute => {\n    logState.attributeUpdateStart = Date.now();\n  },\n  'attribute.allocate': (attribute, numInstances) => {\n    const message = `${attribute.id} allocated ${numInstances}`;\n    logState.attributeUpdateMessages.push(message);\n  },\n  'attribute.updateEnd': (attribute, numInstances) => {\n    const timeMs = Math.round(Date.now() - logState.attributeUpdateStart);\n    const message = `${attribute.id} updated ${numInstances} in ${timeMs}ms`;\n    logState.attributeUpdateMessages.push(message);\n  },\n\n  /* Render events */\n\n  'deckRenderer.renderLayers': (deckRenderer, renderStats, opts) => {\n    const {pass, redrawReason, stats} = opts;\n    for (const status of renderStats) {\n      const {totalCount, visibleCount, compositeCount, pickableCount} = status;\n      const primitiveCount = totalCount - compositeCount;\n      const hiddenCount = primitiveCount - visibleCount;\n\n      log.log(\n        LOG_LEVEL_DRAW,\n        `RENDER #${deckRenderer.renderCount} \\\n  ${visibleCount} (of ${totalCount} layers) to ${pass} because ${redrawReason} \\\n  (${hiddenCount} hidden, ${compositeCount} composite ${pickableCount} pickable)`\n      )();\n\n      if (stats) {\n        stats.get('Redraw Layers').add(visibleCount);\n      }\n    }\n  }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}