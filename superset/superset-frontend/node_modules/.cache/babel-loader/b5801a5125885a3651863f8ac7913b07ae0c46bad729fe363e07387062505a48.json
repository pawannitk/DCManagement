{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable no-dupe-class-members */\nimport { scaleOrdinal } from 'd3-scale';\nimport { ExtensibleFunction } from '../models';\nimport stringifyAndTrim from './stringifyAndTrim';\nimport getSharedLabelColor from './SharedLabelColorSingleton';\nimport { getAnalogousColors } from './utils';\nimport { FeatureFlag, isFeatureEnabled } from '../utils';\nclass CategoricalColorScale extends ExtensibleFunction {\n\n\n\n\n\n\n  /**\n   * Constructor\n   * @param {*} colors an array of colors\n   * @param {*} parentForcedColors optional parameter that comes from parent\n   * (usually CategoricalColorNamespace) and supersede this.forcedColors\n   */\n  constructor(colors, parentForcedColors = {}) {\n    super((value, sliceId) => this.getColor(value, sliceId));this.originColors = void 0;this.colors = void 0;this.scale = void 0;this.parentForcedColors = void 0;this.forcedColors = void 0;this.multiple = void 0;\n    this.originColors = colors;\n    this.colors = colors;\n    this.scale = scaleOrdinal();\n    this.scale.range(colors);\n    // reserve fixed colors in parent map based on their index in the scale\n    Object.entries(parentForcedColors).forEach(([key, value]) => {\n      if (typeof value === 'number') {\n        // eslint-disable-next-line no-param-reassign\n        parentForcedColors[key] = colors[value % colors.length];\n      }\n    });\n    // all indexes have been replaced by a fixed color\n    this.parentForcedColors = parentForcedColors;\n    this.forcedColors = {};\n    this.multiple = 0;\n  }\n  removeSharedLabelColorFromRange(sharedColorMap, cleanedValue) {\n    // make sure we don't overwrite the origin colors\n    const updatedRange = new Set(this.originColors);\n    // remove the color option from shared color\n    sharedColorMap.forEach((value, key) => {\n      if (key !== cleanedValue) {\n        updatedRange.delete(value);\n      }\n    });\n    // remove the color option from forced colors\n    Object.entries(this.parentForcedColors).forEach(([key, value]) => {\n      if (key !== cleanedValue) {\n        updatedRange.delete(value);\n      }\n    });\n    this.range(updatedRange.size > 0 ? [...updatedRange] : this.originColors);\n  }\n  getColor(value, sliceId) {var _this$parentForcedCol, _this$forcedColors;\n    const cleanedValue = stringifyAndTrim(value);\n    const sharedLabelColor = getSharedLabelColor();\n    const sharedColorMap = sharedLabelColor.getColorMap();\n    const sharedColor = sharedColorMap.get(cleanedValue);\n    // priority: parentForcedColors > forcedColors > labelColors\n    let color = ((_this$parentForcedCol = this.parentForcedColors) == null ? void 0 : _this$parentForcedCol[cleanedValue]) || ((_this$forcedColors =\n    this.forcedColors) == null ? void 0 : _this$forcedColors[cleanedValue]) ||\n    sharedColor;\n    if (isFeatureEnabled(FeatureFlag.UseAnalagousColors)) {\n      const multiple = Math.floor(this.domain().length / this.originColors.length);\n      if (multiple > this.multiple) {\n        this.multiple = multiple;\n        const newRange = getAnalogousColors(this.originColors, multiple);\n        this.range(this.originColors.concat(newRange));\n      }\n    }\n    const newColor = this.scale(cleanedValue);\n    if (!color) {\n      color = newColor;\n      if (isFeatureEnabled(FeatureFlag.AvoidColorsCollision)) {\n        this.removeSharedLabelColorFromRange(sharedColorMap, cleanedValue);\n        color = this.scale(cleanedValue);\n      }\n    }\n    sharedLabelColor.addSlice(cleanedValue, color, sliceId);\n    return color;\n  }\n  /**\n   * Enforce specific color for given value\n   * @param {*} value value\n   * @param {*} forcedColor forcedColor\n   */\n  setColor(value, forcedColor) {\n    this.forcedColors[stringifyAndTrim(value)] = forcedColor;\n    return this;\n  }\n  /**\n   * Get a mapping of data values to colors\n   * @returns an object where the key is the data value and the value is the hex color code\n   */\n  getColorMap() {\n    const colorMap = {};\n    this.scale.domain().forEach((value) => {\n      colorMap[value.toString()] = this.scale(value);\n    });\n    return {\n      ...colorMap,\n      ...this.forcedColors,\n      ...this.parentForcedColors\n    };\n  }\n  /**\n   * Returns an exact copy of this scale. Changes to this scale will not affect the returned scale, and vice versa.\n   */\n  copy() {\n    const copy = new CategoricalColorScale(this.scale.range(), this.parentForcedColors);\n    copy.forcedColors = { ...this.forcedColors };\n    copy.domain(this.domain());\n    copy.unknown(this.unknown());\n    return copy;\n  }\n  domain(newDomain) {\n    if (typeof newDomain === 'undefined') {\n      return this.scale.domain();\n    }\n    this.scale.domain(newDomain);\n    return this;\n  }\n  range(newRange) {\n    if (typeof newRange === 'undefined') {\n      return this.scale.range();\n    }\n    this.colors = newRange;\n    this.scale.range(newRange);\n    return this;\n  }\n  unknown(value) {\n    if (typeof value === 'undefined') {\n      return this.scale.unknown();\n    }\n    this.scale.unknown(value);\n    return this;\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}const _default = CategoricalColorScale;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(CategoricalColorScale, \"CategoricalColorScale\", \"/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/color/CategoricalColorScale.ts\");reactHotLoader.register(_default, \"default\", \"/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/color/CategoricalColorScale.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["scaleOrdinal","ExtensibleFunction","stringifyAndTrim","getSharedLabelColor","getAnalogousColors","FeatureFlag","isFeatureEnabled","CategoricalColorScale","constructor","colors","parentForcedColors","value","sliceId","getColor","originColors","scale","forcedColors","multiple","range","Object","entries","forEach","key","length","removeSharedLabelColorFromRange","sharedColorMap","cleanedValue","updatedRange","Set","delete","size","_this$parentForcedCol","_this$forcedColors","sharedLabelColor","getColorMap","sharedColor","get","color","UseAnalagousColors","Math","floor","domain","newRange","concat","newColor","AvoidColorsCollision","addSlice","setColor","forcedColor","colorMap","toString","copy","unknown","newDomain","__reactstandin__regenerateByEval","code","eval","_default","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/color/CategoricalColorScale.ts"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/* eslint-disable no-dupe-class-members */\nimport { scaleOrdinal, ScaleOrdinal } from 'd3-scale';\nimport { ExtensibleFunction } from '../models';\nimport { ColorsInitLookup, ColorsLookup } from './types';\nimport stringifyAndTrim from './stringifyAndTrim';\nimport getSharedLabelColor from './SharedLabelColorSingleton';\nimport { getAnalogousColors } from './utils';\nimport { FeatureFlag, isFeatureEnabled } from '../utils';\n\n// Use type augmentation to correct the fact that\n// an instance of CategoricalScale is also a function\ninterface CategoricalColorScale {\n  (x: { toString(): string }, y?: number): string;\n}\n\nclass CategoricalColorScale extends ExtensibleFunction {\n  originColors: string[];\n\n  colors: string[];\n\n  scale: ScaleOrdinal<{ toString(): string }, string>;\n\n  parentForcedColors: ColorsLookup;\n\n  forcedColors: ColorsLookup;\n\n  multiple: number;\n\n  /**\n   * Constructor\n   * @param {*} colors an array of colors\n   * @param {*} parentForcedColors optional parameter that comes from parent\n   * (usually CategoricalColorNamespace) and supersede this.forcedColors\n   */\n  constructor(colors: string[], parentForcedColors: ColorsInitLookup = {}) {\n    super((value: string, sliceId?: number) => this.getColor(value, sliceId));\n\n    this.originColors = colors;\n    this.colors = colors;\n    this.scale = scaleOrdinal<{ toString(): string }, string>();\n    this.scale.range(colors);\n\n    // reserve fixed colors in parent map based on their index in the scale\n    Object.entries(parentForcedColors).forEach(([key, value]) => {\n      if (typeof value === 'number') {\n        // eslint-disable-next-line no-param-reassign\n        parentForcedColors[key] = colors[value % colors.length];\n      }\n    });\n\n    // all indexes have been replaced by a fixed color\n    this.parentForcedColors = parentForcedColors as ColorsLookup;\n    this.forcedColors = {};\n    this.multiple = 0;\n  }\n\n  removeSharedLabelColorFromRange(\n    sharedColorMap: Map<string, string>,\n    cleanedValue: string,\n  ) {\n    // make sure we don't overwrite the origin colors\n    const updatedRange = new Set(this.originColors);\n    // remove the color option from shared color\n    sharedColorMap.forEach((value: string, key: string) => {\n      if (key !== cleanedValue) {\n        updatedRange.delete(value);\n      }\n    });\n    // remove the color option from forced colors\n    Object.entries(this.parentForcedColors).forEach(([key, value]) => {\n      if (key !== cleanedValue) {\n        updatedRange.delete(value);\n      }\n    });\n    this.range(updatedRange.size > 0 ? [...updatedRange] : this.originColors);\n  }\n\n  getColor(value?: string, sliceId?: number) {\n    const cleanedValue = stringifyAndTrim(value);\n    const sharedLabelColor = getSharedLabelColor();\n    const sharedColorMap = sharedLabelColor.getColorMap();\n    const sharedColor = sharedColorMap.get(cleanedValue);\n\n    // priority: parentForcedColors > forcedColors > labelColors\n    let color =\n      this.parentForcedColors?.[cleanedValue] ||\n      this.forcedColors?.[cleanedValue] ||\n      sharedColor;\n\n    if (isFeatureEnabled(FeatureFlag.UseAnalagousColors)) {\n      const multiple = Math.floor(\n        this.domain().length / this.originColors.length,\n      );\n      if (multiple > this.multiple) {\n        this.multiple = multiple;\n        const newRange = getAnalogousColors(this.originColors, multiple);\n        this.range(this.originColors.concat(newRange));\n      }\n    }\n    const newColor = this.scale(cleanedValue);\n    if (!color) {\n      color = newColor;\n      if (isFeatureEnabled(FeatureFlag.AvoidColorsCollision)) {\n        this.removeSharedLabelColorFromRange(sharedColorMap, cleanedValue);\n        color = this.scale(cleanedValue);\n      }\n    }\n\n    sharedLabelColor.addSlice(cleanedValue, color, sliceId);\n\n    return color;\n  }\n\n  /**\n   * Enforce specific color for given value\n   * @param {*} value value\n   * @param {*} forcedColor forcedColor\n   */\n  setColor(value: string, forcedColor: string) {\n    this.forcedColors[stringifyAndTrim(value)] = forcedColor;\n    return this;\n  }\n\n  /**\n   * Get a mapping of data values to colors\n   * @returns an object where the key is the data value and the value is the hex color code\n   */\n  getColorMap() {\n    const colorMap: { [key: string]: string | undefined } = {};\n    this.scale.domain().forEach(value => {\n      colorMap[value.toString()] = this.scale(value);\n    });\n\n    return {\n      ...colorMap,\n      ...this.forcedColors,\n      ...this.parentForcedColors,\n    };\n  }\n\n  /**\n   * Returns an exact copy of this scale. Changes to this scale will not affect the returned scale, and vice versa.\n   */\n  copy() {\n    const copy = new CategoricalColorScale(\n      this.scale.range(),\n      this.parentForcedColors,\n    );\n    copy.forcedColors = { ...this.forcedColors };\n    copy.domain(this.domain());\n    copy.unknown(this.unknown());\n\n    return copy;\n  }\n\n  /**\n   * Returns the scale's current domain.\n   */\n  domain(): { toString(): string }[];\n\n  /**\n   * Expands the domain to include the specified array of values.\n   */\n  domain(newDomain: { toString(): string }[]): this;\n\n  domain(newDomain?: { toString(): string }[]): unknown {\n    if (typeof newDomain === 'undefined') {\n      return this.scale.domain();\n    }\n\n    this.scale.domain(newDomain);\n    return this;\n  }\n\n  /**\n   * Returns the scale's current range.\n   */\n  range(): string[];\n\n  /**\n   * Sets the range of the ordinal scale to the specified array of values.\n   *\n   * The first element in the domain will be mapped to the first element in range, the second domain value to the second range value, and so on.\n   *\n   * If there are fewer elements in the range than in the domain, the scale will reuse values from the start of the range.\n   *\n   * @param newRange Array of range values.\n   */\n  range(newRange: string[]): this;\n\n  range(newRange?: string[]): unknown {\n    if (typeof newRange === 'undefined') {\n      return this.scale.range();\n    }\n\n    this.colors = newRange;\n    this.scale.range(newRange);\n    return this;\n  }\n\n  /**\n   * Returns the current unknown value, which defaults to \"implicit\".\n   */\n  unknown(): string | { name: 'implicit' };\n\n  /**\n   * Sets the output value of the scale for unknown input values and returns this scale.\n   * The implicit value enables implicit domain construction. scaleImplicit can be used as a convenience to set the implicit value.\n   *\n   * @param value Unknown value to be used or scaleImplicit to set implicit scale generation.\n   */\n  unknown(value: string | { name: 'implicit' }): this;\n\n  unknown(value?: string | { name: 'implicit' }): unknown {\n    if (typeof value === 'undefined') {\n      return this.scale.unknown();\n    }\n\n    this.scale.unknown(value);\n    return this;\n  }\n}\n\nexport default CategoricalColorScale;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}