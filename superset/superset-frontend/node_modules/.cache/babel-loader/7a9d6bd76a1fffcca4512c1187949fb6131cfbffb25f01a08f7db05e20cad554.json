{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport 'whatwg-fetch';\nimport fetchRetry from 'fetch-retry';\nimport { CACHE_AVAILABLE, CACHE_KEY, HTTP_STATUS_NOT_MODIFIED, HTTP_STATUS_OK } from '../constants';\nfunction tryParsePayload(payload) {\n  try {\n    return typeof payload === 'string' ?\n    JSON.parse(payload) :\n    payload;\n  }\n  catch (error) {\n    throw new Error(`Invalid payload:\\n\\n${payload}`);\n  }\n}\n/**\n * Try appending search params to an URL if needed.\n */\nfunction getFullUrl(partialUrl, params) {\n  if (params) {\n    const url = new URL(partialUrl, window.location.href);\n    const search = params instanceof URLSearchParams ? params : new URLSearchParams(params);\n    // will completely override any existing search params\n    url.search = search.toString();\n    return url.href;\n  }\n  return partialUrl;\n}\n/**\n * Fetch an API response and returns the corresponding json.\n *\n * @param {Payload} postPayload payload to send as FormData in a post form\n * @param {Payload} jsonPayload json payload to post, will automatically add Content-Type header\n * @param {string} stringify whether to stringify field values when post as formData\n */\nexport default async function callApi({ body, cache = 'default', credentials = 'same-origin', fetchRetryOptions, headers, method = 'GET', mode = 'same-origin', postPayload, jsonPayload, redirect = 'follow', signal, stringify = true, url: url_, searchParams }) {var _window$location;\n  const fetchWithRetry = fetchRetry(fetch, fetchRetryOptions);\n  const url = `${getFullUrl(url_, searchParams)}`;\n  const request = {\n    body,\n    cache,\n    credentials,\n    headers,\n    method,\n    mode,\n    redirect,\n    signal\n  };\n  if (method === 'GET' &&\n  cache !== 'no-store' &&\n  cache !== 'reload' &&\n  CACHE_AVAILABLE &&\n  ((_window$location = window.location) == null ? void 0 : _window$location.protocol) === 'https:') {\n    let supersetCache = null;\n    try {\n      supersetCache = await caches.open(CACHE_KEY);\n      const cachedResponse = await supersetCache.match(url);\n      if (cachedResponse) {\n        // if we have a cached response, send its ETag in the\n        // `If-None-Match` header in a conditional request\n        const etag = cachedResponse.headers.get('Etag');\n        request.headers = { ...request.headers, 'If-None-Match': etag };\n      }\n    }\n    catch {\n\n      // If superset is in an iframe and third-party cookies are disabled, caches.open throws\n    }const response = await fetchWithRetry(url, request);\n    if (supersetCache && response.status === HTTP_STATUS_NOT_MODIFIED) {\n      const cachedFullResponse = await supersetCache.match(url);\n      if (cachedFullResponse) {\n        return cachedFullResponse.clone();\n      }\n      throw new Error('Received 304 but no content is cached!');\n    }\n    if (supersetCache &&\n    response.status === HTTP_STATUS_OK &&\n    response.headers.get('Etag')) {\n      supersetCache.delete(url);\n      supersetCache.put(url, response.clone());\n    }\n    return response;\n  }\n  if (method === 'POST' || method === 'PATCH' || method === 'PUT') {\n    if (postPayload && jsonPayload) {\n      throw new Error('Please provide only one of jsonPayload or postPayload');\n    }\n    if (postPayload instanceof FormData) {\n      request.body = postPayload;\n    } else\n    if (postPayload) {\n      const payload = tryParsePayload(postPayload);\n      if (payload && typeof payload === 'object') {\n        // using FormData has the effect that Content-Type header is set to `multipart/form-data`,\n        // not e.g., 'application/x-www-form-urlencoded'\n        const formData = new FormData();\n        Object.keys(payload).forEach((key) => {\n          const value = payload[key];\n          if (typeof value !== 'undefined') {\n            let valueString;\n            try {\n              // We have seen instances where casting to String() throws error\n              // This check allows all valid attributes to be appended to the formData\n              // while logging error to console for any attribute that fails the cast to String\n              valueString = stringify ? JSON.stringify(value) : String(value);\n            }\n            catch (e) {\n              // eslint-disable-next-line no-console\n              console.error(`Unable to convert attribute '${key}' to a String(). '${key}' was not added to the formData in request.body for call to ${url}`, value, e);\n            }\n            if (valueString !== undefined) {\n              formData.append(key, valueString);\n            }\n          }\n        });\n        request.body = formData;\n      }\n    }\n    if (jsonPayload !== undefined) {\n      request.body = JSON.stringify(jsonPayload);\n      request.headers = {\n        ...request.headers,\n        'Content-Type': 'application/json'\n      };\n    }\n  }\n  return fetchWithRetry(url, request);\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(tryParsePayload, \"tryParsePayload\", \"/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/connection/callApi/callApi.ts\");reactHotLoader.register(getFullUrl, \"getFullUrl\", \"/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/connection/callApi/callApi.ts\");reactHotLoader.register(callApi, \"callApi\", \"/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/connection/callApi/callApi.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["fetchRetry","CACHE_AVAILABLE","CACHE_KEY","HTTP_STATUS_NOT_MODIFIED","HTTP_STATUS_OK","tryParsePayload","payload","JSON","parse","error","Error","getFullUrl","partialUrl","params","url","URL","window","location","href","search","URLSearchParams","toString","callApi","body","cache","credentials","fetchRetryOptions","headers","method","mode","postPayload","jsonPayload","redirect","signal","stringify","url_","searchParams","_window$location","fetchWithRetry","fetch","request","protocol","supersetCache","caches","open","cachedResponse","match","etag","get","response","status","cachedFullResponse","clone","delete","put","FormData","formData","Object","keys","forEach","key","value","valueString","String","e","console","undefined","append","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/connection/callApi/callApi.ts"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport 'whatwg-fetch';\nimport fetchRetry from 'fetch-retry';\nimport { CallApi, Payload, JsonValue, JsonObject } from '../types';\nimport {\n  CACHE_AVAILABLE,\n  CACHE_KEY,\n  HTTP_STATUS_NOT_MODIFIED,\n  HTTP_STATUS_OK,\n} from '../constants';\n\nfunction tryParsePayload(payload: Payload) {\n  try {\n    return typeof payload === 'string'\n      ? (JSON.parse(payload) as JsonValue)\n      : payload;\n  } catch (error) {\n    throw new Error(`Invalid payload:\\n\\n${payload}`);\n  }\n}\n\n/**\n * Try appending search params to an URL if needed.\n */\nfunction getFullUrl(partialUrl: string, params: CallApi['searchParams']) {\n  if (params) {\n    const url = new URL(partialUrl, window.location.href);\n    const search =\n      params instanceof URLSearchParams ? params : new URLSearchParams(params);\n    // will completely override any existing search params\n    url.search = search.toString();\n    return url.href;\n  }\n  return partialUrl;\n}\n\n/**\n * Fetch an API response and returns the corresponding json.\n *\n * @param {Payload} postPayload payload to send as FormData in a post form\n * @param {Payload} jsonPayload json payload to post, will automatically add Content-Type header\n * @param {string} stringify whether to stringify field values when post as formData\n */\nexport default async function callApi({\n  body,\n  cache = 'default',\n  credentials = 'same-origin',\n  fetchRetryOptions,\n  headers,\n  method = 'GET',\n  mode = 'same-origin',\n  postPayload,\n  jsonPayload,\n  redirect = 'follow',\n  signal,\n  stringify = true,\n  url: url_,\n  searchParams,\n}: CallApi): Promise<Response> {\n  const fetchWithRetry = fetchRetry(fetch, fetchRetryOptions);\n  const url = `${getFullUrl(url_, searchParams)}`;\n\n  const request = {\n    body,\n    cache,\n    credentials,\n    headers,\n    method,\n    mode,\n    redirect,\n    signal,\n  };\n\n  if (\n    method === 'GET' &&\n    cache !== 'no-store' &&\n    cache !== 'reload' &&\n    CACHE_AVAILABLE &&\n    window.location?.protocol === 'https:'\n  ) {\n    let supersetCache: Cache | null = null;\n    try {\n      supersetCache = await caches.open(CACHE_KEY);\n      const cachedResponse = await supersetCache.match(url);\n      if (cachedResponse) {\n        // if we have a cached response, send its ETag in the\n        // `If-None-Match` header in a conditional request\n        const etag = cachedResponse.headers.get('Etag') as string;\n        request.headers = { ...request.headers, 'If-None-Match': etag };\n      }\n    } catch {\n      // If superset is in an iframe and third-party cookies are disabled, caches.open throws\n    }\n\n    const response = await fetchWithRetry(url, request);\n\n    if (supersetCache && response.status === HTTP_STATUS_NOT_MODIFIED) {\n      const cachedFullResponse = await supersetCache.match(url);\n      if (cachedFullResponse) {\n        return cachedFullResponse.clone();\n      }\n      throw new Error('Received 304 but no content is cached!');\n    }\n    if (\n      supersetCache &&\n      response.status === HTTP_STATUS_OK &&\n      response.headers.get('Etag')\n    ) {\n      supersetCache.delete(url);\n      supersetCache.put(url, response.clone());\n    }\n\n    return response;\n  }\n\n  if (method === 'POST' || method === 'PATCH' || method === 'PUT') {\n    if (postPayload && jsonPayload) {\n      throw new Error('Please provide only one of jsonPayload or postPayload');\n    }\n    if (postPayload instanceof FormData) {\n      request.body = postPayload;\n    } else if (postPayload) {\n      const payload = tryParsePayload(postPayload);\n      if (payload && typeof payload === 'object') {\n        // using FormData has the effect that Content-Type header is set to `multipart/form-data`,\n        // not e.g., 'application/x-www-form-urlencoded'\n        const formData: FormData = new FormData();\n        Object.keys(payload).forEach(key => {\n          const value = (payload as JsonObject)[key] as JsonValue;\n          if (typeof value !== 'undefined') {\n            let valueString;\n            try {\n              // We have seen instances where casting to String() throws error\n              // This check allows all valid attributes to be appended to the formData\n              // while logging error to console for any attribute that fails the cast to String\n              valueString = stringify ? JSON.stringify(value) : String(value);\n            } catch (e) {\n              // eslint-disable-next-line no-console\n              console.error(\n                `Unable to convert attribute '${key}' to a String(). '${key}' was not added to the formData in request.body for call to ${url}`,\n                value,\n                e,\n              );\n            }\n            if (valueString !== undefined) {\n              formData.append(key, valueString);\n            }\n          }\n        });\n        request.body = formData;\n      }\n    }\n    if (jsonPayload !== undefined) {\n      request.body = JSON.stringify(jsonPayload);\n      request.headers = {\n        ...request.headers,\n        'Content-Type': 'application/json',\n      };\n    }\n  }\n\n  return fetchWithRetry(url, request);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}