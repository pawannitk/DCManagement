{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};import { cleanEvents, TS, EVENT_NAME, ENTITY_ID } from '@data-ui/event-flow';\nexport default function transformProps(chartProps) {\n  const { formData, queriesData, width, height } = chartProps;\n  const { allColumnsX, entity, minLeafNodeEventCount } = formData;\n  const { data } = queriesData[0];\n  const hasData = data && data.length > 0;\n  if (hasData) {\n    const userKey = entity;\n    const eventNameKey = allColumnsX;\n    // map from the Superset form fields to <EventFlow />'s expected data keys\n    const accessorFunctions = {\n      [ENTITY_ID]: (datum) => String(datum[userKey]),\n      [EVENT_NAME]: (datum) => datum[eventNameKey],\n      [TS]: (datum) =>\n      // eslint-disable-next-line no-underscore-dangle\n      datum.__timestamp || datum.__timestamp === 0 ?\n      // eslint-disable-next-line no-underscore-dangle\n      new Date(datum.__timestamp) :\n      null\n    };\n    const cleanData = cleanEvents(data, accessorFunctions);\n    return {\n      data: cleanData,\n      height,\n      initialMinEventCount: minLeafNodeEventCount,\n      width\n    };\n  }\n  return { data: null, height, width };\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(transformProps, \"transformProps\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-plugin-chart-event-flow/src/transformProps.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["cleanEvents","TS","EVENT_NAME","ENTITY_ID","transformProps","chartProps","formData","queriesData","width","height","allColumnsX","entity","minLeafNodeEventCount","data","hasData","length","userKey","eventNameKey","accessorFunctions","datum","String","__timestamp","Date","cleanData","initialMinEventCount","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-plugin-chart-event-flow/src/transformProps.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ChartProps, TimeseriesDataRecord } from '@superset-ui/core';\nimport { cleanEvents, TS, EVENT_NAME, ENTITY_ID } from '@data-ui/event-flow';\n\nexport interface EventFlowFormData {\n  allColumnsX: string;\n  entity: string;\n  minLeafNodeEventCount: number;\n}\n\nexport interface EventFlowChartProps extends ChartProps {\n  formData: EventFlowFormData;\n  queriesData: {\n    data: TimeseriesDataRecord[];\n  }[];\n}\n\nexport default function transformProps(chartProps: ChartProps) {\n  const { formData, queriesData, width, height } =\n    chartProps as EventFlowChartProps;\n  const { allColumnsX, entity, minLeafNodeEventCount } = formData;\n  const { data } = queriesData[0];\n\n  const hasData = data && data.length > 0;\n  if (hasData) {\n    const userKey = entity;\n    const eventNameKey = allColumnsX;\n\n    // map from the Superset form fields to <EventFlow />'s expected data keys\n    const accessorFunctions = {\n      [ENTITY_ID]: (datum: TimeseriesDataRecord) => String(datum[userKey]),\n      [EVENT_NAME]: (datum: TimeseriesDataRecord) =>\n        datum[eventNameKey] as string,\n      [TS]: (datum: TimeseriesDataRecord): Date | null =>\n        // eslint-disable-next-line no-underscore-dangle\n        datum.__timestamp || datum.__timestamp === 0\n          ? // eslint-disable-next-line no-underscore-dangle\n            new Date(datum.__timestamp)\n          : null,\n    };\n\n    const cleanData = cleanEvents(data, accessorFunctions);\n\n    return {\n      data: cleanData,\n      height,\n      initialMinEventCount: minLeafNodeEventCount,\n      width,\n    };\n  }\n\n  return { data: null, height, width };\n}\n"],"mappings":"uSAmBA,SAASA,WAAW,EAAEC,EAAE,EAAEC,UAAU,EAAEC,SAAS,QAAQ,qBAAqB;AAe5E,eAAc,SAAUC,cAAcA,CAACC,UAAsB;EAC3D,MAAM,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,KAAK,EAAEC,MAAM,EAAE,GAC5CJ,UAAiC;EACnC,MAAM,EAAEK,WAAW,EAAEC,MAAM,EAAEC,qBAAqB,EAAE,GAAGN,QAAQ;EAC/D,MAAM,EAAEO,IAAI,EAAE,GAAGN,WAAW,CAAC,CAAC,CAAC;EAE/B,MAAMO,OAAO,GAAGD,IAAI,IAAIA,IAAI,CAACE,MAAM,GAAG,CAAC;EACvC,IAAID,OAAO,EAAE;IACX,MAAME,OAAO,GAAGL,MAAM;IACtB,MAAMM,YAAY,GAAGP,WAAW;IAEhC;IACA,MAAMQ,iBAAiB,GAAG;MACxB,CAACf,SAAS,GAAG,CAACgB,KAA2B,KAAKC,MAAM,CAACD,KAAK,CAACH,OAAO,CAAC,CAAC;MACpE,CAACd,UAAU,GAAG,CAACiB,KAA2B,KACxCA,KAAK,CAACF,YAAY,CAAW;MAC/B,CAAChB,EAAE,GAAG,CAACkB,KAA2B;MAChC;MACAA,KAAK,CAACE,WAAW,IAAIF,KAAK,CAACE,WAAW,KAAK,CAAC;MACxC;MACA,IAAIC,IAAI,CAACH,KAAK,CAACE,WAAW,CAAC;MAC3B;KACP;IAED,MAAME,SAAS,GAAGvB,WAAW,CAACa,IAAI,EAAEK,iBAAiB,CAAC;IAEtD,OAAO;MACLL,IAAI,EAAEU,SAAS;MACfd,MAAM;MACNe,oBAAoB,EAAEZ,qBAAqB;MAC3CJ;KACD;;EAGH,OAAO,EAAEK,IAAI,EAAE,IAAI,EAAEJ,MAAM,EAAED,KAAK,EAAE;AACtC,CAAC,mBAAAiB,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAC,OAAA,GAAAC,SAAA,MAAAH,cAAA,WAAAA,cAAA,CAAAI,QAAA,CAnCuBzB,cAAc,mKAAA0B,WAAA,UAAAJ,oBAAA,mBAAAA,oBAAA,CAAAI,WAAA,GAAAF,SAAA,CAAAE,WAAA,IAAAA,WAAA,CAAAC,MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}