{"ast":null,"code":"var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};export {};","map":{"version":3,"names":[],"sources":["/home/pawank/Documents/dcim/superset/superset-frontend/packages/superset-ui-core/src/ui-overrides/types.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { ReactNode, MouseEventHandler } from 'react';\nimport type { Editor } from 'brace';\n\n/**\n * A function which returns text (or marked-up text)\n * If what you want is a react component, don't use this. Use React.ComponentType instead.\n */\ntype ReturningDisplayable<P = void> = (props: P) => string | React.ReactElement;\n\n/**\n * This type defines all available extensions of Superset's default UI.\n * Namespace the keys here to follow the form of 'some_domain.functionality.item'.\n * Take care to name your keys well, as the name describes what this extension point's role is in Superset.\n *\n * When defining a new option here, take care to keep any parameters to functions (or components) minimal.\n * Any removal or alteration to a parameter will be considered a breaking change.\n */\ninterface MenuObjectChildProps {\n  label: string;\n  name?: string;\n  icon?: string;\n  index?: number;\n  url?: string;\n  isFrontendRoute?: boolean;\n  perm?: string | boolean;\n  view?: string;\n  disable?: boolean;\n}\n\n// loose typing to avoid any circular dependencies\n// refer to SSHTunnelSwitch component for strict typing\ntype SwitchProps = {\n  db: object;\n  changeMethods: {\n    onParametersChange: (event: any) => void;\n  };\n  clearValidationErrors: () => void;\n};\n\ntype ConfigDetailsProps = {\n  embeddedId: string;\n};\n\ntype RightMenuItemIconProps = {\n  menuChild: MenuObjectChildProps;\n};\n\ntype DatabaseDeleteRelatedExtensionProps = {\n  database: object;\n};\n\ntype DatasetDeleteRelatedExtensionProps = {\n  dataset: object;\n};\n\n/**\n * Interface for extensions to database connections\n */\nexport interface DatabaseConnectionExtension {\n  /**\n   * Display title text for the extension show when creating a database connection\n   */\n  title: string;\n  /**\n   * url or dataURI (recommended) of a logo to use in place of a title.  title is fallback display if no logo is provided\n   */\n  logo?: React.ComponentType<any>;\n  /**\n   * Descriptive text displayed under the logo or title to provide user with more context about the configuration section\n   */\n  description: React.ComponentType<any>;\n  /**\n   * React component to render for display in the database connection configuration\n   */\n  component: React.ComponentType<any>;\n  /**\n   * Is the database extension enabled?\n   */\n  enabled: () => boolean;\n\n  /**\n   * Callbacks\n   */\n  // TODO: we need to move the db types to superset-ui/core in order to import them correctly\n  onSave: (componentState: any, db: any) => any;\n  onEdit?: (componentState: any) => void;\n  onDelete?: (db: any) => void;\n}\n\n/**\n * Interface for extensions SQL Form.\n * These will be passed from the SQLEditor\n *\n * @param queryEditorId the queryEditor's id\n * @param setQueryEditorAndSaveSqlWithDebounce Debounced function that saves a query into the query editor\n * @param startQuery Callback that starts a query from the query editor\n */\nexport interface SQLFormExtensionProps {\n  queryEditorId: string;\n  setQueryEditorAndSaveSqlWithDebounce: (sql: string) => void;\n  startQuery: (ctasArg?: any, ctas_method?: any) => void;\n}\n\nexport interface SQLResultTableExtentionProps {\n  queryId: string;\n  orderedColumnKeys: string[];\n  data: Record<string, unknown>[];\n  height: number;\n  filterText?: string;\n  expandedColumns?: string[];\n}\n\n/**\n * Interface for extensions to Slice Header\n */\nexport interface SliceHeaderExtension {\n  sliceId: number;\n  dashboardId: number;\n}\n\n/**\n * Interface for extensions to Embed Modal\n */\nexport interface DashboardEmbedModalExtensions {\n  dashboardId: string;\n  show: boolean;\n  onHide: () => void;\n}\n\nexport interface ButtonProps {\n  name: ReactNode;\n  onClick?: MouseEventHandler<HTMLElement>;\n  'data-test'?: string;\n  buttonStyle:\n    | 'primary'\n    | 'secondary'\n    | 'dashed'\n    | 'link'\n    | 'warning'\n    | 'success'\n    | 'tertiary';\n}\n\nexport interface SubMenuProps {\n  buttons?: Array<ButtonProps>;\n  name?: string | ReactNode;\n  activeChild?: string;\n}\n\nexport interface CustomAutoCompleteArgs {\n  queryEditorId: string;\n  dbId?: string | number;\n  catalog?: string | null;\n  schema?: string;\n}\n\ninterface AutocompleteItem {\n  name: string;\n  value: string;\n  score: number;\n  meta: string;\n  label?: string;\n  docHTML?: string;\n  docText?: string;\n}\n\nexport interface CustomAutocomplete extends AutocompleteItem {\n  insertMatch?: (editor: Editor, data: AutocompleteItem) => void;\n}\n\nexport type Extensions = Partial<{\n  'alertsreports.header.icon': React.ComponentType;\n  'embedded.documentation.configuration_details': React.ComponentType<ConfigDetailsProps>;\n  'embedded.documentation.description': ReturningDisplayable;\n  'embedded.documentation.url': string;\n  'embedded.modal': React.ComponentType<DashboardEmbedModalExtensions>;\n  'dashboard.nav.right': React.ComponentType;\n  'home.submenu': React.ComponentType<SubMenuProps>;\n  'navbar.right-menu.item.icon': React.ComponentType<RightMenuItemIconProps>;\n  'navbar.right': React.ComponentType;\n  'report-modal.dropdown.item.icon': React.ComponentType;\n  'root.context.provider': React.ComponentType;\n  'welcome.message': React.ComponentType;\n  'welcome.banner': React.ComponentType;\n  'welcome.main.replacement': React.ComponentType;\n  'ssh_tunnel.form.switch': React.ComponentType<SwitchProps>;\n  'databaseconnection.extraOption': DatabaseConnectionExtension;\n  /* Custom components to show in the database and dataset delete modals */\n  'database.delete.related': React.ComponentType<DatabaseDeleteRelatedExtensionProps>;\n  'dataset.delete.related': React.ComponentType<DatasetDeleteRelatedExtensionProps>;\n  'sqleditor.extension.form': React.ComponentType<SQLFormExtensionProps>;\n  'sqleditor.extension.resultTable': React.ComponentType<SQLResultTableExtentionProps>;\n  'dashboard.slice.header': React.ComponentType<SliceHeaderExtension>;\n  'sqleditor.extension.customAutocomplete': (\n    args: CustomAutoCompleteArgs,\n  ) => CustomAutocomplete[] | undefined;\n}>;\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}