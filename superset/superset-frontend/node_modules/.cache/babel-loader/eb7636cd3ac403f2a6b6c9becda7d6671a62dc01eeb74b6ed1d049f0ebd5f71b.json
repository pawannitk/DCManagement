{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};import { PROP_TYPES_SYMBOL } from './constants';\nexport function validateProps(props) {\n  const propTypes = props[PROP_TYPES_SYMBOL];\n\n  for (const propName in propTypes) {\n    const propType = propTypes[propName];\n    const {\n      validate\n    } = propType;\n\n    if (validate && !validate(props[propName], propType)) {\n      throw new Error(\"Invalid prop \".concat(propName, \": \").concat(props[propName]));\n    }\n  }\n}\nexport function diffProps(props, oldProps) {\n  const propsChangedReason = compareProps({\n    newProps: props,\n    oldProps,\n    propTypes: props[PROP_TYPES_SYMBOL],\n    ignoreProps: {\n      data: null,\n      updateTriggers: null,\n      extensions: null,\n      transitions: null\n    }\n  });\n  const dataChangedReason = diffDataProps(props, oldProps);\n  let updateTriggersChangedReason = false;\n\n  if (!dataChangedReason) {\n    updateTriggersChangedReason = diffUpdateTriggers(props, oldProps);\n  }\n\n  return {\n    dataChanged: dataChangedReason,\n    propsChanged: propsChangedReason,\n    updateTriggersChanged: updateTriggersChangedReason,\n    extensionsChanged: diffExtensions(props, oldProps),\n    transitionsChanged: diffTransitions(props, oldProps)\n  };\n}\n\nfunction diffTransitions(props, oldProps) {\n  if (!props.transitions) {\n    return false;\n  }\n\n  const result = {};\n  const propTypes = props[PROP_TYPES_SYMBOL];\n  let changed = false;\n\n  for (const key in props.transitions) {\n    const propType = propTypes[key];\n    const type = propType && propType.type;\n    const isTransitionable = type === 'number' || type === 'color' || type === 'array';\n\n    if (isTransitionable && comparePropValues(props[key], oldProps[key], propType)) {\n      result[key] = true;\n      changed = true;\n    }\n  }\n\n  return changed ? result : false;\n}\n\nexport function compareProps({\n  newProps,\n  oldProps,\n  ignoreProps = {},\n  propTypes = {},\n  triggerName = 'props'\n}) {\n  if (oldProps === newProps) {\n    return false;\n  }\n\n  if (typeof newProps !== 'object' || newProps === null) {\n    return \"\".concat(triggerName, \" changed shallowly\");\n  }\n\n  if (typeof oldProps !== 'object' || oldProps === null) {\n    return \"\".concat(triggerName, \" changed shallowly\");\n  }\n\n  for (const key of Object.keys(newProps)) {\n    if (!(key in ignoreProps)) {\n      if (!(key in oldProps)) {\n        return \"\".concat(triggerName, \".\").concat(key, \" added\");\n      }\n\n      const changed = comparePropValues(newProps[key], oldProps[key], propTypes[key]);\n\n      if (changed) {\n        return \"\".concat(triggerName, \".\").concat(key, \" \").concat(changed);\n      }\n    }\n  }\n\n  for (const key of Object.keys(oldProps)) {\n    if (!(key in ignoreProps)) {\n      if (!(key in newProps)) {\n        return \"\".concat(triggerName, \".\").concat(key, \" dropped\");\n      }\n\n      if (!Object.hasOwnProperty.call(newProps, key)) {\n        const changed = comparePropValues(newProps[key], oldProps[key], propTypes[key]);\n\n        if (changed) {\n          return \"\".concat(triggerName, \".\").concat(key, \" \").concat(changed);\n        }\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction comparePropValues(newProp, oldProp, propType) {\n  let equal = propType && propType.equal;\n\n  if (equal && !equal(newProp, oldProp, propType)) {\n    return 'changed deeply';\n  }\n\n  if (!equal) {\n    equal = newProp && oldProp && newProp.equals;\n\n    if (equal && !equal.call(newProp, oldProp)) {\n      return 'changed deeply';\n    }\n  }\n\n  if (!equal && oldProp !== newProp) {\n    return 'changed shallowly';\n  }\n\n  return null;\n}\n\nfunction diffDataProps(props, oldProps) {\n  if (oldProps === null) {\n    return 'oldProps is null, initial diff';\n  }\n\n  let dataChanged = false;\n  const {\n    dataComparator,\n    _dataDiff\n  } = props;\n\n  if (dataComparator) {\n    if (!dataComparator(props.data, oldProps.data)) {\n      dataChanged = 'Data comparator detected a change';\n    }\n  } else if (props.data !== oldProps.data) {\n    dataChanged = 'A new data container was supplied';\n  }\n\n  if (dataChanged && _dataDiff) {\n    dataChanged = _dataDiff(props.data, oldProps.data) || dataChanged;\n  }\n\n  return dataChanged;\n}\n\nfunction diffUpdateTriggers(props, oldProps) {\n  if (oldProps === null) {\n    return {\n      all: true\n    };\n  }\n\n  if ('all' in props.updateTriggers) {\n    const diffReason = diffUpdateTrigger(props, oldProps, 'all');\n\n    if (diffReason) {\n      return {\n        all: true\n      };\n    }\n  }\n\n  const reason = {};\n  let changed = false;\n\n  for (const triggerName in props.updateTriggers) {\n    if (triggerName !== 'all') {\n      const diffReason = diffUpdateTrigger(props, oldProps, triggerName);\n\n      if (diffReason) {\n        reason[triggerName] = true;\n        changed = true;\n      }\n    }\n  }\n\n  return changed ? reason : false;\n}\n\nfunction diffExtensions(props, oldProps) {\n  if (oldProps === null) {\n    return true;\n  }\n\n  const oldExtensions = oldProps.extensions;\n  const {\n    extensions\n  } = props;\n\n  if (extensions === oldExtensions) {\n    return false;\n  }\n\n  if (!oldExtensions || !extensions) {\n    return true;\n  }\n\n  if (extensions.length !== oldExtensions.length) {\n    return true;\n  }\n\n  for (let i = 0; i < extensions.length; i++) {\n    if (!extensions[i].equals(oldExtensions[i])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction diffUpdateTrigger(props, oldProps, triggerName) {\n  let newTriggers = props.updateTriggers[triggerName];\n  newTriggers = newTriggers === undefined || newTriggers === null ? {} : newTriggers;\n  let oldTriggers = oldProps.updateTriggers[triggerName];\n  oldTriggers = oldTriggers === undefined || oldTriggers === null ? {} : oldTriggers;\n  const diffReason = compareProps({\n    oldProps: oldTriggers,\n    newProps: newTriggers,\n    triggerName\n  });\n  return diffReason;\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(validateProps, \"validateProps\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/core/dist/esm/lifecycle/props.js\");reactHotLoader.register(diffProps, \"diffProps\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/core/dist/esm/lifecycle/props.js\");reactHotLoader.register(diffTransitions, \"diffTransitions\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/core/dist/esm/lifecycle/props.js\");reactHotLoader.register(compareProps, \"compareProps\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/core/dist/esm/lifecycle/props.js\");reactHotLoader.register(comparePropValues, \"comparePropValues\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/core/dist/esm/lifecycle/props.js\");reactHotLoader.register(diffDataProps, \"diffDataProps\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/core/dist/esm/lifecycle/props.js\");reactHotLoader.register(diffUpdateTriggers, \"diffUpdateTriggers\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/core/dist/esm/lifecycle/props.js\");reactHotLoader.register(diffExtensions, \"diffExtensions\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/core/dist/esm/lifecycle/props.js\");reactHotLoader.register(diffUpdateTrigger, \"diffUpdateTrigger\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/core/dist/esm/lifecycle/props.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["PROP_TYPES_SYMBOL","validateProps","props","propTypes","propName","propType","validate","Error","concat","diffProps","oldProps","propsChangedReason","compareProps","newProps","ignoreProps","data","updateTriggers","extensions","transitions","dataChangedReason","diffDataProps","updateTriggersChangedReason","diffUpdateTriggers","dataChanged","propsChanged","updateTriggersChanged","extensionsChanged","diffExtensions","transitionsChanged","diffTransitions","result","changed","key","type","isTransitionable","comparePropValues","triggerName","Object","keys","hasOwnProperty","call","newProp","oldProp","equal","equals","dataComparator","_dataDiff","all","diffReason","diffUpdateTrigger","reason","oldExtensions","length","i","newTriggers","undefined","oldTriggers","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["../../../src/lifecycle/props.ts"],"sourcesContent":["import {PROP_TYPES_SYMBOL} from './constants';\n\nexport function validateProps(props) {\n  const propTypes = props[PROP_TYPES_SYMBOL];\n\n  for (const propName in propTypes) {\n    const propType = propTypes[propName];\n    const {validate} = propType;\n    if (validate && !validate(props[propName], propType)) {\n      throw new Error(`Invalid prop ${propName}: ${props[propName]}`);\n    }\n  }\n}\n\n// Returns an object with \"change flags\", either false or strings indicating reason for change\nexport function diffProps(\n  props,\n  oldProps\n): {\n  dataChanged: string | false | {startRow: number; endRow?: number}[];\n  propsChanged: string | false;\n  updateTriggersChanged: Record<string, true> | false;\n  extensionsChanged: boolean;\n  transitionsChanged: Record<string, true> | false;\n} {\n  // First check if any props have changed (ignore props that will be examined separately)\n  const propsChangedReason = compareProps({\n    newProps: props,\n    oldProps,\n    propTypes: props[PROP_TYPES_SYMBOL],\n    ignoreProps: {data: null, updateTriggers: null, extensions: null, transitions: null}\n  });\n\n  // Now check if any data related props have changed\n  const dataChangedReason = diffDataProps(props, oldProps);\n\n  // Check update triggers to determine if any attributes need regeneration\n  // Note - if data has changed, all attributes will need regeneration, so skip this step\n  let updateTriggersChangedReason: false | string | Record<string, true> = false;\n  if (!dataChangedReason) {\n    updateTriggersChangedReason = diffUpdateTriggers(props, oldProps);\n  }\n\n  return {\n    dataChanged: dataChangedReason,\n    propsChanged: propsChangedReason,\n    updateTriggersChanged: updateTriggersChangedReason,\n    extensionsChanged: diffExtensions(props, oldProps),\n    transitionsChanged: diffTransitions(props, oldProps)\n  };\n}\n\nfunction diffTransitions(props, oldProps): false | Record<string, true> {\n  if (!props.transitions) {\n    return false;\n  }\n  const result: Record<string, true> = {};\n  const propTypes = props[PROP_TYPES_SYMBOL];\n  let changed = false;\n\n  for (const key in props.transitions) {\n    const propType = propTypes[key];\n    const type = propType && propType.type;\n    const isTransitionable = type === 'number' || type === 'color' || type === 'array';\n    if (isTransitionable && comparePropValues(props[key], oldProps[key], propType)) {\n      result[key] = true;\n      changed = true;\n    }\n  }\n  return changed ? result : false;\n}\n\n/**\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n * @param {Object} opt.oldProps - object with old key/value pairs\n * @param {Object} opt.newProps - object with new key/value pairs\n * @param {Object} opt.ignoreProps={} - object, keys that should not be compared\n * @returns {null|String} - null when values of all keys are strictly equal.\n *   if unequal, returns a string explaining what changed.\n */\n/* eslint-disable max-statements, max-depth, complexity */\n/*\n * Note: for better performance, this function assumes that both oldProps and newProps\n   inherit the same prototype (defaultProps). That is, if neither object contains own\n   property <key>, assume `oldProps.<key>` and `newProps.<key>` are equal.\n */\nexport function compareProps({\n  newProps,\n  oldProps,\n  ignoreProps = {},\n  propTypes = {},\n  triggerName = 'props'\n}): string | false {\n  // shallow equality => deep equality\n  if (oldProps === newProps) {\n    return false;\n  }\n\n  // TODO - do we need these checks? Should never happen...\n  if (typeof newProps !== 'object' || newProps === null) {\n    return `${triggerName} changed shallowly`;\n  }\n\n  if (typeof oldProps !== 'object' || oldProps === null) {\n    return `${triggerName} changed shallowly`;\n  }\n\n  // Compare explicitly defined new props against old/default values\n  for (const key of Object.keys(newProps)) {\n    if (!(key in ignoreProps)) {\n      if (!(key in oldProps)) {\n        return `${triggerName}.${key} added`;\n      }\n      const changed = comparePropValues(newProps[key], oldProps[key], propTypes[key]);\n      if (changed) {\n        return `${triggerName}.${key} ${changed}`;\n      }\n    }\n  }\n\n  // Test if any old props have been dropped\n  for (const key of Object.keys(oldProps)) {\n    if (!(key in ignoreProps)) {\n      if (!(key in newProps)) {\n        return `${triggerName}.${key} dropped`;\n      }\n      if (!Object.hasOwnProperty.call(newProps, key)) {\n        // Compare dropped old prop against default value\n        const changed = comparePropValues(newProps[key], oldProps[key], propTypes[key]);\n        if (changed) {\n          return `${triggerName}.${key} ${changed}`;\n        }\n      }\n    }\n  }\n\n  return false;\n}\n/* eslint-enable max-statements, max-depth, complexity */\n\n// HELPERS\nfunction comparePropValues(newProp, oldProp, propType) {\n  // If prop type has an equal function, invoke it\n  let equal = propType && propType.equal;\n  if (equal && !equal(newProp, oldProp, propType)) {\n    return 'changed deeply';\n  }\n\n  if (!equal) {\n    // If object has an equals function, invoke it\n    equal = newProp && oldProp && newProp.equals;\n    if (equal && !equal.call(newProp, oldProp)) {\n      return 'changed deeply';\n    }\n  }\n\n  if (!equal && oldProp !== newProp) {\n    return 'changed shallowly';\n  }\n\n  return null;\n}\n\n// The comparison of the data prop requires special handling\n// the dataComparator should be used if supplied\nfunction diffDataProps(props, oldProps): string | false | {startRow: number; endRow?: number}[] {\n  if (oldProps === null) {\n    return 'oldProps is null, initial diff';\n  }\n\n  let dataChanged: string | false | {startRow: number; endRow?: number}[] = false;\n  // Support optional app defined comparison of data\n  const {dataComparator, _dataDiff} = props;\n  if (dataComparator) {\n    if (!dataComparator(props.data, oldProps.data)) {\n      dataChanged = 'Data comparator detected a change';\n    }\n    // Otherwise, do a shallow equal on props\n  } else if (props.data !== oldProps.data) {\n    dataChanged = 'A new data container was supplied';\n  }\n  if (dataChanged && _dataDiff) {\n    dataChanged = _dataDiff(props.data, oldProps.data) || dataChanged;\n  }\n\n  return dataChanged;\n}\n\n// Checks if any update triggers have changed\n// also calls callback to invalidate attributes accordingly.\nfunction diffUpdateTriggers(props, oldProps): Record<string, true> | false {\n  if (oldProps === null) {\n    return {all: true};\n  }\n\n  // If the 'all' updateTrigger fires, ignore testing others\n  if ('all' in props.updateTriggers) {\n    const diffReason = diffUpdateTrigger(props, oldProps, 'all');\n    if (diffReason) {\n      return {all: true};\n    }\n  }\n\n  const reason: Record<string, true> = {};\n  let changed = false;\n  // If the 'all' updateTrigger didn't fire, need to check all others\n  for (const triggerName in props.updateTriggers) {\n    if (triggerName !== 'all') {\n      const diffReason = diffUpdateTrigger(props, oldProps, triggerName);\n      if (diffReason) {\n        reason[triggerName] = true;\n        changed = true;\n      }\n    }\n  }\n\n  return changed ? reason : false;\n}\n\n// Returns true if any extensions have changed\nfunction diffExtensions(props, oldProps): boolean {\n  if (oldProps === null) {\n    return true;\n  }\n\n  const oldExtensions = oldProps.extensions;\n  const {extensions} = props;\n\n  if (extensions === oldExtensions) {\n    return false;\n  }\n  if (!oldExtensions || !extensions) {\n    return true;\n  }\n  if (extensions.length !== oldExtensions.length) {\n    return true;\n  }\n  for (let i = 0; i < extensions.length; i++) {\n    if (!extensions[i].equals(oldExtensions[i])) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction diffUpdateTrigger(props, oldProps, triggerName) {\n  let newTriggers = props.updateTriggers[triggerName];\n  newTriggers = newTriggers === undefined || newTriggers === null ? {} : newTriggers;\n  let oldTriggers = oldProps.updateTriggers[triggerName];\n  oldTriggers = oldTriggers === undefined || oldTriggers === null ? {} : oldTriggers;\n  const diffReason = compareProps({\n    oldProps: oldTriggers,\n    newProps: newTriggers,\n    triggerName\n  });\n  return diffReason;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}