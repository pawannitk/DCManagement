{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Framebuffer } from '@luma.gl/core';\nimport { joinLayerBounds, getRenderBounds, makeViewport } from '../utils/projection-utils';\nimport { createRenderTarget } from './utils';\nconst MAP_MAX_SIZE = 2048;\nexport class HeightMapBuilder {\n  static isSupported(gl) {\n    return Framebuffer.isSupported(gl, {\n      colorBufferFloat: true\n    });\n  }\n\n  constructor(gl) {\n    _defineProperty(this, \"renderViewport\", null);\n\n    _defineProperty(this, \"bounds\", null);\n\n    _defineProperty(this, \"fbo\", void 0);\n\n    _defineProperty(this, \"gl\", void 0);\n\n    _defineProperty(this, \"layers\", []);\n\n    _defineProperty(this, \"layersBounds\", []);\n\n    _defineProperty(this, \"layersBoundsCommon\", null);\n\n    _defineProperty(this, \"lastViewport\", null);\n\n    this.gl = gl;\n  }\n\n  getRenderFramebuffer() {\n    if (!this.renderViewport) {\n      return null;\n    }\n\n    if (!this.fbo) {\n      this.fbo = createRenderTarget(this.gl, {\n        id: 'height-map',\n        float: true\n      });\n    }\n\n    return this.fbo;\n  }\n\n  shouldUpdate({\n    layers,\n    viewport\n  }) {\n    const layersChanged = layers.length !== this.layers.length || layers.some((layer, i) => layer !== this.layers[i] || layer.props.transitions || layer.getBounds() !== this.layersBounds[i]);\n\n    if (layersChanged) {\n      this.layers = layers;\n      this.layersBounds = layers.map((layer) => layer.getBounds());\n      this.layersBoundsCommon = joinLayerBounds(layers, viewport);\n    }\n\n    const viewportChanged = !this.lastViewport || !viewport.equals(this.lastViewport);\n\n    if (!this.layersBoundsCommon) {\n      this.renderViewport = null;\n    } else if (layersChanged || viewportChanged) {\n      const bounds = getRenderBounds(this.layersBoundsCommon, viewport);\n\n      if (bounds[2] <= bounds[0] || bounds[3] <= bounds[1]) {\n        this.renderViewport = null;\n        return false;\n      }\n\n      this.bounds = bounds;\n      this.lastViewport = viewport;\n      const scale = viewport.scale;\n      const pixelWidth = (bounds[2] - bounds[0]) * scale;\n      const pixelHeight = (bounds[3] - bounds[1]) * scale;\n      this.renderViewport = pixelWidth > 0 || pixelHeight > 0 ? makeViewport({\n        bounds: [viewport.center[0] - 1, viewport.center[1] - 1, viewport.center[0] + 1, viewport.center[1] + 1],\n        zoom: viewport.zoom,\n        width: Math.min(pixelWidth, MAP_MAX_SIZE),\n        height: Math.min(pixelHeight, MAP_MAX_SIZE),\n        viewport\n      }) : null;\n      return true;\n    }\n\n    return false;\n  }\n\n  delete() {\n    if (this.fbo) {\n      this.fbo.color.delete();\n      this.fbo.delete();\n    }\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(MAP_MAX_SIZE, \"MAP_MAX_SIZE\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/extensions/dist/esm/terrain/height-map-builder.js\");reactHotLoader.register(HeightMapBuilder, \"HeightMapBuilder\", \"/home/pawank/Documents/dcim/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/node_modules/@deck.gl/extensions/dist/esm/terrain/height-map-builder.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["Framebuffer","joinLayerBounds","getRenderBounds","makeViewport","createRenderTarget","MAP_MAX_SIZE","HeightMapBuilder","isSupported","gl","colorBufferFloat","constructor","_defineProperty","getRenderFramebuffer","renderViewport","fbo","id","float","shouldUpdate","layers","viewport","layersChanged","length","some","layer","i","props","transitions","getBounds","layersBounds","map","layersBoundsCommon","viewportChanged","lastViewport","equals","bounds","scale","pixelWidth","pixelHeight","center","zoom","width","Math","min","height","delete","color","__reactstandin__regenerateByEval","key","code","eval","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["../../../src/terrain/height-map-builder.ts"],"sourcesContent":["import {Framebuffer} from '@luma.gl/core';\nimport {joinLayerBounds, getRenderBounds, makeViewport, Bounds} from '../utils/projection-utils';\nimport {createRenderTarget} from './utils';\n\nimport type {Viewport, Layer} from '@deck.gl/core';\n\nconst MAP_MAX_SIZE = 2048;\n\n/**\n * Manages the lifecycle of the height map (a framebuffer that encodes elevation).\n * One instance of height map is is shared across all layers. It is updated when the viewport changes\n * or when some terrain source layer's data changes.\n * During the draw call of any terrainDrawMode:offset layers,\n * the vertex shader reads from this framebuffer to retrieve its z offset.\n */\nexport class HeightMapBuilder {\n  /** Viewport used to draw into the texture */\n  renderViewport: Viewport | null = null;\n  /** Bounds of the height map texture, in cartesian space */\n  bounds: Bounds | null = null;\n\n  protected fbo?: Framebuffer;\n  protected gl: WebGLRenderingContext;\n  /** Last rendered layers */\n  private layers: Layer[] = [];\n  /** Last layer.getBounds() */\n  private layersBounds: ([number[], number[]] | null)[] = [];\n  /** The union of layersBounds in cartesian space */\n  private layersBoundsCommon: Bounds | null = null;\n  private lastViewport: Viewport | null = null;\n\n  static isSupported(gl: WebGLRenderingContext): boolean {\n    return Framebuffer.isSupported(gl, {colorBufferFloat: true});\n  }\n\n  constructor(gl: WebGLRenderingContext) {\n    this.gl = gl;\n  }\n\n  /** Returns the height map framebuffer for read/write access.\n   * Returns null when the texture is invalid.\n   */\n  getRenderFramebuffer(): Framebuffer | null {\n    if (!this.renderViewport) {\n      return null;\n    }\n    if (!this.fbo) {\n      this.fbo = createRenderTarget(this.gl, {id: 'height-map', float: true});\n    }\n    return this.fbo;\n  }\n\n  /** Called every render cycle to check if the framebuffer needs update */\n  shouldUpdate({layers, viewport}: {layers: Layer[]; viewport: Viewport}): boolean {\n    const layersChanged =\n      layers.length !== this.layers.length ||\n      layers.some(\n        (layer, i) =>\n          // Layer instance is updated\n          // Layer props might have changed\n          // Undetermined props could have an effect on the output geometry of a terrain source,\n          // for example getElevation+updateTriggers, elevationScale, modelMatrix\n          layer !== this.layers[i] ||\n          // Some prop is in transition\n          layer.props.transitions ||\n          // Layer's geometry bounds have changed\n          layer.getBounds() !== this.layersBounds[i]\n      );\n\n    if (layersChanged) {\n      // Recalculate cached bounds\n      this.layers = layers;\n      this.layersBounds = layers.map(layer => layer.getBounds());\n      this.layersBoundsCommon = joinLayerBounds(layers, viewport);\n    }\n\n    const viewportChanged = !this.lastViewport || !viewport.equals(this.lastViewport);\n\n    if (!this.layersBoundsCommon) {\n      this.renderViewport = null;\n    } else if (layersChanged || viewportChanged) {\n      const bounds = getRenderBounds(this.layersBoundsCommon, viewport);\n      if (bounds[2] <= bounds[0] || bounds[3] <= bounds[1]) {\n        this.renderViewport = null;\n        return false;\n      }\n\n      this.bounds = bounds;\n      this.lastViewport = viewport;\n\n      const scale = viewport.scale;\n      const pixelWidth = (bounds[2] - bounds[0]) * scale;\n      const pixelHeight = (bounds[3] - bounds[1]) * scale;\n\n      this.renderViewport =\n        pixelWidth > 0 || pixelHeight > 0\n          ? makeViewport({\n              // It's not important whether the geometry is visible in this viewport, because\n              // vertices will not use the standard project_to_clipspace in the DRAW_TO_HEIGHT_MAP shader\n              // However the viewport must have the same center and zoom as the screen viewport\n              // So that projection uniforms used for calculating z are the same\n              bounds: [\n                viewport.center[0] - 1,\n                viewport.center[1] - 1,\n                viewport.center[0] + 1,\n                viewport.center[1] + 1\n              ],\n              zoom: viewport.zoom,\n              width: Math.min(pixelWidth, MAP_MAX_SIZE),\n              height: Math.min(pixelHeight, MAP_MAX_SIZE),\n              viewport\n            })\n          : null;\n      return true;\n    }\n    return false;\n  }\n\n  delete() {\n    if (this.fbo) {\n      this.fbo.color.delete();\n      this.fbo.delete();\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}